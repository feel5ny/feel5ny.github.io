{"meta":{"title":"필오의 개발일지","subtitle":null,"description":null,"author":"clara Kim","url":"http://feel5.github.io"},"pages":[],"posts":[{"title":"overview","slug":"dada_06week","date":"2017-11-14T01:10:04.000Z","updated":"2017-11-13T11:01:08.000Z","comments":true,"path":"2017/11/14/dada_06week/","link":"","permalink":"http://feel5.github.io/2017/11/14/dada_06week/","excerpt":"","text":"식단 다이어리 서비스, DA,DA프론트엔드 스쿨을 마지막 달에는 그동안 배운 기술을 토대로 프로젝트를 필수적으로 진행해야 했다. node.js 스쿨과 함께 5명으로 이루어진 우리 조는 33일간의 대장정을 끝으로, 알바퍼전의 웹서비스가 배포할 수 있게 되었다. 블로그에서는 프론트엔드 중심으로 이번 프로젝트에 대한 개인적인 후기와 더불어 전반적인 진행과정, 이슈에 대해서 5가지 챕터로 포스팅하려고 한다. chapter 1 : 기획 및 프로토타입 및 디자인chapter 2 : 퍼블리싱chapter 3 : 핵심기능 개발chapter 4 : 리팩토링 및 테스트chapter 5 : 추가개발 및 배포 이번 프로젝트를 통해서 크게 3가지를 얻을 수 있었다. 비동기통신 redux 자유로운 사용 react 라이프사이클과 한계 github : https://github.com/huusz/Da-Da DA,DA : https://dada.downmix.net (카카오 아이디로 로그인)","categories":[{"name":"Project","slug":"Project","permalink":"http://feel5.github.io/categories/Project/"},{"name":"DA, DA","slug":"Project/DA-DA","permalink":"http://feel5.github.io/categories/Project/DA-DA/"}],"tags":[{"name":"react","slug":"react","permalink":"http://feel5.github.io/tags/react/"},{"name":"DADA","slug":"DADA","permalink":"http://feel5.github.io/tags/DADA/"}]},{"title":"야근지수 (미제)","slug":"algorithm","date":"2017-11-13T08:10:04.000Z","updated":"2017-11-13T09:34:43.000Z","comments":true,"path":"2017/11/13/algorithm/","link":"","permalink":"http://feel5.github.io/2017/11/13/algorithm/","excerpt":"","text":"야근 지수회사원인 수민이는 많은 일이 쌓여 있습니다. 수민이는 야근을 최소화하기 위해 남은 일의 작업량을 숫자로 메기고, 일에 대한 야근 지수를 줄이기로 결정했습니다. 야근 지수는 남은 일의 작업량을 제곱하여 더한 값을 의미합니다. 수민이는 1시간 동안 남은 일 중 하나를 골라 작업량 1만큼 처리할 수 있습니다. 수민이의 퇴근까지 남은 N 시간과 각 일에 대한 작업량이 있을 때, noOvertime 함수를 제작하여 수민이의 야근 지수를 최소화 한 결과를 출력해 주세요. 예를 들어, N=4 일 때, 남은 일의 작업량이 [4, 3, 3] 이라면 야근 지수를 최소화하기 위해 일을 한 결과는 [2, 2, 2]가 되고 야근 지수는 22 + 22 + 22 = 12가 되어 12를 반환해 줍니다. 처음 생각한 로직 해당 배열의 전체 합 - N값 1번의 값을 배열의 길이로 나눈다. 나머지가 0인 경우와, 0이 아닌 경우가 생긴다. 나머지가 0인 경우, 해당 몫의 제곱근에 length값을 곱한다. (끝) 나머지가 0이 아닌경우, 몫이 소수점이 나온는데, 이는 내림하여 소수점 자리수들을 버리고 (floor) 해당 값과 배열의 인자를 비교하여, 해당 값보다 작은 인자의 경우 바로 제곱근화 하고, 나머지 값은 해당 몫으로 제곱하여 더한다. (이 부분이 잘못되었음) 3번의 첫번째 나머지가 0인 경우는 테스트가 통과하는데 2번째 경우는 로직이 잘못됨 통과하고 싶다","categories":[{"name":"algorithm","slug":"algorithm","permalink":"http://feel5.github.io/categories/algorithm/"},{"name":"Level3","slug":"algorithm/Level3","permalink":"http://feel5.github.io/categories/algorithm/Level3/"}],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://feel5.github.io/tags/algorithm/"}]},{"title":"Firebase의 storage 연동하기","slug":"firebase","date":"2017-11-13T01:10:04.000Z","updated":"2017-11-13T09:23:40.000Z","comments":true,"path":"2017/11/13/firebase/","link":"","permalink":"http://feel5.github.io/2017/11/13/firebase/","excerpt":"","text":"학교 로고 모음 사이트 현재 상황 팀 프로젝트인 식단 다이어리 서비스 dada 프로젝트에서는 db 설계에 대한 이슈가 없었다. 당연히 난 프론트엔드다보니.. db 설계를 담당하지 않아서인 건데, 현재 개인 프로젝트에서는 db 구조까지 짜는 작업을 하고 있다. DB 구조짜기300개의 데이터와 개당 storage에 연동되어있는 파일들이 있는데, 제일 좋은 건 db에 url 칼럼을 넣는 방식. 파이어베이스에서는 스토리지와 데이터베이스 연결하는 것까지는 제공하지 않는 듯하다. 수동으로 작업해야 하는데 아직 좋은 방법이 떠오르지 않는다. 데이터 불러오기storage에 있는 데이터를 가져오는데, 현재 이슈. 한 디렉토리에 300개를 넣어두고 한 번에 갖고 오는 방식이라 아주 느리다. db 디렉토리를 20개씩 분리한 후, 더 보기 형태의 방식으로 해결해야겠다. map을 돌려서 해당 db 인덱스값과 같은 값의 파일을 갖고 오게 하기위해서 파일 이름에 학교 이름이 아닌 PNG_1.png 이런 방식의 파일 이름으로 지정해두었다. 매칭이 잘못된 학교 이름을 찾아 내기도 힘들고, ux도 너무 안 좋을 것 같아서, 파일 이름을 학교 이름으로 바꾸기로 결정했다. 생각해 보니 지역별 칼럼을 정리하지 않았다. 비록 일일이 검토 후에 로고를 올리는 것이지만, 한 번 더 체킹을 위해 학교 url을 넣는게 좋겠다고 판단. 칼럼을 추가해야겠다. 공공api가 있었으면 좋겠다. 생각보다 db 짜는건 굉장한 노가다다! dada 프로젝트 할 때 백엔드 분께서 ‘생각보다 노가다도 많이 하게 되는데, 또 생각보다 어렵진 않더라구요!’ 라고 했던 말이 와닿는 하루다.","categories":[{"name":"Project","slug":"Project","permalink":"http://feel5.github.io/categories/Project/"},{"name":"Univ Project","slug":"Project/Univ-Project","permalink":"http://feel5.github.io/categories/Project/Univ-Project/"}],"tags":[{"name":"react","slug":"react","permalink":"http://feel5.github.io/tags/react/"},{"name":"firebase","slug":"firebase","permalink":"http://feel5.github.io/tags/firebase/"},{"name":"db","slug":"db","permalink":"http://feel5.github.io/tags/db/"}]},{"title":"Hexo 설치","slug":"aboutHEXO","date":"2017-09-10T11:46:25.000Z","updated":"2017-11-13T10:16:59.000Z","comments":true,"path":"2017/09/10/aboutHEXO/","link":"","permalink":"http://feel5.github.io/2017/09/10/aboutHEXO/","excerpt":"","text":"intro 무언가를 배울때 하루하루의 기록을 남기는 것은 자기계발의 첫 스타트라고 생각합니다. 머리속에 있는 것을 그대로 옮기는 작업은, 정리하며 내것으로 만들기에도 좋고, 그때그때의 생각을 기록하는 용으로도 좋기 때문입니다. 그래서 우리는 일기를 쓰고, 일지를 쓰고, 이렇게 블로그도 만들며 기록합니다. 특히나 개발은 많은 개념을 숙지하면서 공부해야하기 때문에 블로깅 자체가 공부가 됩니다. 이왕 node.js까지 배우고 있으니, jekyll이 아닌, hexo를 사용해서 블로그를 만들었습니다. 목차 Github 간단 소개 원격 저장소 원격저장소 Github이 제공하는 정적웹사이트, Github Pages 호스팅을 편리하게 만들어주는 generator, Jekyll &amp; HEXO Github Pages로 정적 페이지 Hosting하기 로컬에 저장소 생성하기 원격 저장소 생성하기 (Github Repository) 원격 저장소와 로컬 저장소 연결하기 Hexo 설치하기 Hexo 설치 전 준비 Hexo npm 설치하기 설정파일 업데이트 Github에 배포하기 hexo 설정을 통해 정적 리소스를 생성하기 배포하기 anatol 테마적용하기 0. Github 간단 소개깃에 대해서 잘 알고 있다면 1번으로 넘어가도 됩니다. 0-1. 원격저장소Git이란 소스코드를 효과적으로 관리하기 위해 개발된 ‘분산형 버전 관리 시스템’입니다.git은 저장소에서 관리를 하는데, 내 컴퓨터에 있는 저장소를 로컬저장소라고 하고, 웹 상에 있는 저장소를 원격저장소라고 합니다. 우리가 흔히 알고 있는 원격저장소를 제공하는 서비스에는 깃헙, 비트버킷, 깃랩등이 있습니다다. 헥소를 이용한 블로그 개설을 위해서는 깃헙을 사용해야합니다. 0-2. 원격저장소 Github이 제공하는 정적웹사이트, Github PagesGithub에서 제공하는 Static Website, Github Pages가 있다. 깃헙 저장소에 리소스를 push만 해도(push란 저장소에 리소스를 넣을때 사용하는 명령어) 간단하게 웹사이트를 만들 수 있다. 즉, 다른 호스팅 서비스의 도움없이, 원격저장소에 올리기만해도 호스팅이 가능하다. 0-3. 호스팅을 편리하게 만들어주는 generator, Jekyll &amp; HEXO 사실, hexo나 jekyll이 없이도, html,css,javascript를 통해서도 호스팅이 가능하나, 블로그 구성상 글을 등록하고, 리스트를 보여주며, 댓글을 달 수 있는, 블로그가 갖고 있는 기능을 편라히게 사용하기 위해서 hexo나 jekyll과 같은 generator를 사용해야 한다. Static Website generator는 마크다운을(.md 파일)로 편집 후 html로 변환할 수 있도록 돕는다. generator에는 jekyll과 HEXO가 있는데, jekyll은 ruby기반, HEXO는 node.js기반이다. 그럼 generator을 셋팅하기 전, 내 컴퓨터에 디렉토리(폴더)를 생성하고, 원격저장소(github)에 연결을 시켜보자. 1. Github Pages로 정적 페이지 호스팅하기Github Pages를 사용하기 위해 Github의 원격저장소에 리소스를 올려야한다는 사실을 잊지말자. 아래 그림의 저장소들이 필요하다. 1-1. 로컬에 저장소 생성하기내 컴퓨터 원하는 장소에 폴더를 생성한다.terminal없이도 생성해도 된다.아래는 terminal을 이용한 생성방법 1234&lt;!-- 바탕화면에 생성한다는 가정 (글쓴이는 운영체제가 mac입니다.) --&gt;$ cd Desktop$ mkdir github-blog 바탕화면에 github-blog라는 이름의 폴더가 생성이 되었다. 1-2. 원격 저장소 생성하기 (Github Repository)github pages를 통해 손쉽게 USERNAME.github.io를 통해 정적 페이지를 호스팅 할 수 있다. 번외 &gt; gh-pages 브랜치를 생성하면, 각 repository마다 USERNAME.github.io/레포이름으로 호스팅이 가능하다. 지금부터 말하는 USERNAME은, 당신의 아이디이다. 깃헙주소 뒷부분 /이후 붙는 유저네임을 붙이면된다. 아래 순서로 깃 저장소를 생성한다. New Repository &gt; 이름은 꼭 USERNAME.github.io로 적용한다. Public선택. 원격저장소 생성 완료 1-3. 원격 저장소와 로컬 저장소 연결하기내 컴퓨터에 저장소를 만들고, 원격에도 만들었으니, 연결을 해야한다. 연결하는 방법은 간단하다. 지금은 터미널을 열고 명령어를 입력해야하는 타이밍이다. 1번에서 만들었던 디렉토리로 이동한다. 해당 디렉토리에서 원격저장소의 git을 clone한다. clone 뒤에 생성한 원격저장소의 주소를 입력하는데, 이는 remote가 동시에 일어나므로, 따로 remote 명령어를 입력안해도 된다. 연결 테스트겸, READMD.md 파일을 생성한다. 생성된 README.md파일을 푸시한다. (commit &gt; push) 위의 순서를 코드로 옮기면. 12345678910111213141516&lt;!-- 1. 해당 디렉토리로 이동 --&gt;cd Desktopcd github-blog&lt;!-- 2. git clone --&gt;git clone https://github.com/feel5ny/TEST.github.io.gitcd test.github.io&lt;!-- 3. README.md파일 생성 --&gt;echo README.md&lt;!-- 4. 원격저장소에 올리기 --&gt;git add --allgit commit -m \"first commit\"git push -u origin master step 1이 끝났다! 그리고 벌써 호스팅이 완료되었다.USERNAME.github.io에 가보자. 아직 블로그의 형태를 띄지 않았다. 위에서 말했던 generator를 이용하여 블로그의 구조를 짤 예정인데, 우리는 HEXO를 이용할 것이다. 2. Hexo 설치하기Hexo는 node.js기반이기 때문에 npm을 통해 쉽게 설치가 가능하다. 다양한 plugin과 테마를 지원하고 있다. 2-1. Hexo 설치 전 준비Hexo는 말했다 싶이 node.js 기반이기 때문에 node.js가 로컬에 기본적으로 설치되어있어야 한다. node.js는 공식 사이트에서 설치가 가능하다. stable버전을 추천한다. 2-2. Hexo npm 설치하기Node.js를 설치 한 후에 아래 CLI를 순서대로 입력하여 npm을 설치한다.1234npm install hexo-cli -ghexo init blogcd blognpm install node.js를 설치하면 npm을 사용할 수 있는데, 패키지 중에 hexo-cli를 설치한다. blog파일을 생성하여 hexo를 초기화한다. blog 디렉토리로 이동후, npm install을 사용하여, blog에 필요한 파일들을 자동으로 설치한다. 2-3. 설정파일 업데이트위의 순서가 끝나면, root 디렉토리에 _config.yml이라는 설정파일이 생성된다. (yml파일은 사람이 쉽게 읽을 수 있는 데이터 직력화 양식으로,…more) 해당 파일에 블로그 정보를 수정한다. 나머지 정보는 hexo 공식 문서에서. Site 정보블로그 정보를 수정할 수 있다. 1234title: 제목(html head에 들어가는 title태그에 들어가는 제목과 같다.)subtitle: description:author: Nayoung Kim URL 정보블로그 URL 정보를 설정할 수 있다. 1234url: https://USERNAME.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults: Github 정보배포를 위해서 저장소 주소를 추가한다. 1234# Deploymentdeploy: type: git repo: https://github.com/feel5ny/TEST.github.io.git 테마별로 구성을 수정하는 스타일이 다르다. 테마 적용하기 파트에서 anatol 레이아웃 수정방법을 설명하겠다. 2-4. 로컬에서 테스트하기1hexo server blog 디렉토리에 위치되어있는 상태에서 서버를 구동한다. blog에 위치되어있지 않으면 서버구동이 안된다. 서버 구동이 완료되면 4000번 포트로 접속이 가능하다. http://localhost:4000 테스트시 구동이 잘 안될 경우, 서버를 껐다가 다시 실행해 보면된다. 서버를 끄는 방법은 터미널에서 ctrl+c를 두번 입력하면 된다. 3. Github에 배포하기로컬에서 테스트를 완료하면 USERNAME.github.io 주소로 배포해보자. 3-1. hexo 설정을 통해 정적 리소스를 생성하기1hexo generate 위 명령어를 입력하면, github에 올라갈 리소스만 정리되어 따로 폴더가 생성된다. 3-2. 배포하기1hexo deploy 위 명령어를 입력하면 배고가 완료된다. generate와 deploy를 한번에 진행하고 싶은 경우 아래 명령어를 입력한다. 1hexo deploy --generate 약자로 hexo d g를 사용해도 됩니다. 3-3. 배포가 잘 안될 경우12hexo cleanhexo deploy --generate","categories":[{"name":"blog","slug":"blog","permalink":"http://feel5.github.io/categories/blog/"},{"name":"hexo","slug":"blog/hexo","permalink":"http://feel5.github.io/categories/blog/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://feel5.github.io/tags/hexo/"},{"name":"node.js","slug":"node-js","permalink":"http://feel5.github.io/tags/node-js/"}]}]}