{"meta":{"title":"필오의 개발일지","subtitle":"Frontend developer & love UX, Interaction","description":"프론트엔드 공부를 하며 기록하는 공간입니다.","author":"clara Kim","url":"http://feel5ny.github.io"},"pages":[],"posts":[{"title":"기타 용어들","slug":"CS_07","date":"2018-01-02T09:23:55.000Z","updated":"2018-01-01T16:12:05.000Z","comments":true,"path":"2018/01/02/CS_07/","link":"","permalink":"http://feel5ny.github.io/2018/01/02/CS_07/","excerpt":"","text":"목록 dns subnet NAT port socket mac address 1. dnsDNS(도메인 네임 시스템)는 .com 또는 .net과 같은 특정 최상위 도메인(TLD)의 모든 도메인 네임 및 해당하는 IP 주소를 저장하는 데이터베이스입니다. DNS는 인터넷에서 컴퓨터 시스템과 리소스를 식별하고 찾습니다. 예를 들어, 웹 주소 또는 URL을 입력하면 DNS가 입력된 이름과 해당 위치의 IP 주소를 일치시키고 사용자를 해당 사이트에 연결시켜 줍니다. 2. subnet 서브넷(subnet)은 “subnetwork”을 줄인 말로서 어떤 기관에 소속된 네트웍이지만 따로 분리되어 있는 한 부분으로 인식될 수 있는 네트웍을 말한다. 일반적으로 하나의 서브넷은 하나의 지역, 한 빌딩 또는 같은 근거리통신망 내에 있는 모든 컴퓨터들을 나타낼 수 있다. 여러 개의 서브넷으로 나뉘어진 어떤 조직의 네트웍은 인터넷에 하나의 공유된 네트웍 주소로 접속될 수 있다. 만약 서브넷이 없다면, 그 조직은 물리적으로 분리된 서브 네트웍마다 하나씩, 여러 군데의 인터넷 접속을 가지게 될 것이며, 그렇게 함으로써 한정된 량의 인터넷 주소가 쓸모 없이 낭비될 수도 있게된다. 인터넷은 네트웍 사용자들 간에 서로 커뮤니케이션을 하기 위한 네트웍의 집합이다. 커뮤니케이션을 위해서는 양측의 사용자 또는 호스트가 관련되어 있는 발신지와 도착지 네트웍, 그리고 네트웍 내의 특정한 컴퓨터의 주소가 있어야 한다. 이 주소를 IP 주소라고 부른다. 32 비트의 IP 주소는 크게 두 부분으로 나뉘는데, 하나는 네트웍을 식별하는 네트웍 번호이고, 다른 하나는 네트웍 내의 특정한 컴퓨터나 호스트를 식별하는 호스트 번호이다. 한 기관에서 특정한 서브넷을 확인시키기 위해 컴퓨터나 호스트를 식별하는 주소 내의 비트들을 일부 사용할 수 있다. 그러므로 실제로는 IP 주소에는 네트웍 번호, 서브넷 번호, 그리고 컴퓨터 번호 등 세 부분이 포함되어 있는 셈이다. 3. NAT (= Network Address Translation) NAT는 외부 네트웍에 알려진 것과 다른 IP 주소를 사용하는 내부 네트웍에서, IP 주소를 변환하는 것이다. 일반적으로, 한 회사는 자신의 내부 네트웍 주소를 하나 또는 그 이상의 공인 IP 주소로 사상한다. 그리고 들어오는 패킷들 상의 공인 IP 주소를 다시 사설 IP 주소로 변환한다. 이렇게 함으로써 나가거나 들어오는 각 요구들은 주소 변환과정을 반드시 거쳐야 하기 때문에, 보안문제를 확실하게 하는데 도움이 되며, 또한 요구를 제한하거나 인증하고, 또 이전의 요구와 일치시키는 기회를 제공한다. NAT은 또한 회사에서 필요한 공인 IP 주소의 수를 보존하며, 회사가 외부 네트웍과의 통신에서 단 하나의 공인 IP 주소를 사용할 수 있게 한다. NAT은 라우터의 일부로서 포함되며, 종종 통합된 방화벽의 일부가 되기도 한다. 네트웍 관리자들은 공인 IP 주소에서 사설 IP 주소로, 사설 IP 주소에서 공인 IP 주소로 사상하기 위한 NAT 표를 만든다. NAT은 라우팅 정책과 함께 사용될 수도 있다. NAT은 IP 주소를 정적으로 정의하거나, 또는 동적으로 변환하도록 설정될 수 있다. 시스코에서 만든 NAT 버전은 관리자가 다음과 같은 것들의 사상을 위한 표를 만들도록 해 준다. 4. port네트워크의 입출력단자들을 포트(PORT)라고 하며 번호로 지정되는데 포트의 번호는 0에서 65535까지 입니다.TCP/IP 네트웍에서 포트 번호는, 들어오는 트래픽을 컴퓨터 내에서 실행되고 있는 적절한 프로그램에 분배시키기 위해 할당되는 숫자를 말한다. 이것은 물리적인 플러그나 소켓이 아니며, 다만 논리적인 할당일 뿐이다 프로그래밍에서, 포트는 “논리적인 접속장소”이며, 특히 인터넷 프로토콜인 TCP/IP를 사용할 때에는 클라이언트 프로그램이 네트웍 상의 특정 서버 프로그램을 지정하는 방법으로 사용된다. 웹 프로토콜인 HTTP와 같이, TCP/IP의 상위 프로토콜을 사용하는 응용프로그램에서는 미리 지정된 포트번호들을 가지고 있다. 이런 것들은 IANA에 의해 지정되었으며, “잘 알려진 포트들”이라고 불린다. 다른 응용프로그램 프로세스들은 매번 접속할 때마다 포트번호가 동적으로 부여된다. 서버 프로그램이 처음 시작되면, 지정된 포트번호로 바인드된다. 그 서버를 사용하려는 모든 클라이언트 프로그램들은 지정된 포트번호에 바인드해야만 한다. 바인드가 되면 두개의 컴퓨터간 네트워크를 이용한 통신시 발신지 컴퓨터에서 출발한 사용자 데이터(패킷)는 TCP/IP의 각 계층을 거치면서 최종적으로 목적지 주소(IP)를 가지고 있는 컴퓨터에 도착하게 됩니다. 패킷을 수신한 컴퓨터는 전송시에 사용되었던 주소필드를 제거하고, 패킷 안에 있는 데이터만을 응용프로그램에 넘겨줍니다. 이 포트들은 크게 세 가지 영역으로 나누어서 지정되어 있습니다. 1. 0번 포트에서 1023포트 까지well-known port number 라고 하며 미리 특수용도로 지정되어 있습니다. (IANA(Internet Assigned Numbers Authority)에서 관리한다.) 21번: FTP22번: SSH23번: TELNET25번: SMTP(이메일송신)53번: DNS61번: SNMP(네트워크관리)80번: HTTP(웹페이지를 열기 위한 용도)110번: POP3(이메일수신)115번: SFTP135번: RPC139번: NetBIOS143번: IMAP194: IRC443: SSL445: SMB 2. 등록된 포트로 사용할 경우 1024~49151번을 사용합니다.1433: MSQL3306: MySQL3389: Remote Desktop5632: PCAnywhere5900: VNC6112: Warcraft III 3. 개인적 용도라면 49152~65535번을 사용하도록 규정되어 있습니다.클라이언트/서버 방식의 프로그램에서 포트의 사용 서버/클라이언트 프로그램에서는 서버에서 사용하는 포트번호를 클라이언트 프로그램에서도 동일하게 맞추어 주어야 합니다. 서버/클라이언트 프로그램에서 사용하는 포트가 개방되도록 라우터 또는 공유기 등의 설정메뉴에서 개방해야 합니다. 서버/클라이언트 프로그램에서 포트를 설정하지 않으면 임의로 포트를 설정해 주는 프로그램이 일부 있습니다. 5. socket 두 프로그램이 네트워크를 통해 서로 통신을 수행할 수 있도록 양쪽에 생성되는 링크의 단자입니다. 두 소켓이 연결되면 서로 다른 프로세스끼리 데이터를 전달할 수 있습니다. 결국 소켓이 구현됨으로써 네트워크 및 전송 계층의 캡슐화가 가능해집니다. 소켓은 원래 캘리포니아 버클리 대학 분교에서 UNIX용으로 개발되었으며, UNIX에서의 입출력 메소드의 표준인 개방/읽기/쓰기/닫기 메커니즘을 따릅니다. 소켓 함수는 동기모드(블록킹) / 비동기 모드 (논블록킹)으로 동작합니다. 차이점은 만약 데이터가 도착하지 않는 상태에서 recv()로 데이터를 수신하고자 했을 때 데이터가 올 때까지 대기(block)하느냐 , 그냥 수신된 데이터가 없다는 정보만 리턴하고 넘어가느냐 입니다. 실제로 대기한다는 의미는 시스템을 멈추고 기다린다는 것이 아니라 다른 쓰레드나 프로세스(process)로 실행 권을 넘기는 것이기 때문에 프로세서는 항상 적절한 동작을 하게 됩니다. 비동기 모드로 데이터가 올 떄까지 풀링(polling)하면서 대기하는 것과는 기다린다는 의미에서는 동일하지만 프로세서를 활용한다는 면에서는 하늘과 땅 차이라고 할 수 있습니다. 이런 병렬적인 처리에 대한 고려가 필요하게 됩니다. 그리고 직접적인 소켓 통신을 처리하는 함수는 아니지만 소켓 처리에 대해서 Multiplex처리(하나의 쓰레드, 혹은 적은 수의 쓰레드에서 여러 개의 소켓을 처리)를 해주는 select , epoll , IOCP 같은 기능적인 함수군도 염두해 두어야겠습니다. 6. MAC address (= Media Access Control Address)MAC 주소는, 무선 LAN 카드 또는 무선 LAN 기능 내장 기기에 개별적으로 부여되는 16진수 12자리의 단말 식별 번호(예:12:34:56:78:90:AB)입니다. OS에 따라 “물리적 주소” 또는”Wi-Fi 주소”라고 표시됩니다. 참고링크 https://www.verisign.com/ko_KR/website-presence/online/domain-name-system/index.xhtml https://www.verisign.com/assets/DNS101_ko_KR.pdf http://www.terms.co.kr/subnet.htm http://www.terms.co.kr/NAT.htm http://egloos.zum.com/Esunny/v/4130787 http://popbox.tistory.com/66 https://ko.wikipedia.org/wiki/MAC_%EC%A3%BC%EC%86%8C http://popbox.tistory.com/66","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"CS","slug":"TIL-9997/CS","permalink":"http://feel5ny.github.io/categories/TIL-9997/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"http://feel5ny.github.io/tags/CS/"},{"name":"network","slug":"network","permalink":"http://feel5ny.github.io/tags/network/"}]},{"title":"3 way handshake","slug":"CS_06","date":"2018-01-01T01:23:55.000Z","updated":"2018-01-01T16:12:11.000Z","comments":true,"path":"2018/01/01/CS_06/","link":"","permalink":"http://feel5ny.github.io/2018/01/01/CS_06/","excerpt":"","text":"3 way handshakeClient와 Server 또는 P2P Socket 통신 등, 네트워크를 사용한 통신시 TCP 통신을 많이 사용한다.TCP 통신을 위한 네트워크 연결은 3 way handshake 라는 방식으로 연결된다.쉽게 이야기 하면, 서로의 통신을 위한 관문(port)을 확인하고 연결하기 위하여 3번의 요청/응답 후에 연결이 되는 것이다. 먼저 Server에서 열려있는 포트는 LISTEN 상태이고 Client에서는 Closed 상태이다. Client에서 Server에 연결 요청을 하기위해 SYN 데이터를 보낸다. (SYN = synchronize sequence numbers) Server에서 해당 포트는 LISTEN 상태에서 SYN 데이터를 받고 SYN_RCV로 상태가 변경된다.그리고 요청을 정상적으로 받았다는 대답(ACK)와 Client도 포트를 열어달라는 SYN 을 같이 보낸다.(ACK = acknowledgment) Client에서는 SYN+ACK 를 받고 ESTABLISHED로 상태를 변경하고 서버에 요청을 잘 받았다는 ACK 를 전송한다.ACK를 받은 서버는 상태가 ESTABLSHED로 변경된다. 위와 같이 3번의 통신이 정상적으로 이루어지면, 서로의 포트가 ESTABLISHED 되면서 연결이 되게 된다. Status Closed : 닫힌 상태 LISTEN : 포트가 열린 상태로 연결 요청 대기 중 SYN_RCV : SYNC 요청을 받고 상대방의 응답을 기다리는 중 ESTABLISHED : 포트 연결 상태 현재의 포트 상태 확인은 netstat 명령어로 할 수 있다. 참고링크 http://hyeonstorage.tistory.com/286 http://mindnet.tistory.com/entry/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%89%BD%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-22%ED%8E%B8-TCP-3-WayHandshake-4-WayHandshake","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"CS","slug":"TIL-9997/CS","permalink":"http://feel5ny.github.io/categories/TIL-9997/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"http://feel5ny.github.io/tags/CS/"},{"name":"network","slug":"network","permalink":"http://feel5ny.github.io/tags/network/"}]},{"title":"8/ DOM 확장","slug":"JS_08_4","date":"2017-12-28T12:20:19.000Z","updated":"2018-01-03T09:09:49.000Z","comments":true,"path":"2017/12/28/JS_08_4/","link":"","permalink":"http://feel5ny.github.io/2017/12/28/JS_08_4/","excerpt":"","text":"‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. 오류가 있다면 언제든지 댓글 남겨주세요. 목차 선택자 API querySelector() 메서드 querySelecotrAll() 메서드 matchesSelector() 메서드 요소 간 이동 HTML5 클래스 관련 추가사항 getElementsByClassName() 메서드 classList 프로퍼티 포커스 관리 HTMLDocument의 변화 readyState 프로퍼티 호환성 모드 문자셋 프로퍼티 커스텀 데이터 속성 마크업 삽입 innerHTML outerHTML insertAdjacentHTML() 메서드 메모리와 성능 문제 scrollIntoView() 메서드 전용 확장 문서모드 children 프로퍼티 contains() 메서드 마크업 삽입 innerText 프로퍼티 outerText 프로퍼티 스크롤 DOM은 그 자체로도 매우 잘 정의된 API이긴 하지만, 특정 브라우저 전용 방법으로 확장하여 기능을 추가할 때도 많다. 1. 선택자 API 자바스크립트 라이브러리 중에 가장 인기 있는 기능은 CSS 선택자로 패턴을 만들고 그에 맞는 DOM 요소를 선택하는 능력이다. 선택자 API는 CSS 쿼리에 대한 브라우저의 네이티브 지원으로 W3C에서 명세화를 시작햇다. 이 기능을 구현한 자바스크립트 라이브러리들은 모두 기초적인 CSS 파서를 직접 만들고, 기존의 DOM 메서드를 이용해 문서 노드를 이동하며 패턴에 일치하는 노드를 골라내는 방식을 사용했다. querySelector() querySelectorAll() Document 타입과 Element타입에서 사용가능하다. 1-1. querySelector() 메서드 매개변수로 CSS 쿼리를 받는다. 패턴에 일치하는 첫번째 자손 요소를 반환한다. 없으면 null 1234567891011// body 요소를 가져온다.const body = document.querySelector(\"body\");// ID가 \"myDiv\"인 요소를 가져온다.const myDiv = document.querySelector(\"#myDiv\");// 클래스가 \"selected\"인 요소 중 첫 번째를 가져온다.const selected = document.querySelector(\".selected\");// 클래스가 \"button\"인 이미지 중 첫 번째를 가져온다.const img = document.querySelector(\"img.button\"); 1-2. querySelecotrAll() 메서드 querySelector()와 유사한데, 일치하는 노드 전체를 반환한다. 즉, NodeList의 정적 인스턴스를 반환한다. (유사배열 형태) 1-3. matchesSelector() 메서드 ( matches()로 변경됨 ) + 선택자 API 레벨2 명세 매개변수로 CSS 선택자를 받고 요소가 그에 일치하면 true, 일치하지 않으면 false 2. 요소 간 이동 버전 9 미만의 IE는 타 브라우저와 달리 요소 사이의 공백을 텍스트 노드로 반환하지 않는다. 이 때문에 childNodes나 firstChild 같은 프로퍼티를 사용할 때 차이가 발생한다. DOM 명세를 유지하면서 브라우저 사이의 차이를 극복하려는 노력으로 요소간 이동 명세에서는 새 프로퍼티 그룹을 정의햇다. 요소간 이동 API에서 추가된 새 프로퍼티들 childElementCount : 자식 요소 숫자를 반환하되 텍스트 노드와 주석은 제외한다. firstElementChild : 첫번째 자식 요소를 가리킨다. lastElementChild : 마지막 자식 요소를 가리킨다. previousElementSibling : 이전 형제 요소를 가리킨다. nextElementSibling : 다음 형제 요소를 가리킨다. 3. HTML5 이전의 HTML 명세는 자바스크립트 인터페이스에 대해서는 간단히만 설명하고 마크업 언어에만 집중했으며 자바스크립트와의 연결은 DOM으로 미뤘다. HTML5 명세는 마크업 언어와 함께 사용하도록 디자인된 자바스크립트 API를 상세히 설명하고 정의한다. 3-1. 클래스 관련 추가사항getElementsByClassName() 메서드 클래스 이름 문자열을 매개변수로 받는다. NodeList 반환 호출한 요소의 자손만 쿼리하여 반환한다. classList 프로퍼티 클래스 이름을 조작할 때는 className 프로퍼티를 이용해 클래스 이름을 추가하거나 제거, 교체했다. 한 요소에 클래스가 3가지가 적용되어 있을 경우 이름 변경에 불편함이 있다. classList 프로퍼티는 DOMTokenList란 새 컬렉션 타입의 인스턴스이다. 다른 DOM 컬렉션과 마찬가지로 length존재 item() 메서드나 대괄호 표기법을 통해 데이터를 갖고올 수 있다. 크롬과 파폭3.6이상 가능 DOMTokenList의 메서드 add(value) : 주어진 문자열 값을 목록에 추가한다. contains(value) : 주어진 값이 목록에 존재하면 true, 그렇지 않으면 false remove(value) : 주어진 문자열 값을 목록에서 제거 toggle(value) : 값이 목록에 존재하면 제거하고 그렇지 않으면 추가 3-2. 포커스 관리 어느 요소에 포커스가 있는지, 현재 문서에 포커스가 있는지 판단하는 능력은 웹 접근성에 대단히 중요. document.activeElement 항상 현재 포커스를 가진 DOM 요소를 가리키는 포인터를 포함한다. 키보드 탭 키를 통한 포커스, focus() 메서드로 자동 포커스를 받는다. document.hasFocus() 문서에 포커스가 있는지 나타내는 불리언 값을 반환한다. 3-3. HTMLDocument의 변화readyState 프로퍼티 readyState 프로퍼티에 가능한 값은 2가지 이다. loading complete 문서를 불러왔는지 확인하는 것 보통은 onload 이벤트 핸들러를 사용했다. &lt;head&gt; 프로퍼티 document.head로도 &lt;head&gt;요소 참조가 가능하다. 크롬과 사파리 5 가능 3-4. 문자셋 프로퍼티 문서의 문자셋을 다루는 프로퍼티 document.charset 문서의 문자셋을 나타내며, 새 문자셋 지정도 가능 파폭, 사파리, 오페라, 크롬 document.defaultCharset 브라우저 및 시스템의 기본 설정에 따라 문서에 기본적으로 적용해야 할 문자셋을 나타낸다. IE, 사파리, 크롬 3-5. 커스텀 데이터 속성 data- HTML5 요소에서는 요소의 렌더링에 필요한 정보나 시맨틱 값이 아닌 데이터를 접두사 data-가 붙은 비표준 속성에 제공하도록 한다. data- 뒤에는 자유롭게 네이밍 요소의 dataset프로퍼티를 통해 접근할 수 있다. 이름-값 쌍으로 이루어진 DOMStringMap 인스턴스이다. 커스텀 데이터 속성은 요소에 데이터를 연결해야 하지만 사용자에게는 보이고 싶지 않을 때 유용하다. 이 테크닉은 링크 추적, 매시업에서 페이지 각 부분의 식별자로 흔히 쓰인다. 3-6. 마크업 삽입마크업이 포함된 콘텐츠를 추가하는 것은 크로스 스크립팅 공격(XSS: Cross-Site Scripting Attacks)에 취약하다. innerHTML 읽기모드 : 요소와 주석, 텍스트 노드 등의 자식 노드를 모두 나타내는 HTML 표현을 반환한다. innerHTML이 어떤 텍스트를 반활할지는 브라우저마다 다르다. 쓰기모드 : 주어진 값을 바탕으로 새 DOM 서브트리를 만들어서 요소의 잣기 노드를 완전히 교체한다. 주어진 문자열을 DOM 서브트리로 파싱해 이미 존재하는 자식 노드를 모두 교체한다. 모든 요소가 innerHTML을 지원하지 않는다. col, colgroup, framset, head, html, style, table, tbody, thead, tfoot, tr, title도 지원하지 않는다. outerHTML 읽기모드 : 호출한 HTML 요소를 자식 노드와 함께 반환 쓰기모드 : 주어진 HTML 문자열을 파싱하여 DOM 서브트리를 생성하고 호출한 노드 전체를 교환하다. 나머지 특징은 innerHTML과 동일 insertAdjacentHTML() 메서드 삽입할 위치와 HTML 텍스트 두 가지를 매개변수로 받는다. 삽입할 위치 매개변수 beforebegin : 호출한 요소 바로 앞에 삽입 afterbegin : 호출한 요소 첫번째 자식 요소 바로 앞에 삽입 beforeend : 호출한 요소 마지막 자식 요소 바로 다음에 삽입 afterend : 호출한 요소 바로 다음에 삽입 메모리와 성능 문제 위의 메서드들로 자식 노드를 교체하면 메모리에 문제가 생길 수 있는데 IE가 특히 심하다.문제가 발생하는 지점 제거한 서브트리 요소에 이벤트 핸들러나 기타 자바스크립트 객체가 할당되어 있을 때 위의 상태에서 해당 핸들러나 프로퍼티를 사용하여 요소를 문서트리에서 제거한다면, 요소와 이벤트 핸들러 사이의 연결이 메모리에 남는다. 이른 작업이 계속되면 메모리 사용량이 점점 늘어난다. innerHTML, insertAdjacentHTML() 사용할 때는 제거할 요소의 이벤트 핸들러나 자바스크립트 객체 프로퍼티를 모두 제거하길 권한다. 3-7. scrollIntoView() 메서드모든 HTML요소에 존재하며 브라우저 창이나 컨테이너 요소를 스크롤해서 해당 요소가 뷰포트에 보이게 한다. 매개변수로 true나 생략하면 창 전체를 스크롤하여 요소 상단과 뷰포트 상단을 맞춘다. 4. 전용 확장 문서모드 children 프로퍼티 contains() 메서드 마크업 삽입 innerText 프로퍼티 outerText 프로퍼티 스크롤 참고링크 http://poiemaweb.com/js-dom 생소했던 단어","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Javascript","slug":"TIL-9997/Javascript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://feel5ny.github.io/tags/javascript/"}]},{"title":"8/ DOM(1) - 노드의 계층 구조(2)","slug":"JS_08_2","date":"2017-12-27T12:20:19.000Z","updated":"2018-01-03T07:08:42.000Z","comments":true,"path":"2017/12/27/JS_08_2/","link":"","permalink":"http://feel5ny.github.io/2017/12/27/JS_08_2/","excerpt":"","text":"‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. 오류가 있다면 언제든지 댓글 남겨주세요. 목차 Node 타입 Document 타입 Element 타입 Text 타입 텍스트 노드 생성 텍스트 노드 통일 텍스트 노드 분할 Comment 타입 CDATASection 타입 DocumentType 타입 DocumentFragment 타입 Attr 타입 4. Text 타입 이 노드에는 평범한 텍스트가 포함되고 글자 그대로 사용된다. 이스케이프된 HTML 문자는 포함할 수 있지만 HTML 코드는 포함할 수 없다. Text 노드의 특징 nodeType은 3 nodeType은 “#text” parentNode는 Element 자식 노드를 가질 수 없다. Text 노드에 포함된 텍스트는 nodeValue 프로퍼티나 data 프로퍼티로 가져올 수 있다. 둘중에 하나를 바꾸면 노드에 반영된다. 공백도 length값에 포함된다. 텍스트 노드의 값을 바꿀때 알아둬야 할 점은 문자열이 문서 타입에 따라 HTML 또는 XML에 맞게 인코드 된다. 텍스트를 조작하는 메서드 appendData(text) : 노드 마지막에 text 추가. deleteData(offset, count) : offset부터 count만큼 삭제 insertData(offset, count, text) : offset 위치에 text 삽입 replaceData(offset, count, text) : offset부터 (offset + count) 까지의 텍스트를 text로 교체 splitText(offset) : offset 위치를 기준으로 텍스트 노드를 둘로 나눈다. substringData(offset, count) : offset위치부터 (offset + count)까지의 텍스트를 꺼낸다. 텍스트 노드 생성 document.createTextNode() 매개변수로 삽입할 텍스트를 받는다. 새 텍스트 노드를 생성하면 ownerDocument 프로퍼티가 설정되지만 문서 트리에 삽입하기 전에는 브라우저 창에 표시되지 않는다. 일반적으로 요소는 단 하나의 자식 텍스트 토드만 가진다. 여러 개를 가질 때도 있다. 이때 normalize()를 사용하면 두 가지 텍스트가 공백없이 합쳐진다. 1234567const element = document.createElement(\"div\");element.className = \"message\";const textNode = document.createTextNode(\"Hello world!\")element.appendChild(textNode);document.body.appendChild(element); 텍스트 노드 통일 normalize()텍스트 노드 분할 splitText() 5. Comment 타입 6. CDATASection 타입 7. DocumentType 타입 8. DocumentFragment 타입 9. Attr 타입 참고링크 http://meetup.toast.com/posts/89 생소했던 단어 MIME타입 Gecko","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Javascript","slug":"TIL-9997/Javascript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://feel5ny.github.io/tags/javascript/"}]},{"title":"8/ DOM(1) - 노드의 계층 구조(1)","slug":"JS_08_1","date":"2017-12-26T12:20:19.000Z","updated":"2018-01-03T07:08:37.000Z","comments":true,"path":"2017/12/26/JS_08_1/","link":"","permalink":"http://feel5ny.github.io/2017/12/26/JS_08_1/","excerpt":"","text":"‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. 오류가 있다면 언제든지 댓글 남겨주세요.넘나 많은 프로퍼티와 메서드들 @_@ 목차 Node 타입 nodeName, nodeValue 요소의 경우 nodeName은 태그명, nodeValue는 null 노드 사이의 관계 ChildNodes / ParentNodes / firstChild / lastChild / hasChildNodes(), ownerDocument 프로퍼티 노드 조작 appendChild() / insertBefore() / replaceChild() / removeChild() 기타 메서드 cloneNode() / nomalize() Document 타입 Document 자식 노드 documentElement(=&lt;html&gt;) 문서 정보 document.title / document.URL / document.domain / document.referrer 요소 위치 getElementById() / getElementByTagName() (namedItem) / getElementByName() 특별한 컬렉션 document.anchors / document.applets / document.forms / document.images / document.links DOM 준수 탐지 hasFeature() 문서에 쓰기 write() / writeIn() / open() / close() Element 타입 HTML 요소 id / title / lang / dir / className 속성 얻기 getAttribute() 속성 설정 setAttribute() 속성 제거 removeAttribute() attributes 프로퍼티 getNamedItem() / removeNamedItem(name) / setNamedItem(), item() 요소 생성 createElement() 요소의 자식—- 2편 &#128071; Text 타입 Comment 타입 CDATASection 타입 DocumentType 타입 DocumentFragment 타입 Attr 타입 노드의 계층 구조 문서 객체 모델 DOM은 HTML과 XML 문서에 대한 애플리케이션 프로그래밍 인터페이스이다. (api) DOM은 문서를 노드의 계층 구조 트리로 표현한다. 개발자는 이를 통해 페이지 각 부분을 추가, 제거, 수정한다. 자바스크립트를 통해 HTML에 접근이 가능한 이유는 html이 document object model에 따라 기술되고 이 dom 인터페이스를 통해 기술된 html element가 객체로써 자바스크립트와 연결되기 때문에 접근이 가능한 것이다. 노드 타입에는 여러 가지가 있으며 각 타입은 문서에서 서로 다른 정보나 마크업을 표현한다. 노드 타입은 서로 다른 특징, 데이터, 메서드를 가지며 각 노드는 다른 노드와 관계가 있을 수 있다. 특정 노드에 뿌리를 둔 트리 구조로 표현된다. 12345678&lt;html&gt; &lt;head&gt; &lt;title&gt;Sample Pate&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Hello world!&lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 여기서 문서(Document) 노드가 루트이다. 문서 요소 : 문서 노드의 자식. 여기서는 &lt;html&gt; 문서 하나에 문서 요소 하나만 있을 수 있다. HTML페이지에서 문서요소는 항상 &lt;html&gt; 요소이다. 각 마크업은 트리에서 노드로 표현된다. 총 12가지 노드 타입이 있으며 모든 노드틑 기반 타입(base type)을 상속한다. 1. Node 타입 DOM 레벨 1에는 Node라는 인터페이스가 있다. DOM에 존재하는 노드 타입은 모두 이 인터페이스를 구현한다. 모든 브라우저에서는 Node 타입에 접근할 수 있다. 자바스크립트 노드 타입은 모두 Node를 상속하므로 모든 노드 타입에서 같은 기본 프로퍼티와 메서드를 고융한다. 모든 노드에는 타입을 나타내는 nodeType 프로퍼티가 있다.123456789101112Node.ELEMENT_NODE (1)Node.ATTRIBUTE_NODE (2)Node.TEXT_NODE (3)Node.CDATA_SECTION_NODE (4)Node.ENTITY_REFERENCE_NODE (5)Node.ENTITY_NODE (6)Node.PROCESSING_INSTRUCTION_NODE (7)Node.COMMENT_NODE (8)Node.DOCUMENT_NODE (9)Node.DOCUMENT_TYPE_NODE (10)Node.DOCUMENT_FRAGMENT_NODE (11)Node.NOTATION_NODE (12) 1234567if (someNode.nodeType == Node.ELEMENT_NODE)&#123; alert(\"Node is an element.\")&#125; // IE에서는 오류if (someNode.nodeType == 1)&#123; alert(\"Node is an element.\")&#125; // 모든 브라우저에서 동작 1-1. nodeName, nodeValue nodeName과 nodeValue는 해당 노드의 정보를 제공한다. 요소(element)의 nodeName은 요소의 태그명과 일치하고, nodeValue는 null이다. 텍스트 노드일 경우 nodeValue는 문자열이다. 1-2. 노드 사이의 관계1-2-1. ChildNodes 프로퍼티NodeList가 저장된다. 유사배열 객체 노드를 순서 있는 목록으로 저장하여 위치 기반으로 접근 가능. length 프로퍼티 : 호출 당시 노드리스트에 담긴 노드 숫자임을 기억하자. Array의 인스턴스는 아니다. DOM 구조의 쿼리 결과 계속 바뀌므로 살아있는 객체라고도 부른다. childNodes는 모든 자식요소 찾기 children은 모든 자식요소 찾기이지만 요소노드만 찾는다. 노드 리스트에 저장된 노드를 접근하는 방법 (어느쪽을 더 권잔하진 않는다.) 대괄호 표기법 item() 메서드123const firstChild = someNode.childNodes[0];const secondChild = someNode.childNodes.item(1);const count = someNode.childNodes.length; 1-2-2. parentNode 프로퍼티 childNodes 목록에 포함된 노드는 모두 부모가 같으므로 각각의 parentNode 프로퍼티는 같은 노드를 가리킨다. childeNOdes 목록의 각 노드들은 형제관계이며 previousSibling 및 nextSibling 프로퍼티로 이동할 수 있다. 자식 노드가 하나 뿐이라면 해당 노드의 nextSibling과 previousSibling은 모두 null이다. 1-2-3. firstChild 프로퍼티childNodes 목록에서 첫번째 노드를 가리킨다.someNode.firstChild = someNode.childNodes[0] 1-2-4. lastChild 프로퍼티childNodes 목록에서 마지막 노드를 가리킨다.someNode.lastChild = someNode.childNodes[someNode.childNodes.length-1] 1-2-5. hasChildNodes() 메서드노드에 자식 노드가 있으면 true를 반환.length로 자식 노드 확인하는 것보다 효과적. 1-2-6. ownerDocument 프로퍼티전체 문서를 표현하는 문서 노드에 대한 포인터노드 계층 구조를 따라 위로 거슬러 올라갈 필요 없이 문서 노드에 빠르게 접근 가능하다. 1-3. 노드 조작 노드 사이의 관계 포인터는 모두 읽기 전용 아래 4가지 메서드는 자식에서만 동작하므로 부모 노드를 정확히 알아야한다. 1-3-1. appendChild() childNodes 목록 마지막에 노드를 추가한다. 새로 추가한 노드, 부모 노드, childNodes 목록에 포함된 이전의 마지막 자식 노드에서 모든 관계 포인터가 업데이트 된다. 이미 문서에 존재하고 있는 노드를 추가한다면, 해당 노드는 이전 위치에서 추가된 위치로 옮겨진다. 1-3-2. insertBefore(삽입할 노드, 기준 노드) 삽입할 노드와 기준 노드 2가지를 매개변수로 받는다. 삽입한 노드는 기준 노드의 이전형제가 되며, 이동이 끝나면 메서드는 삽입한 노드를 반환한다. 1-3-3. replaceChild(삽입할 노드, 교체할 노드) 기존 노드를 교체한다. 교체할 노드(B)에 있던 자리에 삽입할 노드(A)가 들어간다. B의 관계 표인터는 모두 A에 복사한다. B는 같은 문서 소유이긴 하지만 문서에서 위치를 지정받지 못한 채 붕 떠 있는 상태이다. 1-3-4. removeChild() 제거할 노드 하나만 매개변수로 받는다. 제거된 노드는 아직 해당 문서 소유이긴 하지만 문서에서 위치를 지정받지는 못했다. 1-4. 기타 메서드1-4-1. cloneNode(boolean) 자신을 호출한 노드의 복제본을 생성한다. 매개변수로는 자손 노드까지 복제할지 나타내는 불리언이다. true : 자손 노드 전체를 복제 false : 해당 노드 하나만 복제 복제된 노드를 반환하는데, 이는 여전히 문서 소유이지만 부모 노드가 할당되지 않는다. 고아노드라고 한다. appendChild()나 insertBefore(), replaceChild()를 통해 문서에 추가하기 전에는 트리 안에 존재하지 않는다. 12345&lt;ul&gt; &lt;li&gt;item 1&lt;/li&gt; &lt;li&gt;item 2&lt;/li&gt; &lt;li&gt;item 3&lt;/li&gt;&lt;/ul&gt; 12345const deepList = myList.cloneNode(true) // myList에 ul요소에 대한 참조를 저장했다고 가정console.log(deepList.childNodes.length) // 3 or 7(공백포함)const shallowList = myList.cloneNode(false);console.log(shallowList.childNodes.length) //0 1-4-2. nomalize() 문서 서브트리에 존재하는 텍스트 노드를 다루는 것 뿐. 파서의 구현 방식이나 DOM 조작 결과로 텍스트 없는 텍스트 노드가 생기거나 텍스트 노드끼리 형제 노드가 될 가능성이 있다. nomalize를 호출하면 노드의 자손에서 이 두가지 상황이 생기지 않았는지 검색한다. 빈 텍스트 노드를 찾으면 제거하고 텍스트 노드끼리 형제인 경우를 발견하면 두 노드를 하나로 합친다. 2. Document 타입&lt;img src=”/images/post_img/58/06.png&gt; 자바스크립트는 문서 노드를 Document 타입으로 표현한다. 브라우저에서 전체 HTML 페이지를 표현하는 문서 객체는 HTMLDocument의 인스턴스 HTMLDocument는 Document를 상속한다. document 객체는 window의 프로퍼티이므로 전역에서 접근할 수 있다. window.document Document 타입은 HTML 페이지 또는 XML 기반 문서를 표현한다. document 객체를 통해 페이지에 대한 정보를 얻고 구조 및 외관을 조작한다. Document 노드의 특징 nodeType은 9 nodeName은 “#document” nodeValue는 null parentNode는 null ownerDocument는 null 자식 노드로 DocumentType(최대 1개) Element(최대 1개), Processing Instruction, Comment를 가질 수 있다. 2-1. Document 자식 노드Document 자식으로 DocumentType Element ProcessingInstruction Comment 2-1-1. documentElement 프로퍼티 HTML페이지의 &lt;html&gt;요소를 가리킨다. childNodes의 document 요소보다 documentElement프로퍼티가 해당 요소에 더 빨리, 더 직접적으로 접근한다. 12const html = document.documentElement;console.log(html === document.childNodes[0] === document.firstChild) document 객체는 HTMLDocument의 인스턴스이므로 &lt;body&gt;요소를 직접적으로 가리키는 body 프로퍼티를 갖는다. document 객체 2-1-2. DocumentType&lt;!DOCTYPE&gt; 태그는 문서의 다른 부분과는 별도의 엔티티로 간주하며 포함된 정보는 다음과 같이 doctype 프로퍼티를 통해 접근할 수 있다.1const doctype = document.doctype 2-2. 문서 정보 document 객체는 HTMLDocument의 인스턴스이므로 표준 Document 객체에는 존재하지 않는 프로퍼티를 여럿 가진다. 이들 프로퍼티는 현재 불러들인 웹 페이지에 대한 정보이다. 2-2-1. document.title &lt;title&gt; 요소 텍스트가 들어있다. 읽을 수도 있고 재설정도 가능하다. 2-2-2. 웹페이지 요청과 관련한 프로퍼티HTTP 헤더에 들어있다. URL : 페이지의 완전한 URL domain : 페이지의 도메인 이름, referrer : 이 페이지를 링크한 페이지의 URL. 없으면 빈 문자열 2-3. 요소 위치특정 요소나 요소 그룹에 대한 참조를 얻는 일을 자주한다.대표적인 2가지 메서드. getElementById(), getElementByTagName() 2-3-1. getElementById() 찾으려는 요소 ID를 매개변수로 받고 해다 요소를 찾아 반환하며 그런 ID의 요소가 존재하지 않으면 null반환. 소문자와 대문자를 구분해야한다. 같은 요소가 2개 이상 존재하면 첫 번째 요소를 반환한다. document.getElementBy~ : 단일 엘리먼트를 선택하는 메소드 document.getElementsBy~ : 다중 엘리먼트를 선택하는 메소드 배열형태로 받아진다. 2-3-2. getElementByTagName() 요소의 태그 이름을 매개변수로 받고 해당하는 요소가 담긴 NodeList를 반환한다. HTML 문서에서는 HTMLCollection 객체를 반환한다. NodeList 객체와 마찬가지로 HTMLCollection 객체의 데이터 역시 대괄호기법과 item() 메서드로 접근 가능하다. HTMLCollection의 namedItem() 메서드 name 속성을 통해 컬렉션 데이터에 대한 참조를 얻는다. 1&lt;img src=\"myimage.jpg\" name=\"myImage\"&gt; 123const images = document.getElementByTagName(\"img\")const myImage = images.namedItem(\"myImage\")const myImage = images[\"myImage\"] HTMLCollection 객체에서는 대괄호 표기법에 숫자형 색인과 =&gt; item()사용 문자형 색은을 모두 사용할 수 있다. =&gt; namedItme() 사용 문서 전체는 아리테스크*를 사용한다.1const allElements = document.getElementByTagName(\"*\") 2-3-4. getElementByName()name 속성 값이 주어진 문자열에 일치하는 요소를 반환한다. 라디오 버튼에 자주 사용한다. id 속성은 label요소와 연결하는 역할을 하며 name 속석은 값을 서버에 보낼 때 이중 단 하나만 보내는 역할을 한다. (체크된)1234567891011121314151617&lt;fieldset&gt; &lt;legend&gt;Which color do you prefer?&lt;/legend&gt; &lt;ul&gt; &lt;li&gt; &lt;input type=\"radio\" value=\"red\" name=\"color\" id=\"colorRed\"&gt; &lt;label for=\"colorRed\"&gt;Red&lt;/label&gt; &lt;/li&gt; &lt;li&gt; &lt;input type=\"radio\" value=\"green\" name=\"color\" id=\"colorGreen\"&gt; &lt;label for=\"colorGreen\"&gt;Green&lt;/label&gt; &lt;/li&gt; &lt;li&gt; &lt;input type=\"radio\" value=\"blue\" name=\"color\" id=\"colorBlue\"&gt; &lt;label for=\"colorBlue\"&gt;Blue&lt;/label&gt; &lt;/li&gt; &lt;/ul&gt;&lt;/fieldset&gt; 2-4. 특별한 컬렉션document객체에는 특별하 컬렉션이 몇가지 있다.각 컬렉션은 모두 HTML Collection 객체이고,문서에 공통된 요소들에 빠르게 접근할 수 있도록 만들어졌다. document.anchors : name속성이 있는 &lt;a&gt; 요소를 모두 갖고온다. (폐기)document.applets : &lt;applet&gt; 요소를 모두 갖고온다. document.forms : &lt;form&gt; 요소를 모두 가져온다. (document.getElementsByTagName(“form”)과 같다.) document.images : &lt;img&gt; 요소를 모두 갖고온다. document.links : href속성이 있는 &lt;a&gt;요소를 모두 가져온다. 2-5. DOM 준수 탐지hasFeature() 2-6. 문서에 쓰기write() : 넘겨 받은 텍스트를 그대로 추가하고writeIn() : 줄바꿈을 문자(\\n)를 문자열 마지막에 추가한다.open() : 페이지 스트림을 열고close() : 페이지 스트림을 닫습니다. 3. Element 타입Element 요소의 특징 nodeType은 1이다. nodeName은 요소의 태그 이름이다. nodeValue는 null이다. parentNode는 Document 또는 Element이다. 자식노드로 Element나 Text, Comment, ProcessingInstruction, CDATASection, EntityReference를 가질 수 있다. 3-1. HTML 요소HTMLElement 타입을 통해 표현된다.HTMLElement는 Element를 직접적으로 상속한다. id : 요소의 고유한 식별자title : 요소에 대한 추가 정보, 일반적으로 툴팁으로 표현됨lang : 요소 콘텐츠의 언어 코드. 거의 사용되지 않는다.dir : 언어의 표기 반향. ltr은 왼쪽 =&gt; 오른쪽, rtl은 오른쪽 =&gt; 왼쪽. 거의 사용되지 않는다.className : CSS 클래스인 class 속성을 나타낸다. class가 ECMAScript의 예약어이기 때문에 className이라고 사용한다. 1&lt;div id=\"myDiv\" class=\"bd\" title=\"Body text\" lang=\"en\" dir=\"ltr\"&gt;&lt;/div&gt; 3-2. 속성 얻기 (getAttribute())getAttribute(속성이름) : 공식 속성 이외에 커스텀 속성을 가져오는데도 쓸 수 있다.setAttribute(속성이름, 속성이름의 값)removeAttribute(속성이름) 속성이름은 대소문자를 구분하지 않는다. HTML5 명세에서는 커스텀 속성 앞에 전치사 data-를 붙여야 유효한 것으로 인정한다. getAttribute(“style”)은 객체를 반환, getAttribute(“onclick”)은 함수를 반환한다. 위의 속성과 차이점때문에 개발자들은 getAttribute()는 거의 사용하지 않고 객체 프로퍼티를 사용한다. getAttribute() 메서드는 주로 커스텀 속성의 값을 가져올 때 사용하다. 123456789101112131415161718var four = document.getElementById('four');// class 어트리뷰트가 존재하지 않으면if (!four.hasAttribute('class')) &#123; // four에 class 어트리뷰트를 추가하고 값으로 'blue'를 설정 four.setAttribute('class', 'blue');&#125; else &#123; // four에 class 어트리뷰트가 존재하면 four.className = 'blue';&#125;// class 어트리뷰트의 값을 취득console.log(four.getAttribute('class')); // blue// class 어트리뷰트를 제거four.removeAttribute('class');// class 어트리뷰트의 존재를 확인console.log(four.hasAttribute('class')); // false 3-3. 속성 설정 (setAttribute()) 속성 이름과 설정할 값 두가지를 매개변수로 받는다. 해당 속성이 존재하지 않으면 솏어을 새로 생성하고 값을 설정한다. 속성 이름은 소문자로 통일된다. 3-4. 속성 제거 (removeAttribute()) 속성의 값만 지우는 것이 아니라 요소에서 속성을 완전히 제거한다. 자주 쓰이지는 않는다. 3-5. attributes 프로퍼티 Element 타입은 DOM 노드 타입 중에서 attributes 프로퍼티를 갖는 유일한 타입이다. attributes 프로퍼티에는 NodeList처럼 살아있는 컬렉션 NamedNodeMap이 저장된다. 요소 속성은 모두 Attr 노드로 표현되며 각 Attr노드는 NamedNodeMap 객체에 저장된다. attributes 프로퍼티 안의 각 노드는 nodeName이 속성 이름 nodeValue는 속성 값 보통은 아래 메서드들 보다는 getAttribute(), removeAttribute(), setAttribute() 메서드가 더 많이 사용된다. NamedNodeMap 객체의 메서드들 getNamedItem(name) : nodeName 프로퍼티가 name인 노드를 반환한다. removeNamedItem(name) : nodeName 프로퍼티가 name인 노드를 목록에서 제거한다. setNamedItem(node) : node를 목록에 추가하고 nodeName 프로퍼티에 따라 색인한다. item(pos) : 인덱스가 pos인 노드를 반환한다. attributes 메서드들이 유용한 경우는 요소의 속성을 대상으로 루프가 필요할 때.각 속성의 이름과 값을 문자열에 추가한다. 1234567891011121314function outputAttributes(element) &#123; const pairs = new Array(), attrName, attrValue, i, len; for (i = 0, len = element.attributes.length.length; i &lt; len; i++) &#123; attrName = element.attributes[i].nodeName; attrValue = element.attributes[i].nodeValue; pairs.push(attrName + \"=\\\"\" + attrValue + \"\\\"\"); &#125; return pairs.join(\" \");&#125; 3-6. 요소 생성 (document.createElement()) createElement() 메서드는 새 요소를 생성하고 ownerDocument 프로퍼티를 설정한다. 생성 이후에는 문서 트리의 일부가 아니므로 appendChild(), insertBefore(), replaceChild() 메서드를 통해 요소를 문서 트리에 추가해야한다. IE7이전 버전에는 HTML을 통으로 인자로 넘길 수 있다. 3-7. 요소의 자식 요소는 자식 요소나 자손 요소를 가질 수 있고, 그 숫자는 제한이 없다. 12345&lt;ul id=\"myList\"&gt; &lt;li&gt;item 1&lt;/li&gt; &lt;li&gt;item 2&lt;/li&gt; &lt;li&gt;item 3&lt;/li&gt;&lt;/ul&gt; &lt;ul&gt;요소 자식 노드가 7개 생긴다. &lt;li&gt;는 3개, &lt;text&gt; 4개 (&lt;li&gt;와 텍스트 사이의 공백) 참고링크 http://poiemaweb.com/js-dom http://webclub.tistory.com/339 생소했던 단어 MIME타입 Gecko","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Javascript","slug":"TIL-9997/Javascript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://feel5ny.github.io/tags/javascript/"}]},{"title":"7/ BOM (브라우저 객체 모델)","slug":"JS_07_2","date":"2017-12-25T12:20:19.000Z","updated":"2018-01-03T07:08:27.000Z","comments":true,"path":"2017/12/25/JS_07_2/","link":"","permalink":"http://feel5ny.github.io/2017/12/25/JS_07_2/","excerpt":"","text":"‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. 오류가 있다면 언제든지 댓글 남겨주세요. 목차 window 객체—- 1편 &#128070; location 객체2.1 쿼리스트링 확장2.2 location 조작 navigator 객체3.1 플러그인 감지3.2 처리기 등록 screen 객체 history 객체 2. location 객체 BOM에서 가장 유용한 객체중 하나. 문서 정보와 함께 내비게이션 기능을 제공하다. location객체는 window의 프로퍼티인 동시에 document의 프로퍼티이다. window.location과 document.location은 같은 객체를 가리킨다. location은 현재 문서에 대한 정보를 갖고 있으며 URL을 파싱해서 몇 가지 조각으로 분리해 각각을 프로퍼티에 저장한다. location의 프로퍼티들을 살펴보자. hash (예: “#/0/1” http://slides.com/nayoung/deck-8#/0/1) #기호 다음에 문자가 오는 형태의 URL 해시. URL에 해시가 없다면 빈 문자열 host (예: “localhost:4000”) 서버 이름과 포트번호 (있다면) hostname (예: “localhost”) 포트 번호를 제외한 서버 이름 href (예: “http://localhost:4000/2017/12/28/JS_07/“) 현재 페이지의 완전한 URL location의 toString()메서드는 이 값을 반환 pathname (예: “/2017/12/28/JS_07/“) URL에 포함된 디렉터리 및 파일 이름 port (예: “4000”) URL의 요청 포트(존재한다면)이다. URL에 포트가 없으면 이 프로퍼티는 빈 문자열 반환 protocol (예: “http:”) 페이지에서 사용하는 프로토콜. 일반적으로 “http:”나 “https:”중 하나이다. 프로토콜을 스키마라고 부르기도 한다. search (예: “?q=window”) URL의 쿼리스트링 부분. 물음표 기호로 시작하는 문자열을 반환 2.1 쿼리스트링 확장URL 정보 중 쿼리스트링은 다루기 쉬운 형태로 제공되지 않는다.즉, 하나씩 분리해서 제공하지 않는다는 말.아래 함수를 이용하면 쿼리스트링을 파싱해서 각 매개변수를 프로퍼티로 갖는 객체를 반환한다. 1234567891011121314151617181920212223242526function getQueryStringArgs(teset)&#123; const qs = &#123;location.search.length &gt; 0 &gt; location.search.substring(1) : \"\"&#125;, // 쿼리스트링이 존재하면 물음표를 제외하고 qs에 할당한다. args = &#123;&#125;, items = qs.length ? qs.split(\"&amp;\") : [], item = null, name = null, value = null, // for 루프에서 사용할 변수 i = 0, len = items.length; // 각각 매개변수를 args 객체에 할당 for (i = 0; i &lt; len; i++)&#123; item = item[i].split(\"=\"); name = decodeURIComponent(item[0]); value = decodeURIComponent(item[1]); if(name.length) &#123; args[name] = value; &#125; &#125; return args;&#125; 물음표 제거. args를 객체 리터럴 형식으로 생성 args의 객체에 split으로 분리된 배열의 첫번째 인자가 name, 두번째 인자가 value에 들어간다. 결과12https://www.google.co.kr/search?newwindow=1&amp;tbm=isch&amp;q=그리드+다단&amp;cad=hargs = &#123;newwindow: &quot;1&quot;, tbm: &quot;isch&quot;, q: &quot;그리드+다단&quot;, cad: &quot;h&quot;&#125; * decodeURIComponentHTML에서 한글이 섞인 주소는 오작동할 수 있기 때문에 이스케이프 시켜야한다.예 : “나영” =&gt; “%EB%82%98%EC%98%81”이를 인코딩이라고 하며, 반대로 다시 언어화를 시켜주는 디코딩이 있습니다.decodeURIComponent는 http:// 부터 모두 디코딩을 해줍니다. 2.2 location 조작 location.assign(“https://feel5ny.github.io/“) 메서드 해당 URL로 이동한다. location.href = “” 현재 위치해있는 URL 뒤에 추가된다. location.hash = “” #와 함께 인자가 URL 뒤에 추가된다. hash 프로퍼티를 바꿀 때는 새 URL로 페이지를 다시 읽지 않는다. location.search = “q=test” 현재 주소값에 search가 있는 경우, q= 뒤에 검색 단어를 추가한다. location.hostname = “www.naver.com” 현재 주소에서 앞부분 main 주소값이 바뀐다. location.pathname 첫번째 path가 바뀐다.123// https://developer.mozilla.org/ko/?q=naynlocation.pathname = \"en-Us\"// https://developer.mozilla.org/en-US/?q=nayn 위의 프로퍼티들은 브라우저 히스토리 스택에 쌓이기 때문에 뒤로가기 버튼이 적용된다.replace는 그렇지 않다. location.replace(“www.naver.com”) 히스토리 스택에 쌓이지 않는다. location.reload(true) 현재 페이지를 다시 불러온다. 매개변수 없이 호출하면 페이지를 가능한 한 가장 효과적인 방법으로 다시 읽는다.즉, 페이지가 바뀌지 않았다면 브라우저 캐시에서 읽어온다. 매개변수로 true를 넘기면 서버에서 읽어오도록 강제하게된다. reload() 호출 이후의 코드는 네트워크 지연이나 시스템 자원같은 요인에 따라 실행될 수도 있고 아닐 수도 있기 때문에 코드 마지막에 둔다. 3. navigator 객체클라이언트에서 브라우저를 구별하는 방법의 표준으로 쓰였다.navigator 객체의 프로퍼티는 일반적으로 웹 페이지를 실행 중인 브라우저 타입을 판단하는 데 사용한다.( *은 크롬 ) 프로퍼티/메서드 설명 IE 파이어폭스 사파리/크롬 오페라 *appCodeName 브라우저 이름이다. 모질라 브라우저가 아니어도 일반적으로 “Mozila” 3.0+ 1.0+ 1.0+ 7.0+ appMinorVersion 추가적인 버전 정보이다. 4.0+ - - 9.5+ *appName 완전한 브라우저 이름이다. 3.0+ 1.0+ 1.0+ 7.0+ *appVersion 브라우저 버전입니다. 일반적으로 브라우저 실제 버전과는 다르다. 3.0+ 1.0+ 1.0+ 7.0+ buildID 브라우저의 빌드 번호이다. - 2.0+ - - *cookieEnabled 쿠키가 활성화되어 있는지 나타낸다. 4.0+ 1.0+ 1.0+ 7.0+ cpuClass 클라이언트 컴퓨터의 CPU 타입이다. “x86”, “68K”, “Alpha”, “PPC”, “Ohter”가 있습니다. 4.0+ - - - *javaEnabled 브라우저에 자바가 활성화되어 있는지 나타낸다. 4.0+ 1.0+ 1.0+ 7.0+ *language 브라우저의 우선적 언어(한국어, 영어..)를 나타낸다. - 1.0+ 1.0+ 7.0+ *mimeTypes 브라우저에 등록된 마임 타입을 나열한 배열이다. 4.0+ 1.0+ 1.0+ 7.0+ onLine 브라우저가 인터넷에 연결되어 있는지 나타낸다. 4.0+ 1.0+ - 9.5+ opsProfile 브라우저가 인터넷에 연결되어 있는지 나타낸다. 4.0+ - - - oscpu 거의 사용하지 않으며 문서도 없다. - 1.0+ - - *platform 브라우저가 실행중인 운영체제와 CPU를 타나낸다. 4.0+ 1.0+ 1.0+ 7.0+ *plugins 브라우저에 설치된 플러그인을 나열한 배열이다. IE에서는 페이지의 요소를 나열한 배열이다. 4.0+ 1.0+ 1.0+ 7.0+ preference() 사용자 선호사항을 설정한다. 특권모드에서만 접근가능 - 1.5+ - - *product 브라우저 이름. 일반적으로 “Gecko”)이다. - 1.0+ 1.0+ - *productSub 브라우저에 대한 추가정보. 일반적으로 게코 버전 정보. - 1.0+ 1.0+ - registerContentHandler() 웹사이트를 특정 마임 타입 처리기로 등록한다. - 2.0+ - - registerProtocolHandler() 웹사이트를 특정 프로토콜 처리기로 등록한다. - 2.0+ - - securityPolicy 보안 정책 이름이지만 폐기되었다. - 1.0+ - - systemLanguage 운영체제의 언어이다. 4.0+ - - - taintEnabled() 변수 테인트가 활성화 되어 잇는지 나타내지만 폐기된 기능. 4.0+ 1.0+ - 7.0+ *userAgent 브라우저 문자열이다. 3.0+ 1.0+ 1.0+ 7.0+ userLanguage 운영체제의 기본 언어이다. 4.0+ - - 7.0+ userProfile 사용자 프로필 정보에 접근할 때 사용하는 객체 4.0+ - - - *vendor 브라우저 제조사 이름이다. - 1.0+ 1.0+ - *vendorSub 제조사에 대한 추가 정보이다. - 1.0+ 1.0+ - 3.1 플러그인 감지현재 크롬의 plugins1234567891011121314[ &#123; 0: MimeType, application/x-google-chrome-pdf: MimeType, name: \"Chrome PDF Plugin\", // 플러그인 이름 filename: \"internal-pdf-viewer\", // 플러그인의 파일 이름 description: \"Portable Document Format\", // 플러그인 설명 length: 1 // 플러그인이 처리하는 마임 타입 숫자 &#125;, &#123;0: MimeType, application/pdf: MimeType, name: \"Chrome PDF Viewer\", filename: \"mhjfbmdgcfjbbpaeojofohoefgiehjai\", description: \"\", length: 1&#125;, &#123;0: MimeType, 1: MimeType, application/x-nacl: MimeType, application/x-pnacl: MimeType, name: \"Native Client\", filename: \"internal-nacl-plugin\", description: \"\", …&#125;, &#123;0: MimeType, 1: MimeType, application/x-shockwave-flash: MimeType, application/futuresplash: MimeType, name: \"Shockwave Flash\", filename: \"PepperFlashPlayer.plugin\", description: \"Shockwave Flash 28.0 r0\", …&#125;, &#123;0: MimeType, application/x-ppapi-widevine-cdm: MimeType, name: \"Widevine Content Decryption Module\", filename: \"widevinecdmadapter.plugin\", description: \"Enables Widevine licenses for playback of HTML audio/video content. (version: 1.4.8.1030)\", length: 1&#125;] 3.2 처리기 등록 4. screen 객체window의 프로퍼티이다.픽셀 너비와 높이 등 클라이언트 화면에 대한 정보가 들어있다. 개인적인 생각 : UI나 인터렉션부분에서 많이 적용될 듯 하다. (*은 크롬) 프로퍼티/메서드 설명 IE 파이어폭스 사파리/크롬 오페라 *availHeight 시스템 요소를 제외한 화면의 픽셀 높이이다. ○ ○ ○ ○ *availLeft 시스템 요소가 아닌 영역 중 왼쪽에서 첫 번째 픽셀이다. (읽기전용) ○ ○ *availTop 시스템 요소가 아닌 영역 중 위에서 첫 번째 픽셀이다. (읽기전용) ○ ○ *availWidth 시스템 요소를 제외한 화면의 픽셀 너비이다. (읽기전용) ○ ○ ○ ○ bufferDepth 시스템 요소를 제외한 화면의 픽셀 너비이다. (읽기전용) ○ *colorDepth 색깔 비트 숫자이며 대부분 32이다. (읽기전용) ○ ○ ○ ○ deviceXDPI 화면의 실제 가로 DPI이다. (읽기전용) ○ deviceYDPI 화면의 실제 세로 DPI이다. (읽기전용) ○ fontSmoothingEnabled 폰트를 부드럽게 처리하는 기술이 활성화되어있는지 나타낸다. (읽기전용) ○ *height 화면의 픽셀 높이이다. ○ ○ ○ ○ left 현재 화면의 왼쪽 모서리로부터의 픽셀 거리이다. ○ logicalXDPI 화면의 논리적 가로 DPI이다. (읽기전용) ○ logicalYDPI 화면의 논리적 세로 DPI이다. (읽기전용) ○ *pixelDepth 화면의 픽셀당 비트 숫자이다. (읽기전용) ○ ○ ○ top 현재 화면의 위쪽 모서리로부터의 픽셀 거리이다. ○ updateInterval 화면을 몇 밀리초마다 업데이트하는지 나타낸다. ○ *width 화면의 픽셀너비이다. ○ ○ ○ ○ 5. history 객체 window의 프로퍼티. 창을 첫 번째 연 이후 사용자의 내비게이션 히스토리를 보관한다. 브라우저 창, 탭, 프레임은 각각 자신의 window 객체에 속한 history객체를 가진다. 보안을 이유로 사용자가 방문했던 URL은 알 수 없다. 알 수 없는 url 메서드1. go()history.go(-1) : 한페이지 뒤로history.go(1) : 한페이지 앞으로history.go(2) : 두페이지 앞으로 2. back()한페이지 뒤로 3. forward()한페이지 앞으로 프로퍼티length : history 스택에 기록이 얼마나 많이 있는지 나타낸다. 0일경우 사용자가 페이지를 처음 열었을 때인 것이다. 참고링크 http://meetup.toast.com/posts/89 생소했던 단어 MIME타입 Gecko","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Javascript","slug":"TIL-9997/Javascript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://feel5ny.github.io/tags/javascript/"}]},{"title":"7/ BOM (브라우저 객체 모델)","slug":"JS_07_1","date":"2017-12-24T12:20:19.000Z","updated":"2018-01-03T07:08:20.000Z","comments":true,"path":"2017/12/24/JS_07_1/","link":"","permalink":"http://feel5ny.github.io/2017/12/24/JS_07_1/","excerpt":"","text":"‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. 오류가 있다면 언제든지 댓글 남겨주세요. 목차 window 객체1.1 전역 스코프 : window.전역변수명, window.전역함수명1.2 창 사이의 관계와 프레임1.3 창의 위치 : screenLeft, screenTop1.4 창의 크기 : innerWidth, outerWidth1.5 내비게이션과 열기 : window.open, window.close1.6 인터벌과 타임아웃 : setInterval, setTimeout1.7 시스템 대화상자 : alert, prompt, confirm, print, find—- 2편 &#128071; location 객체 navigator 객체 screen 객체 history 객체 1. window 객체BOM은 웹 페이지 콘텐츠와 무관하게 브라우저 기능을 노출하는 객체이다. 브라우저의 인스턴스 =&gt; window 객체웹페이지에서 정의한 모든 객체, 변수, 함수에서는window가 Global 객체(= 표준내장객체) 구실을 하고,window에 정의된 parseInt()등의 메서드를 이용한다. + global objects와 global object는 다르다.global objects는 표중내장객체, global object는 전역객체이다.(실행 컨택스트에서 GO) 1.1 전역 스코프전역에서 선언한 변수와 함수는 모두window 객체의 프로퍼티 및 메서드가 된다.12345678const age = 29;const sayAge = () =&gt; &#123; alert(this.age); // 전역을 가리키는 this&#125;alert(window.age); // 29sayAge(); // 29window.sayAge(); // 29 전역변수와 window 프로퍼티로 직접 정의하는 것의 차이. 전역 변수는 delete연산자로 제거할 수 없고, window 프로퍼티는 가능하다. 1234567const age = 29;window.color = \"red\";delete window.age; // 제거 안됨delete window.color; // 제거 됨alert(window.color) 선언하지 않았을 가능성이 있는 변수의 존재 여부는 window 객체를 통해 확인 가능 1.2 창 사이의 관계와 프레임페이지에 프레임이 들어 있으면 각 프레임은 독자적인 window객체를 가지며, frames 컬렉션에 저장된다. 1.3 창의 위치screenLeft : 디바이스 화면 왼쪽에서 브라우저 창까지 가로 거리screenTop : 디바이스 화면 위쪽에서 브라우저 창까지 세로 거리moveBy(가로이동 픽셀수, 세로이동 픽셀수) : (왼-&gt;오 / 위-&gt; 아래)moveTo(x좌표, y좌표) moveBy moveTo 크롬, 오페라, IE7이상은 안됨 1.4 창의 크기크기측정 innerWidth : 브라우저 창 내부의 페이지 뷰포트 크기 (모바일도 가능) innerHeight : 브라우저 창 내부의 페이지 뷰포트 크기 (모바일도 가능) outerWidth : 브라우저 창의 크기 outerHeight : 브라우저 창의 크기 크기조절 (IE6이상 크롬 오페라에서는 금지) resizeTo(최종너비, 최종높이) resizeBy(너비 얼만큼 바꿀지, 높이 얼만큼 바꿀지) 1.5 내비게이션과 열기window.open() : URL로 이동한 후 브라우저 창을 새로 연다. 이동할 URL, 대상 창, 기능을 나타내는 string 마지막으로 새 페이지가 브라우저 히스토리에서 현재 페이지를 대체할지 나타내는 boolean12window.open(\"http://feel5ny.github.io\", \"topFrame\")// 두번째 인자는 a태그에서 target과 같다. 두번째 인자에는 _self,_parent,_top,_blank사용가능 팝업창 소셜 인증시 팝업창이 open되고, close될 때 사용된다. 12window.open(\"http://feel5ny.github.io\", \"topFrame\", \"height=400, width=400, top=10, left=10, resizable=yes\") 옵션 값 설명 fullscreen “yes” or “no” 브라우저 창을 최대 크기로 생성할지 나타낸다. height 숫자 새 창의 높이이다. 최소값은 100 left 숫자 새 창의 x좌표이다. 음수는 쓸 수 없다. location “yes” or “no” 주소 표시줄을 표시할지 나타낸다. 기본 값은 브라우저에 따라 다르다. “no”로 지정하면 브라우저에 따라 주소 표시줄을 숨기거나 비활성화한다. menubar “yes” or “no” 메뉴 바를 표시할지 나타낸다. 기본값은 “no” resizable “yes” or “no” 새 창의 테두리를 드래그해서 크기를 조절할 수 있는지 나타냅니다. 기본값은 “no” scrollbars “yes” or “no” 새 창 콘텐츠가 뷰표트를 넘칠 때 스크롤을 허용할지 나타낸다. 기본값은 “no” status “yes” or “no” 상태 바를 표시할지 나타낸다. 기본 값은 브라우저에 따라 다르다. toolbar “yes” or “no” 툴바를 표시할지 나타낸다. 기본값은 “no” top 숫자 새 창의 y좌표. 음수는 쓸 수 없다. width 숫자 새 창의 너비. 최솟값은 100 window.open()메서드는 새로 생성한 창에 대한 참조를 반환한다.기본적으로 주요 브라우저 창의 위치나 크기를 스크립트에서 바꿀 수 없게 금지되지만, .open으로 생성한 창은 가능하다. (크롬은 CORS에 걸림)window.close()는 window.open()으로 생성된 창에서만 적용가능하다. 12345var wroxWin = window.open(\"http://feel5ny.github.io\", \"topFrame\", \"height=400, width=400, top=10, left=10, resizable=yes\")wroxWin.resizeTo(500, 500);wroxWin.moveTo(100, 100); wroxWin은 opener프로퍼티를 갖고 있는데, window.open()을 호출한 창이나 프레임을 가리키는 포인터이다.그 역은 존재하지 않는다.1234var wroxWin = window.open(\"http://feel5ny.github.io\", \"topFrame\", \"height=400, width=400, top=10, left=10, resizable=yes\")alert(wroxWin.opener === window) // true 1.6 인터벌과 타임아웃window에는 코드가 특정 시간에 실행되게끔 해주는 메서드가 있다.setTimeout(실해코드, 시간(밀리초)) : 일정 시간 뒤에 코드를 실행setInterval() : 일정 시간마다 코드를 반복 실행 &#128336; setTimeout()자바스크립트는 큐를 이용해 각 코드의 실행을 관리한다. 큐? Task 큐와 이벤트 루프이다. Task 큐는 말 그대로 콜백 함수들이 대기하는 큐(FIFO) 형태의 배열이라 할 수 있고, 이벤트 루프는 호출 스택이 비워질 때마다 큐에서 콜백 함수를 꺼내와서 실행하는 역할을 해 준다. clearTimeout(setTimeout이 할당된 변수이름) : 타임아웃을 취소할 때 사용한다. &#128171; setInterval()페이지가 종료되거나 인터벌을 취소하기 전에는 일정 시간마다 코드를 반복 실행한다.123setInterval(function()&#123; alert('test')&#125;,1000) clearInterval() : 인터벌을 취소한다.인터벌을 취소하지 않으면 페이지가 떠 있는 동안은 계속 실행되므로 인터벌 취소는 timeout 취소보다 중요 1.7 시스템 대화상자alert() : Okconfirm() : Ok / cancelprompt() : input / Ok / cancel 대화상자의 외관은 css가 아니라 운영체제/브라우저 설정에 따라 다르다. 동기적이고 modal 성질이 있어서 대화상자가 떠 있을 때는 코드 실행이 중지된다. window.print() : 인쇄 대화상자 표시window.find(&#39;찾을 단어&#39;) : 찾기 대화상자 표시 참고링크 http://meetup.toast.com/posts/89","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Javascript","slug":"TIL-9997/Javascript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://feel5ny.github.io/tags/javascript/"}]},{"title":"componentDidUpdate","slug":"log_002","date":"2017-12-23T09:23:55.000Z","updated":"2017-12-31T06:44:41.000Z","comments":true,"path":"2017/12/23/log_002/","link":"","permalink":"http://feel5ny.github.io/2017/12/23/log_002/","excerpt":"","text":"componentDidUpdate(prevProps, prevState)&lt; Props Update &gt; props가 업데이트될 때의 과정입니다. 업데이트되기 전에 업데이트가 발생하였음을 감지하고, componentWillReceiveProps 메소드가 호출됩니다. 그 후 shouldComponentUpdate, componentWillUpdate가 차례대로 호출된 후, 업데이트가 완료(render)되면 componentDidUpdate가 됩니다.이 메소드들은 첫 번째 인자로 바뀔 props에 대한 정보를 가지고 있습니다. componentDidUpdate만 이미 업데이트되었기 때문에 바뀌기 이전의 props에 대한 정보를 가지고 있습니다. 1234567891011121314151617181920212223242526componentDidUpdate(prevProps, prevState) &#123; // 이전 props, state에 대한 정보 if (prevProps.todos.length !== this.props.todos.length) &#123; // 이전 todo리스트의 길이가 달라지면(추가,삭제) 상태변화 this.setState(&#123; dataSource: this.state.ds.cloneWithRowsAndSections( _.groupBy(this.props.todos, 'createdAt'), ), &#125;) &#125; if (prevState.isTodoList !== this.state.isTodoList) &#123; // 탭 이동 if (!this.state.isTodoList) &#123; // 완료된 탭일 때, this.setState(&#123; // 완료된 탭만 필터된 datasource dataSource: this.state.ds.cloneWithRowsAndSections( _.groupBy(_.filter(this.props.todos, (todo) =&gt; todo.isDone), 'createdAt'), ), &#125;) &#125; else &#123; this.setState(&#123; dataSource: this.state.ds.cloneWithRowsAndSections( _.groupBy(this.props.todos, 'createdAt'), ), &#125;) &#125; &#125; &#125; 참고링크https://www.zerocho.com/category/React/post/579b5ec26958781500ed9955","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"log","slug":"TIL-9997/log","permalink":"http://feel5ny.github.io/categories/TIL-9997/log/"}],"tags":[{"name":"react","slug":"react","permalink":"http://feel5ny.github.io/tags/react/"}]},{"title":"OSI 7 Layer & TCP/IP Model Layer","slug":"CS_05","date":"2017-12-22T09:23:55.000Z","updated":"2018-01-01T14:41:58.000Z","comments":true,"path":"2017/12/22/CS_05/","link":"","permalink":"http://feel5ny.github.io/2017/12/22/CS_05/","excerpt":"","text":"OSI 7 Layer &amp; TCP/IP Model LayerTCP / IP 는 60년대 후반 부터 장비와 장비간에 통신을 위해 미 국방성 ( DoD : Department of Defense ) 에서 개발하여 만들어진 프로토콜 입니다. TCP / IP 는 거의 모든 컴퓨터가 기본으로 제공하여 인터넷 표준 프로토콜입니다.TCP/IP 역사를 보면 1974년 전송제어프로토콜 ( TCP : Transmission Control Protocol ) 이 나오면서 1981년 IP ( Internet Protocol )이 RFC791 표준으로 1982년 TCP/IP 가 표준 프로토콜로 지정 되었습니다. 우선 TCP/IP 를 보면 Open Protocol 로써 특정 기업이나 개인이 아닌 오픈되어 누구나 적용하고 보안 할 수 있으며 4개의 계층적 구조를 가지며 각 계층마다 독립적인 기능을 가지면서 다른 계층에 영향을 미치지 않는 구조입니다. 또한 다수의 네트워크와 장비에 대해 논리적 주소를 사용하면서 네트워트 ID와 호스트 ID를 구분하여 네트워크에서 장비를 구별할수 있게 됩니다. TCP/IP 에는 계층적 구조를 가진다라고 했는데 그 구조를 보면 Application , Transport , Internet , Network, Interface 의 4계층을 대표하며 이를 좀더 세분화하여 계층화 한것이 OSI 7 Layer 입니다 3 Layer : Internet Layer인터넷 계층이라고 하며 이때 대표적인 녀석 IP, IGMP, ICMP, Routing Protocol, ARP IP ( Internet Protocol ) 로써 논리적 주소를 통해 최적 경로를 선택하여 데이터를 전송할수 있게 합니다. 이떄 Routed Protocol(IP, IPX, Apple Talk) 와 Routing Protocol ( RIP, IGRP, EIGRP, OSPF, IS-IS, BGP)를 제공 ICMP ( Internet Control Message Protocol ) 은 패킷 전송시 발생한 메세지와 에러 정보를 알려주게 됩니다. ARP ( Address Resolution Protocol) 은 논리적 주소 ( IP 와 같은 ) 을 통해 상대의 MAC Address 을 찾습니다. RARP ( Reverse ARP ) 는 ARP 반대 개념으로 물리적 주소를 통해 논리적 주소를 알려줍니다. 4 Layer : Transport Layer전송 계층이라 하며 데이터 전송시 전송 방식을 결정 합니다. 전송 방식 TCP, UDP TCP ( Transmission Control Protocol ) 이며 Connection-Oriented 패킷 전송을 제어하며 데이터 전송시 에러를 복수 할수 있으며 신뢰성을 가지게 됩니다. UDP ( User Datagram Protocol ) 로써 Connectionless 패킷 전송 제어하며 데이터 전송시 발생한 에러를 복수 할수는 없으나 오버헤드가 적어 속도가 빠른 편입니다. OSI 모델Open Systems Interconnection Reference Model 의 약자로써 국제 표준화 기구(ISO) 에서 개발한 모델로, 컴퓨터 네트워크 프로토콜 디자인과 통신을 계층별로 나누어 설명한 것입니다. 왜 복잡한 계층 구조를 알아야할까?편지를 친구에게 보낼때 단순한 과정을 보면 편지 쓰고 보내고 받아서 읽으면 그만인데, 편지지 위에 편지를 써서 편지 봉투에 담아 주소를 적고 우체국에 가서 일반인지, 등기인지 결정하여 우표를 붙여 우체국 아저씨는 적혀져있는 주소를 확인하여 친구네에게 편지를 배달하고 친구가 자기한테 온 편지가 맞다면 편지봉투를 열어 안에 있는 내용물, 즉 편지지를 읽게 되는 것입니다. 우리가 전송버튼을 통해 또는 통신을 통해 전달되는 메세지는 여러 절차를 걸쳐 전달한다는 것인데 이런 절차를 OSI 7 계층에서 다룬다고 생각하시면 된다. 데이터 흐름을 알 수 있다. Trouble Shooting(문제해결)하기가 쉽다. Standard 표준화이다. 참고링크 네트워크 쉽게 이해하기-전편","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"CS","slug":"TIL-9997/CS","permalink":"http://feel5ny.github.io/categories/TIL-9997/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"http://feel5ny.github.io/tags/CS/"},{"name":"network","slug":"network","permalink":"http://feel5ny.github.io/tags/network/"}]},{"title":"TCP / UDP","slug":"CS_04","date":"2017-12-21T09:23:55.000Z","updated":"2018-01-01T14:41:52.000Z","comments":true,"path":"2017/12/21/CS_04/","link":"","permalink":"http://feel5ny.github.io/2017/12/21/CS_04/","excerpt":"","text":"TCPTCP 소켓은 신뢰할 수 있는 프로토콜이다. 두 머신에서 데이터를 주고 받을 때, 파일에 쓰는 것처럼 한 쪽에서 쓰고 다른 쪽에서 읽을 수 있다.연결은 신뢰할 수 있고 순차적이다.즉, 한 쪽에서 보낸 데이터는 다른 쪽에서 안전하게 받을 수 있다.TCP 소켓도 데이터 스트림이다. 데이터를 잘라 패킷에 담아 네트워크로 보낸다. TCP가 단순할 수 있었던 기반에는 IP가 있다.IP에는 커넥션과 관련된 컨셉은 없다. 대신 패킷이 한 컴퓨터에서 다른 컴퓨터로 전달되는 것과 관련이 있다. 교실에서 손편지를 써서 건너건너 친구에게 전달하는 걸 떠올려보자.어떻게든 친구에게 편지가 도착하긴 하겠지만, 여러 사람을 거쳐 전달될 거다.편지가 친구에게 정확하게 도착할 거란 보장은 없다.단지, 잘 도착하기만 바라고 보낼 뿐이다.편지가 잘 도착했는지 알 수 있는 방법이 없다.물론, 실제론, 어떤 컴퓨터도 가장 빠르게 도달할 수 있는 방법을 알지 못하기 때문에 이보다 더 복잡하기도 하다.가끔은 패킷을 복사해 여러 경로로 보낼 수도 있다. 이에 따라 각각 도착시간이 달라질 수도 있다. UDP (user datagram protocol)다른 방법으로, 여러 컴퓨터를 거치지 않고 데이터를 주고 받을 컴퓨터끼리 직접 연결하는 건 어떨까?이 때 UDP를 사용할 수 있다.UDP는 “user datagram protocol”의 약자인데, TCP와 같이 IP 기반 위에 구현되어 있다.하지만, 다른 것과 달리 간단한 작업을 하는 아주 얇은 레이어만 올려져 있다. UDP를 사용해서, 목적지의 IP(예: 112.140.20.10) 주소와 포트(예:52432)로 메시지를 보낼 수 있고,컴퓨터를 거쳐 거쳐 목적지까지 도달할 수도 있고, 아님 도착하지 않을 수도 있다. 받는 곳에서는 포트(52432)를 열어두고, 패킷이 올 때까지 기다린다.이 때, 어떤 컴퓨터에서 온 것이든 모두 받아들인다. (커넥션이 없다는 것을 기억한다)받는 쪽에서는 패킷이 도착했을 때 이게 어느 IP의 어느 포트에서 왔고 크기가 얼마나 되는지 알 수 있다.그리곤 패킷 데이터를 읽을 수 있다. UDP는 안정적이지 않은 프로토콜이다.일반적으로는 1~5% 정도의 데이터를 잃는 경우가 많고, 심지어는 전혀 받지 못할 수도 있다. 패킷이 전송된 순서 또한 보장되지 않는다. UDP는 IP에서 많은 일을 하지 않는다.데이터가 전송될 수도 안될 수도 있지만, UDP가 보장해주는 건 데이터의 ‘양’이다.한 쪽에서 256바이트를 보냈으면, 받는 쪽에서도 무조건 256바이트를 받는다.처음 100바이트를 받을 수는 없다. 정리 TCP 커넥션 기반 안정성과 순서를 보장한다 패킷을 자동으로 쪼개준다 적당한 속도로 보내준다. (회선이 처리할 수 있을 만큼) 파일을 쓰는 것처럼 사용하기 쉽다 UDP 커넥션 기반이 아니다. 직접 구현해야 한다 안정적이지 않고 순서도 보장되지 않는다. 데이터를 잃을 수도, 중복될 수도 있다. 데이터가 크다면, 보낼 때 직접 패킷 단위로 잘라야 한다. 회선이 처리할 수 있을만큼 나눠서 보내야 한다. 패킷을 잃었을 경우, 필요하다면 다양한 방법으로 이를 찾아내서 다시 보내야 한다. 참고링크1.http://ohgyun.com/431","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"CS","slug":"TIL-9997/CS","permalink":"http://feel5ny.github.io/categories/TIL-9997/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"http://feel5ny.github.io/tags/CS/"},{"name":"network","slug":"network","permalink":"http://feel5ny.github.io/tags/network/"}]},{"title":"네트워크 basic","slug":"CS_03","date":"2017-12-20T09:23:55.000Z","updated":"2018-01-01T14:41:42.000Z","comments":true,"path":"2017/12/20/CS_03/","link":"","permalink":"http://feel5ny.github.io/2017/12/20/CS_03/","excerpt":"","text":"수업 전 미리 알아보기 목차 네트워크란? 인터넷이란? OSI 7 Layer &amp; TCP/IP Model Layer 네트워크란?두 대 이상의 컴퓨터 들을 연결하고 서로 통신(이야기) 할수 있는 것 네트워크의 종류 PAN (Personal Area Network) : 가장 작은 규모의 네트워크 LAN (Local Area Network) : 근거리 영역 네트워크 Man (Metropolitan Area Network) : 대도시 영역 네트워크 Wan (Wide Area Network) : 광대역 네트워크 (지역과 지역, 지방과 지방, 나라와 나라, 대륙과 대륙을 연결하는 네트워크) 1. LANLocal Area Network : 근거리 통신망LAN의 토폴로지에 따라 버스형, 링형, 스타형, 계층형, 메쉬형 등으로 구분할수 있다.*토폴로지란 (Topologies) : 네트워크를 구성하는 노드와 노드간에 연결 상태에 대한 배치를 의미한다. 1-1. Bus Topology (버스형)신뢰성과 확장성이 좋으며 모든 노드 들이 버스에 T 자형으로 연결 되어 상호 Point - to - Point 형태를 가지게 됩니다. 각 노드들의 연결은 어뎁터(Adapter)를 사용하며 양 끝 단에 Terminator를 두게 됩니다.각 노드의 고장은 전체 네트워크 부분에 영향을 미치는 점을 가지며 CSMA/CD 방식을 주로 사용, 케이블 사용량이 적기 때문에 투자 비용이 적게 드는 편입니다. *CSMA/CD 방식이란 호스트가 채널의 상태를 감지해 충돌을 피하는 매체접근방식 CSMA(Carrier Sense Multiple Access) 호스트가 전송하기 전에 매체의 전압을 점검하여 회선이 사용되지 않는 상태임을 확인하고 전송을 시작함 1-2. Ring Topology (링형)통신제어가 간단하고 신뢰성이 높으며 장거리 네트워크에서 사용 가능 합니다.링(Ring) 형태를 이루지만 노드간 통신은 Point - to - Point 를 가지며각 노드에서 신호 재생이 가능 하기 때문에 버스 형태와 달리 거리 제약이 적으며 잡음에도 강합니다. 1-3. Star Topology (스타형/성형)중앙 제어 방식으로 모든 기기가 Point - to - Point 방식으로 연결 되어 있으며 문제 해결이 쉽고 하나의 기기의 고장은 전체에 영향을 미치지 않지만 중앙 제어 장비가 고장이 나면 모든 시스템에 영향을 미치게 됩니다. 케이블 사용량이 많으며 비용 또한 큰 편입니다. 1-4. Mash Topology (메쉬형)네트워크 상의 모든 컴퓨터들이 연결되어진 형태로써 연결 된 기기나 노드가 고장나더라도 다른 경로를 통해 통신이 가능하며 어떠한 경우에도 네트워크가 동작한다는 장점을 가지게 됩니다.하지만, 네트워크에 연결된 기기의 수가 많을 경우 모든 기기와 연결 해야 하기 때문에 케이블 사용량이 많으며 구조 또한 복잡하여 네트워크 관리가 힘들어 진다는 단점을 가지고 있습니다. 2. 인터넷이란?International Network 의 합성어 로써 TCP/IP ( Transmission Control Protocol / Internet Protocol ) 을 기반으로 전세계의 네트워크를 하나로 연결 하여 각각 PC가 가지고 있는 자료나 정보를 주고 받을 수 있는 광역 네트워크를 인터넷 이라고 합니다. *다른 정의 LAN 과 LAN 을 연결 하는 WAN 이 서로 다른 WAN 들과 연결 되어 하나의 네트워크를 구성한 네크워크를 칭함. 전세계의 정보를 쉽게 얻을 수 있는 정보의 바다이며, 다양한 정보 자원을 자유로운 분산과 공유를 통해 상업적인 목적 목적이 아닌 무료로 사용 할수 있어야 한다. 모든 국가 들이 네트워크 통해 연결 되어 전세계를 하나의 공동체로 구성한 네트워크를 인터넷이라 한다. 2-1. Protocol사람과 사람이 통신할때 서로 이해할 수 있는 언어, 공용된 언어를 사용해 전세계 모든 사람과 대화 할수 있다라고 하면, 컴퓨터와 컴퓨터도 서로 이해 할 수 있는 언어, 공용된 언어를 사용 해야 한다는 것인데 이 것이 바로 프로토콜(Protocol) 입니다.어떤 시스템이 다른 시스템과 통신을 원활하게 수용하도록 해주는 통신 규약, 약속 프로토콜의 기능으로써 세분화와 재합성 캡슐화 연결제어 오류제어 흐름제어 동기화 순서 결정 주소 설정 다중화 전송 서비스 순서 결정세분화와 재합성 프로토콜은 특성에 따라 여러가지 형태로 분류할수 있으며 각각 형태를 구분 지어 본다면 직접/간접 프로토콜 단일체/구조적 프로토콜 대칭/비대칭 프로토콜 네트워크 용어에서 나오는 P 는 Protocol 의 약자가 대부분이며 대표적으로 인터넷을 할 때 사용되는 프로토콜은 TCP/IP 가 있습니다.TCP/IP 는 Transmission Control Protocol / Internet Protocol 의 약자로써 컴퓨터와 컴퓨터가 통신 회선 등으로 연결 하기 위한 통신 규약입니다.그외 HTTP, ARP, ICMP, SNMP, SMTP, POP, FTP, TFTP, DHCP 등이 프로토콜의 종류입니다. 참고링크 http://mindnet.tistory.com/entry/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-1%ED%8E%B8-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%ACNetwork-%EB%9E%80?category=702276 네트워크 쉽게 이해하기-전편 프로토콜 기능","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"CS","slug":"TIL-9997/CS","permalink":"http://feel5ny.github.io/categories/TIL-9997/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"http://feel5ny.github.io/tags/CS/"},{"name":"network","slug":"network","permalink":"http://feel5ny.github.io/tags/network/"}]},{"title":"Database basic","slug":"DB_01","date":"2017-12-19T09:23:55.000Z","updated":"2017-12-20T04:40:15.000Z","comments":true,"path":"2017/12/19/DB_01/","link":"","permalink":"http://feel5ny.github.io/2017/12/19/DB_01/","excerpt":"","text":"목차 RDBMS DDL, DML Aggregate, Group Function SQL ERD Table 생성 1. RDBMSRelational Database Management System F.커드씨가 도입한 관계형 모델을 기반으로 데이터베이스를 관리하는 방식이다. RDBMS의 종류로는 Oracle, Mysql 등이 널리 사용되고있다. Relational을 표현하기 위하여 ERD(Entity-Relationship Diagram)으로 테이블을 표현한다. 2. DDL, DMLDDL (Data Definition Language)Table 자체를 구성하는대 사용한다. 1. Create : db 스키마 객체를 생성123456CREATE TABLE book ( bookno NUMBER(5), /* 데이터타입을 설정해 주는 것이다. 숫자 5자리까지 */ title VARCHAR2(50), /* 문자열 50자까지 설정 */ author VARCHAR2(10), /* 문자열 10자리까지 설정 */ pubdate DATE /* 날짜 데이터타입 */) 2. Data Type VARCHAR2(size) : 가변길이 문자열 (최대 4000byte) CHAR(size) : 고정길이 문자열 (최대 2000byte) NUMBER(p,s) : 가변길이 숫자. 전체 p자리 중 소수점 이하 s자리 p : 38 s : -84 ~ 127 21 byte DATE : 고정길이 날짜 + 시간 (7byte) 3. Alter : 변경 테이블 칼럼 추가ALTER Table Student ADD (name VARCHAR(50)); 테이블 칼럼 수정ALTER Table Student MODIFY (name VARCHAR(50)); 테이블 칼럼 삭제ALTER Table Student DROP name; 4. Drop : db 스키마 제거 db가 날라갈 수 있는 위험한 명령어! DROP Table Student 5. Truncate: 스키마는 유지하면서 자료만 버림 TRUNCATE Table Student 6. Rename : 이름 변경 RENAME Student TO employee 7. Comment : 테이블에 설명 추가 8. Constraint : 테이블에 제약조건 생성Table의 특정규약을 설정한다 즉 제약조건이다. NOT NULL UNIQUE CHECK PRIMARY KEY =&gt; PRIMARY KEY는 NOT NULL + UNIQUE하다. PK는 한테이블당 한개만 존재 인덱스 자동생성 여러 컬럼을 하나의 PK로 설정 가능12345CREATE TABLE book ( ssn1 NUMBER(6), ssn2 NUMBER(7), PRIMARY KEY (ssn1, ssn2)) FOREIGN KEY =&gt; 주의 PRIMARY KEY에게만 FOREIGN KEY 가능 ON DELETE SET NULL : 해당하는 FK를 NULL로 바꾼다. ON DELETE CASCADE : 해당하는 FK를 가진 참조행도 삭제 DML (Data Manipulation Language)Insert, Delete, Select,Update Table 내부의 data를 바꿀때 사용한다. 1. Insert테이블 Data 추가INSERT INTO 테이블이름 (col1, col2) VALUES(“val1”, “val2”); 2. Delete테이블 Data 추가DELETE FROM 테이블이름 Where id = 1; 3. Update테이블 Data 추가UPDATE 테이블이름 SET 변경내용 Where id = 1; 3. Aggregate, Group FunctionAggregate Function1. AVG평균 구하기SELECT AVG(salary) FROM Student; Group BySELECT 부서명, AVG(salary) FROM 직장; =&gt; 오류 발생=&gt; SELECT 부서명, AVG(salary) FROM 직장 GROUP BY 부서명 Having 2. SUM12SELECT SUM(col_name) FROM table_name;SELECT SUM(salary) FROM Student; COUNT MAX MIN 4. SQLSQL(Structured Query Language): 구조화된 질의 언어 가장 기본적인 문법 Select(Table의 원하는 col을 선택하다) From (어떠한 Table에서) Where (특정 조건) Student 테이블을 전부다 가져오고싶다.Select*From Student; =&gt; *는 전부를 나타낸다. Student 테이블중에서 name(col)을 가져오고싶다.Select name From Student; Student 테이블중에서 name(col)이 Joy 가져오고싶다.Select name From Student Where name=Joy; Join둘 이상의 테이블을 합쳐서 하나의 테이블로 만든다. Cross Join (Cartasian Product) 모든 가능한 쌍이 나타난다. Inner Join 조건을 만족하는 tuple만 나타난다.12SELECT name, jobname FROM Student Inner Join JobON Student.id = Job.student_id; Outer Join 조건을 만족하지 않는 tuple도 나타난다. =&gt; null로 표기Left Outer Join =&gt; join table의 왼쪽 table 값중 null인 것도 가져온다.Right Outer Join =&gt; join table의 오른쪽 table 값중 null인 것도 가져온다.Full Outer Join =&gt; 양쪽 table 값중 null인 것도 가져온다. 12SELECT name, jobname FROM Student Left Outer Join Job ON Student.id = Job.student_id; 12SELECT name, jobname FROM Student Right Outer Join JobON Student.id = Job.student_id; 12SELECT name, jobname FROM Student Full Outer Join JobON Student.id = Job.student_id; Natural Join 조건을 만족하는 tuple들의 동일한 col이 합쳐져서 나타난다. Self Join 자기 자신과 Join 5. ERDEntity-Relationship DiagrammySql에서 자동으로 그려준다. auto increment","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Database","slug":"TIL-9997/Database","permalink":"http://feel5ny.github.io/categories/TIL-9997/Database/"}],"tags":[{"name":"database","slug":"database","permalink":"http://feel5ny.github.io/tags/database/"}]},{"title":"2/ React data 처리","slug":"React_03","date":"2017-12-17T16:21:19.000Z","updated":"2017-12-17T17:09:42.000Z","comments":true,"path":"2017/12/18/React_03/","link":"","permalink":"http://feel5ny.github.io/2017/12/18/React_03/","excerpt":"","text":"스터디 공유용 자료입니다. 목차 fetch API 실습 1. fatch apiaxios와 비슷한 promise 기반의 HTTP REQUEST API참고 1234567fetch(url).then(() =&gt; &#123; // 응답 data를 받고 싶은 곳.&#125;).catch(() =&gt; &#123; // 에러를 받고 싶은 곳.&#125;) fatch api의 단점을 경험한 포스팅 2. 실습api주소 https://api.github.com/users 시맨틱 셋팅 Lifecycle Hook 중 한 곳에 get method 셋팅 받은 데이터 저장 로딩처리 codepen view 3. LodashA modern JavaScript utility library delivering modularity, performance &amp; extras. 주로 서버에서 오는 데이터 구조가 렌더해야할 구조와 다를 때 사용합니다.https://lodash.com/docs/4.17.4","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"React","slug":"TIL-9997/React","permalink":"http://feel5ny.github.io/categories/TIL-9997/React/"}],"tags":[{"name":"react","slug":"react","permalink":"http://feel5ny.github.io/tags/react/"}]},{"title":"1/ React router","slug":"React_02","date":"2017-12-13T00:21:19.000Z","updated":"2017-12-17T15:46:29.000Z","comments":true,"path":"2017/12/13/React_02/","link":"","permalink":"http://feel5ny.github.io/2017/12/13/React_02/","excerpt":"","text":"스터디 공유용 자료입니다.http://slides.com/woongjae/react-router#/ 참고하였습니다. 리액트는 SPA위한 자바스크립트 라이브러리이기 때문에, 클라이언트 사이드 렌더링과 클라이언트 사이드 라우팅이 필요합니다. react-router는 하나의 라이브러리이다. + 다른 router라이브러리도 있고, 직접 만들 수 있다. 페이스북에서 공식적으로 나온 라이브러리는 아니지만, 많은 사람들이 쓰고 있는 라우터 라이브러리이다. react router v3는 다르다고 봐야한다. react-router와 react-router-dom이 나눠져 있는 이유는 리액트 네이티브에서도 사용하기 위해서이다. 리액트 라우터를 사용하는 이유 여러 페이지들이 존재하는 서비스를 만들때 필요. url 주소나 특정상태에 따라서 view를 나누기 위해서 사용한다. 라우터의 여러 API자주 사용하는 API를 봅시다. 가장 기본셋팅 BrowserRouter Link Route 셋팅하기1create-react-app 프로젝트이름 --scripts-version=react-scripts-ts react-router-dom을 설치하자.1yarn add react-router-dom type definition 추가.1yarn add @types/react-router-dom css 프레임워크를 붙여봅시다.https://react.semantic-ui.com/12yarn add semantic-ui-reactyarn add semantic-ui-css css import는 최상위 컴포넌트에서 css는 전역으로 설정됩니다. import 허락1\"allowSyntheticDefaultImports\": true 1. &lt;BrowserRouter&gt;1import &#123; BrowserRouter as Router, Route, Link&#125; from 'react-router-dom' 브라우저 히스토리를 이용해서 구현할 라우터 하나의 자식만을 가질 수 있기 때문에, div로 감싸야한다. 아니면 자식이 여러명이라는 에러가 뜸. 다른 라우팅 컴포넌트(Route, Link)를 사용하기 위해서 기본적으로 감싸줘야 함 window.history.pushState()로 동작하는 라우터 (리로드 없이 주소만 갱신하는 함수) 이와 비슷하게 HashRouter는 Hash(#/)으로 동작하는 Router임 2. &lt;Link&gt;HTML의 a태그와 유사하다. 로 렌더링되고 사용법도 비슷하지만, 실제 동작은 와 다르게 페이지 전체를 리로드하지 않고 필요한 부분만 리로드하게 됨1&lt;Link to=\"/\" /&gt; 3. &lt;Route&gt; path 속성으로 경로지정 render, component, children 속성으로 렌더링 실제 경로가 지정한 경로와 완벽히 매치되지 않더라도, 경로를 포함만 해도 렌더링 정확히 매칭될 때만 렌더하고 싶은 경우 exact 옵션 사용 컴포넌트에 match, location, history라는 객체를 넘김 1exact=&#123;true&#125; &lt;Route&gt; props 알아보기12345const Post = (props: RouteComponentProps&lt;&#123; postId: string &#125;&gt;) =&gt; &#123; return ( &lt;h3&gt;Post: &#123;props.match.params.postId&#125;&lt;/h3&gt; );&#125;; match 객체의 path에 정의한 것과 매치된 정보를 담고있음 location 객체브라우저의 window.location 객체와 비슷함URL을 다루기 쉽게 쪼개서 가지고 있음 history 객체브라우저의 window.history 객체와 비슷함주소를 임의로 변경하거나 되돌아갈 수 있음주소를 변경하더라도 SPA 동작방식에 맞게 페이지 일부만 리로드 4. &lt;Redirect&gt; 말그대로 Redirect를 하는 컴포넌트 마운트 되면 지정한 경로로 이동함 기본적으로 replace 방식 location 객체를 통해 리다이렉트 할 수도 있음1234567891011121314if (!window.localStorage.token) &#123; return &lt;Redirect to=\"/login\" /&gt; &#125; return ( &lt;div&gt; &lt;Switch&gt; &lt;Route exact path=\"/\" component=&#123;HomePage&#125; /&gt; ... &lt;/Switch&gt; &lt;/div&gt; 5. withRouterwithRouter HOC를 통해 히스토리 객체의 속성과 의 match에 액세스 할 수 있습니다. withRouter는 render props : {match, location, history}와 같은 props로써 ㅇ라우트가 변경할 때마다 해당 구성 요소를 다시 렌더링합니다. 6. Switch &lt;Route&gt;를 감싸서 사용 JavaScript의 switch 문과 비슷 중 매치되는 첫번째만 렌더 에 path를 지정하지 않은 경우, 매치되는 컴포넌트가 없을 때 렌더 따라서 순서에 유의해야함12345678910111213&lt;Switch&gt; &#123;/* intro페이지 &amp; 네비게이션 없는 페이지 */&#125; &lt;Route path=\"/login\" component=&#123;LoginPage&#125; /&gt;w &#123;/* 서비스 페이지 (로그인 이후 접근 가능) &amp; 네비게이션 있는 페이지*/&#125; &lt;Route path=\"/share\" component=&#123;SharePage&#125; /&gt; &lt;Route path=\"/\" component=&#123;App&#125; /&gt;&lt;/Switch&gt; 1234567891011121314151617181920212223242526272829303132&lt;Switch&gt; &lt;Route exact path=\"/\" component=&#123;HomePage&#125; /&gt; &lt;Route path=\"/diary\" component=&#123;DiaryPage&#125; /&gt; &lt;Route path=\"/report\" component=&#123;ReportPage&#125; /&gt; &lt;Route path=\"/weight\" component=&#123;WeightPage&#125; /&gt; &lt;Route path=\"/search/:sc\" component=&#123;SearchResultPage&#125; /&gt; &lt;Route path=\"/search\" component=&#123;SearchPage&#125; /&gt; &lt;Route path=\"/recipe/:id\" component=&#123;RecipePage&#125; /&gt; &lt;Route component=&#123;NotFoundPage&#125; /&gt;&lt;/Switch&gt; 7. NavLink 조금 특별한 to에 지정한 path와 URL이 매칭되는 경우, 특별한 스타일, 클래스를 적용할 수 있음 쉬어가기 모달을 달아보면서 state개념잡기.","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"React","slug":"TIL-9997/React","permalink":"http://feel5ny.github.io/categories/TIL-9997/React/"}],"tags":[{"name":"react","slug":"react","permalink":"http://feel5ny.github.io/tags/react/"}]},{"title":"소팅 알고리즘","slug":"CS_02","date":"2017-12-10T09:23:55.000Z","updated":"2017-12-13T18:50:10.000Z","comments":true,"path":"2017/12/10/CS_02/","link":"","permalink":"http://feel5ny.github.io/2017/12/10/CS_02/","excerpt":"","text":"아직 정리 덜 됨. 정렬할 데이터가 특수한 형태가 아니라면 standard 정렬 알고리즘을 쓰는것이 가장 좋지만, 정렬알고리즘에도 여러가지가 있고 각각의 정렬방법마다 빅오 노테이션이 다르다. 목차 버블 정렬 bubble sort 선택 정렬 Selection sort 삽입 정렬 Insertion sort 병합 정렬 Merge sort 퀵 정렬 Quick sort 1. 버블정렬(Bubble sort)버블정렬은 가장 쉬운 정렬 알고리즘이지만 시간복잡도가 좋은 퍼포먼스를 내지 못해서 실제로는 잘 사용되지 않는다.시간복잡도는 O(n²)이며 공간복잡도는 하나의 배열만 사용하여 정렬을 진행하기 때문에 O(n)이다.자신과 다음의 요소를 비교하여 인덱스를 정한다. 2. 선택정렬(Selection sort)선택정렬은 시간복잡도가 O(n²)으로 버블정렬과 정렬하는 알고리즘이 버블정렬과 유사하다.한번 순회를 하면서 가장 큰 수를 찾아서 배열의 마지막 위치와 교환한다. 3. 삽입정렬(Insertion Sort)삽입정렬은 1부터 n까지 Index를 설정하여 현재위치보다 아래쪽을 순회하며 현재위치의 값을 현재위치보다 아래쪽으로 순회하며 알맞은 위치에 넣어주는 정렬알고리즘이다.삽입정렬은 이미 정렬이 되어있다면 O(n)의 시간복잡도를 가지게된다. 정렬이 되어있는 경우라면 한번 순회하며 체크만 하기 때문이며 Big-O 시간복잡도는 O(n²)이다. 4.병합정렬 (Merge sort) 재귀의 이해가 있어야한다. 병합정렬은 정렬할 리스트를 반으로 쪼개나가며 좌측과 우측 리스트를 계속하여 분할해 나간 후 각 리스트내에서 정렬 후 병합(merge) 정렬 후 병합하는 과정을 통해 정렬하는 알고리즘이다.병합정렬은 가장 많이 쓰이는 정렬 알고리즘 중 하나 이며 시간복잡도는 최소 O(nlogn)을 보장하게 된다. Divide Conquer Combine 123456789101112131415161718192021222324252627282930313233343536373839// 4. 합병정렬 // 퀵정렬과 마찬가지로 분할 정복 알고리즘중 하나이다./*console.log(MergeSort([234, 45634, 23, 41, 2345, 34, 23, 1, 4, 3, 6, 234, 4536, 55, 234, 23, 456, 45, 234, 1, 856, 9, 67, 56, 7]))*/function MergeSort(arr) &#123; const len = arr.length; if (len == 1) &#123; return arr; &#125; const middle = Math.floor(len / 2); const left = arr.slice(0, middle); const right = arr.slice(middle, len); function merge(left, right) &#123; const result = []; while (left.length &amp;&amp; right.length) &#123; if (left[0] &lt;= right[0]) &#123; result.push(left.shift()); &#125; else &#123; result.push(right.shift()); &#125; &#125; while (left.length) &#123; result.push(left.shift()); &#125; while (right.length) &#123; result.push(right.shift()); &#125; return result; &#125; return merge(MergeSort(left), MergeSort(right));&#125; Divide &amp; Conquer전략 주어진 문제를 작은 문제들로 분할하고 작은 문제에서 해를 구한 후 구한 해를 이용해서 주어진 문제의 해를 구하는 방법 특징 주어진 문제를 동일한 종류의 작은 문제로 분할 문제 분할 과정이 재귀적으로 처리됨 Fractal같은 문제라고 생각하면 된다. 구성 Divide문제를 크기가 작은 동일한 종류의 sub problems로 분할 Conquer재귀적으로 subproblems 시간복잡도 구성요소 문제를 분할하는 시간 분할된 문제 수 * 분할된 문제의 시간 복잡도 분할된 문제의 결과를 combine하는 시간 sequence : 연속된 데이터의 집단 MERGE-SORT는 combine하는 함수이다. 배열 요소가 홀수일 경우 어떻게 반을 나눌까.?크게 고려하지 않아도 되지만, 타입캐스팅 방법처럼 계산 후 앞부분이 하나를 더 가져갈지를 판단한다. 타입캐스팅 타입을 바꿔주는. 5. 퀵정렬(Quick sort)퀵정렬은 real-world 데이터에서 빠르다고 알려져 있어 가장 많이 쓰는 정렬알고리즘이다.퀵정렬은 pivot을 선정하여 pivot을 기준으로 좌측과 우측으로 pivot보다 작은값은 왼쪽 pivot보다 큰값은 오른쪽으로 재배치를 하고 계속하여 분할하여 정렬하는 알고리즘이다.최악의 경우에는 O(n²)의 비교를 수행하지만 일반적으로 O(nlogn)의 시간복잡도를 가진다. 읽어볼 글 quick sort는 항상 빠를까? + quick sort에서 nlogn은 어떤 원리에서 나온 걸까? + 참고링크 https://medium.com/@fiv3star/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-sorting-algorithm-%EC%A0%95%EB%A6%AC-8ca307269dc7 http://asfirstalways.tistory.com/338","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"CS","slug":"TIL-9997/CS","permalink":"http://feel5ny.github.io/categories/TIL-9997/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"http://feel5ny.github.io/tags/CS/"}]},{"title":"클린코드를 위한 리팩토링","slug":"Refactoring","date":"2017-12-09T11:12:34.000Z","updated":"2017-12-12T19:44:51.000Z","comments":true,"path":"2017/12/09/Refactoring/","link":"","permalink":"http://feel5ny.github.io/2017/12/09/Refactoring/","excerpt":"","text":"코드의 구린내 +구린게 있으면 그 부분을 바로 잡으세요.리팩토링을 어떨 때 시작하고 어떨 때 그만둬야 할지 판단하는 일은 리팩토링 기법을 적용하는 방법만큼 중요하다. 1. 중복코드구린내의 제왕 중복코드.똑같은 코드 구조가 두 군데 이상 있을 때는 그 부분을 하나로 통일하면 프로그램이 개선한 클래스의 두 메서드 안에 같은 코드가 들어있는경우 -&gt; 메서드 추출 기법을 적용해서 겹치는 코드를 빼내어 별도의 메서드로 만들고 그 메서 드를 두 곳에서 호출수퍼클래스의 두 하위 클래스에 같은 코드가 들어 있는 경우 -&gt; 메서드 추출 기법을 적용해서 중복을 없앤 후 메서드 상향 기법을 적용하면 된다.위 상황에 코드가 똑같지 않고 비슷하다면 메서드 추출기법을 적용해서 같은 부분과 다른 부분을 분리해야 한다. 그런 다음 경우에 따라 템플릿 메서드 형성 기법을 적용해야 할 수도있다.두 메서드가 알고리즘만 다르고 기능이 같다면 개발자는 그 두 알고리즘 중에서 더 간단한 것을 택해서 알고리즘 전환 기법을 적용하면 된다.중복 코드가 메서드 가운데에 있다면 주변 메서드 추출을 적용하면된다.서로 상관 없는 두 클래스 안에 중복코드가 있을 때 -&gt; 한 클래스 안의 중복 코드를 클래스 추출 이나 모듈 추출 을 적용해 제 3의 클래스나 모듈로 떼어낸 후 그것을 다른 클래스에서 호출하는 방법이 있다. 또는 중복 코드를 빼서 메서드로 만든 후 그 메서드를 두 클래스 중 하나에 넣고 다른클래스에서 그 메서드를 호출하거나 코드를 빼내어 만든 메서드를 제 3의 클래스에 넣고 그걸 두 클래스에서 호출하는 방법이 있다. 2. 장황한 메서드최적의 상태로 장수하는 객체 프로그램을 보면 공통적으로 메서드 길이가 짧다.짧은 메서드를 이해하기 쉽게하려면 메서드 명을 잘 정해야한다. 메섣의 기능을 한눈에 알 수 있는 메서드명을 사용하면 그 메서드안의 코드를 분석하지 않아도된다.메서드 호출이 원래 코드보다 길어지는 한이 있어도, 메서드 명은 그 코드의 의도를 잘 반영하는 것으로 정해야한다.메서드명은 기능 수행 방식이 아니라 목적(즉, 기능자체)을 나타내는 이름으로 정한다.메서드 추출기법을 적용한다.코드를 여러 덩어리로 분리하려면?주석을 찾는 것 -&gt; 기능 설명이 주석으로 처리된 코드 구간을 메서드로 만들면 된다. (긴 메서드에서 기능 설명이 주석으로 되어있는 부분)조건문과 루프도 역시 메서드로 추출 3. 방대한 클래스기능이 지나치게 많은 클래스에는 보통 엄청난 수의 인스턴스 변수가 들어있다. 클래스에 인스턴스 변수가 너무 많으면 중복 코드가 반드시 존재하게 마련 4. 과다한 매개변수매개변수 세트가 길면 서로 일관성이 없어지거나 사용이 불편, 더많은 데이터가 필요해질 때마다 계속 수정해야 한다즉 매개변수는 객체를 넘기도록 한다. 객체를 넘김으로써 위 문제들이 해결 5. 수정의 산발수정의 산발은 한 클래스가 다양한 원인 때문에 다양한 방식으로 자주 수정될 때 일어난다.하나의 클래스를 여러 개의 변형 객체로 분리하는것이 좋다. 그러면 각 객체는 한 종류의 수정에 의해서만 변경된다. 6. 기능의 산재하나의 수정으로 여러 클래스가 바뀌게 되는 문제수정할 부분들을 전부 하나의 클래스 안에 넣어줘야 한다. 7 .잘못된 소속메서드가 자신이 속해있는 클래스보다 다른 클래스에서 더 호출이 이루어질 경우 해당 메서드를 더 접근이 많은 클래스로 옮겨줘야 한다. 8. 데이터 뭉치두 클래스에 들어 있는 인스턴스 변수나 여러 메서드 시그너처(메서드명과 인수들 목록을 메서드 시그너처 라고 부릅니다.)에 들어있는 매개변수 처럼, 동일한 3~4개의 데이터 항목이 여러 위치에 몰려있는 경우이렇게 몰려있는 데이터 뭉치는 객체로 만들어야한다. 9. 강박적 기본 타입 사용관련된 데이터를 묶지 못하고 흩어놓게 되면, 각각의 데이터에 대한 정보를 외부에 공개해야한다.함수를 만들때도 각각의 데이터를 파라미터로 넘겨주어야 하기에 파라미터의 갯수가 늘어나게 된다.기본형만 사용할 바에는 객체를 만들어서(구조화)해서 사용해라이때는 각각의 관련된 데이터를 하나의 구조체로 묶어 주어야한다. 10. switch 문switch 문의 단점은 반드시 중복이 생긴다는 점이다. 동일한 switch가 다른 곳에서 또 쓰일가능성이 크다switch 문에 새 코드행을 추가하려면 그렇게 여기저기에 존재하는 switch 문을 전부 찾아서 수정해야한다.이 문제를 해결할수 있는 방법은 다형성 즉 재정의를 이용하는 것이다.switch 문을 메서드 추출로 빼낸 후 메서드 이동을 실시해서 그 메서드를 재정의해야 할 클래스에 옮겨 넣으면 된다. 11. 평행 상속 계층한 클래스의 하위클래스를 만들 때마다 매번 다른 클래스의 하위 클래스도 만들어야 한다.중복 코드 부분을 제거하려면 보통은 한 상속 계층의 인스턴스가 다른 상속계층의 인스턴스를 참조하게 만들면 된다. 12. 직무유기 클래스하나의 클래스를 작성할 때마다 유지관리와 이해하기 위한 비용이 추가된다.비용만큼의 기능을 수행하지 못하는 비효율적인 클래스는 삭제해야한다. 13. 막연한 범용 코드메서드나 클래스가 오직 테스트 케이스에만 사용된다면 구린내를 풍기는 유력한 용의자로 막연한 범용코드를 지목할 수 있다. 이러한 메서드나 클래스를 발견하면 그것과 그것을 실행하는 테스트 케이스는 삭제하자. 14. 임시 필드객체 안에 인스턴스 변수가 특정 상황에서만 할당되는 경우가 간혹 있다.이러한 떠돌이 해당 변수들을 사용하는 class를 생성한다 15. 메시지 체인메시지 체인?클라이언트가 한 객체에 제 2의 객체를 요청하면, 제 2의 객체가 제 3의 객체를 요청하고 …. 연쇄적으로 요청이 발생하는 문제점 16. 과잉 중개 메서드어떤 클래스의 인터페이스를 보니 안의 절반도 넘는 메서드가 기능을 다른 클래스에 위임하고 있을경우 17. 지나친 관여클래스 끼리 관계가 지나치게 밀접한 나머지 서로의 private를 알아내느라 과도한 시간낭비서로 지나지게 친밀한 클래스는 메서드 이동과 필드 이동으로 떼어 낸다. 18. 인터페이스가 다른 대용 클래스기능은 같은데 시그너처가 다른 메서드에는 메서드명 변경을 실시해야 한다. 19. 미흡한 라이브러리 클래스라이브러리 클래스에 넣어야 할 메서드가 두 개 뿐이라면 외래 클래스에 메서드 추가 기법을, 부가 기능이 많을 때는 국소적 상속확장 클래스 사용 기 법을 사용 20. 데이터 클래스데이터 클래스(domain)는 필드 캡슐화기법을 실시해야한다변경되지 않아야 하는 필드에는 쓰기 메서드 제거를 적용 21. 방치된 상속물하위클래스가 부모클래스에게 상속받은 메서드나 데이터가 하위클래스에서 더이상 쓰이지 않거나 필요 없게 되었을때.위 문제의 원인은 잘못된 계층구조새 대등 클래스를 작서하고 메서드 하향과 필드하향을 실시해서 사용되지 않는 모든 메서드를 그 형제 클래스에 몰아 넣는다. 22. 불필요한 주석주석을 넣어야겠다는 생각이 들 땐 먼저 코드를 리팩토링해서 주석을 없앨 수 있게 만들어보자.주석은 무슨 작업을 해야 좋을지 모를 때만 넣는 것이 좋다.어떤 코드를 넣은 이유를 메모해 놓을 경우에도 주석을 넣는 것이 적절하다. 레거시 코드를 받았을 때 좋은 코드로 바꾸는 방법 + 레거시 코드의 양이 방대할 경우 부분별로 리팩토링을 진행해야 한다. 이 때, 유의할 점은 정확한 목표를 가져야 한다는 것이다. 대부분의 개발자는 성능 개선에만 초점을 두는데, 이는 또 다른 레거시 코드를 만들어 낼 수 있다. 레거시 코드를 변경하는 목적은 변경 자체가 아니라 변경시키는 행위이다. 따라서 각각의 작업 끝에는 항상 테스트 코드가 있어야 한다. 이 점을 항상 유념하며 리팩토링을 진행해야 한다. 1. 변경지점 식별변경시킬 지점을 알기 위해서는 대상 프로그램의 전체적인 아키텍처를 보아야한다. 노트/스케치나 스크래치 리팩토링 기법과 같은 방법을 통해 변경해야 할 지점을 식별하자. 2. 테스트 지점 찾기리팩토링이 필요한 부분을 찾았다면 이제 어느 부분에 테스트 루틴을 작성할 것인지 결정해야 한다. 이를 위한 가장 간단한 판단 기준은 모든 메소드에 대해 테스트를 수행하는 것이다. 또한, 각 메소드들이 의존관계를 이루는 묶음끼리도 테스트가 필요한데, 이를 위해 의존관계를 최소화시키는 것이 중요하다. 3. 의존관계 깨기코드에서의 의존관계는 다른 클래스나 인터페이스에 방향성을 가지고 의지하는 코드를 의미한다. 예를 들어 A 클래스에서 B 클래스에 있는 메서드를 호출하는 상황을 가정해 보자. 이때 A 클래스가 변경되었다고 해서 B 클래스까지 변경될 필요는 없다. 이를 A 클래스가 B 클래스에 의존하고 있다고 말한다. 이러한 의존관계는 상황별 &amp; 종류별로 매우 다양하며 이를 해소하기 위한 방법도 각양각색이다. 기본적으로 의존관계란 코드의 유지 보수성을 떨어트리기 때문에, 의존관계를 최소화시키는 것이 중요하다. 각 상황별 의존관계 해소 방법을 알고 싶다면, 책으로 출간된 마이클 패더스의 Working Effectively with Legacy Code를 읽어보기 바란다. 4. 테스트 루틴 작성테스트 루틴을 작성할 때에는 코드의 동작을 이해하는 데 필요하다고 느끼는 만큼의 사례를 작성해야 한다. 기능을 추출하거나 이동시키려 한다면 사례별로 동작들의 존재 여부와 연결을 검증할 수 있는 테스트 루틴을 작성한다. 이동시키고자 하는 코드를 수행하는지와 그 코드가 적절히 연결되었는지를 검증한 후에 변환을 수행하도록 한다. 5. 변경 후 리팩토링전체적으로 볼 때 리팩토링은 덩치가 큰 메소드를 작은 단위로 쪼개는 것이다. 이렇게 된다면 코드를 좀 더 이해하기 쉽게 작성할 수 있다. 또한, 재사용성을 높일 수 있으며 시스템 안의 다른 영역들에 있는 로직과의 중복을 제거할 수 있다.","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"TDD","slug":"TIL-9997/TDD","permalink":"http://feel5ny.github.io/categories/TIL-9997/TDD/"}],"tags":[{"name":"TDD","slug":"TDD","permalink":"http://feel5ny.github.io/tags/TDD/"},{"name":"refactoring","slug":"refactoring","permalink":"http://feel5ny.github.io/tags/refactoring/"}]},{"title":"알고리즘과 시간 복잡도","slug":"CS_01","date":"2017-12-09T09:23:55.000Z","updated":"2017-12-13T18:49:13.000Z","comments":true,"path":"2017/12/09/CS_01/","link":"","permalink":"http://feel5ny.github.io/2017/12/09/CS_01/","excerpt":"","text":"목차 알고리즘 시간 복잡도 Big O 표기법 Asymptotic Complexity 점근적 분석 재귀함수 합 구하기 피보나치 수열 좋은 알고리즘의 필요 요건과, 알고리즘의 실행 속도를 평가하는 방법을 알아본다. 1. 알고리즘우리는 finite amount of space and time에 집중해야한다.알고리즘은 유한한 자원을 가진 환경에서 주어진 문제를 푸는 동작의 모임이다.적은 시간과 적은 자원(공간)을 이용해 문제를 해결하는 알고리즘이 좋은 알고리즘이다. + 웹 브라우저에서 사용할 수 있는 메모리는 일반적인 데스크톱 애플리케이션의 가용 메모리에 비해 매우 적다. 적은 메모리만 할당받는 주된 이유는 웹 페이지에서 실행하는 자바스크립트가 시스템 메모리를 전부 사용해서 운영체제를 다운시키는 일을 방지하기 위함이다.메모리 제한은 변수 할당 뿐만 아니라 호출스택, 스레드에서 실행할 수 있는 문장수에도 영향을 미친다.즉! 가능한 최소한의 메모리만 사용해야 페이지의 성능을 올릴 수 있다. 예제_Facebook 친구 2명이 가진 공통 친구 리스트를 만드는 가장 빠르 방법은?n명의 페이스북 친구를 가진 A와 m명의 페이스북 친구를 가진 B의 공통 친구의 수는 단순하게 생각한다면 n*m 800명, 400명이라면 320,000번의 비교로 찾을 수 있다. 시간복잡도를 배우고, 연산횟수를 줄이는 방법을 생각해보자. 2. 시간복잡도 +시간복잡도란 알고리즘이 문제를 해결하기 위한 시간(연산)의 횟수를 말한다.computational complexity that measures or estimates the timetaken for running an algorithm.Time complexity is commonly estimated by counting the number of elementary operations performed by the algorithm, supposing that an elementary operation takes a fixed amount of time to perform. 알고리즘을 평가하는데 있어 수행시간과 메모리 사용량을 평가기준으로 두는데수행시간에 해당하는 것이 시간 복잡도 Time Complexity,메모리 사용량에 해당하는 것이 공간 복잡도 Space Complexity이다. 연산 횟수를 카운팅 할때 3가지 경우가 있다. 최선의 경우 Best Case 최악의 경우 Worst Case 평균적인 경우 Average Case 평균적인 경우가 가장 이상적으로 보이겠지만 알고리즘이 복잡해 질수록 평균적인 경우는 구하기가 매우 어려워 진다. 그러므로 최악의 경우로 알고리즘의 성능을 파악한다. 2-1. Program Step에서 Elementary Operation이란? 프로그램의 진행 정도를 나타내는 기본 단위이다. 대입연산 덧셈, 뺄셈, 곱셈, 나눗셈 비교구문 함수호출 즉, 알고리즘의 실행 순서를 따라가며 Elementary Operation이 일어나느 수를 측정한다. 2-2. 어떻게 카운팅할까. 전역변수를 이용하여 Elementary Operation을 카운팅한다. 각 실행문 별로 Step수와 실행 횟수를 분석한다. 2-2-1. 전역변수를 이용하여 Elementary Operation을 카운팅12345678910111213let count = 0;function sum(list, n) &#123; let tempSum = 0; // 대입연산 for (let i = 0; i &lt; n; i++) &#123; count++; // loop 한번 돌 때마다 tempSum += list[i]; count++; // 대입연산 &#125; count++; // for loop 끝날 때 한번 count++; // return 수행 return tempSum;&#125; 2-2-2. 각 실행문 별로 Step수와 실행 횟수를 분석한다. 주어진 프로그램 2개의 성능 비교 및 분석 프로그램 P1의 성능 : C1 n^2 + C2 n 프로그램 P2의 성능 : C3 * n C1, C2, C3에 따라서 대소 비교 결과가 다름.어떤 C1, C2, C3에 대해서도 C1 n^2 &gt; C3 n을 만족하는 n은 존재함. n이 작으면 프로그램 P1의 성능이 더 좋을 수도 있다.n이 충분히 크면 항상 프로그램 P2의 성능이 좋다. (P1에는 n이 제곱이기 때문에) 작은 경우 모두 성능이 좋으므로 문제될 것은 없다.따라서 n이 큰 경우의 처리가 중요하다. 3. Big O 표기법Big O가 중요한 이유를 알기 위해서는 Asymptotic Complexity에 대해 알야아한다.알고리즘의 성능평가는 시간복잡도와 공간복잡도를 계산하고, 적 표기법으로 나타내면 된다. 위 예와 같이 T(n)으로 표현한 함수의 최고차항의 차수가 빅오가 된다.빅오의 순서는 아래와 같고 커질수록 좋지 않다.보통 O(n^2)이상의 복잡도를 가지는 알고리즘은 좋지 않다. 4. Asymptotic Complexity입력의 크기가 충분히 클 때의 시간복잡도와 공간복잡도를 분석하는 것. 프로그램 성능이 Asymptotic(점진적인) Complexity 프로그램의 입력 크기 등 성능을 결정하는 주요 특성 값이 매우 클 때의 프로그램의 성능. 프로그램의 실행 속도가 어떤 경향을 가지는지를 평가한다고 생각하면 된다. ex. 입력의 크기가 n이고 n이 매우 큰 경우 프로그램 성능 평가의 매우 중요한 기준. 4-1. 점근적 분석의 필요성어떠한 문제 해결을 위한 알고리즘의 성능분석을 할 때, 주어지는 데이터의 형태나 실험을 수행하는 환경, 또는 실험에 사용한 시스템의 성능등 다양한 요소에 의해 공평한 결과가 나오기 힘들고 비교 결과가 항상 일정하지 않을 수 있다. 이를 효과적으로 해결하는 방법이 점근적 분석법이다. 점근적 분석법은 각 알고리즘이 주어진 데이터의 크기를 기준으로 수행시간 혹은 사용공간이 얼마나 되는지를 객관적으로 비교할 수 있는 기준을 제시해 준다.O(빅오), Ω(오메가), Θ(세타)등이 있다. 일반적으로 빅오와 세타표기가 많이 사용된다. 4-2. 빅오 표기법 O Notation 점근적 상한선(Asymptotic upper bound) 주어진 알고리즘이 아무리 나빠도 비교하는 함수와 같거나 좋다. 정의 : O(g(n)) = {f(n) : there exist positive constants c and n0 such that 0≤f(n)≤cg(n) for all n≥n0}n0를 기준으로 n0보다 오른쪽에 있는 모든 n 값에 대해 함수 f(n)은 함수 cg(n)보다 작거나 같다는 의미이다. 그래프가 아래에 있을 수록 수행시간이 짧은 것이므로 성능이 좋은 것이다. 4-3. 오메가 표기법 Ω Notation 점근적 하한선(Asymptotic lower bound) 주어진 알고리즘이 아무리 좋아도 비교하는 함수와 같거나 나쁘다. 정의 : Ω(g(n)) = {f(n) : there exist positive constants c and n0 such that 0≤cg(n)≤f(n) for all n≥n0}n0를 기준으로 n0보다 오른쪽에 있는 모든 n 값에 대해 함수 f(n)은 함수 cg(n)보다 크거나 같다는 의미이다. 4-4. 세타 표기법 Θ Notation 점근선 상한선과 점근적 하한선의 교집합(Asymptotic tighter bound) 주어진 알고리즘이 아무리 좋아지거나 나빠지더라도 비교하는 함수의 범위안에 있다. 정의 : Θ(g(n)) = {f(n) : there exist positive constants c1, c2 and n0 such that 0≤c1g(n)≤f(n)≤c2g(n) for all n≥n0}n0를 기준으로 n0보다 오른쪽에 있는 모든 n 값에 대해 함수 f(n)은 함수 c1g(n)보다 크거나 같거나 c2g(n)보다 작거나 같다는 의미이다 cf. 의사코드란? pseudo-code +의사(疑似: 비교할 의, 비슷할 사 | Pseudo: 가짜의- ) 코드는 컴퓨터 프로그램이나 알고리즘이 수행해야할 내용을 우리가 사용하는 언어 (한국어 또는 영어 등)로 간략히 서술해 놓은 것을 말합니다. 왜 의사코드를 사용해야 하나요? 의사코드는 코딩 입력을 시작하기 전, 사고를 좀더 명확히 정립하게 만들어주어 프로그램을 설계하는데 도움이 됩니다. 실제 코드 입력을 처음 시작할 때가 제일 힘듭니다! 단순히 소스코드를 입력하는 것보다 함수(function) 프로그램을 만들 때 많은 시간을 낭비할 수 있습니다. 약 10분 정도 각 풀이법의 장점과 단점을 주도면밀하게 살펴보면서 의사코드 작성한다면, 이후 디버그를 수정하고 코드를 재분해 하는데 걸리는 시간을 단축할 수 있습니다. 모델링이라고 생각해보자. 참고링크 http://ledgku.tistory.com/33 http://bigocheatsheet.com/","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"CS","slug":"TIL-9997/CS","permalink":"http://feel5ny.github.io/categories/TIL-9997/CS/"}],"tags":[{"name":"CS","slug":"CS","permalink":"http://feel5ny.github.io/tags/CS/"}]},{"title":"단위 테스트는 왜 해야할까","slug":"TDD_01","date":"2017-12-08T09:23:55.000Z","updated":"2017-12-12T19:42:13.000Z","comments":true,"path":"2017/12/08/TDD_01/","link":"","permalink":"http://feel5ny.github.io/2017/12/08/TDD_01/","excerpt":"","text":"목차 단위테스트. 다들 중요하다고 하는데 왜 중요할까? 결국 클린코드를 위한 길 TDD : Test Driven Development 실습 1. 단위테스트. 다들 중요하다고 하는데 왜 중요할까? +단위테스트는 모듈이나 어플리케이션 안에 있는 개별적인 코드 단위가 예상대로 작동하는지 확인하는 반복적인 행위이다. 프로젝트에 단위 테스트를 적용하는 데에는 “내 코드가 제대로 동작하는지 확인하는 것”이라는 명백한 이유 외에도 몇 가지 장점이 있다. 단위 테스트는 코드가 “어떻게!”작성하는지 생각하는데 도움을 준다. 게다가 “무엇”을 해야하는지에 있어서 구현 선택을 검토하는데 해가 되지 않고, 그 선택들이 적절한지 아닌지 알아낸다. 주된 효과로는 단위 테스트를 추가하는 것은 애플리케이션의 유닛(함수/메소드)를 더 작게 만든다. 많은 일을 하는 테스팅 코드는 어렵다.’‘많은 일을 하는 디버깅 코드는 어렵다.’이 두 가지 문제의 해결법은 많은 일을 하지 않도록 코드를 작성하는 것이다. 각각의 함수를 단 한가지만의 일을 하도록 작성해야 한다. 이렇게 하면 단위 테스트로 쉽게 테스트할 수 있다. (하나의 함수에 대해 많은 단위 테스트가 필요하지 않는다.)내 동료가 메소드를 더 작게 분리해야 하는지에 대해 판단할 때 사용하는 문구가 있다. 만약 코드의 역할을 다른 프로그래머에게 설명할 때 ‘and’라는 단어를 사용했다면 그 메소드는 적어도 하나 이상의 부분으로 나눠야 한다는 것이다. stackoverflow 단위 테스트의 다른 장점은 문제를 빨리 발견하고 변화를 쉽게하며 통합을 간단하게 하고 설계를 개선할 수 있다는 것이다. 여기까지 읽고 나니, 테스트코드를 짜는 것은, 설계도를 만들면서 프로그래밍을 한다고 생각해도 될듯하다. 스케치를하는 느낌! 아키텍처를 짜면서 프로그래밍을 할 수 있다. 단위테스트의 시작은 어렵다. “hot to start unit testing”를 구글에 검색하면 113,000,000의 결과가 나올정도로. 단위테스트를 시작하는 가장 쉬운 방법은 버그를 고치는 것입니다. 그 방법은 아래와 같다. 버그를 찾는다. 버그를 고쳤을 때 통과할만한 테스트를 작성한다. 테스트를 통과할 때까지 코드를 수정한다. 2. 결국 클린코드를 위한 길요구사항이 수시로 변경되고 프로젝트 일정이 눈에 보이기 시작하면 테스트 코드 없이 바로 로직 구현을 하는 경우가 태반이라고 했다. 물론 신속히 개발할 수 있지만, 나중에 유지 보수 때 문제가 발생한다고 한다. 유지보수라고 하지만 새로운 기능을 요구할 때도 있다. 기존 로직에 영향을 주지 않고 코드를 작성해야 하는데 테스트 코드 없이 구현하다 보면 사이드 이펙트가 여기 저기서 터진다. 결국 유지보수기간에 코드에 대한 테스트 코드를 다시 작성하는 사태.. 클린코드가 우선순위에서 밀려나서는 안되는 3가지 이유 +1. 유지보수하기 좋은 코드프로그래머 작업 중 가장 많은 시간을 투자하는 일이 유지보수이다. 유지보수하기 좋은 코드를 구현하는 것은 서비스의 성패를 좌우하는 중요한 요소이다. 유지보수하기 좋은 코드를 구현하는 핵심은 클린 코드 구현에 있다. 2. 변화에 대응하는 핵심 능력운영 중 필연적으로 발생하기 마련인 기능 추가, 버그 수정, 레거시 코드 리뷰(이전 개발자들의 유산과도 같은 코드) 및 수정 작업과 같은 변화 자체에 확장성있게 대응하려면 클린 코드에 대한 이해와 작성 능력이 필수. 변화를 피할 수 없으면 제대로 대응하자. 3. 프로젝트 협업 능력 향상읽기 좋은 클린 코드를 작성함으로서 오는 장점은 개인에게만 있지 않다. 특히 1인 개발이 아닌, 여러 개발자가 함께 참여하는 프로젝트일수록 확장성 있는 코드 작성 능력을 가진 개발자의 기여도는 높을 수 밖에 없다. cf. 레거시 코드란 Legacy code 테스트가 불가능하거나 어려운 코드 클린코드를 위한 리팩토링 3. TDD : Test Driven Development + 우선 개발자는 바라는 향상 또는 새로운 함수를 정읳하는 자동화된 테스트 케이스를 작성(초기적 결함을 점검하는) 케이스를 통과하기 위한 최소한의 양의 코드를 생성 새 코드를 표준에 맞도록 리팩토링 일반적으로 RED, GREEN, REFACTOR 세단계를 거쳐 이루어진다. RED : 실패하는 테스트 GREEN : 테스트에 통과하도록 코드를 작성 REFACTOR : 불필요한 코드를 삭제장점 : 유지보수가 가능한 코드를 작성할수 있고, 버그가 생겨날 여지도 줄고, 높은 가독성을 추구할 수 있다. 참고한 글에서는 심리적인 안정감을 준다고 한다. 테스트 없이 개발하면 그물망 없는 막타워를 뛰어 내리는 심정이라면서.. 코드 한줄한줄이 부담스럽다고 한다.생각해보면 이전 프로젝트에서는 테스트코드 없이 작업에 들어갔었고, 기능구현은 됐으나, 내가 보기 싫은 정도의 무자비한 코드들이 나왔다. 그러다보니 리팩토링조차 하지 못하는 상황.. 그런 의미에서 클린코드를 위한 작업이라고 생각하면, 좋을 듯하다. BDD (Behaviour Driven Development)BDD는 행동 베이스이다.엔드 유저의 행동을 시나리오로 가져야합니다.가령 로그인을 예로 BDD를 하려면, 셀레늄으로 실제 브라우저에서 렌더링된 아이디와 패스워드를 입력폼에 넣고 로그인 버튼까지 누르는걸 시뮬레이트해야한다. Given, When, Then12345Scenario: User uses wrong password Given a username dkfksl; And a password kdfksj; When the user logs in with username and password Then the login form should be shown again 특정 값이 주어지고 (Given) 어떤 이벤트가 발생했을 때 (When) 그에 대한 결과를 보장해야한다 (Then) 4. 실습 react 테스트때는 Enzyme과 묶어서 Mocha 사용할 예정.Typescript사용, type definition으로는 mocha, node, express 셋팅, 의존모듈 : mocha, shoudld, supertest, typescript 실습을 위해 필요한 것과 알야아할 용어 mocha should.js (assert 대체) supertest sinon mock mochaMocha is a feature-rich JavaScript test framework running on Node.js and in the browser, making asynchronous testing simple and fun. Mocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases. mocha는 node와 브라우저 모두에 적용할 수 있고, TDD, BDD, QUnit, export 스타일 모두 적용할 수 있는 프레임웍이다. assertion문 또한, 취향(?)에 따라 선택하여 적용할 수 있다.assertion문 expect, should, assert … should + 테스트 코드를 검증할 때 사용하는 써드파티 라이브러리 가독성이 높은 테스트 코드를 만들 수 있게해주는 장점! assert는 nodejs 공식 모듈, should 써드파티 모듈 assert란 실행 결과를 비교하기위해 사용하는 내장 모듈. 노드에서 제공하는 assert라는 라이브러리가 있지만, 노드측에서 발표를 했다! 노드 assert 이외의 서드파티 라이브러리를 사용하라..!! 123res.body.should.be.a.Object(); // res.body는 Object 형태이어야한다. should.be.ares.body.should.have.property('result'); // res.body는 result라는 property를 갖고(have) 있어야 한다. res.body.result.should.have.equal('Hello Get TDD') // res.body.result는 'Hello Get TDD'라는 문자열과 같은 값을 갖고 있어야 한다. superTest + mocha가 하나의 함수를 테스트했다면, 통합테스트(api 기능 테스트)에서 사용하는 라이브러리 api 서버라면 내부적으로 express 구동 -&gt; 요청보낸 뒤 결과 검증까지함(시나리오 코드 작성)12345678910111213141516const supertest = require('supertest');require('should');const server: any = supertest.agent('http://localhost:3000')describe('테스트 시작', () =&gt; &#123; it('GET', done =&gt; &#123; server.get('/').expect(\"Content-type\", /json/).expect(200) .end((err, res) =&gt; &#123; if (err) throw err; res.body.should.be.a.Object(); res.body.should.have.property('result'); res.body.result.should.have.equal('Hello Get TDD') done(); &#125;) &#125;); 서버에서 구현하는 API는 단순히 메모리상의 데이터를 다루는 것만 있는 것은 아닙니다. 사용자 계정 정보 등 영구적으로 저장할 데이터는 데이터베이스에 저장하게 되는데, 서버에 이 정보를 데이터베이스에서 조회한 뒤 API로 응답하는 경우가 빈번합니다.그럼 유닛 테스트를 위해 데이터베이스에 직접 자료를 넣어야 할까요? 그렇게 할 수도 있겠지만 시간이 많이 걸립니다. 왜냐하면 테스트를 위해 데이테베이스 컨넥션을 생성한 뒤 데이터를 입력하고 조회하는 시간이 상당하기 때문입니다. 게다가 이러한 API가 많아질수록 전체 테스트 시간은 늘어나게 됩니다.그래서 목(Mock)을 사용해야 합니다. 데이터베이스 역할을 흉내낼 수 있는 가상의 것을 만들수 있습니다. sinon +Sinon.js는 주로 테스트 대상이 의존하는 모듈과 자원의 대역의 용도로 사용한다. 특정 테스트 프레임워크를 의존하지 않기 때문에 QUnit 이외의 테스트 프레임워크와도 함께 사용할 수 있다. Sinon이라는 이름은 트로이 전쟁에서 활양한 스파이의 이름에서 유래했다.복잡한 비동기나 동시 다발적인 이벤트 그리고 애니메이션등 작성하기 어려운 테스트 타입을 Spy, Stub, Mock, FakeTiner, FakeServer 등으로 대체하여 테스트하기 쉽게 만들어 준다. MOCK작업을 할 수 있게 하는 라이브러리라고 생각하면된다.MOCK : 데이터 베이스 역할을 흉내내는 가상의 것 Mock이란?실제 객체를 만들기엔 비용과 시간이 많이 들거나 의존성이 길게 걸쳐져 있어 제대로 구현하기 어려울 경우, 가짜 객체를 만들어 사용한다. JavaScript는 비동기 상황을 테스트해야하기 때문에, 실제로 테스트 코드를 짜는 것은 굉장히 까다로운 작업이 될수 있다. 이러한 것을 해결하기 위한 하나의 방법으로 stub, mock object를 만드는 방법이 있다. Mock 객체는 언제 필요한가? 테스트 작성을 위한 환경 구축이 어려운 경우 환경 구축을 위한 작업 시간이 많이 필요한 경우에 Mock객체를 사용한다. (데이터베이스, 웹서버, 웹애플리케이션서버, FTP서버, 등) 특정 모듈을 갖고 있지 않아서 테스트 환경을 구축하지 못할 때 또는 타 부서와의 협의나 정책이 필요한 경우에 사용한다. 테스트가 특정 경우나 순간에 의존적인 경우 테스트 시간이 오래 걸리는 경우 개인 PC의 성능이나 서버의 성능문제로 오래 걸릴수 있는 경우 시간을 단축하기 위해 사용한다. cf. 테스트 러너 (karma)JavaScript는 브라우저 환경에 따라, 테스트 결과가 달라지기 때문에, 실제 브라우저에서 테스트를 꼭! 해야만한다. 테스트 러너는 여러 환경에서 동일 테스트를 호출 할 수 있다. 참고링크 http://www.incodom.kr/Mock http://webframeworks.kr/tutorials/expressjs/expressjs_test_code/ https://mochajs.org/ http://jinbroing.tistory.com/148 https://hyunseob.github.io/2016/05/09/assert-nodejs-test-module/ https://suhyeon.github.io/2017/12/10/TDD-1/ http://seokjun.kr/node-js-tdd/ http://blog.jeonghwan.net/mocha/ http://meetup.toast.com/posts/126 https://sungjk.github.io/2017/03/03/testing-react-application.html http://woogri.tistory.com/entry/BDD-BDD-%EB%84%88%EB%8A%94-%EC%96%B4%EB%94%94%EC%84%9C-%EC%98%A8%EA%B1%B0%EB%8B%88","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"TDD","slug":"TIL-9997/TDD","permalink":"http://feel5ny.github.io/categories/TIL-9997/TDD/"}],"tags":[{"name":"TDD","slug":"TDD","permalink":"http://feel5ny.github.io/tags/TDD/"},{"name":"mocha","slug":"mocha","permalink":"http://feel5ny.github.io/tags/mocha/"}]},{"title":"0/ React","slug":"React_01","date":"2017-12-07T12:20:19.000Z","updated":"2017-12-13T15:29:08.000Z","comments":true,"path":"2017/12/07/React_01/","link":"","permalink":"http://feel5ny.github.io/2017/12/07/React_01/","excerpt":"","text":"어썸 리액트! &#128153; 리액트 공식 사이트로 들어가면 부제목으로 이런 글이 있다.A JavaScript library for building user interfacesUI 작업을 위한 자바스크립트 라이브러리! 사용자가 서비스를 접하면서 만나게되는 여러 상황에 빠르게 대응할 수 있고, 다양한 UI 트리거를 빠르게 만들 수 있도록 나온 라이브러리가 아닌가 한다. 그만큼 개발에도 사용자 경험을 많이 신경쓰고 있다는 점에서, UI와 인터렉션은 정말 화두 오브 화두. 상태관리를 손쉽게 할 수 있다는 점때문에 개발자가 UX를 고민할 시간이 더 생긴다는 점에서 리액트를 선호한다. 최근에는 앵귤러를 입문하고 있는데, 비슷한 패턴으로 상태관리를 한다고 느껴지긴했지만, 아직 어려운 개념들이 많고.. 그래서 아직 리액트와의 차이점은 잘 모르겠다. 목차 리액트 탄생배경 리액트의 특징 1. 리액트 탄생배경front 영역을 제어하기 위해서는 자바스크립트로 DOM을 컨트롤 하면 된다. 이는 다양한 인터렉션 기능들을 구현할 수 있게 해주지만 이 DOM이라는 것을 조작하기에는 여간 까다로운게 아니다.(바닐라로 간단 기능을 짜본사람은 무슨 느낌인지..) 이런 까다로운 DOM을 쉽고 효율적으로 다루기 위해 Jquery 라이브러리가 나왔다. But, 제이커리는 여러가지 이슈를 갖고 있었다. SPA 개발을 위한 구글의 오픈소스 자바스크립트 프레임워크인 Angular가 등장하면서 구조화된 프론트엔드 환경을 제시했다. 이런 상황에서 Facebook에서 React가 등장하게 된다. React는 에어비엔비, 넷플릭스, 드랍박스, 트위터 등에서 사용하고 있다. 리엑트는 자바스크립트 라이브러리이며, 라우터와 같이 웹을 만들 때 필요한 도구들을 포함되어 있지 않다. (앵귤러는 포함되어있음) 필요한 도구들이 없는 대신? 가볍다. 그리고 빠르게 배울수 있다는 점! 2. 리액트의 특징React 공식 사이트에서 말하는 특징 1. DeclarativeReact makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.Declarative views make your code more predictable and easier to debug. 직관적리액트는 인터렉티브 UI를 어려움없이 만들 수 있습니다. 당신의 어플리케이션의 각각의 상태를 위해 간단한 view들을 디자인을 해보십시요. 리액트는 데이터가 변할때 해당 컴포넌트를 효과적으로 업데이트하고 렌더링 할 수 있습니다. 직관적인 view들은 디버깅하기 더 쉽게, 더 잘 예측할 수 있도록 해줍니다! 2. Component-BasedBuild encapsulated components that manage their own state, then compose them to make complex UIs.Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM. 컴포넌트 단위.자체 상태를 관리하는 캡슐화된 컴포넌트를 만들어서 복잡한 UI를 만들 수 있도록 구성해보세요. 템플릿 대신 자바스크립트로 작성된 컴포넌트 로직을 통해 여러분은 풍부한 데이터를 쉽게 전달하고, DOM에서 상태를 유지할 수 있습니다. 3. Learn Once, Write AnywhereWe don’t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code.React can also render on the server using Node and power mobile apps using React Native. 한번배우고, 어디서나 쓰십쇼!우리는 여러분의 기술 스택의 나머지 부분에 대해서 가정하지 않았으므로 여러분은 기존 코드를 다시 작성하지 않고, React에서 새로운 기능을 개발할 수 있습니다. React는 React Native를 사용하여 Node나 모바일 앱을 사용하여 서버에서 렌더링할 수 있습니다. 2-1. Componentcomponent는 UI를 구성하는 개별적은 View 단위이다. 이 단위들이 레고 블럭처럼 조합되어서 최종 결과물을 만들어낸다. 이는 앵귤러도 같은 개념이다. Component의 강력한 특징은 재사용이 가능하다. 틀을 만들어 놓고 여러 컴포넌트로 갖고가서 사용이 가능하다는 것.리덕스 창시자 Dan Abramov는 React의 목표가 성능보다는 유지가능한 앱을 만드는 것!이라고 설명했다고 한다. 2-2. JSXJSX는 React에서 사용하기 위해서 새로 만들어진 자바스크립트 문법이다.React는 작성한 코드를 컴파일하는 과정을 꼭 거쳐야한다. 때문에 리액트에서는 Babel을 사용하고 있다.123456class HelloMessage extends React.Component &#123; render() &#123; return &lt;div&gt;Hello &#123;this.props.name&#125;&lt;/div&gt;; &#125;&#125;ReactDOM.render(&lt;HelloMessage name=\"John\" /&gt;, mountNode) return 내부의 형태와 ReactDom.render의 첫번째 인자는 JSX문법이다. 이를 자바스크립트로 컴파일을 하기위해 Babel을 사용하는 것이다. 자바스크립트로 컴파일 후의 모습은 아래와 같다.123456789101112class HelloMessage extends React.Component &#123; render() &#123; return React.createElement( \"div\", null, \"Hello \", this.props.name ); &#125;&#125;ReactDOM.render(React.createElement(HelloMessage, &#123; name: \"John\" &#125;), mountNode); React는 Babel과 같은 트랜스파일러를 꼭 사용해야하기 때문에 Webpack등을 사용해야하는데, 왜 구지 이런 셋팅을 하면서까지 JSX를 사용하는 걸까. 위처럼 작성해도 되지만, 공식사이트에서 말한 첫번째 특징인 직관적인(Declarative) 개발을 할 수 있도록 하기 위해 JSX를 사용한다. JSX를 보면 html마크업과 거의 같다고 볼 수 있다. 어떤 결과물이 나올지 이해가 된 상태에서 개발하기 때문에 예측가능 개발을 할 수 있도록 해주며, 개발의 피로도를 상당히 줄여준다. 2-3. Vitual DOM DOM은 웹의 핵심으로, 말 그대로 브라우저가 화면을 그리기 위한 정보가 담겨있는 문서이다. 이 DOM을 다루는 것이 힘들다는 것은.. 바닐라로 짜보면 알 수 있다. 정확히는 DOM 조작이 전체 동작을 비효율적으로 만드는게 아니라, 그 이후에 일어나는 일 때문에 작업이 더뎌지는 거라고 한다. DOM에 변화가 생기면, 렌더트리를 재생성하고(모든 요소의 스타일이 다시 계산된다.) 레이아웃을 만들고, 페인팅을 하는 과정을 반복한다. 그만큼 DOM을 쉽게 다룰 수 있는 부분은 개발자들의 숙제였고, 그러던 중에 Jquery가 탄생하게 된것이다. 12345678910class HelloMessage extends React.Component &#123; render() &#123; return ( &lt;div&gt; &lt;div&gt;Hello &#123;this.props.name&#125;&lt;/div&gt; &lt;div&gt;I am &#123;this.state.chatName&#125;&lt;/div&gt; &lt;/div&gt; ); &#125;&#125; React 컴포넌트는 render를 다시 호출하여 새로운 결과 값을 return한다. 그런데 이 리턴값은 바로 DOM에 반영되지 않는다! 즉 렌더링이 되지 않는다는 말인데, react는 return값을 갖고 새로운 Virtual DOM을 만든다.. 그리고, 현재 브라우저에 보여지고 있는 진짜 DOM과 비교하여 어떤 부분이 달라졌는지 찾아낸다. 달리진 부분을 발견하면 그 부분만! 바뀐 그 부분만 진짜 DOM에 반영한다. 그리고 브라우저는 이 DOM을 해석하고 유저에게 새로운 화면을 그려준다. 즉, 브라우저 내에서 발생하는 연산의 양을 줄이면서 실제 DOM을 조작하는 것보다 성능이 개선이 된다. 가상돔을 만든 이유는, 직접 DOM을 조작하는 리소스가 많으 드는 행위를 하지않고, DOM을 조작하는 과정을 최적화시켜주고, 컴포넌트 단위로 묶어서 관리할 수 있도록 해준다. 컴포넌트 단위의 개발을 구현하기 위해 보다 효율적인 DOM 조작 방식을 도입한 것이다. 참고링크 https://reactjs.org/ https://medium.com/@RianCommunity/react%EC%9D%98-%ED%83%84%EC%83%9D%EB%B0%B0%EA%B2%BD%EA%B3%BC-%ED%8A%B9%EC%A7%95-4190d47a28f https://velopert.com/3236","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"React","slug":"TIL-9997/React","permalink":"http://feel5ny.github.io/categories/TIL-9997/React/"}],"tags":[{"name":"react","slug":"react","permalink":"http://feel5ny.github.io/tags/react/"}]},{"title":"6/ 함수표현식의 다른 용도","slug":"JS_06","date":"2017-12-07T12:20:19.000Z","updated":"2017-12-18T10:33:51.000Z","comments":true,"path":"2017/12/07/JS_06/","link":"","permalink":"http://feel5ny.github.io/2017/12/07/JS_06/","excerpt":"","text":"‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. 오류가 있다면 언제든지 댓글 남겨주세요. 목차 함수와 재귀 클로저2-1. 클로저 사용 (반복문)2-2. 클로저의 메모리 누수2-3. 클로저를 이용한 고유 변수(private variable : 객체 외부에서 접근할 수 없는 변수) = 은닉화 1. 함수의 재귀함수의 재귀 부분은 함수Part 포스팅의 callee의 예시를 보면서 설명했었다. 추가로 스트릭트 모드일 경우에 arguments.callee에 접근할 수 없으므로 이를 보완하는 방법을 알아본다. 이름 붙은 함수 표현식을 써서 같은 결과를 낼 수 있게 한다.1234567const factorial = (function f(num)&#123; // f()를 생성하여 factorial에 할당. if (num &lt;= 1)&#123; return 1; &#125; else &#123; return num * f(num-1); &#125;&#125;) f라는 이름은 함수를 다른 변수에 할당하더라도 그대로 유지되므로 재귀 호출은 정확히 실행됨. 2. 클로저클로저란 다른 함수의 스코프에 있는 변수에 접근 가능한 함수이다.(내부함수가 외부함수의 스코프에 접근가능). 즉, 내부함수가 참조하는 외부함수의 지역변수가 외부함수에 의해 내부함수가 반환된 이후에도 life-cycle이 유지되는 것을 의미한다.생성될 당시의 환경을 기억하는 함수를 말한다. 클로저를 잘 이해하기 위해서는 스코프 체인이 어떻게 생성되고 사용되는지 자세히 알아야 한다. 함수에서 변수에 접근할 때마다 스코프 체인에서 해당 이름의 변수를 검색한다. 함수 실행이 끝나면 로컬 활성화 객체는 파괴되고 메모리에는 전역 스코프만 남는다. 하지만 클로저는 외부함수가 실행을 마쳐도 활성화 객체는 내부함수가 파괴될 때가지 메모리에 남는다. 123456789101112131415161718function createComparisonFunction(propertyName)&#123; return function(object1, object2)&#123; const value1 = object1[propertyName] const value2 = object1[propertyName] if(value1 &lt; value2) &#123; return -1; &#125; else if (value1 &gt; value2)&#123; return 1; &#125; else &#123; return 0; &#125; &#125;;&#125;const compare = createComparisonFunction(\"name\")const result = compare(&#123;name: \"Nicholas\"&#125;, &#123;name:\"Greg\"&#125;)compare = null; // 함수파괴 - GC이 메모리 회수가능 내부 함수가 반환되어 다른 컨텍스트에서 실행되는 동안에도 propertyName에 접근하 수 있다. 이런 일이 가능한 것은 내부 함수의 스코프 체인에 createComparisonFunction()의 스코프가 포함되기 때문이다. 외부함수가 실행을 마치고 익명함수를 반환하면 익명함수의 스코프체인은 외부함수의 활성화객체AO와 전역변수객체GO를 포함하도록 초기화된다. 이 때문에 익명 함수는 외부 함수의 번수 전체에 접근할 수 있다. 아직 익명함수의 스코프 체인에서 활성객체를 참조하기 때문에 외부 함수가 실행을 마쳤는데도 활성객체는 파괴디지 않는다. 즉 활성화객체는 익명함수가 파괴될 때까지 메모리에 남는다. 중간지점..개념정리자신을 포함하고 있는 외부함수보다 내부함수가 더 오래 유지되는 경우,내부함수가 외부함수의 스코프에 접근할 수 있고,외부함수는 외부함수의 지역변수를 사용하는 내부함수가 소멸될 때까지 소멸되지 못하고 상태가 유지되며내부함수에 의해서 소멸하게 되는 특성을 클로저라고 부른다. 외부함수의 지역변수를 Free variable(자유변수)이라고 부르는데, 클로저라는 이름은 자유변수에 함수가 닫혀있다(Closed)라는 의미로, 자유변수에 엮여있는 함수라는 뜻이다. 외부함수가 이미 반환되었어도 외부함수 내의 변수는 이를 필요로 하는 내부함수가 하나 이상 존재하는 경우, 계속 유지된다. (내부함수가 외부함수에 있는 변수의 복사본이 아니라 실제변수에 접근한다.) 클로저는 외부함수의 스코프를 보관해야하므로 다른 함수에 비해 메모리를 많이 요구한다. 클로저를 과용하면 메모리 문제가 생길 수 있으니, 반드시 필요할 때만 사용하길 권장한다. 2-1. 클로저 사용 (반복문)함수 안에 함수를 정의하고 내부에 정의한 함수를 노출시키면, 클로저를 사용할 수 있다. 함수를 노출시키기 위해서는 함수를 반환하거나 다른 함수로 전달하면 됩니다.123456789function createFunctions()&#123; var result = []; for (var i=0; i&lt;10; i++)&#123; result[i] = function()&#123; return i; &#125; &#125; return result;&#125; result 배열에 들어가는 모든 함수가 스코프체인에 createFunctions()의 활성화객체를 포함하므로, 이들은 모두 같은 변수, i를 참조한다. 때문에 마지막에 할당된 i가 저장이 되는것이다. 이는 for루프의 초기문에 사용된 var키워드 변수의 스코프가 전역이기 때문에 발생하는 현상이므로, ES6의 let키워드를 이용하여 블록레벨 스코프 개념을 만들면 원하는 결과값이 나오긴한다. 하지만.. 우선 let이 없다는 상황에서 클로저를 사용하여 원하는 결과값을 반환해보자.1234567891011function createFunctions()&#123; var result = []; for (var i=0; i&lt;10; i++)&#123; result[i] = (function(num)&#123; return function()&#123; return num; &#125; &#125;)(i); &#125; return result;&#125; 즉시실행함수이기 때문에 함수가 실행되면서 내부함수가 반환된다. 즉시실행함수는 한번만 호출시 처음 한번만 실행된다. num에 i를 매개변수로 넘기기 때문에(복사) result에 들어가는 익명함수에는 자유변수 num이 생겼다고 보면되다. 배열에 들어가는 함수는 즉시실행함수 매개변수로 i를 받는다. i는 num에 매개변수로 복사가되고, num은 해당 함수의 자유변수가 된다. 반환된 내부함수는 자유변수 num에 엮여있는 함수 클로저가 된다. 때문에 외부함수에서 매개변수로 받는 i값에 따라 고유한 num과 클로저를 갖게 된다. 2-2. 클로저의 메모리 누수클로저는 외부함수의 활성화객체 참조를 계속 유지하기 때문에 참조카운트가 줄지 않는다. (가비지컬렉션이 잡지 치우지 못한다.) 필요하다면 클로저를 갖고 있는 변수에 null을 할당하여 참조를 끊어야한다. 2-3. 클로저를 통한 은닉화 (고유변수) 참고링크 https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode http://poiemaweb.com/js-closure","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Javascript","slug":"TIL-9997/Javascript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://feel5ny.github.io/tags/javascript/"}]},{"title":"5/ 객체 지향 프로그래밍 (1)","slug":"JS_05_1","date":"2017-12-04T05:53:22.000Z","updated":"2017-12-12T10:07:53.000Z","comments":true,"path":"2017/12/04/JS_05_1/","link":"","permalink":"http://feel5ny.github.io/2017/12/04/JS_05_1/","excerpt":"","text":"‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. 오류가 있다면 언제든지 댓글 남겨주세요.이 주제는 조금 더 공부를 해야할 듯 하다. 목차 프로퍼티 타입 데이터 프로퍼티 접근자 프로퍼티 다중 프로퍼티 정의 프로퍼티 속성 읽기 객체지향언어는 일반적으로 클래스를 통해 같은 프로퍼티와 메서드를 가지는 객체르 여러 개 만든다는 특징이 있다. ECMAScript에는 클래스라는 개념이 없으며 이에 따라 ECMAScript의 객체는 다른 클래스 기반 언어와 다르다. (ES6에는 class라는 개념이 도입되었다.) ECMAScript에서 객체는 순서가 없는 값의 배열이다. 각 프로퍼티와 메서드는 이름으로 구별하며 값에 대응한다. 객체는 이름-값 쌍의 그룹이며 각 값은 데이터나 함수가 될 수 있다. 1. 프로퍼티 타입객체 리터럴 방식으로 객체를 생성할 때 프로퍼티와 메서드를 생성할 수 있다. 이러한 프로퍼티는 모두 자바스크립트에서 프로퍼티의 행동을 정의하는 특징에 따라 생성된다.이들 속성이 자바스크립트 엔진 내부에서 구현하는 것으로 정의했고, 이들 송성을 자바스크립트에서 직접적으로 접근할 수 있는 방법은 없다.이들 속성은 [[Enumerable]]처럼 속성 이름을 대괄호로 감싸서 내부 속성임을 나타낸다. 데이터 프로퍼티와 접근자 프로퍼티 두가지 타입이 있다. 1-1. 데이터 프로퍼티데이터 값에 대한 단 하나의 위치를 포함하여 이 위치에서 값을 읽고 쓴다.(무슨말이지?) [[Configurable]]프로퍼티가 delete를 통해 삭제하거나, 속성을 바꾸거나 접근자 프로퍼티로 변활할 수 있음을 나타낸다.객체에서 직접 정의한 모든 프로퍼티에서 이 속성은 기본적으로 true [[Enumerable]]for-in루프에서 해당 프로퍼티를 반환함을 나타낸다.기본은 true [[Writable]]프로퍼티 값을 바꿀 수 있음을 나타낸다.기본은 true [[Value]]프로퍼티의 실제 데이터 값을 포함한다. 프로퍼티의 값을 읽는 위치이고, 새로운 값을 쓰는 위치.기본값은 undefined 프로퍼티를 선언만 하고 값을 할당하지 않으면 undefined 123const person =&#123; name: \"Nicholas\"&#125; 여기서 “Nicholas”가 [[Value]] 데이터 프로퍼티에 저장된다는 말이다. 기본 프로퍼티 속성을 바꾸기 위해서는?Object.defineProperty()메서드를 사용하면 된다. Object.defineProperty() 처럼 강력한 옵션을 사용할 일이 드물겠지만, 자바스크립트 객체를 잘 이해하려면 알고 있으면 좋다. 전반적인 자바스크립트의 문법을 변화시키고 코드에 대한 해석을 기존처럼 할 수 없는 컨텍스트를 제공한다.1Object.defineProperty(프로퍼티를 추가하거나 수정할 객체, 프로퍼티 이름, 서술자 객체) 서술자 객체가 뭐지? descriptor 객체해당 속성에 대한 특성을 의미.내부 속성 이름과 같다. 서술자 객체에는 configurable, enumerable, writable, value 4가지 프로퍼티가 있다.123456789const person = &#123;&#125;;Object.defineProperyt(person, \"name\", &#123; writable: false, // readOnly 형식으로 바꿨다고 생각하자. value: \"Nicholas\"&#125;)console.log(person.name) // \"Nicholas\"person.name = \"Greg\";console.log(person.name) // \"Nicholas\" 1-2. 접근자 프로퍼티 (accessor 함수)데이터 값이 들어있지 않고, getter함수와 setter함수로 구성된다. (옵셔널)접근자 프로퍼티를 읽을 때는 getter함수가 호출 유효한 값을 반환할 책임은 이 함수에 있다. 접근자 프로퍼티의 4가지 속성 [[Configurable]]프로퍼티가 delete를 통해 삭제하거나, 속성을 바꾸거나 접근자 프로퍼티로 변활할 수 있음을 나타낸다.기본은 true [[Enumerable]]for-in루프에서 해당 프로퍼티를 반환함을 나타낸다.기본은 true 12345678910111213141516 var person = &#123; 'first-name': 'Joy', 'last-name': 'Kim', gender: 'female'&#125;;// prop에 객체의 프로퍼티 이름이 반환된다. 단, 순서는 보장되지 않는다.for (var prop in person) &#123; console.log(prop + ': ' + person[prop]);&#125;/*first-name: Joylast-name: Kimgender: female*/ [[Get]]프로퍼티를 읽을 때 호출할 함수.기본은 undefined [[Set]]프로퍼티를 바꿀 때 호출할 함수.기본은 undefined 1234567891011121314151617181920const book = &#123; _year: 2004, // 밑줄(_)은 이 프로퍼티는 객체의 메서드를 통해서만 접근할 것이고 객체 외부에서는 접근하지 않겠다는 의도를 나타낼 때 흔히 쓰는 표기법 (private와 같은 개념) edition: 1&#125;Object.defineProperty(book, \"year\", &#123; get: function()&#123; return this._year &#125;, set: function(newValue)&#123; if (newValue &gt; 2004)&#123; this._year = newValue; this.edition += newValue -2004; &#125; &#125;&#125;)book.year = 2005;alert(book.edition) //2 setter의 경우는 프로퍼티의 값을 바꿨을 때 해당 프로퍼티만 바뀌는 게 아니라 부수적인 절차가 필요한 경우에 사용한다. getter만 셋팅할 경우 읽기전용setter만 셋팅될 경우 undefined 2. 다중 프로퍼티 정의여러개의 프로퍼티를 동시에 수정해야할 경우 Object.defineProperties()configurable의 기본값은 true이지만, defineProperties나 defineProperty은 공통적으로 호출만 되면 true로 재지정하지 않는 이상 false가 된다. 3. 프로퍼티 속성 읽기1Object.getOwnPropertyDescriptor(읽어올 프로퍼티가 포함된 객체, 서술자를 가져올 프로퍼티 이름) 원하는 프로퍼티의 서술자 프로퍼티를 읽을 수 있다.모든 객체에서 사용가능하며, DOM이나 BOM 객체에서도 가능하다. 12345678910111213141516171819202122232425262728293031323334const book = &#123;&#125;;Object.defineProperties(book, &#123; _year: &#123; value: 2004 &#125;, edition: &#123; value: 1 &#125;, year: &#123; get: function()&#123; return this._year; &#125;, set: function(newValue)&#123; if (newValue &gt; 2004)&#123; this._year = newValue; this.edition += newValue - 2004; &#125; &#125; &#125;&#125;)var descriptor = Object.getOwnPropertyDescriptor(book, \"_year\");console.log(descriptor.value) // 2004console.log(descriptor.configurable) // falseconsole.log(typeof descriptor.get) // undefinedvar descriptor = Object.getOwnPropertyDescriptor(book, \"year\");console.log(descriptor.value) // undefinedconsole.log(descriptor.configurable) // falseconsole.log(typeof descriptor.get) // \"function\" 참고링크 http://www.bsidesoft.com/?p=1878#%25ec%25a0%2595%25ec%25a0%2581%25ec%258b%259c%25ec%25a0%2590%25ea%25b3%25bc-%25ec%258b%25a4%25ed%2596%2589%25ec%258b%259c%25ec%25a0%2590 http://poiemaweb.com/js-object","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Javascript","slug":"TIL-9997/Javascript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://feel5ny.github.io/tags/javascript/"}]},{"title":"4/ 참조타입_Function 타입 (2)","slug":"JS_04_2","date":"2017-12-03T11:11:53.000Z","updated":"2018-01-03T06:58:05.000Z","comments":true,"path":"2017/12/03/JS_04_2/","link":"","permalink":"http://feel5ny.github.io/2017/12/03/JS_04_2/","excerpt":"","text":"‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. 오류가 있다면 언제든지 댓글 남겨주세요. 목차 함수의 내부 구조 함수 프로퍼티와 메서드 함수의 다양한 형태3-1. 즉시실행함수3-2. 내부함수3-3. 콜백함수 1. 함수의 내부 구조함수 내부에는 객체들이 있다. 요약 arguments 함수에 전달된 파라미터를 모두 포함하는 유사배열객체 this 함수의 호출패턴에 따라 값이 달라진다. caller 해당 함수를 호출한 함수를 참조하는 값을 갖고있다. 전역함수에서는 null. 재귀함수를 사용할 때 사용가능. length arguments의 배열 길이. (파라미터의 갯수) name 함수의 이름 __proto__ 모든 객체가 갖고 있는 프로퍼티. [[Prototype]] 이며, 브라우저마다 다르게 명시한다. 해당 객체의 프로토타입을 가리키는 참조값을 갖고있다. prototype 함수 객체가 생성자로 사용될 때 이 함수를 통해 생성된 객체의 부모 역할을 하는 객체를 가리킨다. apply 함수를 호출하면서 해당함수의 this를 호출한 함수로 넘기는 역할을 한다. call apply와 같은 개념이며, apply와 다른 점은 parmeter를 각각 넘기는 스타일이다. bind bind() 메소드는 호출될 때 그 this 키워드를 제공된 값으로 설정하고 새로운 함수가 호출될 때 제공되는 주어진 순서의 선행 인수가 있는 새로운 함수를 생성한다. 1-1. arguments순회가능한(iterable) 유사배열객체이며, 함수에 전달된 파라미터를 모두 포함한다.arguments 프로퍼티는 arguments 객체를 값으로 가지며, 함수 내부에서 지역변수처럼 사용된다. 즉, 외부에서는 호출할 수 없다. arguments 객체에는callee, length, Symbol 프로퍼티가 존재한다.callee 프로퍼티는 arguments 객체의 소유자인 함수를/ 가리키는 포인터이다. 1234567function factorial(num)&#123; if(num &lt;= 1) &#123; return 1; &#125; else &#123; return num * factorial(num-1) &#125;&#125; 12345678// 함수 이름에 의존하는 약점을 callee로 보완function factorial(num)&#123; if(num &lt;= 1)&#123; return 1; &#125; else &#123; return num * arguments.callee(num-1) &#125;&#125; 1-2. this1-3. callercaller 프로퍼티에는 해당 함수를 호출한 함수에 대한 참조를 저장하며, 전역 스코프에서 호출했다면 null이 저장된다. 2. 함수 프로퍼티와 메서드함수에서 사용된 this는 실행된 객체를 가리키거나 상위 컨텍스트인 window를 가리킨다.this를 조작해서 다를 객체를 지정하려면? apply나 call을 사용하면 된다. 2-1. apply 메서드소유자인 함수를 호출하면서 this를 파라미터로 넘기는데, 결론적으로는 함수 내부에서 this객체의 값을 바꾸는 것이나 마찬가지이다. 매개변수로는 소유자함수에 넘길 this와 매개변수 배열을 (Array의 인스턴스 혹은 arguments)를 받는다.123456789101112function sum(num1, num2)&#123; return num1 + num2;&#125;function callSum1(num1, num2)&#123; return sum.apply(this, arguments) // arguments 객체를 넘김&#125;function callSum2(num1, num2)&#123; return sum.apply(this, [num1, num2]) // 배열을 넘김&#125;alert(callSum1(10,10)) //20alert(callSum2(10,10)) //20 2-2. callapply와 같은데, 두번째 파라미터를 array형태가 아니라, 각각 나열해야한다.1234567function sum(num1, num2)&#123; return num1 + num2;&#125;function callSum(num1, num2)&#123; return sum.call(this, num1, num2) // arguments 객체를 넘김&#125;alert(callSum(10,10)) //20 2-3. bind새 함수 인스턴스를 만드는데 그 this는 bind()에 전달된 값이다.123456789window.color= \"red\";var o = &#123; color: \"blue\" &#125;function sayColor()&#123; alert(this.color)&#125;var objectSayColor = sayColor.bind(o)objectSayColor() //blue 2-4. __proto__ 프로퍼티ECMAScript spec에서는 모든 객체는 자신의 프로토타입을 가리키는 [[Prototype]]이라는 숨겨진 프로퍼티를 가진다라고 되어있다. [[Prototype]]와 __proto__는 같은 개념이다. 2-5. prototype프로퍼티함수 객체만이 갖고 있는 프로퍼티로, 자바스크립트 객체지향의 근간이다. __proto__와 다르다. 함수 객체가 생성자로 사용될 때 이 함수를 통해 생성된 객체의 부모 역할을 하는 객체를 가리킨다. 함수가 생성될 때 만들어지며 constructor 프로퍼티를 가지는 객체를 가리킨다. 이 constructor 프로퍼티는 함수 객체 자신을 가리킨다. 3. 함수의 다양한 형태3-1. 즉시호출함수표현식 IIFE, (Immediately Invoke Function Expression)함수의 정의와 동시에 실행되는 함수를 즉시호출함수라고 한다. 최초 한번만 호출되며 다시 호출할 수는 없다. 이러한 특징을 이용하여 최초 한번만 실행이 필요한 초기화 처리등에 사용할 수 있다. react에서 componentwillmount의 개념 즉시실행함수 내에 처리 로직을 모아 두면 혹시 있을 수도 있는 변수명 충돌을 방지할 수 있어 이를 위한 목적으로 사용되기도 한다.12345678910111213// 기명 즉시실행함수(named immediately-invoked function expression)(function myFunction() &#123; var a = 3; var b = 5; return a * b;&#125;());// 익명 즉시실행함수(immediately-invoked function expression)(function () &#123; var a = 3; var b = 5; return a * b;&#125;()); 3-2. 내부함수함수 내부에 정의된 함수를 내부함수라 한다.내부함수는 부모함수의 변수에 접근할 수 있지만, 부모함수는 자식함수의 변수에 접근할 수 없다. 3-3. 콜백함수콜백함수는 함수를 명시적으로 호출하는 방식이 아니라 특정 이벤트가 발생했을 때 시스템에 의해 호출되는 함수를 말한다. 보통 이벤트 핸들러 처리때, 비동기식 처리모델에 사용된다. 옵저버(Observer) 디자인 패턴에서 나온 개념이다. 123setTimeout(function () &#123; console.log('1초 후 출력된다.');&#125;, 1000); 비동기식 처리 모델이란 처리가 종료하면 호출될 함수(콜백함수)를 미리 매개변수에 전달하고 처리가 종료하면 콜백함수를 호출하는 것이다. 콜백함수는 콜백 큐에 들어가 있다가 해당 이벤트가 발생하면 호출된다.콜백 함수는 클로저이므로 콜백 큐에 단독으로 존재하다가 호출되어도 콜백함수를 전달받은 함수의 변수에 접근할 수 있다. (참고) 그런데 왜 이름이 callback 일까?설명1 -선언된 함수를 이용하는 것을 호출 (call) 한다고 표현 한다. 콜백 함수는 운영체제(혹은 웹)에 의해 호출되는 응용 프로그램의 함수라 할 수 있다. 호출되는 방향이 정상적인 호출과 달리 반대된다는 의미에서 콜백이라고 한다. 정상적인 함수 호출 방법과는 다르게 운영체제 ( 시스템 ) 측에서 이벤트를 발생시켜서 이에 대한 처리를 해달라고 요청해 오는 과정이 있기 때문에 이와 같은 이름이 붙여졌다고 할 수 있다. 설명2 -콜백함수란 API 의 반대개념이라고 볼 수 있습니다.또한 말그대로 콜백! CallBack &gt; 반대로 부른다고 해석할 수 있지요.우리는 작성하는 일반 코드내에서보통 API나 SDK에서 제공해주는 함수(Function)들을 호출(Call)하여 사용하곤 한다.이런 방식의 경우, 어떤 이벤트를 제어하기 위해서는 별도의 쓰레드를 생성하여 무한루프로 실시간 검사하는 꽤나 무겁고 살짝 무식한 프로그램들을 만들어야한다. 보통 이럴때, 사용하는 것이 콜백(CallBack) 함수.물론 시스템상 CallBack함수를 만들어 등록하는 방식이 제공되어야 한다.Windows 프로그램상에서 On??Event()를 통해 등록하는 방식이나, 안드로이드 상에서 Listener를 등록하는 방식이 이와 같다.콜백함수라는 말 그대로 일반 Call의 반대 방향을 말한다.통상적으로 쓰듯이 우리가 시스템상의 함수를 Call하는 것이 아니라, 시스템에서 우리가 만들고 등록한 함수를 Call하는 방식. 참고링크 http://poiemaweb.com/js-function shinlucky’s Archive","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Javascript","slug":"TIL-9997/Javascript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://feel5ny.github.io/tags/javascript/"}]},{"title":"4/ 참조타입_Function 타입 (1)","slug":"JS_04_1","date":"2017-12-02T02:20:12.000Z","updated":"2017-12-10T13:33:11.000Z","comments":true,"path":"2017/12/02/JS_04_1/","link":"","permalink":"http://feel5ny.github.io/2017/12/02/JS_04_1/","excerpt":"","text":"‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. 오류가 있다면 언제든지 댓글 남겨주세요. 목차 Function 타입 함수 선언 vs 함수 표현식 값처럼 쓰는 함수(일급객체) 함수의 내부 구조 함수 프로퍼티와 메서드 4,5번은 Function 2편에서 1. Function 타입함수는 객체이다. 모든 함수는 Function타입의 인스턴스이며, 프로퍼티와 메서드가 있다.함수란 어떤 특정 작업을 수행하기 위해 필요한 일련의 구문들을 그룹화하기 위한 개념이다. 함수 정의 함수 선언식 123function sum (num1, num2) &#123; return num1 + num2&#125; 함수 표현식 Function expression 123const sum = function(num1, num2)&#123; return num1 + num2&#125; 일급객체라는 함수의 특징 때문에 함수 리터럴 방식으로 선언 후 변수에 할당할 수 있다. 할당된 함수를 가리키는 참조값을 저장하게 된다. 이렇게 생성된 함수는 function 키워드 다음에 함수 이름이 없으므로 익명 함수로 간주한다. 익명함수(anonymous function) = 람다함수(lambda) name 프로퍼티는 빈 문자열이다. 함수표현식으로 재귀, 클로저, 고유변수 등을 설명할 수 있다. Function 생성자 사용 1const sum = new Function('num1','num2','return num1 + num2') 함수 리터럴 방식 당연히 권장하지 않는다. ECMAScript 생성자에 전달할 문자열을 다시 평가해야 하므로 성능에 영향이 있다. 괄호를 쓰지않는 sum괄호를 쓰지 않고 함수 이름만 쓰면 함수를 실행하지 않고 함수를 가리키는 포인터에 접근(만)하는 것이다. 2. 함수 선언 vs 함수 표현식자바스크립트 엔진이 실행 컨텍스트에 데이터를 불러올 때 중요한 차이가 하나 있다.함수 선언은 어떤 코드도 실행하기 전에 이미 모든 실행 컨텍스트에서 접근하고 실행할 수 있지만함수 표현식은 코드 실행이 해당 줄까지 진행하기 전에는 사용할 수 없다. 실행 컨텍스트와 같이 생각해보자!자바스크립트 엔진은 코드를 평가할 때 제일 먼저 함수 선언을 찾은 다음 이들을 맨 위로 올린다 (함수 호이스팅). 함수 표현식은 변수에 함수가 할당된 개념이기 때문에, 해당 변수에 값(함수)이 들어오기 전까지는 undefined로만 선언되어있는 상태이다.(변수 호이스팅)1234alert(sum(10,10));const sum = function(num1, num2)&#123; return num1 + num2;&#125; 즉, 위 코드를 보면 에러가 나는데, sum은 컨텍스트에 있지만 매개변수를 넘길 수 있는 형태가 아니기 때문에(2번째 줄 오기 전까지는 undefined) 해당 코드까지 실행하기 전에는 unexpected identifier 에러를 낸다.(예기치 못한 식별자 = sum(10,10)을 보고 함수형태의 식별자 sum을 기대하고 찾았는데, 함수형태가 아니라서) 함수 표현식만 사용하자고 권고한다 : 참고JavaScript : The Good Parts의 저자이며 자바스크립트의 권위자인 더글러스 크락포드(Douglas Crockford)는 이와 같은 문제 때문에 함수표현식만을 사용할 것을 권고하고 있다. 함수 호이스팅이 함수 호출 전 반드시 함수를 선언하여야 한다는 규칙을 무시하므로 1. 코드의 구조를 엉성하게 만들 수 있다고 지적한다. 또한 함수선언식으로 함수를 정의하면 사용하기에 쉽지만 대규모 애플리케이션을 개발하는 경우 2. 인터프리터가 너무 많은 코드를 변수 객체(VO)에 저장하므로 애플리케이션의 응답속도는 현저히 떨어질 수 있으므로 주의해야 할 필요가 있다. 3. 값처럼 쓰는 함수 (일급객체)자바스크립트 함수는 일급 객체이다. 일급객체란 생성(인스턴스 생성가능), 대입, 연산, 인자 또는 반환값으로서의 전달 등 프로그래밍 언어의 기본적 조작을 제한없이 사용할 수 있는 대상을 의미한다.일급객체일 경우 아래와 같은 특징을 갖는다. 1. 무명의 리터럴로 표현이 가능하다.2. 변수나 자료구조 (객체, 배열…)에 저장할 수 있다.3. 함수의 파라미터로 전달할 수 있다.4. 반환값(return value)으로 사용할 수 있다. (내부함수) 함수와 다른 객체를 구분 짓는 특징은 호출할 수 있다는 것이다. 함수가 다른 함수를 반환하는 상황예시1_callSomeFunction123456789101112// sample example// callSomeFuncion은 범용함수이다. 범용함수란 더 많은 상황에서 더 잘 적용할 수 있는 함수를 말한다.function callSomeFunction(someFunction, someArgument)&#123; return someFunction(someArgument) // 반환값으로 사용됨&#125;function add10(num)&#123; return num + 10;&#125;const result1 = callSomeFunction(add10, 19);alert(result); //20 예시2_sort의 createComparisonFunction함수 해당 객체의 프로퍼티 이름을 확인하여 순서를 배치하는 함수를 반환하는 비교함수이다. 개체는 해당 속성 중 하나의 값을 기준으로 정렬 할 수 있습니다.123456789101112131415161718192021// sortfunction createComparisonFunction(propertyName)&#123; return function (object1, object2)&#123; // return 연산자 뒤에 내부함수 let value1 = object1[propertyName] let value2 = object2[propertyName] if (value1 &lt; value2)&#123; return -1; // value1이 앞에 옴 &#125; else if (value1 &gt; value2)&#123; return 1; // value1이 뒤에 옴 &#125; else &#123; return 0; &#125; &#125;&#125;const data = [&#123;name: 'Joy', age: 27&#125;, &#123;name:'Clara', age:28&#125;]data.sort(createComparisonFunction('name'))console.log(data[0].name) // Claradata.sort(createComparisonFunction('age'))console.log(data[0].age) // 27 sort(compareFunction)compareFunction이 제공되지 않으면 요소를 문자열(toString)로 변환하고 유니 코드 코드 포인트 순서로 문자열을 비교하여 정렬됩니다. 예를 들어 “바나나”는 “체리”앞에옵니다. 숫자 정렬에서는 9가 80보다 앞에 오지만 숫자는 문자열로 변환되기 때문에 “80”은 유니 코드 순서에서 “9”앞에옵니다. 문자열 대신 숫자일 경우 value1과 value2를 빼는방법으로 색인을 반환한다.1234567const numbers = [4, 2, 5, 1, 3];numbers.sort(function(a, b) &#123; return a - b;&#125;);console.log(numbers);// [1, 2, 3, 4, 5] 참고링크 http://poiemaweb.com/js-function","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Javascript","slug":"TIL-9997/Javascript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://feel5ny.github.io/tags/javascript/"}]},{"title":"3/ 실행 컨텍스트와 스코프","slug":"JS_03","date":"2017-12-01T01:13:55.000Z","updated":"2017-12-18T10:33:53.000Z","comments":true,"path":"2017/12/01/JS_03/","link":"","permalink":"http://feel5ny.github.io/2017/12/01/JS_03/","excerpt":"","text":"프론트엔드 개발자를 위한 자바스크립트 프로그래밍 책을 참고하여 정리합니다. 오류가 있다면 언제든지 댓글 남겨주세요. 목차 실행컨텍스트란? 실행컨텍스트의 3가지 객체 스코프 체인 this value 1. 실행 컨텍스트실행 컨텍스트(Execution Context)는 scope, hoisting, this, function, closure 등의 동작원리를 담고 있는 자바스크립트의 핵심원리이다. ECMAScript 스펙에 따르면 실행 컨텍스트를 실행 가능한 코드를 형상화하고 구분하는 추상적인 개념이라고 정의한다. 즉, 실행 컨텍스트는 실행 가능한 코드가 실행되는 환경이라고 말할 수 있다.실행 가능한 코드란 전역코드 : 전역 영역에 존재하는 코드 함수코드 : 함수 내에 존재하는 코드 Eval코드 : Eval 함수로 실행되는 코드 일반적으로는 전역코드와 함수코드. 자바스크립트 엔진은 코드를 실행하기 위해 실행에 필요한 여러가지 정보를 알고 있어야 한다. 변수: 전역변수, 지역변수, 매개변수, 객체의 프로퍼티 함수 선언 함수 표현식은 호이스팅이 안되는 이유. (함수 표현식은 변수에 할당되는 방식이기 때문에) 변수의 유효범위 (Scope) this 자바스크립트 엔진은 실행 컨텍스트를 물리적 객체의 형태로 관리한다. 2. 실행 컨텍스트의 3가지 객체객체의 형태를 가지며 아래의 3가지 프로퍼티를 소유한다. Variable object Scope chain thisValue 2-1. Variable object (VO 변수객체)변수나 함수의 실행 컨텍스트는 다른 데이터에 접근할 수 있는지, 어떻게 행동하는지를 규정합니다. 각 실행 컨텍스트에는 변수객체(variable object:VO)가 연결되어 있으며, 해당 컨텍스트에서 정의된 모든 변수와 함수는 이 객체에 존재한다. 코드로는 접근할 수 없다. 변수 parameter arguments parameter, 매개변수 : 함수 원형 작성시 사용되는 변수를 인자 (이름보다는 타입이 중요) argument, 실행인자 : 코딩 중 함수 호출시 사용되는 변수 또는 실제 값을 인수 함수 선언 (함수 표현식은 제외) Variable Object는 실행 컨텍스트의 프로퍼티이기 때문에 값을 갖는데, 이 값은 다른 객체를 가리킨다.전역 컨텍스트와 함수 컨텍스트가 가리키는 객체는 다르다. 함수에만 파라미터가 존재한다. 전역 컨텍스트인 경우Variable Object는 전역 변수, 전역 함수 등을 포함하는 전역 객체(Global Object/GO)를 가리킨다. 전역변수와 전역함수는 전역 객체의 프로퍼티이다. 전역 컨텍스트란 가장 바깥쪽에 존재하는 실행 컨텍스트이다. ECMAScript를 구현한 환경에 따라 이 컨텍스트를 부르는 이름이 다르다. 웹 () 전역컨텍스트 : window 전역변수와 전역함수는 모두 window의 프로퍼티 및 메서드로 생성된다. 전역컨텍스트는 애플리케이션이 종료될 때, 웹페이지를 나가거나 브라우저를 닫을 때까지 유지된다. 함수 컨텍스트인 경우Variable Object는 Activation Object(AO/활성객체)를 가리키며 arguments object가 추가된다.arguments object 매개변수와 인수들의 정보를 배열의 형태로 담고 있는 객체이다.(이전 글에서 함수의 매개변수로 값이 전달될 때 arguments object에 들어간다고 했다. 전달한 값이 argument라고 생각하면 된다. arguments object: 함수 호출 시 전달된 인수들의 정보를 담고 있는 유사배열객체.) 실행컨텍스트 스택123456789101112var x = 'xxx';function foo () &#123; var y = 'yyy'; function bar () &#123; var z = 'zzz'; console.log(x + y + z); &#125; bar();&#125;foo(); 컨트롤이 실행 가능한 코드로 이동하면 논리적 스택 구조를 가지는 새로운 실행 컨텍스트 스택이 생성된다. 스택은 LIFO(Last In First Out, 후입 선출)의 구조를 가지는 나열 구조이다. 전역 코드(Global code)로 컨트롤이 진입하면 전역 실행 컨텍스트가 생성되고 실행 컨텍스트 스택에 쌓인다. 전역 실행 컨텍스트는 애플리케이션이 종료될 때(웹 페이지에서 나가거나 브라우저를 닫을 때)까지 유지된다. 함수를 호출하면 해당 함수의 실행 컨택스트가 생성되며 직전에 실행된 코드블럭의 실행 컨텍스트 위에 쌓인다. 함수 실행이 끝나면 해당 함수의 실행 컨텍스트를 파기하고 직전의 실행 컨텍스트에 컨트롤을 반환한다.ECMAScript 프로그램은 모두 이런 식으로 실행된다. 3. 스코프 체인 SC스코프 체인은 일종의 리스트로서 중첩된 함수의 스코프의 레퍼런스를 차례로 저장하고 있는 개념이다.즉, 현재 실행컨텍스트의 활성객체(AO)를 선두로하여 순차적으로 상위 컨텍스트의 AO를 가리키며 마지막 리스트는 전역 객체를 가리킨다. 스코프 체인의 목적은 실행 컨텍스트가 접근할 수 있는 모든 변수와 함수에 순서를 정의하는 것. 함수가 중첩 상태일 때 하위함수 내에서 상위함수의 유효범위까지 참조할 수 있는데 이것는 스코프 체인을 검색하였기 때문이다. 함수가 중첩되어 있으면 중첩될 때마다 부모 함수의 Scope가 자식 함수의 스코프 체인에 포함된다. 함수 실행중에 변수를 만나면 그 변수를 우선 현재 Scope, 즉 Activation Object에서 검색해보고, 만약 검색에 실패하면 스코프 체인에 담겨진 순서대로 그 검색을 이어가게 되는 것이다. 이것이 스코프 체인이라고 불리는 이유이다. 이와 같이 순차적으로 스코프 체인에서 변수를 검색하는데 결국 검색에 실패하면 정의되지 않은 변수에 접근하는 것으로 판단하여 Reference 에러를 발생시킨다.스코프 체인은 [[scope]] 프로퍼티로 참조할 수 있다. 4. this valuethis 프로퍼티에는 this 값이 할당된다. this에 할당되는 값은 함수 호출 패턴에 의해 결정되는데, 이는 Function 글에서 자세히 다루겠다. 5. 실행 컨텍스트의 생성과정12345678910111213var x = 'xxx';`function foo () &#123; var y = 'yyy'; function bar () &#123; var z = 'zzz'; console.log(x + y + z); &#125; bar();&#125;foo(); 전역 코드에 진입컨트롤이 실행 컨텍스트에 진입하기 이전에 유일한 전역 객체(Global Object)가 생성된다. 초기 상태의 전역 객체에는 빌트인 객체(Math, String, Array 등)와 BOM, DOM이 설정되어 있다. 참고링크 http://poiemaweb.com/js-execution-context http://nerissa.tistory.com/entry/Parameter%EC%99%80-Argument%EC%9D%98-%EC%B0%A8%EC%9D%B4 http://poiemaweb.com/js-function","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Javascript","slug":"TIL-9997/Javascript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://feel5ny.github.io/tags/javascript/"}]},{"title":"2/ 메모리 관리와 가비지 콜렉션","slug":"JS_02","date":"2017-11-30T09:23:55.000Z","updated":"2017-12-05T17:14:50.000Z","comments":true,"path":"2017/11/30/JS_02/","link":"","permalink":"http://feel5ny.github.io/2017/11/30/JS_02/","excerpt":"","text":"프론트엔드 개발자를 위한 자바스크립트 프로그래밍 책을 참고하여 정리합니다. 오류가 있다면 언제든지 댓글 남겨주세요. 요약가비지 콜렉션은 더 이상 사용하지 않는 메모리를 회수하는 역할을 한다. 메모리를 회수하기 전 사용하지 않는 변수를 체킹해야 하는데 이때 표시하고 지우기 방법과 참조 카운팅이 있다. 표시하고 지우기 방법은 처음 컨텍스트의 모든 변수에 마킹을 한 후, 값이 할당되어있거나 참조되어있는 변수의 마킹을 지운다. 지웠음에도 마킹이 남아있는 변수를 회수하는 방식이다. 참조 카운팅은 참조 카운트가 0인 변수를 회수하는 방식인데 순환참조의 카운팅 한계가 있기 때문에 주로 표시하고 지우기 방법을 사용한다. 가비지 콜렉터 사이클이 도는 것은 상당한 비용이 발생한다. 메모리 누수 관리를 위해서는 사용하지 않는 변수나 객체는 모두 null로 재할당하여 가비지 컬렉터가 다음 사이클 때 회수하도록 하는 방법, 크롬 개발자도구의 퍼포먼스 탭에서 확인하는 방법 등이 있다. 목차 가비지 콜렉션 GC가 회수해야할 메모리 식별은 어떻게 하나요? 표시하고 지우는 방법 Mark and Sweep 참조 카운팅 Reference counting 가비지 콜렉터와 성능문제 자바스크립트로 프로그래밍시 내가 할 수 있는 메모리 관리 1. 가비지 콜렉션자바스크립트는 인터프리터 언어이다.(인터프리터 언어란 목적 파일 산출과정이 없이 실행과 동시에 줄 단위로 번역이 된고, 저용량 소스에 적합하다. 코드가 실행되는 시점이 런타임이다. 인터프리터와 컴파일러의 차이점) 고급 언어 인터프리터는 가비지 콜렉터 라는 소프트웨어를 가지고 있다.가비지 컬렉터(Garbage Collector)란 메모리 할당을 추적하고 할당된 메모리가 더 이상 필요 없어졌을 때 해체하는 작업이다. 이 프로세스는 주기적으로 실행되는데 코드 실행 중에 특정 시점에서 메모리를 회수하도록 지정할 수도 있다. C나 C++같은 언어에서는 메모리 추적이 매우 중요하기 때문에 메모리 관리가 힘들지만, 자바스크립트는 필요한 메모리를 자동으로 할당하고 더 이상 사용하지 않는 메모리는 자동으로 회수하므로 개발자가 직접 메모리를 관리하지 않아도 된다. 가비지 컬렉터는 항상 필요없어진 메모리만을 해제하지만, 모든 필요없어진 메모리를 해제하는 건 아니다. 즉, ‘더 이상 필요없는 모든 메모리’가 아니라 ‘더 이상 필요 없는 몇몇 메모리’를 찾아낸다. 이는 가비지 콜렉션 알고리즘의 한계점이 있기 때문이다. 2. GC가 회수해야할 메모리 식별은 어떻게 하나요?무튼, 어떤 변수가 더 이상 사용되지 않는지, 사용될 가능성이 있는 변수는 무엇인지 추적해야 메모리 회수 대상을 정할 수 있다. 식별 기준은 2가지이다. 표시하고 지우기 Mark and Sweep 참조 카운팅 Reference counting 2.1 표시하고 지우기 Mark and Sweep가장 널리 쓰이는 컬렉션 방법이다.변수가 특정 컨텍스트 안에서 사용할 것으로 정의되면 그 변수는 그 컨텍스트 안에 있는 것으로 표시된다. 표시한는 구체적인 방법은 알 필요는 없다.. GC가 작동하면 메모리에 저장된 변수 전체를 표시한다. 컨텍스트에 있는 변수, 컨텍스트에 있는 변수가 참조하는 변수의 표시를 지운다. 표시가 지워지지 않는 변수를 삭제한다. 가비지 컬렉터는 ‘메모리 청소’를 실행해 표시가 남아 있는 값을 모두 파괴하고 메모리를 회수한다. 2.2 참조 카운팅 Reference counting각 값이 얼마나 많이 참조 되었는지 추적한다. 변수를 선언하고 참조 값이 할당되면 참조 카운트는 1이다. 다른 변수가 같은 값을 참조하면 참조 카운트가 늘어난다. 마찬가지로 해당 값을 참조하는 변수에 다른 값을 할당하면 원래 값의 참조 카운트가 줄어든다. 값의 참조 카운트가 0이 되면 해당 값에 접근할 방법이 없으며, 메모리를 회수해도 안전하다. 다음 가비지 컬렉터를 실행할 때 참조 카운트가 0인 값에서 사용하던 메모리를 회수한다. 순환 참조 문제이 알고리즘은 두 object가 서로를 참조하면 문제가 발생한다.1234567function problem()&#123; let objectA = new Object(); // objectA : reference count 1 let objectB = new Object(); // objectB : reference count 2 objectA.someOtherObject = objectB; // objectA : 2 objectB.anotherObject = objectA; // objectB : 2&#125; 위의 코드를 보면 새로운 객체가 생성되면서 참조 카운트가 1이되고,서로 참조하게 되면서 참조카운트가 2가 된다.이 상태에서 스코프를 벗어나게 되면, 해당 변수는 사용되지 않는데, 벗어났음에도 카운트가 0이 아니기 때문에 GC가 컬렉션을 하지 않게 된다. 이는 곧 메모리 낭비로 이어진다.이때는 강제로 null을 항당해서 참조했던 값으로의 연결을 끊어줘야한다. 그래서 대부분의 브라우저에서는 표시하고 지우기 방법을 쓴다. 3. 가비지 콜렉터와 성능문제GC는 주기적으로 실행되며 메모리 내에 할당된 변수가 많다면 상당한 비용이 드는 작업이므로 GC를 실행하는 타이밍이 중요하다. 익스플로러는 가비지 컬렉터를 너무 자주 실행하여 성능 문제를 일으키는 것으로 악명이 놓다. 4. 자바스크립트로 프로그래밍시 내가 할 수 있는 메모리 관리웹 브라우저에서 사용할 수 있는 메모리는 일반적인 데스크톱 애플리케이션의 가용 메모리에 비해 매우 적다. 적은 메모리만 할당받는 주된 이유는 웹 페이지에서 실행하는 자바스크립트가 시스템 메모리를 전부 사용해서 운영체제를 다운시키는 일을 방지하기 위함이다.메모리 제한은 변수 할당 뿐만 아니라 호출스택, 스레드에서 실행할 수 있는 문장수에도 영향을 미친다.즉! 가능한 최소한의 메모리만 사용해야 페이지의 성능을 올릴 수 있다. 필요 없어진 데이터에는 null을 할당하여 참조를 제거(dereference)하는 편이 좋다. 이론상은 그렇지만, 실제로는 많이 사용하지 않는다. 참조를 하고 있는지에 대해서 개발자가 판단하기가 어렵기 때문에 오히려 전체 흐름을 망가뜨리는 행위가 될 수 있다. 우리도 모르게 어디선가 side effect가 발생할 수도있고, 복잡성이 증가한다.(면접 때 면접관님께서 정정해주셨다!)수동으로 참조 제거해야 할 대상은 주로 전역변수 및 전역 객체의 프로퍼티이다.(지역변수는 컨텍스트를 빠져나가는 순간 자동으로 참조가 제거된다.) 참조 제거의 요점은 값의 컨텍스트를 없애서 다음에 가비지콜렉션을 실행할 때 해당 메모리를 회수하도록 하는 것이다. 사용하지 않은 객체, 변수는 모두 null 로 초기화 이벤트 핸들러를 바인딩 했다면, 모두 언바인딩 DOM 을 동적으로 생성했다면, 불필요한 객체, 속성(값)을 DOM 에 삽입하지 말자. 크롬 개발자도구의 Performace탭에서 timeline확인해보자. (번외 (참고 글)) V8_Efficient Garbage CollectionV8은 객체가 사용하다가 더 이상 필요 없게 된 메모리를 가비지 콜렉션(garbage collection)이라고 알려진 작업을 통해서 다시 찾아온다. 빠른 객체 할당을 보장하고, 가비지 콜렉션으로 인한 프로그램 정지 시간을 단축시키며, 메모리 파편화를 제거하기 위해서 stop-the-world 방식의 세대적이고, 정확한 가비지 콜렉터(garbage collector)를 채택하고 있다. 이것은 다음을 의미한다. 가비지 콜렉션 사이클을 수행할 때 프로그램 실행을 멈춘다. 가비지 콜렉션 사이클 중 대부분의 시간을 객체의 힙(heap)의 영역을 처리하는데 사용함으로써 어플리케이션 멈춤 현상을 최소화 한다. 모든 객체가 포인터가 메모리의 어디에 있는지 항상 정확히 알고 있다. 이를 통해 객체를 포인터로 잘못 식별하여 메모리 누수를 일으키는 문제를 피할 수 있다. V8에서 객체의 heap은 2개의 부분으로 나누어져 있다. 새로 객체가 생성되는 영역과 가비지 콜렉션 사이클이 진행되는 동안에 살아남은 객체가 있는 영역. 객체가 가비지 콜렉션으로 들어가면 V8은 객체의 포인터를 갱신한다. 변수를 생성하는 것 자체가 메모리를 사용하는 것인데, 이를 회수하고 관리하는 가비지컬렉션이 있다는 것에 흥미로웠다.메모리 누수를 막아서 최소한의 메모리 사용으로 페이지 성능을 향상하는 것이 목적이지만, 사이클이 너무 많이 실행되면 이것 또한 자원낭비.변수의 할당의 최소화하고, 코드 재사용성을 높이고, 전역변수나 전역객체의 프로퍼티가 존재한다면 마지막에 null을 할당해보자. 참고링크 https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management http://huns.me/development/452 https://v8project.blogspot.kr/2015/08/getting-garbage-collection-for-free.html http://hapina.tistory.com/112","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Javascript","slug":"TIL-9997/Javascript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://feel5ny.github.io/tags/javascript/"}]},{"title":"1/ 변수, 원시 값과 참조 값","slug":"JS_01","date":"2017-11-29T09:23:55.000Z","updated":"2017-12-12T06:52:07.000Z","comments":true,"path":"2017/11/29/JS_01/","link":"","permalink":"http://feel5ny.github.io/2017/11/29/JS_01/","excerpt":"","text":"프론트엔드 개발자를 위한 자바스크립트 프로그래밍 책을 참고하여 정리합니다. 오류가 있다면 언제든지 댓글 남겨주세요. 까묵지말자Call-by-value, Call-by-reference 목차 변수란? 위치를 기억하는 저장소 원시 값과 참조 값 원시값은 단순한 데이터, 참조 값은 객체를 가리킨다. 동적 프로퍼티 동적으로 프로퍼티를 추가할 수 있는 값은 참조 값 뿐 값 복사 원시 값은 독립적으로 복사가되고, 참조 값은 주소값이 복사된다. 매개변수 전달 매개변수는 오직 값으로 전달된다. (매개변수로 복사) 타입 판별 typeof와 instance of 1. 변수란?변수는 위치(주소)를 기억하는 저장소이다. (포인터의 개념)위치란 메모리 상의 주소(address)를 의미한다. 즉, 메모리 주소에 접근하기 위해 사람이 이해할 수 있는 언어로 지정한 식별자이다. 변수를 통해 메모리에 값을 저장하기 위해서는 우선 필요한 저장 단위(byte)를 알아야한다. 이는 값의 종류에 따라 값을 저장하기 위해 확보해야할 메모리의 크기가 다르기 때문이다. 이때 값의 종류 즉, 데이터의 종류를 자료형이라고 한다. C-family언어는 정적타이핑 언어로 변수 선언 시 변수에 저장할 값의 종류에 따라 사전에 자료형을 지정하여야 한다. 변수를 선언하는 것부터가 메모리를 사용하는 것이기 때문에 변수사용을 최소한으로 하여, 페이지의 성능을 유지해야한다. 동적 타입 Dynamic typedjacascript는 동적 타이핑 언어로(느슨한 타입: loosely typed) 변수의 Type annotation이 필요없이 값이 할당되는 과정에서 자동으로 자료형이 결정(Type Inference: 타입 추론)된다. 따라서 같은 변수에 여러 자료형의 값을 대입할 수 있다. 타입스크립트는 이런 동적 타이핑 언어의 단점을 보안하기 위해서 타입을 명시해주는 특징을 갖고 있다. 변수는 값을 저장(할당), 참조하기 위해 사용된다. 한번 쓰고 버리는 값이 아닌 유지할 필요가 있는 경우, 변수를 사용한다. 2. 원시 값과 참조 값원시 값과 참조값 두가지 타입의 데이터를 저장할 수 있는데,원시 값은 단순한 데이터이며참조 값은 여러 값으로 구성되는 객체를 가리킨다.변수에 값이 할당되면 자바스크립트 엔진이 해당 값이 원시 데이터인지 참조인지 판단한다. 참조 값은 메모리에 저장된 객체이다. 다른 언어와 달리 자바스크립트는 메모리 위치에 직접 접근하는 것을 허용하지 않고, 객체의 메모리 공간을 직접 조작하는 일은 불가능하다. 참조로 접근한다객체를 조작할 때는 객체 자체가 아니라 해당 객체에 대한 참조를 조작하는 것이다. 이런 이유로 객체를 가리키는 값은 ‘참조로 접근한다’고 한다. 3. 동적 프로퍼티참조 값을 다룰 때는 언제든 프로퍼티와 메서드를 추가하거나 바꾸고 삭제 할 수 있다.원시 값에는 프로퍼티가 없지만 추가하려 해도 에러가 생기진 않는다.동적으로 프로퍼티를 추가할 수 있는 값은 참조 값 뿐이다. 12345678let person = new Object()person.name = 'Clara'alert(person.name)let name = 'Clara'name.age = 27alert(name.age) // undefined 4. 값 복사원시 값원시 값은 다른 변수로 복사할 때는 현재 저장된 값을 새로 생성한 다음 새로운 변수에 복사한다. 복사된 값과 원래 값은 완전히 분리되어 있다. 참조 값참조 값을 변수에서 다른 변수로 복사가되면 그 값이 객체 자체가 아니라 힙에 저장된 객체를 가리키는 포인터라는 점이다. 복사 후에는 두 변수는 정확히 같은 객체를 가리킨다. 따라서 한쪽을 조작하면 다른 쪽에도 반영된다.스택메모리 공간은 함수호출 시마다 생성되고,힙메모리 공간은 객체 생성 시 생성됨. 5. 매개변수 전달함수 매개변수는 모두 값으로 전달된다. 함수 외부에 있는 값은 함수 내부의 매개변수에 복사된다. 변수는 값으로도, 참조로도 접근할 수 있지만 매개변수는 오직 값으로만 전달된다. 메모리 공간을 확보하며 매개변수에 할당된다. Call-by-value (값에 의한 호출) 매개변수를 값 형태로 넘기면 해당 값은 지역 변수에 복사된다. arguments 객체에 들어가게 된다. Call-by-reference (참조에 의한 호출)함수에 값을 전달했기 때문에 함수 내부에서 매개변수의 값이 바뀌었음에도 불구하고 원래 객체에 대한 참조를 그대로 유지한 것이다.= 즉 객체가 넘어갈때는 참조 형태로 전달되는 것이 아니라 값으로 넘어간다. (== 포인터가 넘어간다) 함수 내부에서 obj를 덮어쓰면 obj는 지역객체를 가리키는 포인터가 되고, 이 지역 객체(obj.name)는 함수 실행이 끝나면 파괴된다. 6. 타입판별typeof1typeof 변수명 instanceof123변수명 instanceof Object // 이 변수는 Object의 인스턴스인가? // 결과값은 boolean 참고링크 http://poiemaweb.com/js-data-type-variable","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Javascript","slug":"TIL-9997/Javascript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://feel5ny.github.io/tags/javascript/"}]},{"title":"persistor.purge()","slug":"log_001","date":"2017-11-29T09:23:55.000Z","updated":"2017-12-31T06:44:50.000Z","comments":true,"path":"2017/11/29/log_001/","link":"","permalink":"http://feel5ny.github.io/2017/11/29/log_001/","excerpt":"","text":"https://github.com/rt2zz/redux-persistredux-persist 정리할 때 purge에 대해서 구체적으로 작성해보겠습니다. 상황 작업하면서 계속 리로딩을 하고 있었는데 reducer에서 값을 넣는 모양을 계속 바꿔주면서 작업하고 있었는데, 갑자기 로딩화면만 계속 나오기 시작 에러 메세지1TypeError: In this environment the sources for assign MUST be an object. This error is a performance optimization and not spec compliant 원인오류가 있는 persist 저장소를 갖고있어서 그럼. 솔루션https://github.com/rt2zz/redux-persist/issues/536 루트 폴더에 persist를 작성한 부분 중 const persistor = persistStore(store);를 찾아냅니다. 해당 코드 밑에 persistor.purge();를 넣고 다시 실행 (purge는 persistStore의 데이터를 전부 날리는 역할을 한다.) 잘 싱행된다면 해당 코드는 삭제하세요.","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"log","slug":"TIL-9997/log","permalink":"http://feel5ny.github.io/categories/TIL-9997/log/"}],"tags":[{"name":"react","slug":"react","permalink":"http://feel5ny.github.io/tags/react/"}]},{"title":"React에 typescript 셋팅하기","slug":"Typescript_13","date":"2017-11-28T11:13:22.000Z","updated":"2017-11-30T16:44:02.000Z","comments":true,"path":"2017/11/28/Typescript_13/","link":"","permalink":"http://feel5ny.github.io/2017/11/28/Typescript_13/","excerpt":"","text":"실습은 tic-tac-toc이라는 js 프로젝트를 마이그레이션 하면서 typescript를 연습해본다.raect+typescript는 이웅재님의 강의 참고하였습니다.역시 이론과 실습이 결합할 때가 제일 재밌다! 처음 프로젝트를 생성할 때 부터 타입스크립 버전으로 셋팅하는것이 제일 깔끔하다. 1. create-react-app ts-test --scripts-version=react-scripts-ts create-react-app + 프로젝트 이름 + --scripts-version=react-scripts-ts 추가 react에서 사용하는 PropTypes를 사용하지 않아도 된다. PropTypes컴포넌트 에서 원하는 props 의 Type 과 전달 된 props 의 Type 이 일치하지 않을 때 콘솔에서 오류 메시지가 나타나게 하고 싶을 땐, 컴포넌트 클래스의 propTypes 객체를 설정하면 됩니다. 또한, 이를 통하여 필수 props 를 지정할 수 있습니다. 즉, props 를 지정하지 않으면 콘솔에 오류 메시지가 나타납니다.1234567891011121314151617181920// Content.jsimport React from 'react'; class Content extends React.Component &#123; render()&#123; return ( &lt;div&gt; &lt;h2&gt;&#123; this.props.title &#125;&lt;/h2&gt; &lt;p&gt; &#123; this.props.body &#125; &lt;/p&gt; &lt;/div&gt; ); &#125;&#125;Content.propTypes = &#123; title: React.PropTypes.string, body: React.PropTypes.string.isRequired // isRequired는 필수의 의미이다.&#125;;export default Content; 2. state와 props는 interface로 처리를 해야한다.class에서 입출력되는 타입을 검토하기 위해서 배열의 요소가 객체일 경우 123456789101112131415161718192021interface GameState &#123; history: Array&lt;&#123; squares: Array&lt;string&gt; &#125;&gt; // Array 요소가 객체일 경우 이렇게 타입을 지정해준다. stepNumber: number xIsNext: boolean&#125;export default class Game extends React.Component&lt;GameProps, GameState&gt; &#123; constructor() &#123; super() this.state = &#123; history: [ &#123; squares: Array(9).fill(null), &#125;, ], stepNumber: 0, xIsNext: true, &#125; &#125; ...&#125; return에 대한 출력값을 타입으로 명시할때 JSX.Elementreturn 내부가 JSX문법이므로 JSX.Element로 명시하였다. 123456789101112131415export default class Game extends React.Component&lt;GameProps, GameState&gt; &#123; render(): JSX.Element &#123; return ( &lt;div className=\"game\"&gt; &lt;div className=\"game-board\"&gt; &lt;Board squares=&#123;current.squares&#125; onClick=&#123;i =&gt; this.handleClick(i)&#125; /&gt; &lt;/div&gt; &lt;div className=\"game-info\"&gt; &lt;div&gt;&#123;status&#125;&lt;/div&gt; &lt;ol&gt;&#123;moves&#125;&lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; ) &#125;&#125; 참고링크 https://velopert.com/921","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Typescript","slug":"TIL-9997/Typescript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Typescript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://feel5ny.github.io/tags/typescript/"}]},{"title":"11/ Type Inference","slug":"Typescript_12","date":"2017-11-27T04:11:43.000Z","updated":"2017-11-30T16:43:59.000Z","comments":true,"path":"2017/11/27/Typescript_12/","link":"","permalink":"http://feel5ny.github.io/2017/11/27/Typescript_12/","excerpt":"","text":"타입스크립트 정리 글은 이웅재님의 강의와 강의록을 참고하여 작성하였습니다. (짱짱)오류가 있다면 언제든지 댓글 부탁드립니다. 요약 타입추론 배열 타입 추론 리턴 타입 추론 유니온 타입과 타입 가드 1. 타입추론 기본적으로 타입을 명시적으로 쓰지 않을 때 추론하는 방법에 대한 규칙 명시적으로 쓰는 것은 타입 추론이 아니라 코드를 읽기 좋게 하는 지름길 let 은 기본적으로 우리가 아는 기본 자료형으로 추론 const 는 리터럴 타입으로 추론 오브젝트 타입을 타입을 쓰지 않으면, 프로퍼티는 let 처럼 추론 const person = {name: ‘Mark’, age: 35}; 면 person =&gt; {name: string; age: number;} 로 추론 대부분은 추론이 쉽다. 단순 변수 structuring, destructuring array, 함수의 리턴에서는 원하는데로 얻기가 힘들다. 2. 배열 타입 추론1234567891011121314151617const array1 = [];const array2 = ['a', 'b', 'c'];const array3 = ['a', 1, false]; // 타입이 다를 경우 union타입으로 추론된다. class Animal &#123; name: string;&#125;class Dog extends Animal &#123; dog: string;&#125;class Cat extends Animal &#123; cat: string;&#125;const array4 = [new Dog(), new Cat()] 3. 리턴 타입 추론1234567function hello(message: string | number) &#123; if (message === 'world') &#123; return 'world'; &#125; else &#123; return 0; &#125;&#125; 리터럴타입의 ‘world’이거나 0이 나온다. 4. 유니온 타입과 타입 가드타입가드 Type guard어떤 Scope에서 타입을 보증하는 런타임 체크를 수행하는 몇 가지 표현식이다. 타입 가드를 정의하기 위해서, 리턴 타입이 Type predicate인 함수를 정의 할 필요가 있다. Type predicate1parameterName is Type 1234567891011121314151617181920212223interface Person &#123; name: string; age: number;&#125;interface Car &#123; brand: string; wheel: number;&#125;function isPerson(arg: any): arg is Person &#123; return arg.name !== undefined;&#125;function hello(arg: Person | Car) &#123; if (isPerson(arg)) &#123; console.log(arg.name); // console.log(arg.brand); &#125; else &#123; // console.log(arg.name); console.log(arg.brand); &#125;&#125; 참고링크 https://infoscis.github.io/2017/06/19/TypeScript-handbook-advanced-types/","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Typescript","slug":"TIL-9997/Typescript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Typescript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://feel5ny.github.io/tags/typescript/"}]},{"title":"10/ Decorator","slug":"Typescript_11","date":"2017-11-26T12:11:09.000Z","updated":"2017-11-30T16:43:55.000Z","comments":true,"path":"2017/11/26/Typescript_11/","link":"","permalink":"http://feel5ny.github.io/2017/11/26/Typescript_11/","excerpt":"","text":"타입스크립트 정리 글은 이웅재님의 강의와 강의록을 참고하여 작성하였습니다. (짱짱)오류가 있다면 언제든지 댓글 부탁드립니다. 요약아직 잘 이해가 안간다. &#128565; Decorator 종류 Decorator 코드 작성 준비 Decorator Class Decorator Class Decorator Basic Class Decorator Advanced Method Decorator Property Decorator Prameter Decorator 1. Decorator 종류 Class Decorator Method Decorator Property Decorator Parameter Decorator 각자 Decorator의 시그니처가 다르다. Decorator? 함수 표현식에 해당한다. @와 같이 써서 표현식 뒤에 오는 대상에 더욱 기능적으로 추가하거나 하는 일들을 할 수 있다. 함수를 선언한 뒤 @키워드를 이용해 선언된 함수를 Decorator로 사용할 수 있다. 1-1. Decorator 코드 작성 준비yarn add typescript -D여기서 D는 dev와 같은 명령어다. 2. Decorator2-1. Class Decorator 2-1-1. Class Decorator Basic여기서 helloFactory 는 팩토리 패턴123456789101112131415161718192021function hello(constructorFn: Function) &#123; console.log(constructorFn);&#125;function helloFactory(show: boolean) &#123; if (show) &#123; return hello; &#125; else &#123; return null; &#125;&#125;// @hello@helloFactory(true)class Person &#123; constructor() &#123; console.log('new Person()'); &#125;&#125;new Person(); 2-1-2. Class Decorator Advanced123456789101112131415function addHello(constructorFn: Function) &#123; constructorFn.prototype.hello = function() &#123; console.log('hello'); &#125;&#125;@addHelloclass Person &#123; constructor() &#123; console.log('new Person()'); &#125;&#125;const person = new Person();(&lt;any&gt;person).hello(); 2-2. Method Decorator12345678910111213141516171819202122232425262728function editable(canBeEdit: boolean) &#123; return function(target: any, propName: string, description: PropertyDescriptor) &#123; console.log(canBeEdit); console.log(target); console.log(propName); console.log(description); description.writable = canBeEdit; &#125;&#125;class Person &#123; constructor() &#123; console.log('new Person()'); &#125; @editable(true) hello() &#123; console.log('hello'); &#125;&#125;const person = new Person();person.hello();person.hello = function() &#123; console.log('world');&#125;person.hello(); 2-3. Property Decorator12345678910111213141516171819202122232425262728function writable(canBeWrite: boolean) &#123; return function(target: any, propName: string): any &#123; console.log(canBeWrite); console.log(target); console.log(propName); return &#123; writable: canBeWrite &#125; &#125;&#125;class Person &#123; @writable(false) name: string = 'Mark'; constructor() &#123; console.log('new Person()'); &#125;&#125;const person = new Person();console.log(person.name);/*undefined*/ 2-4. Prameter Decorator12345678910111213141516171819202122232425262728function printInfo(target: any, methodName: string, paramIndex: number) &#123; console.log(target); console.log(methodName); console.log(paramIndex);&#125;class Person &#123; private _name: string; private _age: number; constructor(name: string, @printInfo age: number) &#123; this._name = name; this._age = age; &#125; hello(@printInfo message: string) &#123; console.log(message); &#125;&#125;/*Person &#123; hello: [Function] &#125;hello0[Function: Person]undefined1 참고링크 http://poiemaweb.com/es6-class https://javarouka.github.io/blog/2016/09/30/decorator-exploring/ http://blog-kr.zoyi.co/channel-frontend-decorator/","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Typescript","slug":"TIL-9997/Typescript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Typescript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://feel5ny.github.io/tags/typescript/"}]},{"title":"9/ itertor","slug":"Typescript_10","date":"2017-11-25T11:13:22.000Z","updated":"2017-11-30T16:43:51.000Z","comments":true,"path":"2017/11/25/Typescript_10/","link":"","permalink":"http://feel5ny.github.io/2017/11/25/Typescript_10/","excerpt":"","text":"타입스크립트 정리 글은 이웅재님의 강의와 강의록을 참고하여 작성하였습니다. (짱짱)오류가 있다면 언제든지 댓글 부탁드립니다. 요약아직 잘 이해가 안간다. &#128565; for…of for..in Symbol.iterator CustomIterable 1. for…of es3for(var i = 0; i&lt;array.length; i++) es5array.forEach : return으로 순회를 탈출할 수 없다. es6for..offor(const item of array)원칙적으로는 배열에서만 사용이 가능하다. for-of 루프는 이터러블 객체를 순회한다. for-of 루프는 이터레이터의 next() 메소드를 호출하고 next() 메소드가 반환하는 객체의 done 프로퍼티가 true가 될 때까지 루핑한다. 2. for..in일반적일때는 사용하지 않는 것으로. (엔진에 따라 다르다.) 배열을 순회할 때는 사용하지 않을 것 index 가 number 가 아니라 string 으로 나온다. 배열의 프로퍼티를 순회할 수도 있다. prototype 체인의 프로퍼티를 순회할 수도 있다. 루프가 무작위로 순회할 수도 있다. for..of 를 쓸 것 객체를 순회할 때 for (const prop of Object.keys(obj)) 도 사용할 수 있다. 12345678910111213141516171819202122232425262728293031323334const array = ['first', 'second'];const obj = &#123; name: 'Mark', age: 35&#125;;// 배열에 for..of 이용for (const item of array) &#123; console.log(typeof item + ', ' + item);&#125;// 배열에 for..in 이용// item 이 string 타입의 숫자for (const item in array) &#123; console.log(typeof item + ', ' + item);&#125;// 객체에 for..of 이용 =&gt; 오류/*for (const item of obj) &#123; console.log(typeof item + ', ' + item);&#125;*/// 객체에 for..in 이용for (const item in obj) &#123; console.log(typeof item + ', ' + item);&#125;// 객체의 keys 들에 for..of 이용for (const item of Object.keys(obj)) &#123; console.log(typeof item + ', ' + item);&#125; target 이 es3 인데도 forEach 는 트랜스파일이 되지 않았음.https://github.com/Microsoft/TypeScript/issues/2410 1234567891011const array = ['first', 'second'];// tsarray.forEach((item) =&gt; &#123; console.log(item);&#125;);// jsarray.forEach(function (item) &#123; console.log(item);&#125;); 3. Symbol.iterator이터러블(iterable)iterate = 반복하다이터러블은 순회 가능한 자료 구조이다. Symbol.iterator를 프로퍼티 key로 사용한 메소드를 구현하는 것에 의해 순회 가능한 자료 구조인 이터러블이 된다. 이터레이터Symbol.iterator를 프로퍼티 key로 사용한 메소드는 이터레이터로 반환한다. 이터레이터는 순회 가능한 자료 구조인 이터러블의 요소를 탐색하기 위한 포인터로서 next() 메소드를 갖는 객체이다. next() 메소드는 value, done 프로퍼티를 갖는 객체를 반환하며 이 메소드를 통해 이터러블 객체를 순회할 수 있다. ES6에서 제공하는 built-in iterable은 아래와 같다. Array Array.prototype[Symbol.iterator] String String.prototype[Symbol.iterator] Map Map.prototype[Symbol.iterator] Set Set.prototype[Symbol.iterator] DOM data structures NodeList.prototype[Symbol.iterator] HTMLCollection.prototype[Symbol.iterator] 프로퍼티이며, 함수가 구현되어있으면, iterable 이라고 한다. Array, Map, Set, String, Int32Array, Uint32Array, etc. 에는 내장된 구현체가 있으므로 이터러블 하다. 그냥 객체는 이터러블하지 않다. 이터레이터를 통해 이터러블한 객체의 Symbol.iterator 함수를 호출한다. target : es3 or es5 Array 에만 for..of 사용 가능 일반 객체에 사용하면 오류 target : es6 Symbol.iterator 함수를 구현하면 어떤 객체에도 for..of 사용 가능 12345678910111213141516171819// lib.es6.d.tsinterface IteratorResult&lt;T&gt; &#123; done: boolean; value: T;&#125;interface Iterator&lt;T&gt; &#123; next(value?: any): IteratorResult&lt;T&gt;; // next가 필수로 있어야한다. return?(value?: any): IteratorResult&lt;T&gt;; throw?(e?: any): IteratorResult&lt;T&gt;;&#125;interface Iterable&lt;T&gt; &#123; [Symbol.iterator](): Iterator&lt;T&gt;;&#125;interface IterableIterator&lt;T&gt; extends Iterator&lt;T&gt; &#123; [Symbol.iterator](): IterableIterator&lt;T&gt;;&#125; 5. CustomIterable객체는 이터러블이 아니다. 하지만 이터레이션 프로토콜을 준수하여 이터러블 객체를 만들수 있다. Symbol.iterator를 key로 사용한 메소드는 next() 함수를 프로퍼티로 가지는 객체를 반환하여야 한다. 그리고 next() 함수는 done과 value 프로퍼티를 가지는 객체를 반환한다. for-of는 done 프로퍼티가 true가 될 때까지 반복하며 done 프로퍼티가 true가 되면 반복을 중지한다. 12345678910111213141516171819202122class CustomIterable implements Iterable&lt;string&gt; &#123; private _array: Array&lt;string&gt; = ['first', 'second']; [Symbol.iterator]() &#123; var nextIndex = 0; return &#123; next: () =&gt; &#123; return &#123; value: this._array[nextIndex++], done: nextIndex &gt; this._array.length &#125; &#125; &#125; &#125;&#125;const cIterable = new CustomIterable();for (const item of cIterable) &#123; console.log(item);&#125; 참고링크 http://poiemaweb.com/es6-iteration-for-of","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Typescript","slug":"TIL-9997/Typescript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Typescript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://feel5ny.github.io/tags/typescript/"}]},{"title":"8/ Generic","slug":"Typescript_09","date":"2017-11-24T06:42:10.000Z","updated":"2017-11-30T16:43:48.000Z","comments":true,"path":"2017/11/24/Typescript_09/","link":"","permalink":"http://feel5ny.github.io/2017/11/24/Typescript_09/","excerpt":"","text":"타입스크립트 정리 글은 이웅재님의 강의와 강의록을 참고하여 작성하였습니다. (짱짱)오류가 있다면 언제든지 댓글 부탁드립니다. 요약제네릭은 어떠한 클래스 혹은 함수에서 사용할 타입을 그 함수나 클래스를 사용할 때 결정하는 프로그래밍 기법을 말한다. 정적 타입 언어에서도 이렇게 특정 타입을 위해 만들어진 함수 혹은 클래스를 보다 범용적으로 재사용하기 위한 요구가 있기 때문에 제네릭이라는 프로그래밍 기법이 생긴 게 아닐까한다. ~any~ =&gt; generic basic generic Generic Array Generic Types Generic Class Generic with extends Generic with multiple types type lookup system 1. ~any~ =&gt; genericany의 사용을 지양하고자 타입을 인자로 넘긴다. 탬플릿을 만드는 개념. 인자값과 출력값의 타입을 같게 탬플릿을 만들어준다. 제네릭은 선언 시점이 아니라 생성 시점에 타입을 명시하여 하나의 타입만이 아닌 다양한 타입을 사용할 수 있도록 하는 기법이다. 한번의 선언으로 다양한 타입에 재사용이 가능하다는 장점이 있다. T는 제네릭을 선언할 때 관용적으로 사용되는 식별자로 타입 파라미터(Type parameter)라 한다. T는 Type의 약자로 반드시 T를 사용하여야 하는 것은 아니다. 함수에도 제네릭을 사용할 수 있다. 제네릭을 사용하면 하나의 타입만이 아닌 다양한 타입의 매개변수와 리턴값을 사용할 수 있다. 123function helloGeneric&lt;T&gt;(message: T): T&#123; return message;&#125; 1234567891011121314151617181920212223function helloString(message: string): string &#123; return message;&#125;function helloNumber(message: number): number &#123; return message;&#125;// 더 많은 반복된 함수들 ...function hello(message: any): any &#123; return message;&#125;function helloGeneric&lt;T&gt;(message: T): T &#123; return message;&#125;console.log(hello('Mark').length);console.log(hello(35).length); // hello 의 리턴이 any 이기 때문에 타입 헬퍼가 제대로 되지 않음console.log(helloGeneric(35).toString()); // console.log(helloGeneric&lt;number&gt;(35).toString());// helloGeneric 을 사용하면 정상적으로 사용가능 2. basic generic Generic 타입을 쓰지 않으면, T 로 추론 Generic 타입을 쓰면, T 를 확인 1234567891011function helloGeneric&lt;T&gt;(message: T): T &#123; return message;&#125;function hello&lt;T&gt;(message: T): T &#123; return message;&#125;console.log(hello&lt;string&gt;('Hello'));let age = hello(35);hello&lt;number&gt;('35'); 3. Generic Arrayhello 함수의 제네릭 타입을 [] 를 이용하여 배열로 사용할 수 있음 12345function hello&lt;T&gt;(messages: T[]): T &#123; return messages[0];&#125;console.log(hello&lt;string&gt;(['Hello', 'World'])); 4. Generic Type구현체에 return T 를 설정하지 않아도, return false 시 오류가 나지 않는다? 때에 따라서 적합하지 않을 수 있다. 1234567type HelloGeneric = &lt;T&gt;(message: T) =&gt; T;const hello: HelloGeneric = &lt;T&gt;(message: T): T =&gt; &#123; return message;&#125;console.log(hello&lt;string&gt;('Hello').length); 5. Generic Class명시적으로 제네릭 타입을 설정하면 오류 function에서 generic을 사용할 때의 오류와 같다. 1234567891011class Person&lt;T&gt; &#123; private _name: T; private _age: number; constructor(name: T) &#123; this._name = name; &#125;&#125;new Person('Mark');// new Person&lt;string&gt;(35); 6. Generic with extendsT 가 string 또는 number 를 상속받기 때문에 boolean 은 안된다. 123456789101112class Person&lt;T extends string | number&gt; &#123; // union type private _name: T; private _age: T; constructor(name: T) &#123; this._name = name; &#125;&#125;new Person('Mark');new Person(35);// new Person(true); 7. Generic with multiple types1234567891011class Person&lt;T, K&gt; &#123; private _name: T; private _age: K; constructor(name: T, age: K) &#123; this._name = name; this._age = age; &#125;&#125;new Person('Mark', 35); 8. type lookup systemkeyof 키워드를 알아야한다.12type Test = keyof Person;// 리터럴 타입의 유니온 타입이 나온다. \"name\" | \"age\" 객체와 key값을 인자로 받아서 perperty의 타입값을 알아내는 함수를 만들었다고 치자.함수에서 컴파일 타입을 검증할 수 있는 시스템이 필요하다. =&gt; type lookup system getProperty: Generic과 type alias를 결합하여 사용하여 type을 찾아낼 수 있는 시스템을 만든다. setProperty: Generic과 type alias를 결합하여 사용하여 type을 찾아내고, 타입을 다시 재정의 하는 함수 1234function getProperty&lt;T, K extends keyof T&gt;(obj: T, key: K): T[K] &#123; return obj[key];&#125; 1234567891011121314151617181920212223interface Person &#123; name: string; age: number;&#125;const person: Person = &#123; name: 'Mark', age: 35&#125;;function getProperty&lt;T, K extends keyof T&gt;(obj: T, key: K): T[K] &#123; return obj[key];&#125;function setProperty&lt;T, K extends keyof T&gt;(obj: T, key: K, value: T[K]): void &#123; obj[key] = value;&#125;console.log(getProperty(person, 'name'));// console.log(getProperty(person, fullname));setProperty(person, 'name', 'Anna');console.log(getProperty(person, 'name'));// setProperty(person, 'name', 24); 참고링크 http://poiemaweb.com/typescript-generic https://www.youtube.com/watch?v=3-nJyzJATq8 https://hyunseob.github.io/2017/01/14/typescript-generic/","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Typescript","slug":"TIL-9997/Typescript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Typescript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://feel5ny.github.io/tags/typescript/"}]},{"title":"08 days/ 협업규칙 정하기, 초기 셋팅, 퍼블리싱","slug":"dada_02week","date":"2017-11-24T01:10:04.000Z","updated":"2017-12-14T13:54:05.000Z","comments":true,"path":"2017/11/24/dada_02week/","link":"","permalink":"http://feel5ny.github.io/2017/11/24/dada_02week/","excerpt":"","text":"Daily scrum(김나영) +Github + 목차(2017.10.01 ~ 2017.10.09) 프로젝트 매니징을 위한 셋팅 깃헙 셋팅 깃헙 프로젝트 탭으로 매니징 테스크 관련 규칙 정하기 프로젝트 초기 셋팅 의존모듈 셋팅 css 프레임워크 선택 css styling 방법 퍼블리싱 &#128153; (feat.추석) 1. 프로젝트 매니징을 위한 셋팅깃헙 셋팅 깃헙 레포에는 백엔드, 프론트엔드 폴더를 초반에 나누어서 진행하였다. troubleShoot위험 상황을 피하는 차원에서 백엔드와 프론트엔드는 레포를 따로 생성하는게 좋다고 하셨음. 처음 시작 시에는 master브랜치에서 브랜치를 각자 생성하여 진행, 풀리케스트 없이 바로 바로 merge하며 진행. (지금 생각하니 헉;) 퍼블리싱 이후에는 master는 절대적으로 배포용으로만 사용하기로 정함. (브랜치 rock 설정) develop-backend, develop-frontend 브랜치를 main브랜치로 정함. 퍼블리싱 단계에서는 각자 이름-페이지이름으로 브랜치를 생성하기로 정하였다. 퍼블리싱 끝나고 merge 후 troubleShoot위의 이미지는 1주일만에 merge한 상황. merge는 자주자주 하는게 좋다. 깃헙 프로젝트 탭프로젝트 탭은 총 5가지로 구성하였다. 규칙 할 일 진행 중인 작업 마친 작업 규칙의 경우 예전에 참여했던 프로젝트의 규칙을 light하게 가져왔다. 규칙은 아래와 같이 가볍게 정했다! 급한 이슈의 경우 라벨 붙이기 카드당 assign 필수 작성 규칙 [페이지명] 작업 설명 EX. [Diary] 식단 추가 작업 페이지가 구분 되지 않는 경우는 [Global]로 한다. EX. [Global] 페이지 라우팅 카드 하나당 1개의 작업만 등록한다. 테스크의 경우 매주 진행했던 오프라인 회의 때 코드리뷰 이후 할일 카드를 같이 생성하기로 정했다. Tip 깃헙 프로젝트에서 카드를 이슈로 만들면, 이슈탭에도 자동 등록 가능하다. 해당 이슈의 커밋이 진행 될 경우, 커밋 메세지에 이슈 number와 명령어를 추가하면 이슈가 자동으로 close나 등등의 작업이 자동화되면서, 이슈에도 log가 남는다. Close: close, closes, closed, fix, fixes, fixed, resolve, resolves, resolved Reopen: reopen, reopens, reopened Issue slack notation을 걸어놓지 않아서 이메일로 확인해야했다. 카드를 close로 옮겨야하는 번거로움이 있었다.(지라같은 툴은 옮기지 이슈가 닫히면 자동으로 옮기짐) 2. 프로젝트 초기 셋팅1. create-react-app 2. 폴더 구조 셋팅 components/ global하게 사용되는 container 컴포넌트 pages/ container component와 presentational component를 함께 두었다. 3. CSS 프레임워크 선택 + Semantic-UI-React 서비스 컨셉과 유사한 디자인을 갖고 있고 여러 종류의 컴포넌트들이 있어서 사용. 4. css styling 방법4-1. 첫번째 이슈_디자인 커스텀 시맨틱 프레임워크를 사용해도, 디자인 시안이 있었기 때문에 약간의 커스텀이 필요했다. 이미 셋팅되어있는 컴포넌트를 커스텀을 해야했기 때문에 css로는 적용이 불가능했다. 인라인으로 적용해야 덮어씌어졌음. !important로 되어있는 css를 제외하고는 inline 형식으로 작성하기로 결정 4-2. 두번째 이슈_스타일드 컴포넌트? 인라인 스타일핫한 스타일드 컴포넌트를 쓸까 인라인 스타일로 작업을 할까 고민했었다. 지금 생각해보면 과감하게 쓸껄…이라고 생각이 든다. 러닝커브가 있을 듯 하여 인라인 스타일로 작업하게 되었다. Issue인라인스타일로 작업하다보니 :hover, :before, :after과 같은 셀렉터를 사용하지 못했고, css를 부분 부분 섞어 쓰게 되었다. 스타일드 컴포넌트는 이를 해결해주는데.. 그냥 쓸껄! 5. 의존모듈 셋팅디자인 시안을 보면, 필요한 서드파티는 일기탭의 에디터 그래프 차트 5-1. 일기탭 에디터 개인적으로 summernote를 좋아하는데, 리액트 친화적이지 않아서 포기 리액트 친화적인 모듈을 찾다가 페이스북에서 만든 draft.js를 사용하기로 결정. 나중에 설명하겠지만, 에디터는 post로 보내기 전에 html 형식으로 export했어야 했고, 이 부분에서 많은 난관에 봉착했었다. draft-js-export-html로 해결 5-2. 그래프 차트 react d3를 사용하려고 했으나, 디자인 시안과 비슷하지 않다는 점, 커스텀이 어려운 점이 있었다. 두번째 찾은 차트는 Uber에서 나온 react-vis 리액트 친화적. 세번째 찾은 차트는 rechart react와 d3로 만들어졌고, UI가 서비스 컨셉과 잘 어울려서 선택하게 됨. 이또한 나중에 설명하겠지만, 그래프에 데이터를 넣는 구조와 서버에서 날라오는 데이터 구조가 많이 달랐기 때문에 프론트에서 다시 셋팅하는 작업이 필요했음. 3. 퍼블리싱 &#128153;프론트엔드는 2명이었다. 각자 하고싶은 페이지를 맡아서 진행했다. 퍼블리싱은 항상 즐겁다! &#128582; 퍼블리싱하면서 발생한 이슈만 정리하겠다. + 간단 라우팅 작업 react-router-dom 의존모듈 주 사용 API BrowserRouter Route Link Switch (로그인 이후 바꾸주는 역할, 404페이지 라우팅) withRouter (중첩 라우팅할 때 사용) App.js에 셋팅 path / /diary tab용 router파일 따로 셋팅 /diary/food /diary/fitness /diary/review /report /weight /search/:sc /recipe/:id","categories":[{"name":"Project &#127939;","slug":"Project-127939","permalink":"http://feel5ny.github.io/categories/Project-127939/"},{"name":"DA, DA","slug":"Project-127939/DA-DA","permalink":"http://feel5ny.github.io/categories/Project-127939/DA-DA/"}],"tags":[{"name":"react","slug":"react","permalink":"http://feel5ny.github.io/tags/react/"},{"name":"publishing","slug":"publishing","permalink":"http://feel5ny.github.io/tags/publishing/"}]},{"title":"7-1/ class 연습","slug":"Typescript_08-1","date":"2017-11-23T03:11:23.000Z","updated":"2017-11-30T16:43:40.000Z","comments":true,"path":"2017/11/23/Typescript_08-1/","link":"","permalink":"http://feel5ny.github.io/2017/11/23/Typescript_08-1/","excerpt":"","text":"연습문제 1아래 자바스크립트를 타입스크립트로 바꾸시오123456789101112131415161718function Car(name) &#123; this.name = name; this.speed = 0; this.honk = function() &#123; console.log(\"부우우웅\"); &#125;; this.accelerate = function(speed) &#123; this.speed = this.speed + speed; &#125;&#125;var car = new Car(\"BENZ\");car.honk();console.log(car.speed);car.accelerate(10);console.log(car.speed); 1차1234567891011121314151617class Car &#123; constructor(public name: string) &#123; &#125; public speed: number = 0 public honk(): void &#123; console.log('부우우웅') &#125; public accelerate(speed) &#123; this.speed = this.speed + speed; &#125; &#125;const car = new Car(\"BENZ\");car.honk();console.log(car.speed);car.accelerate(10);console.log(car.speed); 2차123456789101112131415161718192021class Car &#123; constructor(private name: string) &#123; &#125; private _speed: number = 0 public honk(): void &#123; console.log('부우우웅') &#125; public accelerate(speed) &#123; this._speed = this.speed + speed; &#125; get speed(): number &#123; return this._speed; &#125;&#125;const car = new Car(\"BENZ\");car.honk();console.log(car.speed);car.accelerate(10);console.log(car.speed); 3차1234567891011121314151617181920212223242526interface ICar &#123; honk(): void; accelerate(speed: number): void &#125;class Car &#123; constructor(private name: string) &#123; &#125; private _speed: number = 0 public honk(): void &#123; console.log('부우우웅') &#125; public accelerate(speed) &#123; this._speed = this._speed + speed; &#125; get speed(): number &#123; return this._speed; &#125;&#125;const car = new Car(\"BENZ\");car.honk();console.log(car.speed);car.accelerate(10);console.log(car.speed);","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Typescript","slug":"TIL-9997/Typescript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Typescript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://feel5ny.github.io/tags/typescript/"}]},{"title":"7/ class(2)","slug":"Typescript_08","date":"2017-11-22T01:32:11.000Z","updated":"2017-11-30T16:43:44.000Z","comments":true,"path":"2017/11/22/Typescript_08/","link":"","permalink":"http://feel5ny.github.io/2017/11/22/Typescript_08/","excerpt":"","text":"타입스크립트 정리 글은 이웅재님의 강의와 강의록을 참고하여 작성하였습니다. (짱짱)오류가 있다면 언제든지 댓글 부탁드립니다. 요약class에서 선언된 멤버변수와 멤버함수를 외부에서 접근이 가능하게 하는 방법, 재선언할 수 있도록 컨트롤하는 방법을 배웁니다. 생성자에도 private화하여 class 내부에서만 선언이 가능하도록 하며, 이는 singleTon 패턴을 정확하게 배치 가능할 수 있게 합니다. readonly 키워드를 붙여서 getter의 역할만 가능하도록 할 수 있습니다. class getter, setter class 멤버변수 class 멤버함수 class private static property or method Abstract Class private constructor singleTon readonly 1. class getter, setterget, set을 하는 중에 무언가를 해주기 위해서 사용한다. get과 set 사이에 추가적인 작업이 있을 때 사용한다. _ 를 변수명 앞에 붙이고, 내부에서만 사용한다. getter를 함수처럼 설정하면, 프로퍼티처럼 꺼내쓸수있다. 마찬가지로 setter 를 함수처럼 설정하면, 추가 작업을 하고 셋팅할 수 있다. 강사님은 getter setter가 혼란을 줄 수 있는 경우가 있어서 사용하지 않고, 대신 메서드를 같은 역할을 하는 메서드를 만드는데 메서드의 이름을 getName, setName으로 짓는다고 하셨따. 123456789101112131415161718192021222324class Person &#123; private _name: string; private _age: number; constructor(name: string, age: number) &#123; this._name = name; this._age = age; &#125; get name() &#123; return this._name; &#125; set name(name: string) &#123; // 작업 this._name = `$&#123;name&#125; Lee`; &#125;&#125;const person: Person = new Person('Mark', 35);console.log(person.name);person.name = 'Woongjae';console.log(person.name); gettergetter는 어떤 멤버 변수에 접근할 때마다 멤버 변수의 값을 조작하는 행위가 필요할 때 사용한다. 사용 방법은 아래와 같다. settersetter는 어떤 멤버 변수에 값을 할당할 때마다 멤버 변수의 값을 조작하는 행위가 필요할 때 사용한다. 사용 방법은 아래와 같다. 2. class 멤버변수객체지향의 class와 거의 유사하다. static property와 static method가 있다. static 키워드를 붙힌 프로퍼티는 클래스.프로퍼티로 사용한다. static 프로퍼티에 private, protected 를 붙히면 똑같이 동작한다. public static은 외부에서 변경이 가능하다. default는 public이다. 12345678910111213141516171819class Person &#123; public static CITY = \"\"; private static lastName: string = 'Lee'; private _name: string; private _age: number; constructor(name: string, age: number) &#123; this._name = name; this._age = age; &#125; public print() &#123; console.log(`$&#123;this._name&#125; $&#123;Person.lastName&#125; in $&#123;Person.CITY&#125;.`); &#125;&#125;const person: Person = new Person('Mark', 35);Person.CITY = 'Seoul';person.print(); // Mark Lee in Seoul. 3. class 멤버함수1234567class Person &#123; public static Talk(): void &#123; console.log('안녕하세요.'); &#125;&#125;Person.Talk(); // 안녕하세요. public static은 의미가 있다.private static 메소드와 프로퍼티는 무슨 의미가 있나?대부분 한 ts파일에 한 class를 사용하고, 모듈을 다른곳에서 쓰기위해서 export import를 쓴다. private static? 사용시 class의 private static과 ts파일 안의 제일 상단에 있는 const 변수와 어떤 차이가 있나? 라고 할때 애매하다. private이라 애매한 것. 4. class private static property or method12345678910111213141516171819202122232425class Person &#123; private static PROPERTY = '프라이빗 프로퍼티'; private static METHOD() &#123; console.log('프라이빗 메서드'); &#125; constructor() &#123; console.log(Person.PROPERTY); Person.METHOD(); &#125;&#125;//////////////////////////////////////////////const PROPERTY = '모듈 내 변수';function METHOD() &#123; console.log('모듈 내 함수');&#125;export class Person &#123; constructor() &#123; console.log(PROPERTY); METHOD(); &#125;&#125; 5. Abstract Class &#128566; abstract 키워드가 사용된 클래스는 new 로 생성할 수 없다. abstract 키워드가 사용된 클래스를 상속하면 abstract 키워드가 붙은 함수를 구현해야 한다. 12345678910111213abstract class APerson &#123; protected _name: string = 'Mark'; abstract setName(name: string): void; &#125;class Person extends APerson &#123; setName(name: string): void &#123; this._name = name; &#125;&#125;// const person = new APerson(); // (X)const person = new Person(); 6. private constructor 생성자 함수 앞에 접근제어자인 private 을 붙일 수 있다. 외부에서 생성이 불가능하다. 내부에서 생성하는 방법을 써야하고, 그러다보니 싱글톤 패턴을 정확하게 배치해서 사용할 수 있게 되었다. 1234567class Preference &#123; private constructor() &#123; &#125;&#125;// const p: Preference = new Preference(); (X) 7. singleTon &#128580;자바스크립트의 함수는 new로 생성자를 사용할 때마다 새로이 생성된 객체를 리턴합니다. 하지만 특수한 상황에서는 하나의 함수에서 생성되는 객체가 오직 한개만을 가져야 할 때가 있다. 그럴 경우 사용되는 디자인 패턴이 Singleton Pattern 싱글턴 패턴 : 객체리터럴이 싱글턴 패턴의 대표적. 모듈패턴을 변형한 디자인 패턴 처음 namespace를 만들 때 사용한다. 게임을 실행할 때 게임은 한번만 켜져야 하기 때문에 싱글턴이 적절. private 생성자를 이용해서 내부에서만 인스턴스 생성이 가능하도록 함. pubilc static 메서드를 통해 private static 인스턴스 레퍼런스를 획득한다. Lazy Loading (Initialization) : 최초 실행시가 아니라, 사용시에 할당을 함 12345678910111213141516class Preference &#123; public static getInstance() &#123; // 유일 객체가 정의되지 않았다면 객체를 생성. if (Preference.instance === null) &#123; Preference.instance = new Preference(); &#125; return Preference.instance; &#125; private static instance: Preference = null; private constructor() &#123; &#125;&#125;const p: Preference = Preference.getInstance(); 8. readonlyprivate인데 get, set중 get만 있는 상황과 같다. private readonly 로 선언된 경우, 생성자에서는 할당이 가능하다. private readonly 로 선언된 경우, 생성자 이외에서는 할당이 불가능하다. public readonly 로 선언된 경우, 클래스 외부에서는 다른값을 할당할 수 없다. 마치 getter 만 있는 경우와 같다. 12345678910111213141516class Person &#123; private readonly _name: string = null; public readonly age: number = 35; constructor(name: string) &#123; this._name = name; &#125; public setName(name: string) &#123; // this._name = name; (X) &#125;&#125;const p: Person = new Person('Mark');console.log(p.age);// p.age = 36; // (X) 참고링크 http://poiemaweb.com/es6-class http://blog.javarouka.me/2012/02/javascripts-pattern-1-singeton-patterrn.html http://karl27.tistory.com/10","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Typescript","slug":"TIL-9997/Typescript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Typescript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://feel5ny.github.io/tags/typescript/"}]},{"title":"6/ class(1)","slug":"Typescript_07","date":"2017-11-21T01:32:11.000Z","updated":"2017-11-30T16:43:35.000Z","comments":true,"path":"2017/11/21/Typescript_07/","link":"","permalink":"http://feel5ny.github.io/2017/11/21/Typescript_07/","excerpt":"","text":"타입스크립트 정리 글은 이웅재님의 강의와 강의록을 참고하여 작성하였습니다. (짱짱)오류가 있다면 언제든지 댓글 부탁드립니다. 요약타입스크립트에서 주로 사용되는 class의 기초에 대해서 배웁니다. es6에 도입된 class와, public, private, protected 키워드로 class에 접근제어하는 방법을 배우고, class간의 상속 개념을 배웁니다. class 기초 class property class Access Modifier class default constructor class &amp; method class extends 1. class 기초 생성자 함수(constructor)가 없으면, 디폴트 생성자가 불린다. 클래스의 프로퍼티 혹은 멤버 변수가 정의되어 있지만, 값을 대입하지 않으면 undefined 이다. =&gt; 오브젝트에 프로퍼티가 아예 존재하지 않는다. 접근제어자 (Access Modifier)는 public이 디폴트이다. 1234567891011121314class Person &#123; // name과 age는 프로퍼티 // class 바디에는 메소드와 프로퍼티만 포함할 수 있다. name: string = null; age: number = null; constructor(name:string) &#123; this.name = name; // constructor 내부에서 선언한 멤버변수는 this에 바인딩되어 있으므로 언제나 public이다. &#125; // 퍼블릭&#125;// class에서 default가 public이다.const person = new Person('Clara');// 인스턴스를 생성할 때 new 연산자와 함께 호출한 것이 바로 constructor이며 constructor의 파라미터에 전달한 값은 멤버 변수에 할당한다.console.log(person.name)console.log(person.age) // undefined 2. class property constructor이외에 프로퍼티들을 포함시킬 수 있다. 프로퍼티에도 값을 할당할 수 있다. 호출시 프로퍼티에 다시 값을 할당하게 되면, 마지막에 할당된 값이 출력된다. 12345678910111213141516class Person &#123; name: string = 'Clara'; age: number = 27; constructor() &#123; console.log(this.name === null); // false console.log(this.name === undefined); // true &#125;&#125;const person: Person = new Person();person.name = 'nayoung';person.age = 35;console.log(person); // Person &#123;name: 'nayoung', age: 35&#125;// Person의 프로퍼티가 불린 후에 person.name에 다시 할당된 값이 불리어지므로 결론적으로는 'nayoung'이 출력된다. 3. class Access Modifierprivate 절대적으로 접근이 불가능하다. private 으로 설정된 프로퍼티는 dot(.)으로 접근할 수 없다. 클래스 내부에서는 private 프로퍼티를 사용할 수 있다. private이 붙은 변수나 함수는 _ 를 이름앞에 붙이는데, 이는 문법이 아니라 널리 쓰이는 코딩 컨벤션이다. 앞에 밑줄과 변수명을 쓰면 private이라는 코딩컨벤션 중 하나였다. 12345678910111213class Person &#123; public name: string; private _age: number; constructor(age: number) &#123; this._age = age; &#125;&#125;const person: Person = new Person(35);person.name = 'Mark';// person._age (X)console.log(person); // Person &#123;name: 'Mark', _age: 35&#125; protected부모자식간의 관계에서 상속을 받은 class는(자식) 부모에는 접근 가능하다. 부모에서 private 으로 설정된 프로퍼티는 상속을 받은 자식에서도 접근할 수 없다. 부모에서 protected 로 설정된 프로퍼티는 상속을 받은 자식에서 접근이 가능하다. 상속을 받은 자식 클래스에서 부모 클래스에 this 를 통해 접근하려면, 생성자에서 super(); 를 통해 초기화 해야한다. super란? super키워드는 부모 클래스의 프로퍼티를 참조할 때 또는 부모 클래스의 constructor를 호출할 때 사용한다. 12345678910111213141516class Parent &#123; private privateProp: string; protected protectedProp: string; constructor() &#123; &#125;&#125;class Child extends Parent &#123; constructor() &#123; super(); // 아래의 멤버변수와 순서가 바뀌어도 에러가 난다! this.protectedProp = 'protected'; // this.privateProp = 'private'; // (X) &#125;&#125; 4. class default constructor 디폴트 생성자는 프로그래머가 만든 생성자가 없을 때 사용할 수 있다. 사용자가 만든 생성자가 하나라도 있으면, 디폴트 생성자는 사라진다.12345678910class Person &#123; public name: string; private _age: number; constructor(age: number) &#123; this._age = age; &#125;&#125;const person: Person = new Person(); 5. class &amp; method 클래스 내부에 작성된 메서드는 public 이 디폴트 arrow function 으로 작성 가능 private 을 이용하면 클래스 외부에서 접근 불가 1234567891011121314151617181920class Person &#123; constructor(private _name: string, private _age: number) &#123; &#125; print(): void &#123; console.log(`이름은 $&#123;this._name&#125; 이고, 나이는 $&#123;this._age&#125; 살 입니다.`); &#125; printName = (): void =&gt; &#123; // arrow function console.log(`이름은 $&#123;this._name&#125; 입니다.`); &#125; private printAge(): void &#123; console.log(`나이는 $&#123;this._age&#125; 살 입니다.`); &#125;&#125;const person: Person = new Person('Mark', 35);person.print(); // 이름은 Mark 이고, 나이는 35 살 입니다.person.printName(); // 이름은 Mark 입니다.// person.printAge(); // (X) 6. class extends 상속은 extends 키워드를 이용한다. 자식 클래스에서 디폴트 생성자는 부모의 생성자와 입력 형태가 같다. 1234567891011121314151617181920212223class Parent &#123; constructor(protected _name: string, protected _age: number) &#123; &#125; print(): void &#123; console.log(`이름은 $&#123;this._name&#125; 이고, 나이는 $&#123;this._age&#125; 살 입니다.`); &#125; printName = (): void =&gt; &#123; console.log(`이름은 $&#123;this._name&#125; 입니다.`); &#125; private printAge(): void &#123; console.log(`나이는 $&#123;this._age&#125; 살 입니다.`); &#125;&#125;class Child extends Parent &#123; _name = 'Mark Jr.'; // 나중에 할당된 값이 출력된다. &#125;// const p: Child = new Child(); // (X)const p: Child = new Child('', 5);p.print(); // 이름은 Mark Jr. 이고, 나이는 5 살 입니다. 생성자를 정의하고, this 를 사용하려면, super 를 통해 부모의 생성자를 호출해줘야 한다. super를 호출할때는 부모 생성자의 입력 타입이 같아야 한다. super를 호출하는 것은 클래스 외부에서 호출하는 것과 같다. protected 함수를 호출해서 그 안의 private 을 출력하는 것에 주의한다.12345678910111213141516171819202122232425262728class Parent &#123; constructor(protected _name: string, private _age: number) &#123; &#125; print(): void &#123; console.log(`이름은 $&#123;this._name&#125; 이고, 나이는 $&#123;this._age&#125; 살 입니다.`); &#125; protected printName = (): void =&gt; &#123; console.log(`이름은 $&#123;this._name&#125; 입니다.`); &#125; protected printAge(): void &#123; console.log(`나이는 $&#123;this._age&#125; 살 입니다.`); &#125;&#125;class Child extends Parent &#123; constructor(age: number) &#123; super('Mark Jr.', age); this.printName(); this.printAge(); &#125;&#125;const p: Child = new Child(1);// 이름은 Son 입니다.// 나이는 1 살 입니다. 참고링크 http://poiemaweb.com/es6-class","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Typescript","slug":"TIL-9997/Typescript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Typescript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://feel5ny.github.io/tags/typescript/"}]},{"title":"03 days/ 기획 및 프로토타입, 그리고 디자인","slug":"dada_01week","date":"2017-11-21T01:10:04.000Z","updated":"2017-12-14T10:23:38.000Z","comments":true,"path":"2017/11/21/dada_01week/","link":"","permalink":"http://feel5ny.github.io/2017/11/21/dada_01week/","excerpt":"","text":"Daily scrum +Github + 개발부분부터 보길 원하신다면 다음 포스팅부터 읽으셔도 됩니다. 정말 3일만에 끝내신건가요?개발 공부를 하고 있던 만큼, 개발 이외의 시간들은 최대한 단축하고 싶었다. 우리 모두 비슷한 마음이었고, 다행히 이 부분의 스케줄을 잘 조정할 수 있었다. 사실 기획 스탭은 굉장히 중요한 시간이라는건 안다.. 한달이라는 기간이 주어졌기 때문에 선택과 집중을 해야하는 상황에서 우리는 개발기간을 선택했다. 다행히 각 스탭별로 능력을 갖고 있던 팀원들이 모였기 때문에, 이 부분에 대한 커뮤니케이션은 잘 진행되었고, 모두가 물어보는 그 3일만에 개발에 들어갈 수 있었다.(여기서 말한 3일은 아이데이션 기간은 제외한 기간이다.) 목차 아이데이션 와이어프레임 및 스토리보드 프로토타입 디자인 1. 아이데이션아이디어 논의 회의는 3일 중에.. 끝낸건 아니다ㅎ 그래도 2번의 회의 끝에 확정하게 되었다.9월 7일 팀빌딩을 마치고, 25일 첫 팀프로젝트 오리엔테이션 전까지 2번의 회의를 진행했다. 1차회의 서비스 주제의 경우, 요리에 관심이 많던 팀원의 의견에서부터 시작했다. 요리로 키워드가 좁혀지고, 요리로 끊임없는 마인드맵을 그리다가, 첫 회의때는 주제는 결정하지 못했다.그리고 첫 회의 때인만큼, 각자 하고 해보고싶은 테크에 대해서도 같이 얘기해보았는데, 그중 Google Cloud Platform (이하 GCP)의 Vision api를 사용하자는 의견이 나왔다. 간단하게 얘기하자면 사진을 분석하여 어떤 물체가 있는 사진인지 단어를 여러가지 던져주는 api이다. 사실 이외에도 여러 의견들이 나왔었다. 일랙트론, 얼굴인식 api, 등등.. 1차회의의 결론은 요리로 좁혀졌다는 것. 2차회의 1차회의가 끝난 후 2차회의 전까지 집에서 이것저것 생각 해보았다. 요리와 사진을 접목시켜서 나올 수 있는 서비스가 무엇일까. 요리를 사진 찍어서 올릴 상황은 언제인거지.그러다 문득 네이버 블로그 이웃은 다이어트 컨설팅을 하는 언니가 떠올랐다. 그분이 주로 컨설팅 하는 방식은 컨설팅 받은 사람이 칼로리 계산과 영양소를 잘 조절해서 건강한 식사를 해 줄 수 있도록 도와주는 방식인데, 이때 사용하는 방법은 그 사람의 SNS에 무조건 식단 사진을 올리고 칼로리, 영상소를 기록하게 한다. 컨설턴트는 그 내용을 확인하고 1:1로 상담을 진행한다. 오케이. 무조건 사진을 올려야한다는 조건과 음식이라는 조건이 일치했고, 2차 회의 때 제시해보았다. 저번 회의때 요리라는 키워드 때문에 레시피 서비스도 얘기했었는데, 레퍼런스를 찾다가 로푸드 레시피를 제공하는 해외사이트를 공유한적이 있었다. 그때의 레퍼런스와 건강함을 추구하는 몇몇 팀원들 덕분에 ㅎㅎ 식단 다이어리 서비스로 확정.바로 러프한 아키텍처를 구상하고 회의를 마무리했다. 2. 와이어프레임 및 스토리보드 팀프로젝트 오리엔테이션 및 3차회의 4차 회의 기획안 발표 팀 프로젝트 오리엔테이션 3차회의팀 오리엔테이션때는 여러 재밌는 시간을 가졌는데, 프로젝트 시작 전 생각할 수 있는 위험요소를 공유하고, 어떻게 해결할지에 대해서 공유하는 시간을 가졌다. 지금 보니.. 귀여운 리스크들이네. Risk 각자의 욕심을 내세우는 커뮤니케이션 문제로 팀원 간의 관계 악화 충분한 테스트를 거치지 못해 최종 결과물이 오작동하거나 오류 발생 환경적 문제 : 소스 손실, 장비 고장 Solution 충분한 대화, 타협되지 않을 경우 각자 해당 부분을 담당 테스트 기간을 무조건 확보한다. 백업을 자주 한다. 간단 오리엔테이션과 전체 진행 일정을 들은 후, 팀 회의 시간을 갖게 되었다. 이날은 저번에 짠 아키텍처를 시각화하고, 구체적으로 어떻게 컨셉을 잡을지와 UI구성, 서비스 네이밍, 등을 정했다. 이번 회의때는 몇몇 이슈들이 있었는데 저번 회의가 끝나고, 각자 머리 속으로 구성한 부분이 조금씩 달랐다는 점이었다. 이 날은 그런 생각의 차이를 조정하는 시간을 가졌다.그리고 건강한 다이어트를 위한 식단 다이어리 서비스, DA DA 가 확정 되었다. 스토리보드 작업 (소요기간: 1일)와이어프레임 ( PDF version + / Web version + ) Information Architecture 구조도 화면별 스토리보드 시나리오 3. 프로토타입 +프로토타입은 Invision, Sketch를 사용했다. 스토리보드를 참고하여 간단 목업스타일로 시안 작업을 진행했고, 인터렉션은 invision에서 작업, 전체 느낌과 컨셉을 확인하는 시간을 가졌다. 4. 디자인 +디자인은 간단하게 키워드를 잡고 진행했다. 심플 + 모던 + 산뜻최대한 음식을 먹고싶은 욕구를 억제했으면 좋겠다는 생각이 들어서 붉은 계열의 색상은 피했다. 식욕억제를 목적으로 블루계열 색상으로 key color를 잡았고, 블랙과 키칼리가 비슷한 비율로 사용되었기 때문에 강약조절이 필요했고, 키칼라에 좀더 힘을 주려기 위해 그라데이션을 사용하였다.프로토타입에서 목업작업을 잘 해놓았기 때문에 그래픽 작업에서는 수월하게 진행할 수 있었다. 역시 기초작업이 제일 중요. 최종 디자인 사안 이후 zeplin을 사용해서 팀원 전체와 공유하였다. 다음편! &gt;","categories":[{"name":"Project &#127939;","slug":"Project-127939","permalink":"http://feel5ny.github.io/categories/Project-127939/"},{"name":"DA, DA","slug":"Project-127939/DA-DA","permalink":"http://feel5ny.github.io/categories/Project-127939/DA-DA/"}],"tags":[{"name":"react","slug":"react","permalink":"http://feel5ny.github.io/tags/react/"},{"name":"plan","slug":"plan","permalink":"http://feel5ny.github.io/tags/plan/"},{"name":"design","slug":"design","permalink":"http://feel5ny.github.io/tags/design/"},{"name":"prototype","slug":"prototype","permalink":"http://feel5ny.github.io/tags/prototype/"}]},{"title":"5/ interface","slug":"Typescript_06","date":"2017-11-20T13:10:56.000Z","updated":"2017-11-30T16:43:31.000Z","comments":true,"path":"2017/11/20/Typescript_06/","link":"","permalink":"http://feel5ny.github.io/2017/11/20/Typescript_06/","excerpt":"","text":"타입스크립트 정리 글은 이웅재님의 강의와 강의록을 참고하여 작성하였습니다. (짱짱)오류가 있다면 언제든지 댓글 부탁드립니다. 요약inteface에 대해서 배웁니다. interface 내부에서 타입선언 후 변수에서 사용하며, 함수에서는 implements 키워드를 사용하여 interface를 상속받아 사용합니다. property를 ?를 사용하여 옵셔널하게 사용가능하며(안써도 되는 프로퍼티를 명시할 수 있음) interface 끼리 상속이 가능합니다. interface 자체를 함수화하여 사용가능하며, 내부에서는 출력값과 입력값의 타입을 명시합니다. indexable type으로도 옵셔널한 프로퍼티를 만들 수 있습니다. interface 기초 interface optional property optional property indexable type function in interface implements interface extends interface function interface 1. interface 기초123456const person: &#123; name: string, age: number &#125; = &#123; name: 'Mark', age: 32&#125;// person이라는 오브젝트를 설명하고 있는 타입은 리터럴 타입인데,매번 리터럴방식으로 타입을 선언할것인가?// 아니오.. &gt; interface로 부르자. 12345678910interface Person &#123; name: string, age: number,&#125;const person: Person = &#123; name: 'Mark', age: 32&#125;// interface는 컴파일 이후에는 나타나지 않는다. 타입을 미리 interface에서 명시 한 후에 해당 interface를 넣어서 타입을 명시한다. 1234567function hello(입력값:입력값타입): 출력타입 &#123; ~&#125;const hello = (p:Person): void =&gt; &#123; console.log(p.name)&#125; 12345678910interface Person &#123; name: string, age: number,&#125;// 입력과 출력을 정확히 명시하지 않으면, // 추론을 하게 되는데 이는 문제가 될 수 있다.function hello(p: Person): void &#123; console.log(`안녕하세요. $&#123;p.name&#125; 입니다.`);&#125; 2. interface optional property1. 있어도 되고 없어도 되는 proerty를 설정 할 수 있다.123456789interface Person &#123; name: string, age: number,&#125;const person: Person = &#123; name: 'Mark', // age를 정의하지 않았기 때문에 person에 빨간줄이 생긴다.&#125; 123interface Person &#123; age? : number // &lt;= age 뒤에 ?를 붙이면 된다.&#125; 123456789interface Person &#123; name: string, age?: number, // 옵셔널한 프로퍼티 주는 방법&#125;const person: Person = &#123; name: 'Mark', // age는 optional한 property이기 때문에 없어도 오류가 나지 않는다.&#125; 2. indexable typeindexable type으로 optional한 타입을 사용 가능하다.12345678910111213141516// 1. array같은 타입이고// 2. 사전같은 타입이다.interface Person &#123; name: string; [index: string]: string; // person의 property명으로 인덱스가 어떤 타입이었는지에 따라서 // property.string 형태의 어떤 indexable type이 들어가면 나머지는 다 string으로 표현할 수 있다. // 사전같은 의미이다.&#125;const person: Person = &#123; name: 'Clara',&#125;person.anybody = \"Clara\"person[1] = 'hi' // 배열형태로도 넣을 수 있다. person.anybody = &quot;Clara&quot; 이렇게 객체에 .을 붙인 후 프로퍼티로 타입을 옵셔널하게 줄 수 있기 때문에 optional type으로 사용이 가능하다는 뜻이다. (없어도 에러가 나지 않는다.) index는 string이거나 number만 가능하다. 1234567891011121314151617181920212223interface StringArray &#123; [index: number]: string;&#125;const sa: StringArray = &#123;&#125;; // 옵셔널하다, 안써도 에러가 안난다.sa[100] = '백';interface StringDictionary &#123; [index: string]: string;&#125;const sd: StringDictionary = &#123;&#125;; // 옵셔널하다sd.hundred = '백';interface StringArrayDictionary &#123; [index: number]: string; [index: string]: string;&#125;const sad: StringArrayDictionary = &#123;&#125;;// 당연히 옵셔널하다.sad[100] = '백';sad.hundred = '백'; 123456789101112131415161718interface StringDictionary &#123; [index: string]: string; name: string;&#125;const sd: StringDictionary = &#123; name: '이름' // 필수&#125;;sd.any = 'any'; // 어떤 프로퍼티도 가능////////////////////////////////////////////////interface StringDictionaryNo &#123; [index: string]: string; // name: number; // (X) 인덱서블 타입이 string 값을 가지기 때문에 number 를 필수로 끌어오면 에러&#125; 3. function in interfaceinterface 내부에 함수를 넣을 수 있다. 출력값의 타입을 명시해야한다.12345678910111213141516171819interface Person &#123; name: string; hello(): void; world(): string; nayoung(): string;&#125;const person: Person = &#123; name: 'Mark', hello: function (): void &#123; //void일 경우는 써도 되고 안 써도된다. &#125;, world(): string &#123; return 'World' &#125;, nayoung: (): number =&gt; &#123; // ES6 문법 합수 사용시 return 1 &#125;&#125; 4. implements interface &#128580;interface를 상속받아서 class에서 사용가능하다. class 선언문의 implements 뒤에 인터페이스를 선언하면 해당 클래스는 지정된 인터페이스를 반드시 구현하여야 한다. 12345678910111213141516171819202122interface IPerson &#123; name: string; hello(): void;&#125;// class 만들기. IPeron을 상속받았다.class Person implements IPerson &#123; // IPerson을 다 써줘야한다. name: string = null; constructor(name: string) &#123; // IPerson의 name을 this.name으로 받는다. this.name = name; &#125; hello(): void &#123; console.log(`안녕하세요. $&#123;this.name&#125; 입니다.`) &#125; public hi(): void &#123; console.log(`$&#123;this.name&#125;`) &#125;&#125;const person: IPerson = new Person('Mark');person.hello() 5. extends interface상속받는 인터페이스를 만들 수 있다. interface끼리 상속이 가능하다.12345678910111213interface Person &#123; name: string; age?: number;&#125;interface Korean extends Person &#123; city: string;&#125;const k: Korean = &#123; name: '이웅재', city: '서울'&#125;; 6. function interface함수형 인터페이스이다. 함수의 타입 체크는 할당할 때가 아니라 사용할 때 한다는 점을 명심 function의 입출력을 바로 명시하지 않는다. 12345678910111213interface HelloPerson &#123; // (name: string, age: number): void; (name: string, age?: number): void;&#125;// helloPerson의 타입이 HelloPersonlet helloPerson: HelloPerson = function (name: string) &#123; // name:string을 넣지 않아도 에러가 안난다. =&gt; 호출할 때 에러가 난다. console.log(`안녕하세요! $&#123;name&#125; 입니다.`);&#125;;helloPerson('Mark'); // 안녕하세요! Mark 입니다.helloPerson(); // 에러가 난다. 참고링크 http://poiemaweb.com/typescript-interface","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Typescript","slug":"TIL-9997/Typescript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Typescript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://feel5ny.github.io/tags/typescript/"}]},{"title":"4/ 타입추론, Type assertions, Type alias","slug":"Typescript_05","date":"2017-11-18T06:13:11.000Z","updated":"2017-11-30T16:43:26.000Z","comments":true,"path":"2017/11/18/Typescript_05/","link":"","permalink":"http://feel5ny.github.io/2017/11/18/Typescript_05/","excerpt":"","text":"타입스크립트 정리 글은 이웅재님의 강의와 강의록을 참고하여 작성하였습니다. (짱짱)오류가 있다면 언제든지 댓글 부탁드립니다. 목표이 포스팅과 interface 포스팅에서는 타입을 명시하는 방법을 배웁니다. 타입을 명시하지 않아도 추론이 가능하며, 강제 타입선언, 별명을 붙여가며 타입을 선언하는 방식 등을 배웁니다. let과 const의 타입 추론변수를 선언할 때 부터 타입을 신경쓰면서 선언할 수 있는데, 타입없이 선언할 경우 할당된 값을 확인 후 타입을 추론한다. let 키워드로 변수 선언시에는 타입추론이 가능하지만 const 키워드로 선언할 경우 추론이 되지 않으며 리터럴 타입으로 값이 타입이 된다. Type assertions타입을 강제적으로 명시해줄 수 있다. (as와 &lt;&gt;방법) Type alias Type alias와 Interface와 차이점타입에 다른 이름을 붙여주는 것인데, Interface와 유사하지만 차이점은, 상속과 인터페이스 구현(implements)의 가능 여부가 다르다는 것. 1. let과 const의 타입 추론12345let a: string = '진호';let b = '승민';const c: string = '나영';const d = '슬기' // 리터럴 타입 const는 프리미티브 타입은 다른 값으로 못 바꾸고, 레퍼런스타입은 다른 레퍼런스타입을 가리키지 못하게 하는 것인데, 타입스크립트에서는 리터럴 타입이라고 하는 것으로 타입까지 강제해버린다. 즉 const에서 타입없이 선언될 경우 타입 추론에 의해서 할단된 값이 타입으로 된다. (리터럴 타입)ex. 위에서 const d = &#39;슬기&#39;에서 d는 const d:&#39;슬기&#39;라고 뜨고, 슬기라는 리터럴 타입으로 된다. 재할당 redeclare let은 재할당(redeclare)이 가능하다. const는 레퍼런스 타입은 레퍼런스 값이 바뀌는 것을 허용하지 않고, 속안의 프로퍼티 바꾸는 것은 허용된다. 프리미티브 타입은 재할당이 아예 불가능. 보통은 const를 사용하며, let을 쓰면서 명시적으로도 값이 바껴지는 변수라고도 표시한다. 2. Type assertions (assertions:’단언’) 형 변환과는 다르다.형 변환은 : 실제 데이터 구조를 바꾼다. &#39;타입이 이것이다&#39;라고 컴파일러에게 알려주는 것을 의미한다.예_넓은 범위의 타입이 (union타입) 어떤 상황에서 고정이 되어야할 경우, 타입 어셜션으로 타입을 강제해 준다. 방법은 2가지가 있다. 변수 as 강제할 타입 &lt;강제할타입&gt;변수 123456789let someValue: any = \"this is a string\";let strLength: number = (&lt;string&gt;someValue).length;let strLength: number = (someValue as string).length;/*1. 주로 넓은 타입에서 좁은 타입으로 강제하는 경우가 많다.2. jsx 에서는 as 를 쓴다.*/ 3. Type alias (alias:’별명’)타입에 별명을 붙인다고 생각하면 된다. 타입이 생기는 것이 아니라, 따로 이름을 붙여주는 것이다. interface가 유사하지만 interface처럼 쓸수 없는 경우가 있다. Primitive나 Union Type, Tuple 같은 타입에서 쓴다.보통 Primitive 타입은 .. 많이 안쓴다. (number나 string을 구지..) 만들어진 타입의 refer로 사용하는 것이지 `타입을 만드는 것은 아니다. type + 별칭 12345678// Aliaing Primitivetype MyStringType = string;const str = 'world';let myStr: MyStringType = 'hello';myStr = str;// string에 'world'라는 별명을 주었다.// 별 의미가 없다.. 123456789101112131415// Aliaing Union Typelet person: string | number = 0;person = 'Mark';type StringOrNumber = string | number;// StringOrNumber이라는 타입별칭을 붙였다. // 별칭 붙일 때는 앞에 type + 별칭let another: StringOrNumber = 0;another = 'Anna';/*1. 유니온 타입은 A 도 가능하고 B 도 가능한 타입2. 길게 쓰는걸 짧게*/ 12345678// Aliaing Tuplelet person: [string, number] = ['Mark', 35];type PersonTuple = [string, number];let another: PersonTuple = ['Anna', 24];/*1. 튜플 타입에 별칭을 줘서 여러군데서 사용할 수 있게 한다.*/ 3-1. Type alias와 Interface와 차이점보통은 interface와 class등을 자주 사용하기 때문에 alias 쓰는 타이밍이 초반에는 많이 없다. interface를 사용하다가 굳이 사용할 필요가 없는 순간에 alias를 쓰면 된다. 오류 메세지타입스크립트가 컴파일을 시도할때 오류가 나올때, Alias라는 이름으로 알려주지 않고 타입 자체로 알려준다. 12345678910111213type Alias = &#123; num: number &#125;interface Interface &#123; num: number;&#125;declare function aliased(arg: Alias): Alias;declare function interfaced(arg: Interface): Interface;/*1. type alias 는 object literal type 로2. interface 는 interface 로*/ 상속을 받을 수는 있지만 상속을 할 수는 없다. 당연한건 type alias 끼리는 extends, implements 불가 interface extends type alias 가능 class A implements type alias 가능= A라는 클래스는 type alias 인터페이스를 구현할 수 있다. class A extends type alias 블가 (interface 도 마찬가지)= A라는 클래스는 type alias를 상속받지 못한다. 마치 interface 처럼 동작한다. 클래스 선언문의 implements 뒤에 인터페이스를 선언하면 해당 클래스는 지정된 인터페이스를 반드시 구현하여야 한다. 1234567891011121314151617181920212223242526272829type PersonAlias = &#123; name: string; age: number;&#125;; // type aliasinterface IPerson extends PersonAlias &#123;&#125; // 가능let ip: IPerson = &#123; name: 'Mark', age: 35&#125;;class PersonImpl implements PersonAlias &#123; name: string; age: number; hello() &#123; console.log('안녕하세요'); &#125;&#125; // PersonImpl라는 클래스는 PersonAlias라는 인터페이스를 구현하겠다.let pi: PersonImpl = new PersonImpl();pi.hello();class PersonChild extends PersonAlias &#123;&#125; // 불가능 extends와 implements의 차이class A extends B 라고 하면A는 B라는 클래스를 상속 받아서 +a 시키겠다는 뜻.class A implements C 라고 하면A는 C라는 인터페이스를 구현하겠다~ 라는 뜻입니다. 참고링크 http://gdthink.blogspot.kr/2006/06/extends%EC%99%80-implements%EC%9D%98-%EC%B0%A8%EC%9D%B4.html http://poiemaweb.com/typescript-interface","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Typescript","slug":"TIL-9997/Typescript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Typescript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://feel5ny.github.io/tags/typescript/"}]},{"title":"3/ Typescript_기본 데이터 타입","slug":"Typescript_04","date":"2017-11-17T03:33:40.000Z","updated":"2017-11-30T16:43:21.000Z","comments":true,"path":"2017/11/17/Typescript_04/","link":"","permalink":"http://feel5ny.github.io/2017/11/17/Typescript_04/","excerpt":"","text":"기본 데이터 타입 🌱타입스크립트에서 기본 자료형을 잘! 숙지해야 한다. 타입스크립트는 타입을 새로 만들면서 짜는 방식인데, 특정한 골격을 갖출 때 결국 남는건 기본 자료형들이 남는다. 이때 기본 자료형이 정확히 어떤 것들이 있는지 인지하고 있어야, 그 기본 자료형들을 잘 조합해서 내가 사용할 인터페이스를 만들어 낼 수 있고, 타입을 만들 수 있다. 자바스크립트의 기본자료형을 모두 포함한다. 타입스크립트 정리 글은 이웅재님의 강의와 강의록을 참고하여 작성하였습니다. (짱짱)오류가 있다면 언제든지 댓글 부탁드립니다 . literal 기본 자료형 Primitive Type (javascript) 🌱 boolean number string Template String Undefined &amp; null undefined &amp; null are subtypes of all other types null in JavaScript undefined in JavaScript 참조타입 (javascript) 🎯 Array Symbol 타입스크립트에서 추가로 제공하는 타입 🐥 Void Any Never Tuple Enum 0. literal 값 자체가 변하지 않는 값을 의미합니다 . 상수와 다른 것은 상수는 가리키는 포인터가 고정이라는 것이고, 리터럴은 그 자체가 값이자 그릇입니다 . “리터럴 상수는 5, 1.23 과 같은 숫자나, ‘This is a string’ 혹은 “It’s a string!” 과 같은 문자열 등을 말합니다. 이것들이 리터럴 상수라고 불리우는 이유는 이것들이 프로그램 내에 직접 문자 형태로 (literally) 지정되는 값들 이기 때문입니다. 이러한 값들은 한번 지정되면 변하지 않습니다 . 예를 들면 숫자 2는 언제나 자기 자신이 2 라는 숫자임을 나타내며 어떤 다른 의미도 갖지 않습니다 . 이들은 한번 지정되면 그 값을 변경할 수 없기 때문에 상수입니다 . 그 중에서도 특별히 이러한 값들을 리터럴 상수라고 부릅니다. @kangpual 1. 기본 자료형 Primitive Type object 와 reference 형태가 아닌 실제 값을 저장하는 자료형입니다 . 프리미티브 형의 내장 함수를 사용 가능한것은 자바스크립트 처리 방식 덕분 동작 자체는 마치 객체인 것처럼 처리된다 . 메모리를 아끼기 위해서 123let name = 'Nayoung'name.toString() 1-1. boolean 가장 기본적인 데이터 타입 단순한 true 혹은 false값 입니다 . JavaScript / TypeScript 에서 ‘boolean’ 이라고 부른다 . 소문자 boolean 과 대문자 Boolean 소문자 boolean 은 프리미티브 타입의 불린 , 대문자 Boolean 은 레퍼 오브젝트의 생성자 class 인데 , 자바스크립트에서는 두 가지의 차이가 크게 없지만, 타입스크립트에서는 차이가 있다 . 타입스크립트에서는 소문자를 권장한다. Type &#39;boolean&#39; is assignable to type &#39;Boolean&#39;. Type ‘Boolean’ is not assignable to type ‘boolean’. ‘boolean’ is a primitive, but ‘Boolean’ is a wrapper object. Prefer using ‘boolean’ when possible. 1234567891011let isDone: boolean = falsetypeof isDone === 'boolean' // true// Type 'boolean' is assignable to type 'Boolean'.let isOk: Boolean = true// Type 'Boolean' is not assignable to type 'boolean'.// 'boolean' is a primitive, but 'Boolean' is a wrapper object.// Prefer using 'boolean' when possible.let isNotOk: boolean = new Boolean(true) 1-2. number JavaScript 와 같이, TypeScript 의 모든 숫자는 부동 소수점 값 입니다. TypeScript 는 16진수 및 10진수 리터럴 외에도, ECMAScript 2015에 도입된 2진수및 8진수를 지원합니다. 1234let decimal: number = 6 // 10진수 리터럴let hex: number = 0xf00d // 16진수 리터럴let binary: number = 0b1010 // 2진수 리터럴let octal: number = 0o744 // 8진수 리터럴 1-3. string Template String을 자주 쓴다 . 다른 언어에서와 마찬가지로 텍스트 형식을 참조하기 위해 string형식을 사용한다. 자바스크립트와 마찬가지로, 타입스크립트는 문자열 데이터를 둘러싸기 위해 큰 따옴표나 작은따옴표를 사용한다. 12let name: string = 'mark'name = 'anna' 1-4. Template String 주로 사용한다. 행에 걸쳐 있거나, 표현식을 넣을 수 있는 문자열 이 문자열은 backtick (= backquote 기호에 둘러쌓여 있습니다.123456789101112131415161718* 포함된 표현식은 `$&#123; expr &#125;`와 같은 형태로 사용합니다.```jslet fullName: string = `Bob Bobbington`let age: number = 37let sentence: string = `Hello, my name is $&#123;fullName&#125;.I&apos;ll be $&#123;age + 1&#125; years old next month.`// template string 을 사용하지 않을 경우let sentence: string = &apos;Hello, my name is &apos; + fullName + &apos;.\\n\\n&apos; + &quot;I&apos;ll be &quot; + (age + 1) + &apos; years old next month.&apos; 1-5. Undefined &amp; null TypeScript에서 ‘undefined’와 ‘null’은 실제로 각각 ‘undefined’와 ‘null’이라는 고유한 타입을 가집니다. ‘void’ 와 마찬가지로, undefined 와 null 은 그 자체로는 쓸모가 없습니다. 둘다 소문자만 존재합니다. 1234// 이 변수들에 할당할 수 있는 것들은 거의 없다.let u: undefined = undefinedlet n: null = null 위 처럼 사용하기 보다는 return에서 주로 사용 1-5-1. undefined &amp; null are subtypes of all other types 기본 설정이 그렇습니다. 대입이 가능하다는 것이다. number에 null 또는 undefined 를 할당할 수 있다는 의미입니다. 하지만, 컴파일 옵션에서 --strictNullChecks사용하면, null과 undefined 는 void 나 자기 자신들에게만 할당할 수 있습니다. 이 경우, null과 undefined를 할당할 수 있게 하려면, union type 을 이용해야합니다. (union type: 두개의 타입을 합치는 것.) 123456789101112131415161718// 대입 가능let name: string = nulllet age: number = undefined// strictNullChecks =&gt; true// 보통 위의 옵션을 true로 하진 않는다..// 위의 옵션이 추가되면 자기 자신이나 void에게만 할당 가능, 다른 타입에는 할당하지 못함.// let name: null = null; // (O)// Type 'null' is not assignable to type 'string'.let name: string = null // (X)// null =&gt; null || void, undefined =&gt; undefined || void// Type 'null' is not assignable to type 'undefined'.let u: undefined = null // (X)let v: void = undefined // (O)let union: string | null | undefined = 'str' 1-5-2. null in JavaScript null 이라는 값으로 할당된 것을 null 이라고 합니다. 무언가가 있는데, 사용할 준비가 덜 된 상태. (undefined 는 무언가가 아예 준비가 안된 상태) null 이라는 타입은 null 이라는 값만 가질 수 있습니다. 런타임에서 typeof 연산자를 이용해서 알아내면 , object 입니다. 1234let n: null = nullconsole.log(n) // nullconsole.log(typeof n) // object 1-5-3. undefined in JavaScript 값을 할당하지 않은 변수는 undefined 라는 값을 가집니다. 무언가가 아예 준비가 안된 상태 object 의 property 가 없을 때도 undefined 입니다. 런타임에서 typeof 연산자를 이용해서 알아내면 , undefined 입니다. 1234let u: undefined = undefinedconsole.log(u) // undefinedconsole.log(typeof u) // undefined 2. 참조타입 (javascript)2-1. Array 원래 자바스크립트에서 array는 객체입니다. 사용방법 2가지 &#9996; Array&lt;타입&gt; (내부적으로 제네릭을 이용한 것이다.) 타입 [] 123let list: number[] = [1, 2, 3]let list: Array&lt;number&gt; = [1, 2, 3] 2-2. Symbol 🙄 ECMAScript 2015의 Symbol 입니다. 프리미티브 타입의 값을 담아서 사용합니다. 고유하고 수정불가능한 값으로 만들어줍니다. 그래서 주로 접근을 제어하는데 쓰는 경우가 많았습니다. 1234567let sym = Symbol()let obj = &#123; [sym]: 'value',&#125;console.log(obj[sym]) // \"value\" 3. 타입스크립트에서 추가로 제공하는 타입3-1. Void 타입이 없는 상태입니다. any 와 반대의 의미를 가집니다. Void 는 대문자가 없습니다. 소문자입니다. 주로 함수의 리턴이 없을 때 사용합니다. 그 외에는 사용할 일이 거의 없습니다. 12345function returnVoid(message): void &#123; console.log(message)&#125;returnVoid('리턴이 없다') 3-2. Any 어떤 타입이어도 상관없는 타입입니다. 이걸 최대한 쓰지 않는게 핵심입니다. 왜냐면 컴파일 타임에 타입 체크가 정상적으로 이뤄지지 않기 때문입니다. 그래서 컴파일 옵션 중에는 any 를 쓰면 오류를 뱉도록 하는 옵션도 있습니다. noImplicitAny 12345function returnAny(message): any &#123; console.log(message)&#125;returnVoid('리턴은 아무거나') 3-3. Never 리턴에 주로 사용된다. 아래의 3 가지 정도가 대부분 1234567891011121314// Function returning never must have unreachable end pointfunction error(message: string): never &#123; throw new Error(message)&#125;// Inferred return type is neverfunction fail() &#123; return error('Something failed')&#125;// Function returning never must have unreachable end pointfunction infiniteLoop(): never &#123; while (true) &#123;&#125;&#125; 3-4. Tuple 배열인데 타입이 한가지가 아닌 경우 마찬가지로 객체입니다. 꺼내 사용할때 주의가 필요합니다. 배열을 Destructuting 하면 타입이 제대로 얻어집니다. 12345678910111213141516// Declare a tuple typelet x: [string, number]// Initialize itx = ['hello', 10] // OK// Initialize it incorrectlyx = [10, 'hello'] // Errorx[3] = 'world' // OK, 'string' can be assigned to 'string | number'console.log(x[5].toString()) // OK, 'string' and 'number' both have 'toString'x[6] = true // Error, 'boolean' isn't 'string | number'const person: [string, number] = ['mark', 35]const [name, age] = person 3-5. Enum C 에서 보던것과 같습니다. 아래 예제만 이해하면 사용 준비 끝 Enum 의 결과값은 string 형이다. Da,Da 할때 아침 / 점심 / 저녁 / 간식을 Enum 타입으로 받았는데 , 이때 문자열이였기 때문에 *1을 해줬었다 . 1234567891011enum Color &#123;Red, Green, Blue&#125;let c: Color = Color.Green;enum Color &#123;Red = 1, Green, Blue&#125;let c: Color = Color.Green;enum Color &#123;Red = 1, Green = 2, Blue = 4&#125;let c: Color = Color.Green;enum Color &#123;Red = 1, Green, Blue&#125;let colorName: string = Color[2]; // 결과값은 string으로 해야한다. 참고링크 http://jaroinside.tistory.com/10 http://poiemaweb.com/typescript-vscode http://spectrumdig.blogspot.kr/2016/12/chrome-source-map-coffeescripttypescrip.html","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Typescript","slug":"TIL-9997/Typescript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Typescript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://feel5ny.github.io/tags/typescript/"}]},{"title":"2016년 A월 B일","slug":"algorithm_02","date":"2017-11-16T04:42:33.000Z","updated":"2017-11-27T09:10:10.000Z","comments":true,"path":"2017/11/16/algorithm_02/","link":"","permalink":"http://feel5ny.github.io/2017/11/16/algorithm_02/","excerpt":"","text":"2016년 A월 B일2016년 1월 1일은 금요일입니다. 2016년 A월 B일은 무슨 요일일까요? 두 수 A,B를 입력받아 A월 B일이 무슨 요일인지 출력하는 getDayName 함수를 완성하세요. 요일의 이름은 일요일부터 토요일까지 각각SUN,MON,TUE,WED,THU,FRI,SAT를 출력해주면 됩니다. 예를 들어 A=5, B=24가 입력된다면 5월 24일은 화요일이므로 TUE를 반환하면 됩니다. 1. 처음 생각한 로직 월마다 일 수가 다르다.a월이 1,3,5,7,10,12 &gt; 31일a월이 4,6,8,9,11 &gt; 30일a월이 2 &gt; 28일 일별로 요일이 다르다.const day = [&quot;FRI&quot;, &quot;SAT&quot;, &quot;SUN&quot;, &quot;MON&quot;, &quot;TUE&quot;, &quot;WED&quot;, &quot;THU&quot;]7일 day[0]6일 day[6] 전체 일수가 x라면x일을 7로 나눈후 나머지값 arr[x%7]x의 값은 ? 전체 일수를 배열과 연결하자.31일 + 1 = 32 // 배열에서 금요일부터 32번 후의 값1월 02월 31일 + b3월 31일 + 29일 + b4월 31일 + 29일 + 31일 + b5월 31일 + 29일 + 31일 + 30일 + b6월 31일 + 29일 + 31일 + 30일 + 31일 = 31일 * 3 + 30일 * 2 - 17월 31일 * 3 + 30일 * 3 -18월 31일 * 4 + 30일 * 3 -19월 31일 * 5 + 30일 * 3 -110월 31일 * 5 + 30일 * 4 -111월 31일 * 6 + 30일 * 4 -112월 31일 * 6 + 30일 * 5 -1 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152function getDayName(a, b) &#123; let answer = \"\"; let month = a; let date = 0; let inputDate = b; let week = 0; const day = [\"FRI\", \"SAT\", \"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\"] switch (month) &#123; case 1: date = 0 break; case 2: date = 31 break; case 3: date = 31 + 28 break; case 4: date = 31 * 2 + 29 break; case 5: date = 31 * 2 + 30 * 2 - 1 break; case 6: date = 31 * 3 + 30 * 2 - 1 break; case 7: date = 31 * 3 + 30 * 3 - 1 break; case 8: date = 31 * 4 + 30 * 3 - 1 break; case 9: date = 31 * 5 + 30 * 3 - 1 break; case 10: date = 31 * 5 + 30 * 4 - 1 break; case 11: date = 31 * 6 + 30 * 4 - 1 break; case 12: date = 31 * 6 + 30 * 5 - 1 break; &#125; date = date + inputDate return day[date % 7];&#125;//아래 코드는 테스트를 위한 코드입니다.console.log(getDayName(5, 24)); 2. case 문이 너무 비효율적이다. &gt; 반복문으로 바꾸자123456789101112function getDayName(a, b) &#123; let answer = [\"THU\", \"FRI\", \"SAT\", \"SUN\", \"MON\", \"TUE\", \"WED\",]; let month = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; let sum = 0; for (let i = 0; i &lt; a - 1; i++) &#123; sum += month[i]; &#125; sum += b; return answer[(sum % 7)];&#125; 3. Date 메소드를 사용해보자.메소드 사용 123456function getDayName(a, b) &#123; let arr = ['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT']; let date = new Date(`2016,$&#123;a&#125;,$&#123;b&#125;`); let day = date.getDay() return arr[day];&#125; 템플릿 리터럴을 사용하지 않으면 값이 이상하게 나온다. 이유 1234new Date();new Date(value);new Date(dateString);new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]); *dateString날짜를 표현하는 문자열값. 문자열은 parse 메소드에 의해 인식가능한 형식이어야 한다. *year, month, date날짜의 각 부분을 표현하는 정수값. 월(month)부분은 0부터 11까지의 값을 가지며, 0이 1월을, 11이 12월을 가리킨다. 때문에 템플릿 리터럴로 넣게 되면 문자열이 되어서 그대로 파싱하지만, 숫자일 경우 배열의 인덱스값으로 인지하여서 월의 시작숫자가 0이게 된다.즉, let date = new Date(2016,a-1,b) 이렇게 넣어야 한다. 참고링크 https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date","categories":[{"name":"Algorithm &#128583;","slug":"Algorithm-128583","permalink":"http://feel5ny.github.io/categories/Algorithm-128583/"},{"name":"Level2","slug":"Algorithm-128583/Level2","permalink":"http://feel5ny.github.io/categories/Algorithm-128583/Level2/"}],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://feel5ny.github.io/tags/algorithm/"}]},{"title":"2/ Typescript_tsconfig.json 프로퍼티의 종류","slug":"Typescript_03","date":"2017-11-15T10:30:01.000Z","updated":"2017-11-30T16:43:17.000Z","comments":true,"path":"2017/11/15/Typescript_03/","link":"","permalink":"http://feel5ny.github.io/2017/11/15/Typescript_03/","excerpt":"","text":"컴파일러 옵션실제 프로젝트에서는 컴파일러 옵션을 그렇게 많이 셋팅하진 않는다 . 옵션을 셋팅할 수 있는 전체 스펙은 이 링크로 가면 확인가능하다 . 타입스크립트 정리 글은 이웅재님의 강의와 강의록을 참고하여 작성하였습니다. (짱짱)오류가 있다면 언제든지 댓글 부탁드립니다. 최상위 프로퍼티 compileOnSave extends files, include, exclude types compileOptions 6-1. target과 lib 6-2. outDir, outFile 6-3. module 1. 최상위 프로퍼티 tsconfig.json 파일에서 제일 상위에 정의되어있는 컴파일 옵션들 compileOnSave extends compileOptions ( 초기에는 compileOptions 요소가 많이 존재한다 .) files include exclude 2. compileOnSave파일 변경 후 저장하면 바로 컴파일을 해준다 . 에디터마다 안될 수도 있다. true / false (default false) true 이면 저장하면 바로 컴파일됨 최상단에 설정해야 한다. 누가 ?? Visual Studio 2015 with TypeScript 1.8.4 이상 atom-typescript 플러그인 3. extends보통 많이 사용하지 않는다 . 사용 예를 들면 , 클라이언트 타입스크립트와 서버사이드 타입스크립트가 있을 때, 설정이 비슷하다면 어떤 파일을 만든 후, 상속을 받아서 작은 부분만 바꿔서 쓰는 경우 사용 가능하다. 파일 (상대) 경로명 : string TypeScript 2.1 New Spec 12345678910111213141516 // in config/base.json&#123; \"compilerOptions\": &#123; \"noImplicitAny\": true, \"strictNullChecks\": true &#125;&#125;// in tsconfig.json&#123; \"extends\": \"./configs/base\", \"files\": [ \"main.ts\", \"supplemental.ts\" ]&#125; 4. files, include, exclude 셋다 설정이 없으면 , 전부다 컴파일 files 상대 혹은 절대 경로의 리스트 배열. 파일별 부분 컴파일이 된다. exclude 보다 쎕니다. (exclude가 해놓아도 files 에 있으면 컴파일 실행된다는 뜻) 특정 폴더를 exclude가 있어도 컴파일 된다. include, exclude glob 패턴 (마치 .gitignore) include exclude 보다 약하다. 같은걸 사용하면 , .ts / .tsx / .d.ts 만 include (allowJS) exclude 설정 안하면 4가지 (node_modules, bower_components, - jspm_packages, )를 default 로 제외한다 . 은 항상 제외합니다 . (include 에 있어도 ) 5.@types (중요 !)TypeScript 2.0 부터 사용 가능해진 내장 type definition 시스템 이전 버전에서는 사용하지 못한다. 아무 설정을 안하면 ? node_modules/@types 라는 모든 경로를 찾아서 사용 typeRoots 를 사용하면 ? 배열 안에 들어있는 경로들 아래서만 가져옵니다 . types 를 사용하면 ? 패키지 이름입니다. 배열 안의 모듈 혹은 ./node_modules/@types/ 안의 모듈 이름에서 찾아옵니다 . [] 빈 배열을 넣는다는건 이 시스템을 이용하지 않겠다는 것입니다 . 블루베리 플젝에서는 types 를 사용한다 . typeRoots 와 types 를 같이 사용하지 않습니다 . 1234567891011121314151617181920212223// compiileOptions : type&#123; \"type\": \"object\", \"description\": \"Instructs the TypeScript compiler how to compile .ts files.\", \"properties\": &#123; \"typeRoots\": &#123; \"description\": \"Specify list of directories for type definition files to be included. Requires TypeScript version 2.0 or later.\", \"type\": \"array\", \"items\": &#123; \"type\": \"string\" &#125; &#125;, \"types\": &#123; \"description\": \"Type declaration files to be included in compilation. Requires TypeScript version 2.0 or later.\", \"type\": \"array\", \"items\": &#123; \"type\": \"string\" &#125; &#125; &#125;&#125; 6. compileOptions6-1. target과 lib1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&#123; \"type\": \"object\", \"description\": \"Instructs the TypeScript compiler how to compile .ts files.\", \"properties\": &#123; \"target\": &#123; \"description\": \"Specify ECMAScript target version. Permitted values are 'es3', 'es5', 'es2015', 'es2016', 'es2017' or 'esnext'.\", \"type\": \"string\", \"default\": \"es3\", \"anyOf\": [ &#123; \"enum\": [ \"es3\", \"es5\", \"es2015\", \"es2016\", \"es2017\", \"esnext\" // 확정은 아니지만 곧 확정될 것 같은 문법들을 모아둔 ] &#125;, &#123; \"pattern\": \"^([eE][sS]([356]|(201[567])|[nN][eE][xX][tT]))$\" &#125; ] &#125;, \"lib\": &#123; \"description\": \"Specify library file to be included in the compilation. Requires TypeScript version 2.0 or later.\", \"type\": \"array\", \"items\": &#123; \"type\": \"string\", \"enum\": [ \"es5\", \"es6\", \"es2015\", \"es7\", \"es2016\", \"es2017\", \"esnext\", \"dom\", \"dom.iterable\", \"webworker\", \"scripthost\", \"es2015.core\", \"es2015.collection\", \"es2015.generator\", \"es2015.iterable\", \"es2015.promise\", \"es2015.proxy\", \"es2015.reflect\", \"es2015.symbol\", \"es2015.symbol.wellknown\", \"es2016.array.include\", \"es2017.object\", \"es2017.sharedmemory\", \"esnext.asynciterable\" ] &#125; &#125;, \"noLib\": &#123; \"description\": \"Do not include the default library file (lib.d.ts).\", \"type\": \"boolean\" &#125; &#125;&#125; target 빌드의 결과물을 어떤 버전으로 할 것이냐 지정을 안하면 es3 입니다. lib 기본 type definition 라이브러리를 어떤 것을 사용할 것이냐 잘 정의하지 않으면 빨간줄이 계속 생긴다 . lib 를 지정하지 않을 때 , target 이 ‘es3’ 이고, 디폴트로 lib.d.ts 를 사용합니다. target 이 ‘es5’ 이면 , 디폴트로 dom, es5, scripthost 를 사용합니다 . target 이 ‘es6’ 이면, 디폴트로 dom, es6, dom.iterable, scripthost 를 사용합니다. es5 이후에는 문법별 쪼개서도 설정 가능하다 . ​lib 를 지정하면 그 lib 배열로만 라이브러리를 사용하니다. ​ 빈 [] =&gt; ‘no definition found 어쩌구’ 혹은 &quot;noLib&quot; : true로 바꾸면 된다. ( 거의 안쓸듯 ) 6-2. compileOptions: outDir, outFile 파일을 다 모아서 하나의 컴파일된 하나의 파일로 모으고 싶을 때 outFile을 사용 소스디렉토리에 그대로 똑같이 구조를 컴파일된 상태로 옮길 때 outDir 를 사용 많이 사용한다 . 12345678910111213141516171819&#123; \"type\": \"object\", \"description\": \"Instructs the TypeScript compiler how to compile .ts files.\", \"properties\": &#123; \"outFile\": &#123; \"description\": \"Concatenate and emit output to single file.\", \"type\": \"string\" &#125;, \"outDir\": &#123; \"description\": \"Redirect output structure to the directory.\", \"type\": \"string\" &#125;, \"rootDir\": &#123; \"description\": \"Specifies the root directory of input files. Use to control the output directory structure with --outDir.\", \"type\": \"string\" &#125; &#125;&#125; 6-3. compileOptions: modulemodule 결과물을 어떻게 무엇을 쓸것인가에 대한 것이다 . 컴파일 된 모듈의 결과물을 어떤 모듈 시스템으로 할지를 결정 target 이 ‘es6’ 이면 es6 가 디폴트이고 , target 이 ‘es6’ 가 아니면 commonjs 가 디폴트 입니다 . AMD 나 System 와 사용하려면, outFile 이 지정되어야 합니다 . ES6 나 ES2015 를 사용하려면, target 이 es5 이하여야 합니다. moduleResolution ts 소스에서 모듈을 사용하는 방식을 지정해야 합니다 . classic 아니면 node 입니다 . commonJS 일때만 node 라고 생각하시면 됩니다. paths 와 baseUrl 상대경로 방식이 아닌 baseUrl 로 꼭지점과 paths 안의 키/ 밸류로 모듈을 가져가는방식입니다 . rootDirs 배열 안에서 상대 경로를 찾는 방식입니다. 1234567891011121314151617181920212223242526272829303132333435&#123; \"type\": \"object\", \"description\": \"Instructs the TypeScript compiler how to compile .ts files.\", \"properties\": &#123; \"module\": &#123; \"description\": \"Specify module code generation: 'none', 'CommonJS', 'Amd', 'System', 'UMD', or 'es2015'.\", \"enum\": [\"commonjs\", \"amd\", \"umd\", \"system\", \"es6\", \"es2015\", \"none\"] &#125;, \"moduleResolution\": &#123; \"description\": \"Specifies module resolution strategy: 'node' (Node) or 'classic' (TypeScript pre 1.6) .\", \"type\": \"string\", \"pattern\": \"^(([Nn]ode)|([Cc]lassic))$\", \"default\": \"classic\" &#125;, \"baseUrl\": &#123; \"description\": \"Base directory to resolve non-relative module names.\", \"type\": \"string\" &#125;, \"paths\": &#123; \"description\": \"Specify path mapping to be computed relative to baseUrl option.\", \"type\": \"object\" &#125;, \"rootDirs\": &#123; \"description\": \"Specify list of root directories to be used when resolving modules.\", \"type\": \"array\", \"items\": &#123; \"type\": \"string\" &#125; &#125; &#125;&#125; 현재 플젝 tsconfig.json처음보는 옵션들이 있어서 정리해보았다 . 참고 : 타입스크립트 공식 페이지 allowSyntheticDefaultImports: true Allow default imports from modules with no default export. This does notaffect code emit, just typechecking. 리엑트에서 컴포넌트를 import 할 때 주로 쓰는 import Something from &#39;./Something&#39;을 사용할 수 있다 . noImplicitAny: false Raise error on expressions and declarations with an implied any type. 암시적으로 선언되었는데 any 로 추론되면 에러를 알려줍니다 . false이면 무시됨. preserveConstEnums: true Do not erase const enum declarations in generated code. See const enums documentation for more details. enum 변수선언을 유지한다는 것 같은데 정확히 잘 모르겠다. allowJs : false include 에 있는 파일 경로들에 존재하는 모든 .ts, .tsx파일들이 컴파일되는데 ,allowJs를 true 로 하면 .js와 .jsx 파일도 컴파일 대상이 된다 . sourceMap : true Generates corresponding .map file. 트랜스파일을 거치는 많은 모듈들이 디버깅을 위해서 기본적으로 source map 출력을 지원한다 . noImplicitReturns : true Report error when not all code paths in function return a value. 제대로 리턴 다 안되면 에러 -&gt; 오류에 대해 강력하게 체크한다는 뜻입니다. noUnusedParameters : true Report errors on unused parameters. 사용하지 않는 파라미터가 있으면 에러를 알려줍니다. noUnusedLocals : true Report errors on unused locals. 사용 안하는 로컬 변수가 있으면 에러를 알려줍니다 . 참고링크 http://jaroinside.tistory.com/10 http://poiemaweb.com/typescript-vscode http://spectrumdig.blogspot.kr/2016/12/chrome-source-map-coffeescripttypescrip.html","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Typescript","slug":"TIL-9997/Typescript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Typescript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://feel5ny.github.io/tags/typescript/"}]},{"title":"overview","slug":"dada_06week","date":"2017-11-14T01:10:04.000Z","updated":"2017-12-14T14:49:21.000Z","comments":true,"path":"2017/11/14/dada_06week/","link":"","permalink":"http://feel5ny.github.io/2017/11/14/dada_06week/","excerpt":"","text":"식단 다이어리 서비스, DA,DA프론트엔드 스쿨을 마지막 달에는 그동안 배운 기술을 토대로 프로젝트를 필수적으로 진행해야 했다. node.js 스쿨과 함께 5명으로 이루어진 우리 조는 33일간의 대장정을 끝으로, 알바퍼전의 웹서비스가 배포할 수 있게 되었다. 블로그에서는 프론트엔드 중심으로 이번 프로젝트에 대한 개인적인 후기와 더불어 전반적인 진행과정, 이슈에 대해서 5가지 챕터로 포스팅하려고 한다. chapter 1 : 기획 및 프로토타입 및 디자인chapter 2 : 퍼블리싱chapter 3 : 핵심기능 개발chapter 4 : 리팩토링 및 테스트chapter 5 : 추가개발 및 배포 이번 프로젝트를 통해서 크게 3가지를 얻을 수 있었다. 비동기통신 redux 자유로운 사용 react 라이프사이클과 한계 프로젝트 이후 느낀점 Rest API우리 프로젝트에서는 다루는 데이터의 양이 많았었다. 매일 하루 3끼 식단, 운동, 일기, 등등. 이 데이터들을 rest API를 사용해서 rest하게 통신했지만, 해당 액션마다 필요한 데이터 + 필요 없는 데이터까지 가져오는 경우가 많았다. 이를 방지하기위해서는 백엔드에 엔드포인트를 요청해야했고, 여러면에서 낭비되는 리소스가 많이 발생함.GraphQL과 Rest Api를 같이 써보자. 다른 상태관리 라이브러리redux의 사용은 props로 액션을 주고받는 면에서는 혁신이다. 당연히. 그치만 많은 액션을 다루고, 관리하는 면에서 이건 액션으로 처리해야해. 라고 말하는 순간 귀찮음이 도지게 된다. 아 그럼 또 액션을 놓고 리듀서에 놓고 payload의 타입을 잘 지정해서 넣어주어야겠구나. 이런 불편함을 해소하고자 mobX를 사용하나 싶었다. 다음에 사용해보기 타입 이슈타입에 대한 이슈가 종종 있었다. 특히 이건 도대체 무슨에러인거지? 하면서 삽질할 때가 보통 타입때문에 생긴 에러들이었다. 객체형태로 들어오는지, 어떤 타입으로 타입을 내려주는지 등등을 console.log로 찍는건 한계가 있었고, PropsType으로 설정하는 것도 흠. github : https://github.com/huusz/Da-Da DA,DA : https://dada.downmix.net (카카오 아이디로 로그인)","categories":[{"name":"Project &#127939;","slug":"Project-127939","permalink":"http://feel5ny.github.io/categories/Project-127939/"},{"name":"DA, DA","slug":"Project-127939/DA-DA","permalink":"http://feel5ny.github.io/categories/Project-127939/DA-DA/"}],"tags":[{"name":"react","slug":"react","permalink":"http://feel5ny.github.io/tags/react/"},{"name":"DADA","slug":"DADA","permalink":"http://feel5ny.github.io/tags/DADA/"}]},{"title":"야근지수 (미제)","slug":"algorithm_01","date":"2017-11-13T08:10:04.000Z","updated":"2017-11-27T09:10:07.000Z","comments":true,"path":"2017/11/13/algorithm_01/","link":"","permalink":"http://feel5ny.github.io/2017/11/13/algorithm_01/","excerpt":"","text":"야근 지수회사원인 수민이는 많은 일이 쌓여 있습니다. 수민이는 야근을 최소화하기 위해 남은 일의 작업량을 숫자로 메기고, 일에 대한 야근 지수를 줄이기로 결정했습니다. 야근 지수는 남은 일의 작업량을 제곱하여 더한 값을 의미합니다. 수민이는 1시간 동안 남은 일 중 하나를 골라 작업량 1만큼 처리할 수 있습니다. 수민이의 퇴근까지 남은 N 시간과 각 일에 대한 작업량이 있을 때, noOvertime 함수를 제작하여 수민이의 야근 지수를 최소화 한 결과를 출력해 주세요. 예를 들어, N=4 일 때, 남은 일의 작업량이 [4, 3, 3] 이라면 야근 지수를 최소화하기 위해 일을 한 결과는 [2, 2, 2]가 되고 야근 지수는 22 + 22 + 22 = 12가 되어 12를 반환해 줍니다. 처음 생각한 로직 해당 배열의 전체 합 - N값 1번의 값을 배열의 길이로 나눈다. 나머지가 0인 경우와, 0이 아닌 경우가 생긴다. 나머지가 0인 경우, 해당 몫의 제곱근에 length값을 곱한다. (끝) 나머지가 0이 아닌경우, 몫이 소수점이 나온는데, 이는 내림하여 소수점 자리수들을 버리고 (floor) 해당 값과 배열의 인자를 비교하여, 해당 값보다 작은 인자의 경우 바로 제곱근화 하고, 나머지 값은 해당 몫으로 제곱하여 더한다. (이 부분이 잘못되었음) 3번의 첫번째 나머지가 0인 경우는 테스트가 통과하는데 2번째 경우는 로직이 잘못됨 통과하고 싶다","categories":[{"name":"Algorithm &#128583;","slug":"Algorithm-128583","permalink":"http://feel5ny.github.io/categories/Algorithm-128583/"},{"name":"Level3","slug":"Algorithm-128583/Level3","permalink":"http://feel5ny.github.io/categories/Algorithm-128583/Level3/"}],"tags":[{"name":"algorithm","slug":"algorithm","permalink":"http://feel5ny.github.io/tags/algorithm/"}]},{"title":"Firebase의 storage 연동하기","slug":"firebaseStorage","date":"2017-11-12T01:10:04.000Z","updated":"2017-11-27T08:56:29.000Z","comments":true,"path":"2017/11/12/firebaseStorage/","link":"","permalink":"http://feel5ny.github.io/2017/11/12/firebaseStorage/","excerpt":"","text":"학교 로고 모음 사이트 현재 상황 팀 프로젝트인 식단 다이어리 서비스 dada 프로젝트에서는 db 설계에 대한 이슈가 없었다. 당연히 난 프론트엔드다보니.. db 설계를 담당하지 않아서인 건데, 현재 개인 프로젝트에서는 db 구조까지 짜는 작업을 하고 있다. DB 구조짜기300개의 데이터와 개당 storage에 연동되어있는 파일들이 있는데, 제일 좋은 건 db에 url 칼럼을 넣는 방식. 파이어베이스에서는 스토리지와 데이터베이스 연결하는 것까지는 제공하지 않는 듯하다. 수동으로 작업해야 하는데 아직 좋은 방법이 떠오르지 않는다. 데이터 불러오기storage에 있는 데이터를 가져오는데, 현재 이슈. 한 디렉토리에 300개를 넣어두고 한 번에 갖고 오는 방식이라 아주 느리다. db 디렉토리를 20개씩 분리한 후, 더 보기 형태의 방식으로 해결해야겠다. map을 돌려서 해당 db 인덱스값과 같은 값의 파일을 갖고 오게 하기위해서 파일 이름에 학교 이름이 아닌 PNG_1.png 이런 방식의 파일 이름으로 지정해두었다. 매칭이 잘못된 학교 이름을 찾아 내기도 힘들고, ux도 너무 안 좋을 것 같아서, 파일 이름을 학교 이름으로 바꾸기로 결정했다. 생각해 보니 지역별 칼럼을 정리하지 않았다. 비록 일일이 검토 후에 로고를 올리는 것이지만, 한 번 더 체킹을 위해 학교 url을 넣는게 좋겠다고 판단. 칼럼을 추가해야겠다. 공공api가 있었으면 좋겠다. 생각보다 db 짜는건 굉장한 노가다다! dada 프로젝트 할 때 백엔드 분께서 ‘생각보다 노가다도 많이 하게 되는데, 또 생각보다 어렵진 않더라구요!’ 라고 했던 말이 와닿는 하루다.","categories":[{"name":"Project &#127939;","slug":"Project-127939","permalink":"http://feel5ny.github.io/categories/Project-127939/"},{"name":"Univ Project","slug":"Project-127939/Univ-Project","permalink":"http://feel5ny.github.io/categories/Project-127939/Univ-Project/"}],"tags":[{"name":"react","slug":"react","permalink":"http://feel5ny.github.io/tags/react/"},{"name":"firebase","slug":"firebase","permalink":"http://feel5ny.github.io/tags/firebase/"},{"name":"db","slug":"db","permalink":"http://feel5ny.github.io/tags/db/"}]},{"title":"1/ Typescript_환경 셋팅","slug":"Typescript_02","date":"2017-11-10T01:52:01.000Z","updated":"2017-11-30T16:43:09.000Z","comments":true,"path":"2017/11/10/Typescript_02/","link":"","permalink":"http://feel5ny.github.io/2017/11/10/Typescript_02/","excerpt":"","text":"개발환경 구축 및 컴파일러 셋팅앞선 글에서 컴파일러와 트랜스파일러 인터프리터의 차이점을 알아보았다. 트랜스파일러와 컴파일러의 차이가 있다고는 했지만, 앞으로의 글에서는 컴파일러라고 통일해서 쓰려고 한다 . 타입스크립트는 컴파일드 언어라고 했지만 , 실제적으로 어떻게 환경을 셋팅하고 작업해야하는지 알아보자 . 타입스크립트 정리 글은 이웅재님의 강의와 강의록을 참고하여 작성하였습니다. (짱짱)오류가 있다면 언제든지 댓글 부탁드립니다. 실행환경 컴파일러 셋팅, 에디터 간단하게 실습 컴파일러 옵션 목표타입스크립트를 사용하기 위해서 첫번째 실행환경을 셋팅하고 , 컴파일러 셋팅(npm으로 설치), 에디터에서 환경셋팅(tslint, 등등) 을 하고 , 간단하게 실습으로 컴파일 테스팅해본다. 기본 테스트가 완료되면 컴파일러 옵션을 어떻게 추가해야하는지 알아본다 . 1. 실행환경런타임 환경 1-1. node.js 자바스크립트 런타임 환경으로 node.js를 사용한다. 컴파일러를 설치하기 위해서 필요하다. 타입스크립트에서 컴파일러 프로그램을 제공하는 것이 npm 모듈로 있기 때문에 .. node.js없이 VScode에서도 셋팅이 가능하긴하다 . (2번에서 확인!) 버전을 바꾸고 싶을 때는 nvm (node.js version manager) 사용 ~ 1-2. browser 결과를 보는 곳.. 그냥 있는거 쓰자 . 2. (타입스크립트) 컴파일러 셋팅 , 에디터타입스크립트를 셋팅해 보자. 셋팅 방법에는 npm 과 VScode plugin으로 설치하는 방법이 있는데 , npm으로 설치해보았다 . 2-1. npm으로 설치하기1npm i typescript -g 설치 후 node_modules 폴더의 bin파일에 tsc 파일이 생성되는 것을 볼 수 있다 ..bin 내부에 있는 파일들은 스크립트에서 경로 없이 파일 이름으로만 바로 실행시킬수 있다. 12345node_modules/.bin/tsc 파일이름// 원래는 이렇게tsc source.ts// 경로 생략 가능, 뒷부분은 컴파일 할 파일 이름 2-2. Visual Studio Code 내장 플러그인 사용하기타입스크립트로 만들어졌기 때문에 타입스크립트에 대한 지원이 강력 ! ts파일을 선택 후 하단 bar를 보면 Typescript라는 단어와 버전이 보인다. 버전을 누르면 옵션창이 보이게 되는데, 이는 VS Code에 내장되어있는 컴파일러 리스트 중 선택하라는 옵션창이다. 내장된 컴파일러 버전은 VS Code 가 업데이트 되면서 자동으로 올라가며, 컴파일러 버전과 VS Code 의 버전은 상관 관계가 있다. 내장된 컴파일러를 선택할수 있고, 직접 설치한 컴파일러를 선택할 수도 있다. 2-3. tslint 설치eslint와 같이 코딩 컨벤션을 맞추기 위한 프로그램이다 . 12npm i typescript tslint (로컬)tslint --init tslint.json파일이 생성되고, 프로젝트에 맞게 코딩 컨벤션을 셋팅할 수 있다 .https://palantir.github.io/tslint/ 에디터에서 tslint 플러그인 설치 cmd + p &gt; 옵션창 ext install tslint 그냥 확장프로그램에 가서 tslint 검색 후 다운로드 받아도된다. VScode : https://marketplace.visualstudio.com/items?itemName=eg2.tslint 3. 간단하게 실습3-1. 특정 프로젝트 폴더에서 타입스크립트 컴파일러 설정에 맞춰 컴파일tsconfig.json 파일에서 옵션을 추가하여 컴파일시 여러 조건을 걸 수 있다. tsconfig 파일 초기셋팅 1tsc --init tsconfig.json 파일이 생성이 된다. 처음 생성시 디폴트로 되어있는 tsconfig.json파일 12345678910&#123; \"compilerOptions\": &#123; /* Basic Options */ \"target\": \"es5\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'. */, \"module\": \"commonjs\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */, \"strict\": true /* Enable all strict type-checking options. */ &#125;&#125; target : 컴파일된 결과물을 es5 버전으로 맞추겠다는 것 module : 컴파일된 결과물이 어떤 모듈로 사용할 것인지? 옵션에 대한 자세한 설명은 4번에서 설명! 3-2. watch 모드1tsc -w 변경되면 감지해서 새로 컴파일 해주는 것 . 보통은 gulp 를 사용한다 . 3-3. 프로젝트 파일 내에서만 설치할 경우 ( 로컬)셋팅 방법 12345npm init -ynpm i typescript // 프로젝트 이름(폴더이름)이 동일하면 안된다.package.json &gt; \"scripts\"에 \"transpile\" : \"tsc\" 추가.// tsc파일이 .bin폴더 내부에 있는데, npm에서는 .bin내부의 파일들은 전체 상대 경로를 적지 않아도 접근가능하다.npm run transpile typescirpt 를 글로벌로 설치할 경우 tsc 파일이름.ts 명령어만으로 컴파일이 가능하다. 로컬로만 설치할 경우 , 위의 방법처럼 따로 스크립트에 추가 후에 명령어를 사용하면된다. cli 명령어로 명렁어를 다 걸어둘 수 있지만 json 파일을 만들어서 설정을 정리하며서 쓴다 . 참고링크 https://marketplace.visualstudio.com/items?itemName=eg2.tslint https://palantir.github.io/tslint/","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Typescript","slug":"TIL-9997/Typescript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Typescript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://feel5ny.github.io/tags/typescript/"}]},{"title":"0/ Typescript?","slug":"Typescript_01","date":"2017-11-08T09:23:55.000Z","updated":"2017-12-10T13:40:12.000Z","comments":true,"path":"2017/11/08/Typescript_01/","link":"","permalink":"http://feel5ny.github.io/2017/11/08/Typescript_01/","excerpt":"","text":"자바스크립트 말고 타입스크립트 ?최근 프로젝트를 진행하면서나도 모르는 사이에 타입이 자주 바뀌는 자바스크립트의 불편함을 느끼곤 했었다. 애초에 값을 할당할 때 타입 체킹은 그 순간에 내 머릿속에서만 생각만 하지, 그 이후는 케어하지 못하게 되었다. 나중에 에러가 발생하면, 삽질 후에 원인이 타입 때문이라는 것을 알게 되고.. 이는 생각보다 빈번하게 일어났다. 콘솔에서 타입 에러를 잡지않고 렌더링이 될 때가 있기 때문에 타입으로 발생한 버그를 잡을 때는 시간이 더 걸린다.( 왜 에러가 나는 거여? 물론 리액트는 타입도 종종 잡아준다 . 무튼 시간 아까워! ) 버그 잡는 게 중요하긴 한데 , 타입이 원인이라는 것은 뭔가 어처구니없는 실수라는 생각도 들었다 .. 그러다 문득! 예전에 타입 버그가 날 때마다 타입스크립트를 배우면 이런 버그는 애초에 만나지 않을 겁니다! 라고 자주 얘기하셨던 선생님이 종종 생각났고 .. 게다가 지금 여러 프로젝트에서 타입스크립트을 도입하고도 있고, 얼마 후에 앵귤러도 시작하고자 해서 .. 겸사겸사 동기부여가 여러 군데에서 생겼기 때문에!! 시작!! 타입스크립트 정리 글은 이웅재님의 강의와 강의록을 참고하여 작성하였습니다 . (짱짱) 오류가 있다면 언제든지 댓글 부탁드립니다 . 타입스크립트는 무엇인가 컴파일러? 트랜스파일러? 인터프리터 ? 정적타입 언어 vs 동적타입 언어 1. 타입스크립트는 무엇인가.타입스크립트는 프로그래밍 언어 중 하나이다 . 자바스크립트가 인터프리터 기반의 언어로써, 실행과 동시에 렌더링이 되는데 , 타입스크립트는 인터프리터 방식이 아닌 컴파일 후에 실행되는 Compiled Language이다 . 별도의 빌드 과정이 필요 ! 전통적인 컴파일 언어와는 다른데 , (C언어 , 자바 …) 때문에 Compile 말고, Transpile이라는 용어를 사용하기도 한다 . 혹은 meta programming이라고 한다. 2. 컴파일러? 트랜스파일러? 인터프리터 ?간단하게 3가지를 비교해보면 아래 그림과 같다. transpiler 하나의 언어를 다른 형태의 언어로 변환해 주는 기능을 부각시키는 표현으로 compiler라는 표현보다 transpiler라는 표현을 쓴다. ( 번역이라는 말과 합쳐진 듯 하다 .) ex. Typescript, Babel compiler 한 번 컴파일 하게 되면, 별도 생성된 목적 파일을 통해 빠르게 실행할 수 있다. 대용량 소스에 적합 컴파일이 필요 O 컴파일러가 필요 O 컴파일 하는 시점 O =&gt; 컴파일 타임 컴파일된 결과물을 실행 컴파일된 결과물을 실행하는 시점 ex. C, Go, C#, JAVA, … interpreter 목적 파일 산출 과정이 없이 실행과 동시에 줄 단위로 번역이 된다. 저용량 소스에 적합 컴파일이 필요 X 컴파일러가 필요 X 컴파일하는 시점 X 코드 자체를 실행 코드를 실행하는 시점 o = 런타임 ex. javascript *Tranditional Compiled Language 컴파일 언어라고 한다. C, C++, Go, C#, Java, … 프로그래머가 작성한 Source Code 를 기계어로 변환하는 과정을 Compile이라고한다. 기계어로 변환된 결과물을 Object Code (목적 코드 )라 한다. Compile 하는 프로그램을 Compiler 라고 한다 . Compile 하는 동안을 Compile Time 이라고 한다 . 컴파일된 코드는 프로세서에 따라 다르다. 소스 코드에서는 OS 에 따라 라이브러리가 다르다 . 컴파일된 코드는 작은 크기에 최적화된다. 일반적으로 실행시 기계어로 바꾸는 방식 (인터프리터 언어) 보다 빠르다 . 실행시 기계어로 바꿔주는 연산이 필요없기 때문이다 . 3. 정적타입 언어 vs 동적타입 언어 정적 타입 언어 : 미리 타입을 지정해놓고 시작 자바스크립트에서 정적타입언어만 갖고오자라고 한 것이 TypeScript 동적 타입 언어가 갖고 있는 단점을 커버하자 .하는 목적이다 . test coverage를 올리면 상관없긴하다 . ex. Typescript 동적 타입 언어 : 타입을 정하지 않는다. 타입 자체가 변화하는 것을 막지않는다. ex. Javascript *The End of Dynamic Languages vs Have Static Languages Won? 최근 나타나는 신생언어들은 대부분 정적 타입을 지원한다. (Typed Racket, TypedClojure, TypeScript, Typed Lua, Python with type hints) 정적 언어로 작성된 코드의 버그는 해당 코드를 실행하기 전까지는 찾을 수 없다. 동적 언어의 경우 대부분 대충 디자인되어있다 . JavaScript의 경우에는 2 주만에개발된 언어이다보니 컴파일러와 힌들리- 밀너 타입추론 시스템과 같은 CS 지식으로무장한 사람들이 디자인한 언어와 비교하는건 무리다. Closure 같은 경우에도 이제는 대부분의 언어에서 지원하게 되면서 functional 과imperative 프로그래밍이 융합되듯이, 동적 언어와 정적 언어도 그렇게 되지 않을까? Crystal Programming Language 의 경우 루비를 기반으로 하는 정적/ 동적 언어가 합쳐진 언어이다. 참고링크 http://www.notforme.kr/archives/1541 http://www.geekhours.com/2017/03/08/difference-compiling-transpiling/ https://ruslanspivak.com/lsbasi-part1/ http://blog.sejongin.kr/44 http://hieroglyph.tistory.com/4 https://okky.kr/article/304342","categories":[{"name":"TIL &#9997;","slug":"TIL-9997","permalink":"http://feel5ny.github.io/categories/TIL-9997/"},{"name":"Typescript","slug":"TIL-9997/Typescript","permalink":"http://feel5ny.github.io/categories/TIL-9997/Typescript/"}],"tags":[{"name":"typescript","slug":"typescript","permalink":"http://feel5ny.github.io/tags/typescript/"}]},{"title":"Hexo 설치","slug":"aboutHEXO","date":"2017-09-10T11:46:25.000Z","updated":"2017-11-13T10:16:59.000Z","comments":true,"path":"2017/09/10/aboutHEXO/","link":"","permalink":"http://feel5ny.github.io/2017/09/10/aboutHEXO/","excerpt":"","text":"intro 무언가를 배울때 하루하루의 기록을 남기는 것은 자기계발의 첫 스타트라고 생각합니다. 머리속에 있는 것을 그대로 옮기는 작업은, 정리하며 내것으로 만들기에도 좋고, 그때그때의 생각을 기록하는 용으로도 좋기 때문입니다. 그래서 우리는 일기를 쓰고, 일지를 쓰고, 이렇게 블로그도 만들며 기록합니다. 특히나 개발은 많은 개념을 숙지하면서 공부해야하기 때문에 블로깅 자체가 공부가 됩니다. 이왕 node.js까지 배우고 있으니, jekyll이 아닌, hexo를 사용해서 블로그를 만들었습니다. 목차 Github 간단 소개 원격 저장소 원격저장소 Github이 제공하는 정적웹사이트, Github Pages 호스팅을 편리하게 만들어주는 generator, Jekyll &amp; HEXO Github Pages로 정적 페이지 Hosting하기 로컬에 저장소 생성하기 원격 저장소 생성하기 (Github Repository) 원격 저장소와 로컬 저장소 연결하기 Hexo 설치하기 Hexo 설치 전 준비 Hexo npm 설치하기 설정파일 업데이트 Github에 배포하기 hexo 설정을 통해 정적 리소스를 생성하기 배포하기 anatol 테마적용하기 0. Github 간단 소개깃에 대해서 잘 알고 있다면 1번으로 넘어가도 됩니다. 0-1. 원격저장소Git이란 소스코드를 효과적으로 관리하기 위해 개발된 ‘분산형 버전 관리 시스템’입니다.git은 저장소에서 관리를 하는데, 내 컴퓨터에 있는 저장소를 로컬저장소라고 하고, 웹 상에 있는 저장소를 원격저장소라고 합니다. 우리가 흔히 알고 있는 원격저장소를 제공하는 서비스에는 깃헙, 비트버킷, 깃랩등이 있습니다다. 헥소를 이용한 블로그 개설을 위해서는 깃헙을 사용해야합니다. 0-2. 원격저장소 Github이 제공하는 정적웹사이트, Github PagesGithub에서 제공하는 Static Website, Github Pages가 있다. 깃헙 저장소에 리소스를 push만 해도(push란 저장소에 리소스를 넣을때 사용하는 명령어) 간단하게 웹사이트를 만들 수 있다. 즉, 다른 호스팅 서비스의 도움없이, 원격저장소에 올리기만해도 호스팅이 가능하다. 0-3. 호스팅을 편리하게 만들어주는 generator, Jekyll &amp; HEXO 사실, hexo나 jekyll이 없이도, html,css,javascript를 통해서도 호스팅이 가능하나, 블로그 구성상 글을 등록하고, 리스트를 보여주며, 댓글을 달 수 있는, 블로그가 갖고 있는 기능을 편라히게 사용하기 위해서 hexo나 jekyll과 같은 generator를 사용해야 한다. Static Website generator는 마크다운을(.md 파일)로 편집 후 html로 변환할 수 있도록 돕는다. generator에는 jekyll과 HEXO가 있는데, jekyll은 ruby기반, HEXO는 node.js기반이다. 그럼 generator을 셋팅하기 전, 내 컴퓨터에 디렉토리(폴더)를 생성하고, 원격저장소(github)에 연결을 시켜보자. 1. Github Pages로 정적 페이지 호스팅하기Github Pages를 사용하기 위해 Github의 원격저장소에 리소스를 올려야한다는 사실을 잊지말자. 아래 그림의 저장소들이 필요하다. 1-1. 로컬에 저장소 생성하기내 컴퓨터 원하는 장소에 폴더를 생성한다.terminal없이도 생성해도 된다.아래는 terminal을 이용한 생성방법 1234&lt;!-- 바탕화면에 생성한다는 가정 (글쓴이는 운영체제가 mac입니다.) --&gt;$ cd Desktop$ mkdir github-blog 바탕화면에 github-blog라는 이름의 폴더가 생성이 되었다. 1-2. 원격 저장소 생성하기 (Github Repository)github pages를 통해 손쉽게 USERNAME.github.io를 통해 정적 페이지를 호스팅 할 수 있다. 번외 &gt; gh-pages 브랜치를 생성하면, 각 repository마다 USERNAME.github.io/레포이름으로 호스팅이 가능하다. 지금부터 말하는 USERNAME은, 당신의 아이디이다. 깃헙주소 뒷부분 /이후 붙는 유저네임을 붙이면된다. 아래 순서로 깃 저장소를 생성한다. New Repository &gt; 이름은 꼭 USERNAME.github.io로 적용한다. Public선택. 원격저장소 생성 완료 1-3. 원격 저장소와 로컬 저장소 연결하기내 컴퓨터에 저장소를 만들고, 원격에도 만들었으니, 연결을 해야한다. 연결하는 방법은 간단하다. 지금은 터미널을 열고 명령어를 입력해야하는 타이밍이다. 1번에서 만들었던 디렉토리로 이동한다. 해당 디렉토리에서 원격저장소의 git을 clone한다. clone 뒤에 생성한 원격저장소의 주소를 입력하는데, 이는 remote가 동시에 일어나므로, 따로 remote 명령어를 입력안해도 된다. 연결 테스트겸, READMD.md 파일을 생성한다. 생성된 README.md파일을 푸시한다. (commit &gt; push) 위의 순서를 코드로 옮기면. 12345678910111213141516&lt;!-- 1. 해당 디렉토리로 이동 --&gt;cd Desktopcd github-blog&lt;!-- 2. git clone --&gt;git clone https://github.com/feel5ny/TEST.github.io.gitcd test.github.io&lt;!-- 3. README.md파일 생성 --&gt;echo README.md&lt;!-- 4. 원격저장소에 올리기 --&gt;git add --allgit commit -m \"first commit\"git push -u origin master step 1이 끝났다! 그리고 벌써 호스팅이 완료되었다.USERNAME.github.io에 가보자. 아직 블로그의 형태를 띄지 않았다. 위에서 말했던 generator를 이용하여 블로그의 구조를 짤 예정인데, 우리는 HEXO를 이용할 것이다. 2. Hexo 설치하기Hexo는 node.js기반이기 때문에 npm을 통해 쉽게 설치가 가능하다. 다양한 plugin과 테마를 지원하고 있다. 2-1. Hexo 설치 전 준비Hexo는 말했다 싶이 node.js 기반이기 때문에 node.js가 로컬에 기본적으로 설치되어있어야 한다. node.js는 공식 사이트에서 설치가 가능하다. stable버전을 추천한다. 2-2. Hexo npm 설치하기Node.js를 설치 한 후에 아래 CLI를 순서대로 입력하여 npm을 설치한다.1234npm install hexo-cli -ghexo init blogcd blognpm install node.js를 설치하면 npm을 사용할 수 있는데, 패키지 중에 hexo-cli를 설치한다. blog파일을 생성하여 hexo를 초기화한다. blog 디렉토리로 이동후, npm install을 사용하여, blog에 필요한 파일들을 자동으로 설치한다. 2-3. 설정파일 업데이트위의 순서가 끝나면, root 디렉토리에 _config.yml이라는 설정파일이 생성된다. (yml파일은 사람이 쉽게 읽을 수 있는 데이터 직력화 양식으로,…more) 해당 파일에 블로그 정보를 수정한다. 나머지 정보는 hexo 공식 문서에서. Site 정보블로그 정보를 수정할 수 있다. 1234title: 제목(html head에 들어가는 title태그에 들어가는 제목과 같다.)subtitle: description:author: Nayoung Kim URL 정보블로그 URL 정보를 설정할 수 있다. 1234url: https://USERNAME.github.ioroot: /permalink: :year/:month/:day/:title/permalink_defaults: Github 정보배포를 위해서 저장소 주소를 추가한다. 1234# Deploymentdeploy: type: git repo: https://github.com/feel5ny/TEST.github.io.git 테마별로 구성을 수정하는 스타일이 다르다. 테마 적용하기 파트에서 anatol 레이아웃 수정방법을 설명하겠다. 2-4. 로컬에서 테스트하기1hexo server blog 디렉토리에 위치되어있는 상태에서 서버를 구동한다. blog에 위치되어있지 않으면 서버구동이 안된다. 서버 구동이 완료되면 4000번 포트로 접속이 가능하다. http://localhost:4000 테스트시 구동이 잘 안될 경우, 서버를 껐다가 다시 실행해 보면된다. 서버를 끄는 방법은 터미널에서 ctrl+c를 두번 입력하면 된다. 3. Github에 배포하기로컬에서 테스트를 완료하면 USERNAME.github.io 주소로 배포해보자. 3-1. hexo 설정을 통해 정적 리소스를 생성하기1hexo generate 위 명령어를 입력하면, github에 올라갈 리소스만 정리되어 따로 폴더가 생성된다. 3-2. 배포하기1hexo deploy 위 명령어를 입력하면 배고가 완료된다. generate와 deploy를 한번에 진행하고 싶은 경우 아래 명령어를 입력한다. 1hexo deploy --generate 약자로 hexo d g를 사용해도 됩니다. 3-3. 배포가 잘 안될 경우12hexo cleanhexo deploy --generate","categories":[{"name":"blog","slug":"blog","permalink":"http://feel5ny.github.io/categories/blog/"},{"name":"hexo","slug":"blog/hexo","permalink":"http://feel5ny.github.io/categories/blog/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://feel5ny.github.io/tags/hexo/"},{"name":"node.js","slug":"node-js","permalink":"http://feel5ny.github.io/tags/node-js/"}]}]}