<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>필오의 개발일지</title>
  
  <subtitle>Frontend developer &amp; love UX, Interaction</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="http://feel5ny.github.io/"/>
  <updated>2017-11-28T07:43:25.000Z</updated>
  <id>http://feel5ny.github.io/</id>
  
  <author>
    <name>clara Kim</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React에 typescript 셋팅하기</title>
    <link href="http://feel5ny.github.io/2017/11/26/Typescript_13/"/>
    <id>http://feel5ny.github.io/2017/11/26/Typescript_13/</id>
    <published>2017-11-26T11:13:22.000Z</published>
    <updated>2017-11-28T07:43:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>실습은 <a href="https://github.com/saystone/tic-tac-toe" target="_blank" rel="external">tic-tac-toc</a>이라는 js 프로젝트를 마이그레이션 하면서 typescript를 연습해본다.<br>raect+typescript는 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="external">강의</a> 참고하였습니다.</p></blockquote><p>처음 프로젝트를 생성할 때 부터 타입스크립 버전으로 셋팅하는것이 제일 깔끔하다.</p><h3 id="1-create-react-app-ts-test-scripts-version-react-scripts-ts"><a href="#1-create-react-app-ts-test-scripts-version-react-scripts-ts" class="headerlink" title="1. create-react-app ts-test --scripts-version=react-scripts-ts"></a>1. <code>create-react-app ts-test --scripts-version=react-scripts-ts</code></h3><p>  create-react-app + 프로젝트 이름 + <code>--scripts-version=react-scripts-ts</code> 추가</p><p><img src="/images/post_img/27/01.jpg"></p><ul><li>react에서 사용하는 PropTypes를 사용하지 않아도 된다.</li></ul><blockquote><h3 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a><code>PropTypes</code></h3><p>컴포넌트 에서 원하는 props 의 Type 과 전달 된 props 의 Type 이 일치하지 않을 때 콘솔에서 오류 메시지가 나타나게 하고 싶을 땐, 컴포넌트 클래스의 propTypes 객체를 설정하면 됩니다. 또한, 이를 통하여 필수 props 를 지정할 수 있습니다. 즉, props 를 지정하지 않으면 콘솔에 오류 메시지가 나타납니다.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Content.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h2&gt;&#123; <span class="keyword">this</span>.props.title &#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt; &#123; this.props.body &#125; &lt;/</span>p&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Content.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">    title: React.PropTypes.string,</span></span><br><span class="line"><span class="regexp">    body: React.PropTypes.string.isRequired /</span><span class="regexp">/ isRequired는 필수의 의미이다.</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Content;</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="2-state와-props는-interface로-처리를-해야한다"><a href="#2-state와-props는-interface로-처리를-해야한다" class="headerlink" title="2. state와 props는 interface로 처리를 해야한다."></a>2. state와 props는 interface로 처리를 해야한다.</h3><p>class에서 입출력되는 타입을 검토하기 위해서</p><ol><li><p>배열의 요소가 객체일 경우</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GameState &#123;</span><br><span class="line">  history: <span class="built_in">Array</span>&lt;&#123; squares: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; &#125;&gt; <span class="comment">// Array 요소가 객체일 경우 이렇게 타입을 지정해준다.</span></span><br><span class="line">  stepNumber: <span class="built_in">number</span></span><br><span class="line">  xIsNext: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Game <span class="keyword">extends</span> React.Component&lt;GameProps, GameState&gt; &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      history: [</span><br><span class="line">        &#123;</span><br><span class="line">          squares: <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="literal">null</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      stepNumber: <span class="number">0</span>,</span><br><span class="line">      xIsNext: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>return에 대한 출력값을 타입으로 명시할때</p><h3 id="JSX-Element"><a href="#JSX-Element" class="headerlink" title="JSX.Element"></a><code>JSX.Element</code></h3><p>return 내부가 JSX문법이므로 JSX.Element로 명시하였다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Game <span class="keyword">extends</span> React.Component&lt;GameProps, GameState&gt; &#123;</span><br><span class="line">  render(): JSX.Element &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"game"</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">"game-board"</span>&gt;</span><br><span class="line">          &lt;Board squares=&#123;current.squares&#125; onClick=&#123;<span class="function"><span class="params">i</span> =&gt;</span> <span class="keyword">this</span>.handleClick(i)&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="game-info"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;&#123;status&#125;&lt;/</span>div&gt;</span><br><span class="line">          &lt;ol&gt;&#123;moves&#125;&lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://velopert.com/921" target="_blank" rel="external">https://velopert.com/921</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;실습은 &lt;a href=&quot;https://github.com/saystone/tic-tac-toe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;tic-tac-toc&lt;/a&gt;이라는 js 프로젝트를 마이그레이션 하면서 
      
    
    </summary>
    
      <category term="TIL &amp;#9997;" scheme="http://feel5ny.github.io/categories/TIL-9997/"/>
    
      <category term="Typescript" scheme="http://feel5ny.github.io/categories/TIL-9997/Typescript/"/>
    
    
      <category term="til" scheme="http://feel5ny.github.io/tags/til/"/>
    
      <category term="typescript" scheme="http://feel5ny.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>9/ itertor</title>
    <link href="http://feel5ny.github.io/2017/11/25/Typescript_10/"/>
    <id>http://feel5ny.github.io/2017/11/25/Typescript_10/</id>
    <published>2017-11-25T11:13:22.000Z</published>
    <updated>2017-11-28T05:03:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="external">강의</a>와 <a href="http://slides.com/woongjae/deck-8-15" target="_blank" rel="external">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><p><strong>요약</strong><br>아직 잘 이해가 안간다. &#128565;</p><ol><li><a href="#forOf">for…of</a></li><li><a href="#forIn">for..in</a></li><li><a href="#symbol">Symbol.iterator</a></li><li><a href="#Iterable">CustomIterable</a></li></ol><hr><h3 id="1-for…of"><a href="#1-for…of" class="headerlink" title=" 1. for…of"></a><a name="forOf"></a> 1. for…of</h3><ul><li>es3<br><code>for(var i = 0; i&lt;array.length; i++)</code></li><li>es5<br><code>array.forEach</code> : return으로 순회를 탈출할 수 없다.</li><li><p>es6<br><code>for..of</code><br><code>for(const item of array)</code><br>원칙적으로는 배열에서만 사용이 가능하다. </p></li><li><p>for-of 루프는 이터러블 객체를 순회한다. for-of 루프는 이터레이터의 next() 메소드를 호출하고 next() 메소드가 반환하는 객체의 done 프로퍼티가 true가 될 때까지 루핑한다.</p></li></ul><hr><h3 id="2-for-in"><a href="#2-for-in" class="headerlink" title=" 2. for..in"></a><a name="forIn"></a> 2. for..in</h3><p>일반적일때는 사용하지 않는 것으로. (엔진에 따라 다르다.)</p><ul><li>배열을 순회할 때는 사용하지 않을 것<ul><li>index 가 number 가 아니라 string 으로 나온다.</li><li>배열의 프로퍼티를 순회할 수도 있다.</li><li>prototype 체인의 프로퍼티를 순회할 수도 있다.</li><li>루프가 무작위로 순회할 수도 있다.</li><li>for..of 를 쓸 것</li></ul></li><li>객체를 순회할 때<ul><li><code>for (const prop of Object.keys(obj))</code> 도 사용할 수 있다.</li></ul></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'first'</span>, <span class="string">'second'</span>];</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    age: <span class="number">35</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열에 for..of 이용</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item of array) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> item + <span class="string">', '</span> + item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열에 for..in 이용</span></span><br><span class="line"><span class="comment">// item 이 string 타입의 숫자</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> array) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> item + <span class="string">', '</span> + item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체에 for..of 이용 =&gt; 오류</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for (const item of obj) &#123;</span></span><br><span class="line"><span class="comment">    console.log(typeof item + ', ' + item);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체에 for..in 이용</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> item + <span class="string">', '</span> + item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체의 keys 들에 for..of 이용</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item of <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> item + <span class="string">', '</span> + item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>target 이 es3 인데도 forEach 는 트랜스파일이 되지 않았음.<br><a href="https://github.com/Microsoft/TypeScript/issues/2410" target="_blank" rel="external">https://github.com/Microsoft/TypeScript/issues/2410</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'first'</span>, <span class="string">'second'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ts</span></span><br><span class="line">array.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// js</span></span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="3-Symbol-iterator"><a href="#3-Symbol-iterator" class="headerlink" title=" 3. Symbol.iterator"></a><a name="symbol"></a> 3. Symbol.iterator</h3><h4 id="이터러블-iterable"><a href="#이터러블-iterable" class="headerlink" title="이터러블(iterable)"></a><code>이터러블(iterable)</code></h4><p>iterate = 반복하다<br>이터러블은 <strong>순회 가능한 자료 구조</strong>이다. <code>Symbol.iterator</code>를 프로퍼티 key로 사용한 메소드를 구현하는 것에 의해 순회 가능한 자료 구조인 이터러블이 된다.</p><h4 id="이터레이터"><a href="#이터레이터" class="headerlink" title="이터레이터"></a><code>이터레이터</code></h4><p><code>Symbol.iterator</code>를 프로퍼티 key로 사용한 메소드는 이터레이터로 반환한다. 이터레이터는 순회 가능한 자료 구조인 이터러블의 요소를 탐색하기 위한 포인터로서 <code>next()</code> 메소드를 갖는 객체이다. next() 메소드는 value, done 프로퍼티를 갖는 객체를 반환하며 이 메소드를 통해 이터러블 객체를 순회할 수 있다.</p><p>ES6에서 제공하는 built-in iterable은 아래와 같다.</p><ul><li>Array <code>Array.prototype[Symbol.iterator]</code></li><li>String <code>String.prototype[Symbol.iterator]</code></li><li>Map <code>Map.prototype[Symbol.iterator]</code></li><li>Set <code>Set.prototype[Symbol.iterator]</code></li><li>DOM data structures <code>NodeList.prototype[Symbol.iterator]</code> <code>HTMLCollection.prototype[Symbol.iterator]</code></li></ul><ul><li>프로퍼티이며, 함수가 구현되어있으면, iterable 이라고 한다.</li><li>Array, Map, Set, String, Int32Array, Uint32Array, etc. 에는 내장된 구현체가 있으므로 이터러블 하다.</li><li>그냥 객체는 이터러블하지 않다.</li><li>이터레이터를 통해 이터러블한 객체의 Symbol.iterator 함수를 호출한다.</li><li>target : es3 or es5<ul><li>Array 에만 for..of 사용 가능</li><li>일반 객체에 사용하면 오류</li></ul></li><li>target : es6<ul><li>Symbol.iterator 함수를 구현하면 어떤 객체에도 for..of 사용 가능</li></ul></li></ul><hr><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.es6.d.ts</span></span><br><span class="line"><span class="keyword">interface</span> IteratorResult&lt;T&gt; &#123;</span><br><span class="line">    done: <span class="built_in">boolean</span>;</span><br><span class="line">    value: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Iterator&lt;T&gt; &#123;</span><br><span class="line">    next(value?: <span class="built_in">any</span>): IteratorResult&lt;T&gt;; <span class="comment">// next가 필수로 있어야한다.</span></span><br><span class="line">    <span class="keyword">return</span>?(value?: <span class="built_in">any</span>): IteratorResult&lt;T&gt;;</span><br><span class="line">    <span class="keyword">throw</span>?(e?: <span class="built_in">any</span>): IteratorResult&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Iterable&lt;T&gt; &#123;</span><br><span class="line">    [Symbol.iterator](): Iterator&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IterableIterator&lt;T&gt; <span class="keyword">extends</span> Iterator&lt;T&gt; &#123;</span><br><span class="line">    [Symbol.iterator](): IterableIterator&lt;T&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="5-CustomIterable"><a href="#5-CustomIterable" class="headerlink" title=" 5. CustomIterable"></a><a name="Iterable"></a> 5. CustomIterable</h3><p>객체는 이터러블이 아니다. 하지만 이터레이션 프로토콜을 준수하여 이터러블 객체를 만들수 있다.</p><ul><li>Symbol.iterator를 key로 사용한 메소드는 next() 함수를 프로퍼티로 가지는 객체를 반환하여야 한다. 그리고 next() 함수는 done과 value 프로퍼티를 가지는 객체를 반환한다. for-of는 done 프로퍼티가 true가 될 때까지 반복하며 done 프로퍼티가 true가 되면 반복을 중지한다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> CustomIterable <span class="keyword">implements</span> Iterable&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> _array: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">'first'</span>, <span class="string">'second'</span>];</span><br><span class="line"></span><br><span class="line">    [Symbol.iterator]() &#123;</span><br><span class="line">        <span class="keyword">var</span> nextIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            next: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    value: <span class="keyword">this</span>._array[nextIndex++],</span><br><span class="line">                    done: nextIndex &gt; <span class="keyword">this</span>._array.length</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cIterable = <span class="keyword">new</span> CustomIterable();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item of cIterable) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/es6-iteration-for-of" target="_blank" rel="external">http://poiemaweb.com/es6-iteration-for-of</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;타입스크립트 정리 글은 이웅재님의 &lt;a href=&quot;https://www.youtube.com/user/2woongjae/videos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;강의&lt;/a&gt;와 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="TIL &amp;#9997;" scheme="http://feel5ny.github.io/categories/TIL-9997/"/>
    
      <category term="Typescript" scheme="http://feel5ny.github.io/categories/TIL-9997/Typescript/"/>
    
    
      <category term="til" scheme="http://feel5ny.github.io/tags/til/"/>
    
      <category term="typescript" scheme="http://feel5ny.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>8/ Generic</title>
    <link href="http://feel5ny.github.io/2017/11/24/Typescript_09/"/>
    <id>http://feel5ny.github.io/2017/11/24/Typescript_09/</id>
    <published>2017-11-24T06:42:10.000Z</published>
    <updated>2017-11-27T15:03:12.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="external">강의</a>와 <a href="http://slides.com/woongjae/deck-8-15" target="_blank" rel="external">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><p><strong>요약</strong><br>제네릭은 어떠한 클래스 혹은 함수에서 사용할 타입을 그 함수나 클래스를 사용할 때 결정하는 프로그래밍 기법을 말한다. 정적 타입 언어에서도 이렇게 특정 타입을 위해 만들어진 함수 혹은 클래스를 보다 범용적으로 재사용하기 위한 요구가 있기 때문에 제네릭이라는 프로그래밍 기법이 생긴 게 아닐까한다. </p><ol><li><a href="#generic">~any~ =&gt; generic</a></li><li><a href="#basic">basic generic</a></li><li><a href="#array">Generic Array</a></li><li><a href="#types">Generic Types</a></li><li><a href="#class">Generic Class</a></li><li><a href="#extends">Generic with extends</a></li><li><a href="#multiple">Generic with multiple types</a></li><li><a href="#lookupSystem">type lookup system</a></li></ol><hr><h3 id="1-any-gt-generic"><a href="#1-any-gt-generic" class="headerlink" title=" 1. ~any~ =&gt; generic"></a><a name="generic"></a> 1. ~any~ =&gt; generic</h3><p>any의 사용을 지양하고자 타입을 인자로 넘긴다.</p><ul><li>탬플릿을 만드는 개념. 인자값과 출력값의 타입을 같게 탬플릿을 만들어준다.</li><li>제네릭은 선언 시점이 아니라 생성 시점에 타입을 명시하여 <code>하나의 타입만이 아닌 다양한 타입을 사용할 수 있도록 하는 기법이다.</code> 한번의 선언으로 다양한 타입에 재사용이 가능하다는 장점이 있다.</li><li><code>T</code>는 제네릭을 선언할 때 관용적으로 사용되는 식별자로 타입 파라미터(Type parameter)라 한다. T는 Type의 약자로 반드시 T를 사용하여야 하는 것은 아니다.</li><li>함수에도 제네릭을 사용할 수 있다. 제네릭을 사용하면 하나의 타입만이 아닌 다양한 타입의 매개변수와 리턴값을 사용할 수 있다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloGeneric</span>&lt;<span class="title">T</span>&gt;(<span class="params">message: T</span>): <span class="title">T</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloString</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloNumber</span>(<span class="params">message: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 더 많은 반복된 함수들 ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">message: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloGeneric</span>&lt;<span class="title">T</span>&gt;(<span class="params">message: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hello(<span class="string">'Mark'</span>).length);</span><br><span class="line"><span class="built_in">console</span>.log(hello(<span class="number">35</span>).length); <span class="comment">// hello 의 리턴이 any 이기 때문에 타입 헬퍼가 제대로 되지 않음</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(helloGeneric(<span class="number">35</span>).toString()); <span class="comment">// console.log(helloGeneric&lt;number&gt;(35).toString());</span></span><br><span class="line"><span class="comment">// helloGeneric 을 사용하면 정상적으로 사용가능</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-basic-generic"><a href="#2-basic-generic" class="headerlink" title=" 2. basic generic"></a><a name="basic"></a> 2. basic generic</h3><ol><li>Generic 타입을 쓰지 않으면, T 로 추론</li><li>Generic 타입을 쓰면, T 를 확인</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloGeneric</span>&lt;<span class="title">T</span>&gt;(<span class="params">message: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>&lt;<span class="title">T</span>&gt;(<span class="params">message:  T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hello&lt;<span class="built_in">string</span>&gt;(<span class="string">'Hello'</span>));</span><br><span class="line"><span class="keyword">let</span> age = hello(<span class="number">35</span>);</span><br><span class="line">hello&lt;<span class="built_in">number</span>&gt;(<span class="string">'35'</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="3-Generic-Array"><a href="#3-Generic-Array" class="headerlink" title=" 3. Generic Array"></a><a name="array"></a> 3. Generic Array</h3><p>hello 함수의 제네릭 타입을 [] 를 이용하여 배열로 사용할 수 있음</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>&lt;<span class="title">T</span>&gt;(<span class="params">messages: T[]</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> messages[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hello&lt;<span class="built_in">string</span>&gt;([<span class="string">'Hello'</span>, <span class="string">'World'</span>]));</span><br></pre></td></tr></table></figure><hr><h3 id="4-Generic-Type"><a href="#4-Generic-Type" class="headerlink" title=" 4. Generic Type"></a><a name="types"></a> 4. Generic Type</h3><p>구현체에 return T 를 설정하지 않아도, return false 시 오류가 나지 않는다?</p><ul><li>때에 따라서 적합하지 않을 수 있다. </li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> HelloGeneric = &lt;T&gt;<span class="function">(<span class="params">message: T</span>) =&gt;</span> T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hello: HelloGeneric = &lt;T&gt;(message: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hello&lt;<span class="built_in">string</span>&gt;(<span class="string">'Hello'</span>).length);</span><br></pre></td></tr></table></figure><hr><h3 id="5-Generic-Class"><a href="#5-Generic-Class" class="headerlink" title=" 5. Generic Class"></a><a name="class"></a> 5. Generic Class</h3><p>명시적으로 제네릭 타입을 설정하면 오류 </p><ul><li>function에서 generic을 사용할 때의 오류와 같다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> _name: T;</span><br><span class="line">    <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: T</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Person(<span class="string">'Mark'</span>);</span><br><span class="line"><span class="comment">// new Person&lt;string&gt;(35);</span></span><br></pre></td></tr></table></figure><hr><h3 id="6-Generic-with-extends"><a href="#6-Generic-with-extends" class="headerlink" title=" 6. Generic with extends"></a><a name="extends"></a> 6. Generic with extends</h3><p>T 가 string 또는 number 를 상속받기 때문에 boolean 은 안된다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&lt;T <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">number</span>&gt; &#123; <span class="comment">// union type</span></span><br><span class="line">    <span class="keyword">private</span> _name: T;</span><br><span class="line">    <span class="keyword">private</span> _age: T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: T</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Person(<span class="string">'Mark'</span>);</span><br><span class="line"><span class="keyword">new</span> Person(<span class="number">35</span>);</span><br><span class="line"><span class="comment">// new Person(true);</span></span><br></pre></td></tr></table></figure><hr><h3 id="7-Generic-with-multiple-types"><a href="#7-Generic-with-multiple-types" class="headerlink" title=" 7. Generic with multiple types"></a><a name="multiple"></a> 7. Generic with multiple types</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&lt;T, K&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> _name: T;</span><br><span class="line">    <span class="keyword">private</span> _age: K;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: T, age: K</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Person(<span class="string">'Mark'</span>, <span class="number">35</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="8-type-lookup-system"><a href="#8-type-lookup-system" class="headerlink" title=" 8. type lookup system"></a><a name="lookupSystem"></a> 8. type lookup system</h3><p>keyof 키워드를 알아야한다.<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Test = keyof Person;</span><br><span class="line"><span class="comment">// 리터럴 타입의 유니온 타입이 나온다. "name" | "age"</span></span><br></pre></td></tr></table></figure></p><p>객체와 key값을 인자로 받아서 perperty의 타입값을 알아내는 함수를 만들었다고 치자.<br>함수에서 컴파일 타입을 검증할 수 있는 시스템이 필요하다. =&gt; type lookup system</p><ul><li><code>getProperty</code>: Generic과 type alias를 결합하여 사용하여 type을 찾아낼 수 있는 시스템을 만든다.</li><li><code>setProperty</code>: Generic과 type alias를 결합하여 사용하여 type을 찾아내고, 타입을 다시 재정의 하는 함수</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K</span>): <span class="title">T</span>[<span class="title">K</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    age: <span class="number">35</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K</span>): <span class="title">T</span>[<span class="title">K</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K, value: T[K]</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    obj[key] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getProperty(person, <span class="string">'name'</span>));</span><br><span class="line"><span class="comment">// console.log(getProperty(person, fullname));</span></span><br><span class="line">setProperty(person, <span class="string">'name'</span>, <span class="string">'Anna'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(getProperty(person, <span class="string">'name'</span>));</span><br><span class="line"><span class="comment">// setProperty(person, 'name', 24);</span></span><br></pre></td></tr></table></figure><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/typescript-generic" target="_blank" rel="external">http://poiemaweb.com/typescript-generic</a></li><li><a href="https://www.youtube.com/watch?v=3-nJyzJATq8" target="_blank" rel="external">https://www.youtube.com/watch?v=3-nJyzJATq8</a></li><li><a href="https://hyunseob.github.io/2017/01/14/typescript-generic/" target="_blank" rel="external">https://hyunseob.github.io/2017/01/14/typescript-generic/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;타입스크립트 정리 글은 이웅재님의 &lt;a href=&quot;https://www.youtube.com/user/2woongjae/videos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;강의&lt;/a&gt;와 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="TIL &amp;#9997;" scheme="http://feel5ny.github.io/categories/TIL-9997/"/>
    
      <category term="Typescript" scheme="http://feel5ny.github.io/categories/TIL-9997/Typescript/"/>
    
    
      <category term="til" scheme="http://feel5ny.github.io/tags/til/"/>
    
      <category term="typescript" scheme="http://feel5ny.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>7-1/ class 연습</title>
    <link href="http://feel5ny.github.io/2017/11/23/Typescript_08-1/"/>
    <id>http://feel5ny.github.io/2017/11/23/Typescript_08-1/</id>
    <published>2017-11-23T03:11:23.000Z</published>
    <updated>2017-11-27T09:00:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="연습문제-1"><a href="#연습문제-1" class="headerlink" title="연습문제 1"></a>연습문제 1</h3><p>아래 자바스크립트를 타입스크립트로 바꾸시오<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">this</span>.honk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"부우우웅"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">this</span>.accelerate = <span class="function"><span class="keyword">function</span>(<span class="params">speed</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.speed = <span class="keyword">this</span>.speed + speed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">"BENZ"</span>);</span><br><span class="line">car.honk();</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br><span class="line">car.accelerate(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br></pre></td></tr></table></figure></p><p>1차<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Car &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> speed: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">public</span> honk(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'부우우웅'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> accelerate(speed) &#123;</span><br><span class="line">        <span class="keyword">this</span>.speed = <span class="keyword">this</span>.speed + speed;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> Car(<span class="string">"BENZ"</span>);</span><br><span class="line">car.honk();</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br><span class="line">car.accelerate(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br></pre></td></tr></table></figure></p><p>2차<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Car &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> _speed: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">public</span> honk(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'부우우웅'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> accelerate(speed) &#123;</span><br><span class="line">        <span class="keyword">this</span>._speed = <span class="keyword">this</span>.speed + speed;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">get</span> speed(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._speed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> Car(<span class="string">"BENZ"</span>);</span><br><span class="line">car.honk();</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br><span class="line">car.accelerate(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br></pre></td></tr></table></figure></p><p>3차<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ICar &#123;</span><br><span class="line">    honk(): <span class="built_in">void</span>;</span><br><span class="line">    accelerate(speed: <span class="built_in">number</span>): <span class="built_in">void</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Car &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> _speed: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> honk(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'부우우웅'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> accelerate(speed) &#123;</span><br><span class="line">        <span class="keyword">this</span>._speed = <span class="keyword">this</span>._speed + speed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> speed(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._speed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> Car(<span class="string">"BENZ"</span>);</span><br><span class="line">car.honk();</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br><span class="line">car.accelerate(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;연습문제-1&quot;&gt;&lt;a href=&quot;#연습문제-1&quot; class=&quot;headerlink&quot; title=&quot;연습문제 1&quot;&gt;&lt;/a&gt;연습문제 1&lt;/h3&gt;&lt;p&gt;아래 자바스크립트를 타입스크립트로 바꾸시오&lt;br&gt;&lt;figure class=&quot;highlight ts
      
    
    </summary>
    
      <category term="TIL &amp;#9997;" scheme="http://feel5ny.github.io/categories/TIL-9997/"/>
    
      <category term="Typescript" scheme="http://feel5ny.github.io/categories/TIL-9997/Typescript/"/>
    
    
      <category term="til" scheme="http://feel5ny.github.io/tags/til/"/>
    
      <category term="typescript" scheme="http://feel5ny.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>7/ class(2)</title>
    <link href="http://feel5ny.github.io/2017/11/22/Typescript_08/"/>
    <id>http://feel5ny.github.io/2017/11/22/Typescript_08/</id>
    <published>2017-11-22T01:32:11.000Z</published>
    <updated>2017-11-27T08:53:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="external">강의</a>와 <a href="http://slides.com/woongjae/deck-8-14" target="_blank" rel="external">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><p><strong>요약</strong><br>class에서 선언된 멤버변수와 멤버함수를 외부에서 접근이 가능하게 하는 방법, 재선언할 수 있도록 컨트롤하는 방법을 배웁니다. 생성자에도 private화하여 class 내부에서만 선언이 가능하도록 하며, 이는 singleTon 패턴을 정확하게 배치 가능할 수 있게 합니다. readonly 키워드를 붙여서 getter의 역할만 가능하도록 할 수 있습니다. </p><ol><li><a href="#getter_setter">class getter, setter</a></li><li><a href="#member">class 멤버변수</a></li><li><a href="#memberFunction">class 멤버함수</a></li><li><a href="#statcProperty">class private static property or method</a></li><li><a href="#abstract">Abstract Class</a></li><li><a href="#constructor">private constructor</a></li><li><a href="#singleTon">singleTon</a></li><li><a href="#readonly">readonly</a></li></ol><hr><h3 id="1-class-getter-setter"><a href="#1-class-getter-setter" class="headerlink" title=" 1. class getter, setter"></a><a name="getter_setter"></a> 1. class getter, setter</h3><p>get, set을 하는 중에 무언가를 해주기 위해서 사용한다. get과 set 사이에 추가적인 작업이 있을 때 사용한다.</p><ol><li>_ 를 변수명 앞에 붙이고, 내부에서만 사용한다.</li><li>getter를 함수처럼 설정하면, 프로퍼티처럼 꺼내쓸수있다.</li><li>마찬가지로 setter 를 함수처럼 설정하면, 추가 작업을 하고 셋팅할 수 있다.</li></ol><blockquote><p>강사님은 getter setter가 혼란을 줄 수 있는 경우가 있어서 사용하지 않고, 대신 메서드를 같은 역할을 하는 메서드를 만드는데 메서드의 이름을 getName, setName으로 짓는다고 하셨따.</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> _name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> name() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> name(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="comment">// 작업</span></span><br><span class="line">        <span class="keyword">this</span>._name = <span class="string">`<span class="subst">$&#123;name&#125;</span> Lee`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person(<span class="string">'Mark'</span>, <span class="number">35</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line">person.name = <span class="string">'Woongjae'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br></pre></td></tr></table></figure><h4 id="getter"><a href="#getter" class="headerlink" title="getter"></a><code>getter</code></h4><p>getter는 어떤 멤버 변수에 접근할 때마다 멤버 변수의 값을 조작하는 행위가 필요할 때 사용한다. 사용 방법은 아래와 같다.</p><h4 id="setter"><a href="#setter" class="headerlink" title="setter"></a><code>setter</code></h4><p>setter는 어떤 멤버 변수에 값을 할당할 때마다 멤버 변수의 값을 조작하는 행위가 필요할 때 사용한다. 사용 방법은 아래와 같다.</p><hr><h3 id="2-class-멤버변수"><a href="#2-class-멤버변수" class="headerlink" title=" 2. class 멤버변수"></a><a name="member"></a> 2. class 멤버변수</h3><p>객체지향의 class와 거의 유사하다. static property와 static method가 있다.</p><ol><li>static 키워드를 붙힌 프로퍼티는 클래스.프로퍼티로 사용한다.</li><li>static 프로퍼티에 private, protected 를 붙히면 똑같이 동작한다.</li></ol><ul><li>public static은 외부에서 변경이 가능하다.</li><li>default는 public이다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CITY = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> lastName: <span class="built_in">string</span> = <span class="string">'Lee'</span>;</span><br><span class="line">    <span class="keyword">private</span> _name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> print() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this._name&#125;</span> <span class="subst">$&#123;Person.lastName&#125;</span> in <span class="subst">$&#123;Person.CITY&#125;</span>.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person(<span class="string">'Mark'</span>, <span class="number">35</span>);</span><br><span class="line">Person.CITY = <span class="string">'Seoul'</span>;</span><br><span class="line">person.print(); <span class="comment">// Mark Lee in Seoul.</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-class-멤버함수"><a href="#3-class-멤버함수" class="headerlink" title=" 3. class 멤버함수"></a><a name="memberFunction"></a> 3. class 멤버함수</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Talk(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'안녕하세요.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.Talk(); <span class="comment">// 안녕하세요.</span></span><br></pre></td></tr></table></figure><p>public static은 의미가 있다.<br>private static 메소드와 프로퍼티는 무슨 의미가 있나?<br>대부분 한 ts파일에 한 class를 사용하고, 모듈을 다른곳에서 쓰기위해서 export import를 쓴다. </p><h4 id="private-static"><a href="#private-static" class="headerlink" title="private static?"></a><code>private static</code>?</h4><ul><li>사용시 class의 private static과 ts파일 안의 제일 상단에 있는 const 변수와 어떤 차이가 있나? 라고 할때 애매하다.</li><li>private이라 애매한 것. </li></ul><hr><h3 id="4-class-private-static-property-or-method"><a href="#4-class-private-static-property-or-method" class="headerlink" title=" 4. class private static property or method"></a><a name="statcProperty"></a> 4. class private static property or method</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PROPERTY = <span class="string">'프라이빗 프로퍼티'</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> METHOD() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'프라이빗 메서드'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(Person.PROPERTY);</span><br><span class="line">        Person.METHOD();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PROPERTY = <span class="string">'모듈 내 변수'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">METHOD</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'모듈 내 함수'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(PROPERTY);</span><br><span class="line">        METHOD();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="5-Abstract-Class-128566"><a href="#5-Abstract-Class-128566" class="headerlink" title=" 5. Abstract Class &#128566;"></a><a name="abstract"></a> 5. Abstract Class &#128566;</h3><ol><li>abstract 키워드가 사용된 클래스는 new 로 생성할 수 없다.</li><li>abstract 키워드가 사용된 클래스를 상속하면 abstract 키워드가 붙은 함수를 구현해야 한다.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> APerson &#123;</span><br><span class="line">    <span class="keyword">protected</span> _name: <span class="built_in">string</span> = <span class="string">'Mark'</span>;</span><br><span class="line">    <span class="keyword">abstract</span> setName(name: <span class="built_in">string</span>): <span class="built_in">void</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person <span class="keyword">extends</span> APerson &#123;</span><br><span class="line">    setName(name: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const person = new APerson(); // (X)</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><hr><h3 id="6-private-constructor"><a href="#6-private-constructor" class="headerlink" title=" 6. private constructor"></a><a name="constructor"></a> 6. private constructor</h3><ol><li>생성자 함수 앞에 접근제어자인 private 을 붙일 수 있다.</li><li>외부에서 생성이 불가능하다.</li></ol><blockquote><p>내부에서 생성하는 방법을 써야하고, 그러다보니 싱글톤 패턴을 정확하게 배치해서 사용할 수 있게 되었다. </p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Preference &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const p: Preference = new Preference(); (X)</span></span><br></pre></td></tr></table></figure><hr><h3 id="7-singleTon-128580"><a href="#7-singleTon-128580" class="headerlink" title=" 7. singleTon &#128580;"></a><a name="singleTon"></a> 7. singleTon &#128580;</h3><p>자바스크립트의 함수는 new로 생성자를 사용할 때마다 새로이 생성된 객체를 리턴합니다. 하지만 특수한 상황에서는 하나의 함수에서 생성되는 객체가 오직 한개만을 가져야 할 때가 있다. 그럴 경우 사용되는 디자인 패턴이 <code>Singleton Pattern</code></p><ul><li>싱글턴 패턴 : 객체리터럴이 싱글턴 패턴의 대표적.<ul><li>모듈패턴을 변형한 디자인 패턴<ul><li>처음 namespace를 만들 때 사용한다. </li><li>게임을 실행할 때 게임은 한번만 켜져야 하기 때문에 싱글턴이 적절.</li></ul></li></ul></li></ul><ol><li>private 생성자를 이용해서 내부에서만 인스턴스 생성이 가능하도록 함.</li><li>pubilc static 메서드를 통해 private static 인스턴스 레퍼런스를 획득한다.</li><li>Lazy Loading (Initialization) : 최초 실행시가 아니라, 사용시에 할당을 함</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Preference &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> getInstance() &#123;</span><br><span class="line">        <span class="comment">// 유일 객체가 정의되지 않았다면 객체를 생성.</span></span><br><span class="line">        <span class="keyword">if</span> (Preference.instance === <span class="literal">null</span>) &#123;</span><br><span class="line">            Preference.instance = <span class="keyword">new</span> Preference();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Preference.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> instance: Preference = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p: Preference = Preference.getInstance();</span><br></pre></td></tr></table></figure><hr><h3 id="8-readonly"><a href="#8-readonly" class="headerlink" title=" 8. readonly"></a><a name="readonly"></a> 8. readonly</h3><p>private인데 get, set중 get만 있는 상황과 같다. </p><ol><li><code>private readonly</code> 로 선언된 경우, 생성자에서는 할당이 가능하다.</li><li><code>private readonly</code> 로 선언된 경우, 생성자 이외에서는 할당이 불가능하다.</li><li><code>public readonly</code> 로 선언된 경우, 클래스 외부에서는 다른값을 할당할 수 없다.</li><li>마치 getter 만 있는 경우와 같다.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> readonly _name: <span class="built_in">string</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> readonly age: <span class="built_in">number</span> = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> setName(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="comment">// this._name = name; (X)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p: Person = <span class="keyword">new</span> Person(<span class="string">'Mark'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.age);</span><br><span class="line"><span class="comment">// p.age = 36; // (X)</span></span><br></pre></td></tr></table></figure><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/es6-class" target="_blank" rel="external">http://poiemaweb.com/es6-class</a></li><li><a href="http://blog.javarouka.me/2012/02/javascripts-pattern-1-singeton-patterrn.html" target="_blank" rel="external">http://blog.javarouka.me/2012/02/javascripts-pattern-1-singeton-patterrn.html</a></li><li><a href="http://karl27.tistory.com/10" target="_blank" rel="external">http://karl27.tistory.com/10</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;타입스크립트 정리 글은 이웅재님의 &lt;a href=&quot;https://www.youtube.com/user/2woongjae/videos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;강의&lt;/a&gt;와 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="TIL &amp;#9997;" scheme="http://feel5ny.github.io/categories/TIL-9997/"/>
    
      <category term="Typescript" scheme="http://feel5ny.github.io/categories/TIL-9997/Typescript/"/>
    
    
      <category term="til" scheme="http://feel5ny.github.io/tags/til/"/>
    
      <category term="typescript" scheme="http://feel5ny.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>6/ class(1)</title>
    <link href="http://feel5ny.github.io/2017/11/21/Typescript_07/"/>
    <id>http://feel5ny.github.io/2017/11/21/Typescript_07/</id>
    <published>2017-11-21T01:32:11.000Z</published>
    <updated>2017-11-27T08:52:36.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="external">강의</a>와 <a href="http://slides.com/woongjae/deck-8-14" target="_blank" rel="external">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><p><strong>요약</strong><br>타입스크립트에서 주로 사용되는 class의 기초에 대해서 배웁니다. es6에 도입된 <code>class</code>와, public, private, protected 키워드로 class에 접근제어하는 방법을 배우고, class간의 상속 개념을 배웁니다. </p><ol><li><a href="#basic">class 기초</a></li><li><a href="#property">class property</a></li><li><a href="#Access">class Access Modifier</a></li><li><a href="#constructor">class default constructor</a></li><li><a href="#method">class &amp; method</a></li><li><a href="#extends">class extends</a></li></ol><hr><h3 id="1-class-기초"><a href="#1-class-기초" class="headerlink" title=" 1. class 기초"></a><a name="basic"></a> 1. class 기초</h3><ol><li>생성자 함수(<code>constructor</code>)가 없으면, 디폴트 생성자가 불린다.</li><li>클래스의 프로퍼티 혹은 멤버 변수가 정의되어 있지만, 값을 대입하지 않으면 undefined 이다.<br> =&gt; 오브젝트에 프로퍼티가 아예 존재하지 않는다.</li><li>접근제어자 (Access Modifier)는 <code>public</code>이 디폴트이다.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="comment">// name과 age는 프로퍼티</span></span><br><span class="line">    <span class="comment">// class 바디에는 메소드와 프로퍼티만 포함할 수 있다. </span></span><br><span class="line">    name: <span class="built_in">string</span> = <span class="literal">null</span>; </span><br><span class="line">    age: <span class="built_in">number</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name; <span class="comment">// constructor 내부에서 선언한 멤버변수는 this에 바인딩되어 있으므로 언제나 public이다. </span></span><br><span class="line">    &#125; <span class="comment">// 퍼블릭</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// class에서 default가 public이다.</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">'Clara'</span>);</span><br><span class="line"><span class="comment">// 인스턴스를 생성할 때 new 연산자와 함께 호출한 것이 바로 constructor이며 constructor의 파라미터에 전달한 값은 멤버 변수에 할당한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name)</span><br><span class="line"><span class="built_in">console</span>.log(person.age) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-class-property"><a href="#2-class-property" class="headerlink" title=" 2. class property"></a><a name="property"></a> 2. class property</h3><ul><li>constructor이외에 프로퍼티들을 포함시킬 수 있다. </li><li>프로퍼티에도 값을 할당할 수 있다. 호출시 프로퍼티에 다시 값을 할당하게 되면, 마지막에 할당된 값이 출력된다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span> = <span class="string">'Clara'</span>;</span><br><span class="line">    age: <span class="built_in">number</span> = <span class="number">27</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name === <span class="literal">null</span>); <span class="comment">// false</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name === <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person();</span><br><span class="line">person.name = <span class="string">'nayoung'</span>;</span><br><span class="line">person.age = <span class="number">35</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person); </span><br><span class="line"><span class="comment">// Person &#123;name: 'nayoung', age: 35&#125;</span></span><br><span class="line"><span class="comment">// Person의 프로퍼티가 불린 후에 person.name에 다시 할당된 값이 불리어지므로 결론적으로는 'nayoung'이 출력된다.</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-class-Access-Modifier"><a href="#3-class-Access-Modifier" class="headerlink" title=" 3. class Access Modifier"></a><a name="Access"></a> 3. class Access Modifier</h3><h4 id="private"><a href="#private" class="headerlink" title="private"></a><code>private</code></h4><ul><li>절대적으로 접근이 불가능하다.</li></ul><ol><li><code>private</code> 으로 설정된 프로퍼티는 <code>dot(.)</code>으로 접근할 수 없다.</li><li>클래스 내부에서는 private 프로퍼티를 사용할 수 있다.</li><li>private이 붙은 변수나 함수는 _ 를 이름앞에 붙이는데, 이는 문법이 아니라 널리 쓰이는 코딩 컨벤션이다.<blockquote><p>앞에 밑줄과 변수명을 쓰면 private이라는 코딩컨벤션 중 하나였다.</p></blockquote></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person(<span class="number">35</span>);</span><br><span class="line">person.name = <span class="string">'Mark'</span>;</span><br><span class="line"><span class="comment">// person._age (X)</span></span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">// Person &#123;name: 'Mark', _age: 35&#125;</span></span><br></pre></td></tr></table></figure><h4 id="protected"><a href="#protected" class="headerlink" title="protected"></a><code>protected</code></h4><p>부모자식간의 관계에서 상속을 받은 class는(자식) 부모에는 접근 가능하다.</p><ol><li>부모에서 private 으로 설정된 프로퍼티는 상속을 받은 자식에서도 접근할 수 없다.</li><li>부모에서 protected 로 설정된 프로퍼티는 상속을 받은 자식에서 접근이 가능하다.</li><li>상속을 받은 자식 클래스에서 부모 클래스에 this 를 통해 접근하려면, 생성자에서 super(); 를 통해 초기화 해야한다.<blockquote><p>super란? super키워드는 부모 클래스의 프로퍼티를 참조할 때 또는 부모 클래스의 constructor를 호출할 때 사용한다.</p></blockquote></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Parent &#123;</span><br><span class="line">    <span class="keyword">private</span> privateProp: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> protectedProp: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(); <span class="comment">// 아래의 멤버변수와 순서가 바뀌어도 에러가 난다!</span></span><br><span class="line">        <span class="keyword">this</span>.protectedProp = <span class="string">'protected'</span>;</span><br><span class="line">        <span class="comment">// this.privateProp = 'private'; // (X)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-class-default-constructor"><a href="#4-class-default-constructor" class="headerlink" title=" 4. class default constructor"></a><a name="constructor"></a> 4. class default constructor</h3><ul><li>디폴트 생성자는 프로그래머가 만든 생성자가 없을 때 사용할 수 있다.<ul><li>사용자가 만든 생성자가 하나라도 있으면, 디폴트 생성자는 사라진다.<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="5-class-amp-method"><a href="#5-class-amp-method" class="headerlink" title=" 5. class &amp; method"></a><a name="method"></a> 5. class &amp; method</h3><ol><li>클래스 내부에 작성된 메서드는 public 이 디폴트</li><li>arrow function 으로 작성 가능</li><li>private 을 이용하면 클래스 외부에서 접근 불가</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> _name: <span class="built_in">string</span>, <span class="keyword">private</span> _age: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    print(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`이름은 <span class="subst">$&#123;this._name&#125;</span> 이고, 나이는 <span class="subst">$&#123;this._age&#125;</span> 살 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printName = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123; <span class="comment">// arrow function</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`이름은 <span class="subst">$&#123;this._name&#125;</span> 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> printAge(): <span class="built_in">void</span>  &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`나이는 <span class="subst">$&#123;this._age&#125;</span> 살 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person(<span class="string">'Mark'</span>, <span class="number">35</span>);</span><br><span class="line">person.print(); <span class="comment">// 이름은 Mark 이고, 나이는 35 살 입니다.</span></span><br><span class="line">person.printName(); <span class="comment">// 이름은 Mark 입니다.</span></span><br><span class="line"><span class="comment">// person.printAge(); // (X)</span></span><br></pre></td></tr></table></figure><hr><h3 id="6-class-extends"><a href="#6-class-extends" class="headerlink" title=" 6. class extends"></a><a name="extends"></a> 6. class extends</h3><ol><li>상속은 <code>extends</code> 키워드를 이용한다.</li><li>자식 클래스에서 디폴트 생성자는 부모의 생성자와 입력 형태가 같다.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Parent &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">protected</span> _name: <span class="built_in">string</span>, <span class="keyword">protected</span> _age: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    print(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`이름은 <span class="subst">$&#123;this._name&#125;</span> 이고, 나이는 <span class="subst">$&#123;this._age&#125;</span> 살 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printName = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`이름은 <span class="subst">$&#123;this._name&#125;</span> 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> printAge(): <span class="built_in">void</span>  &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`나이는 <span class="subst">$&#123;this._age&#125;</span> 살 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</span><br><span class="line">    _name = <span class="string">'Mark Jr.'</span>; <span class="comment">// 나중에 할당된 값이 출력된다. </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const p: Child = new Child(); // (X)</span></span><br><span class="line"><span class="keyword">const</span> p: Child = <span class="keyword">new</span> Child(<span class="string">''</span>, <span class="number">5</span>);</span><br><span class="line">p.print(); <span class="comment">// 이름은 Mark Jr. 이고, 나이는 5 살 입니다.</span></span><br></pre></td></tr></table></figure><ol><li>생성자를 정의하고, this 를 사용하려면, <code>super</code> 를 통해 부모의 생성자를 호출해줘야 한다.</li><li>super를 호출할때는 부모 생성자의 입력 타입이 같아야 한다.</li><li>super를 호출하는 것은 클래스 <code>외부</code>에서 호출하는 것과 같다.</li><li><code>protected</code> 함수를 호출해서 그 안의 private 을 출력하는 것에 주의한다.<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Parent &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">protected</span> _name: <span class="built_in">string</span>, <span class="keyword">private</span> _age: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    print(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`이름은 <span class="subst">$&#123;this._name&#125;</span> 이고, 나이는 <span class="subst">$&#123;this._age&#125;</span> 살 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> printName = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`이름은 <span class="subst">$&#123;this._name&#125;</span> 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> printAge(): <span class="built_in">void</span>  &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`나이는 <span class="subst">$&#123;this._age&#125;</span> 살 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">'Mark Jr.'</span>, age);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.printName();</span><br><span class="line">        <span class="keyword">this</span>.printAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p: Child = <span class="keyword">new</span> Child(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 이름은 Son 입니다.</span></span><br><span class="line"><span class="comment">// 나이는 1 살 입니다.</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/es6-class" target="_blank" rel="external">http://poiemaweb.com/es6-class</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;타입스크립트 정리 글은 이웅재님의 &lt;a href=&quot;https://www.youtube.com/user/2woongjae/videos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;강의&lt;/a&gt;와 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="TIL &amp;#9997;" scheme="http://feel5ny.github.io/categories/TIL-9997/"/>
    
      <category term="Typescript" scheme="http://feel5ny.github.io/categories/TIL-9997/Typescript/"/>
    
    
      <category term="til" scheme="http://feel5ny.github.io/tags/til/"/>
    
      <category term="typescript" scheme="http://feel5ny.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>5/ interface</title>
    <link href="http://feel5ny.github.io/2017/11/20/Typescript_06/"/>
    <id>http://feel5ny.github.io/2017/11/20/Typescript_06/</id>
    <published>2017-11-20T13:10:56.000Z</published>
    <updated>2017-11-27T08:52:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="external">강의</a>와 <a href="http://slides.com/woongjae/deck-8-14" target="_blank" rel="external">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><p><strong>요약</strong><br>inteface에 대해서 배웁니다. interface 내부에서 타입선언 후 변수에서 사용하며, 함수에서는 <code>implements</code> 키워드를 사용하여 interface를 상속받아 사용합니다. property를 <code>?</code>를 사용하여 옵셔널하게 사용가능하며(안써도 되는 프로퍼티를 명시할 수 있음) interface 끼리 상속이 가능합니다. interface 자체를 함수화하여 사용가능하며, 내부에서는 출력값과 입력값의 타입을 명시합니다. indexable type으로도 옵셔널한 프로퍼티를 만들 수 있습니다.</p><ol><li><a href="#basic">interface 기초</a></li><li><a href="#optional">interface optional property</a><ol><li>optional property</li><li><a href="#indexable">indexable type</a></li></ol></li><li><a href="#functionIn">function in interface</a></li><li><a href="#implements">implements interface</a></li><li><a href="#extends">extends interface</a></li><li><a href="#function">function interface</a></li></ol><hr><h3 id="1-interface-기초"><a href="#1-interface-기초" class="headerlink" title=" 1. interface 기초"></a><a name="basic"></a> 1. interface 기초</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person: &#123; name: <span class="built_in">string</span>, age: <span class="built_in">number</span> &#125; = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    age: <span class="number">32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// person이라는 오브젝트를 설명하고 있는 타입은 리터럴 타입인데,매번 리터럴방식으로 타입을 선언할것인가?</span></span><br><span class="line"><span class="comment">// 아니오..  &gt; interface로 부르자.</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">    age: <span class="built_in">number</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    age: <span class="number">32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// interface는 컴파일 이후에는 나타나지 않는다.</span></span><br></pre></td></tr></table></figure><ul><li>타입을 미리 interface에서 명시 한 후에 해당 interface를 넣어서 타입을 명시한다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">입력값:입력값타입</span>): 출력타입 </span>&#123;</span><br><span class="line">  ~</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hello = (p:Person): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">    age: <span class="built_in">number</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 입력과 출력을 정확히 명시하지 않으면, </span></span><br><span class="line"><span class="comment">// 추론을 하게 되는데 이는 문제가 될 수 있다.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">p: Person</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`안녕하세요. <span class="subst">$&#123;p.name&#125;</span> 입니다.`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-interface-optional-property"><a href="#2-interface-optional-property" class="headerlink" title=" 2. interface optional property"></a><a name="optional"></a> 2. interface optional property</h3><h4 id="1-있어도-되고-없어도-되는-proerty를-설정-할-수-있다"><a href="#1-있어도-되고-없어도-되는-proerty를-설정-할-수-있다" class="headerlink" title="1. 있어도 되고 없어도 되는 proerty를 설정 할 수 있다."></a>1. 있어도 되고 없어도 되는 proerty를 설정 할 수 있다.</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">    age: <span class="built_in">number</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    <span class="comment">// age를 정의하지 않았기 때문에 person에 빨간줄이 생긴다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  age? : <span class="built_in">number</span> <span class="comment">// &lt;= age 뒤에 ?를 붙이면 된다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">    age?: <span class="built_in">number</span>, <span class="comment">// 옵셔널한 프로퍼티 주는 방법</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    <span class="comment">// age는 optional한 property이기 때문에 없어도 오류가 나지 않는다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-indexable-type"><a href="#2-indexable-type" class="headerlink" title=" 2. indexable type"></a><a name="indexable"></a> 2. indexable type</h4><p>indexable type으로 optional한 타입을 사용 가능하다.<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. array같은 타입이고</span></span><br><span class="line"><span class="comment">// 2. 사전같은 타입이다.</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">// person의 property명으로 인덱스가 어떤 타입이었는지에 따라서</span></span><br><span class="line">    <span class="comment">// property.string 형태의 어떤 indexable type이 들어가면 나머지는 다 string으로 표현할 수 있다.</span></span><br><span class="line">    <span class="comment">// 사전같은 의미이다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">    name: <span class="string">'Clara'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.anybody = <span class="string">"Clara"</span></span><br><span class="line">person[<span class="number">1</span>] = <span class="string">'hi'</span> <span class="comment">// 배열형태로도 넣을 수 있다.</span></span><br></pre></td></tr></table></figure></p><p><code>person.anybody = &quot;Clara&quot;</code> </p><ul><li>이렇게 객체에 <code>.</code>을 붙인 후 프로퍼티로 타입을 <code>옵셔널</code>하게 줄 수 있기 때문에 optional type으로 사용이 가능하다는 뜻이다. (없어도 에러가 나지 않는다.) </li><li><strong>index는 <code>string</code>이거나 <code>number</code>만 가능하다.</strong></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sa: StringArray = &#123;&#125;; <span class="comment">// 옵셔널하다, 안써도 에러가 안난다.</span></span><br><span class="line">sa[<span class="number">100</span>] = <span class="string">'백'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> StringDictionary &#123;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sd: StringDictionary = &#123;&#125;; <span class="comment">// 옵셔널하다</span></span><br><span class="line">sd.hundred = <span class="string">'백'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> StringArrayDictionary &#123;</span><br><span class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sad: StringArrayDictionary = &#123;&#125;;</span><br><span class="line"><span class="comment">// 당연히 옵셔널하다.</span></span><br><span class="line">sad[<span class="number">100</span>] = <span class="string">'백'</span>;</span><br><span class="line">sad.hundred = <span class="string">'백'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringDictionary &#123;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sd: StringDictionary = &#123;</span><br><span class="line">    name: <span class="string">'이름'</span> <span class="comment">// 필수</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sd.any = <span class="string">'any'</span>; <span class="comment">// 어떤 프로퍼티도 가능</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> StringDictionaryNo &#123;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">// name: number; </span></span><br><span class="line">    <span class="comment">// (X) 인덱서블 타입이 string 값을 가지기 때문에 number 를 필수로 끌어오면 에러</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-function-in-interface"><a href="#3-function-in-interface" class="headerlink" title=" 3. function in interface"></a><a name="functionIn"></a> 3. function in interface</h3><p>interface 내부에 함수를 넣을 수 있다.</p><ul><li>출력값의 타입을 명시해야한다.<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    hello(): <span class="built_in">void</span>;</span><br><span class="line">    world(): <span class="built_in">string</span>;</span><br><span class="line">    nayoung(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">void</span> </span>&#123; <span class="comment">//void일 경우는 써도 되고 안 써도된다.</span></span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    world(): <span class="built_in">string</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'World'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    nayoung: (): <span class="function"><span class="params">number</span> =&gt;</span> &#123; <span class="comment">// ES6 문법 합수 사용시 </span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="4-implements-interface-128580"><a href="#4-implements-interface-128580" class="headerlink" title=" 4. implements interface &#128580;"></a><a name="implements"></a> 4. implements interface &#128580;</h3><p>interface를 상속받아서 class에서 사용가능하다.</p><ul><li>class 선언문의 <code>implements</code> 뒤에 인터페이스를 선언하면 해당 클래스는 지정된 인터페이스를 반드시 구현하여야 한다. <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    hello(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 만들기. IPeron을 상속받았다.</span></span><br><span class="line"><span class="keyword">class</span> Person <span class="keyword">implements</span> IPerson &#123;</span><br><span class="line">  <span class="comment">// IPerson을 다 써줘야한다.</span></span><br><span class="line">    name: <span class="built_in">string</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="comment">// IPerson의 name을 this.name으로 받는다. </span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    hello(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`안녕하세요. <span class="subst">$&#123;this.name&#125;</span> 입니다.`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> hi(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: IPerson = <span class="keyword">new</span> Person(<span class="string">'Mark'</span>);</span><br><span class="line">person.hello()</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="5-extends-interface"><a href="#5-extends-interface" class="headerlink" title=" 5. extends interface"></a><a name="extends"></a> 5. extends interface</h3><p>상속받는 인터페이스를 만들 수 있다. interface끼리 상속이 가능하다.<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Korean <span class="keyword">extends</span> Person &#123;</span><br><span class="line">    city: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> k: Korean = &#123;</span><br><span class="line">    name: <span class="string">'이웅재'</span>,</span><br><span class="line">    city: <span class="string">'서울'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><hr><h3 id="6-function-interface"><a href="#6-function-interface" class="headerlink" title=" 6. function interface"></a><a name="function"></a> 6. function interface</h3><p>함수형 인터페이스이다. </p><ul><li>함수의 타입 체크는 할당할 때가 아니라 <code>사용할 때 한다</code>는 점을 명심</li><li>function의 입출력을 바로 명시하지 않는다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> HelloPerson &#123;</span><br><span class="line">    <span class="comment">// (name: string, age: number): void;</span></span><br><span class="line">    (name: <span class="built_in">string</span>, age?: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// helloPerson의 타입이 HelloPerson</span></span><br><span class="line"><span class="keyword">let</span> helloPerson: HelloPerson = <span class="function"><span class="keyword">function</span> (<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// name:string을 넣지 않아도 에러가 안난다. =&gt; 호출할 때 에러가 난다.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`안녕하세요! <span class="subst">$&#123;name&#125;</span> 입니다.`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">helloPerson(<span class="string">'Mark'</span>); <span class="comment">// 안녕하세요! Mark 입니다.</span></span><br><span class="line">helloPerson(); <span class="comment">// 에러가 난다.</span></span><br></pre></td></tr></table></figure><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/typescript-interface" target="_blank" rel="external">http://poiemaweb.com/typescript-interface</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;타입스크립트 정리 글은 이웅재님의 &lt;a href=&quot;https://www.youtube.com/user/2woongjae/videos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;강의&lt;/a&gt;와 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="TIL &amp;#9997;" scheme="http://feel5ny.github.io/categories/TIL-9997/"/>
    
      <category term="Typescript" scheme="http://feel5ny.github.io/categories/TIL-9997/Typescript/"/>
    
    
      <category term="til" scheme="http://feel5ny.github.io/tags/til/"/>
    
      <category term="typescript" scheme="http://feel5ny.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>4/ 타입추론, Type assertions, Type alias</title>
    <link href="http://feel5ny.github.io/2017/11/18/Typescript_05/"/>
    <id>http://feel5ny.github.io/2017/11/18/Typescript_05/</id>
    <published>2017-11-18T06:13:11.000Z</published>
    <updated>2017-11-27T08:52:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="external">강의</a>와 <a href="http://slides.com/woongjae/deck-8-14" target="_blank" rel="external">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><p><strong>목표</strong><br>이 포스팅과 interface 포스팅에서는 타입을 명시하는 방법을 배웁니다. 타입을 명시하지 않아도 추론이 가능하며, 강제 타입선언, 별명을 붙여가며 타입을 선언하는 방식 등을 배웁니다.</p><ol><li><a href="#let+const">let과 const의 타입 추론</a><br>변수를 선언할 때 부터 타입을 신경쓰면서 선언할 수 있는데, 타입없이 선언할 경우 할당된 값을 확인 후 타입을 추론한다. let 키워드로 변수 선언시에는 타입추론이 가능하지만 const 키워드로 선언할 경우 추론이 되지 않으며 <code>리터럴 타입</code>으로 값이 타입이 된다.</li><li><a href="#assertions">Type assertions</a><br>타입을 강제적으로 명시해줄 수 있다. (as와 &lt;&gt;방법)</li><li><a href="#alias">Type alias</a><ol><li><a href="#Interface">Type alias와 Interface와 차이점</a><br>타입에 다른 이름을 붙여주는 것인데, Interface와 유사하지만 차이점은, 상속과 인터페이스 구현(implements)의 가능 여부가 다르다는 것.</li></ol></li></ol><hr><h3 id="1-let과-const의-타입-추론"><a href="#1-let과-const의-타입-추론" class="headerlink" title=" 1. let과 const의 타입 추론"></a><a name="let+const"></a> 1. let과 const의 타입 추론</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">string</span> = <span class="string">'진호'</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">'승민'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c: <span class="built_in">string</span> = <span class="string">'나영'</span>;</span><br><span class="line"><span class="keyword">const</span> d = <span class="string">'슬기'</span> <span class="comment">// 리터럴 타입</span></span><br></pre></td></tr></table></figure><ul><li>const는 프리미티브 타입은 다른 값으로 못 바꾸고, 레퍼런스타입은 다른 레퍼런스타입을 가리키지 못하게 하는 것인데, 타입스크립트에서는 <code>리터럴 타입</code>이라고 하는 것으로 타입까지 강제해버린다.</li><li>즉 const에서 타입없이 선언될 경우 타입 추론에 의해서 할단된 값이 타입으로 된다. (리터럴 타입)<br>ex. 위에서 <code>const d = &#39;슬기&#39;</code>에서 d는 <code>const d:&#39;슬기&#39;</code>라고 뜨고, 슬기라는 리터럴 타입으로 된다.</li></ul><p>재할당 redeclare</p><ul><li>let은 재할당(redeclare)이 가능하다.</li><li>const는 <ul><li>레퍼런스 타입은 레퍼런스 값이 바뀌는 것을 허용하지 않고, 속안의 프로퍼티 바꾸는 것은 허용된다. </li><li>프리미티브 타입은 재할당이 아예 불가능.</li></ul></li></ul><blockquote><p>보통은 const를 사용하며, let을 쓰면서 명시적으로도 값이 바껴지는 변수라고도 표시한다.</p></blockquote><hr><h3 id="2-Type-assertions-assertions-’단언’"><a href="#2-Type-assertions-assertions-’단언’" class="headerlink" title=" 2. Type assertions (assertions:’단언’)"></a><a name="assertions"></a> 2. Type assertions (assertions:’단언’)</h3><ul><li>형 변환과는 다르다.<br>형 변환은 : 실제 데이터 구조를 바꾼다.</li><li><code>&#39;타입이 이것이다&#39;라고 컴파일러에게 알려주는 것</code>을 의미한다.<br>예_<code>넓은 범위의 타입</code>이 (union타입) 어떤 상황에서 고정이 되어야할 경우, 타입 어셜션으로 타입을 강제해 준다.</li><li>방법은 2가지가 있다.<ol><li>변수 as 강제할 타입</li><li>&lt;강제할타입&gt;변수</li></ol></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 주로 넓은 타입에서 좁은 타입으로 강제하는 경우가 많다.</span></span><br><span class="line"><span class="comment">2. jsx 에서는 as 를 쓴다.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-Type-alias-alias-’별명’"><a href="#3-Type-alias-alias-’별명’" class="headerlink" title=" 3. Type alias (alias:’별명’)"></a><a name="alias"></a> 3. Type alias (alias:’별명’)</h3><p>타입에 별명을 붙인다고 생각하면 된다.</p><ul><li>타입이 생기는 것이 아니라, 따로 이름을 붙여주는 것이다.</li><li>interface가 유사하지만 interface처럼 쓸수 없는 경우가 있다.</li><li>Primitive나 Union Type, Tuple 같은 타입에서 쓴다.<br>보통 Primitive 타입은 .. 많이 안쓴다. (number나 string을 구지..)</li><li>만들어진 타입의 refer로 사용하는 것이지 `타입을 만드는 것은 아니다.</li><li><code>type + 별칭</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Aliaing Primitive</span></span><br><span class="line"><span class="keyword">type</span> MyStringType = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'world'</span>;</span><br><span class="line"><span class="keyword">let</span> myStr: MyStringType = <span class="string">'hello'</span>;</span><br><span class="line">myStr = str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// string에 'world'라는 별명을 주었다.</span></span><br><span class="line"><span class="comment">// 별 의미가 없다..</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Aliaing Union Type</span></span><br><span class="line"><span class="keyword">let</span> person: <span class="built_in">string</span> | <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">person = <span class="string">'Mark'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StringOrNumber = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="comment">// StringOrNumber이라는 타입별칭을 붙였다. </span></span><br><span class="line"><span class="comment">// 별칭 붙일 때는 앞에 type + 별칭</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> another: StringOrNumber = <span class="number">0</span>;</span><br><span class="line">another = <span class="string">'Anna'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 유니온 타입은 A 도 가능하고 B 도 가능한 타입</span></span><br><span class="line"><span class="comment">2. 길게 쓰는걸 짧게</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Aliaing Tuple</span></span><br><span class="line"><span class="keyword">let</span> person: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">'Mark'</span>, <span class="number">35</span>];</span><br><span class="line"><span class="keyword">type</span> PersonTuple = [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="keyword">let</span> another: PersonTuple = [<span class="string">'Anna'</span>, <span class="number">24</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 튜플 타입에 별칭을 줘서 여러군데서 사용할 수 있게 한다.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="3-1-Type-alias와-Interface와-차이점"><a href="#3-1-Type-alias와-Interface와-차이점" class="headerlink" title=" 3-1. Type alias와 Interface와 차이점"></a><a name="Interface"></a> 3-1. Type alias와 Interface와 차이점</h4><p>보통은 interface와 class등을 자주 사용하기 때문에 alias 쓰는 타이밍이 초반에는 많이 없다. interface를 사용하다가 굳이 사용할 필요가 없는 순간에 alias를 쓰면 된다.</p><ol><li><p>오류 메세지<br>타입스크립트가 컴파일을 시도할때 오류가 나올때, Alias라는 이름으로 알려주지 않고 타입 자체로 알려준다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Alias = &#123; num: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Interface &#123;</span><br><span class="line">    num: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">aliased</span>(<span class="params">arg: Alias</span>): <span class="title">Alias</span></span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">interfaced</span>(<span class="params">arg: Interface</span>): <span class="title">Interface</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. type alias 는 object literal type 로</span></span><br><span class="line"><span class="comment">2. interface 는 interface 로</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>상속을 받을 수는 있지만 상속을 할 수는 없다.</p><ul><li>당연한건 type alias 끼리는 extends, implements 불가</li><li>interface extends type alias 가능 </li><li>class A implements type alias 가능<br>= A라는 클래스는 type alias 인터페이스를 구현할 수 있다. </li><li>class A extends type alias 블가 (interface 도 마찬가지)<br>= A라는 클래스는 type alias를 상속받지 못한다. </li><li>마치 interface 처럼 동작한다.</li><li>클래스 선언문의 implements 뒤에 인터페이스를 선언하면 해당 클래스는 지정된 인터페이스를 반드시 구현하여야 한다.</li></ul></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PersonAlias = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;; <span class="comment">// type alias</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IPerson <span class="keyword">extends</span> PersonAlias &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// 가능</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ip: IPerson = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    age: <span class="number">35</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> PersonImpl <span class="keyword">implements</span> PersonAlias &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    </span><br><span class="line">    hello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'안녕하세요'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// PersonImpl라는 클래스는 PersonAlias라는 인터페이스를 구현하겠다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pi: PersonImpl = <span class="keyword">new</span> PersonImpl();</span><br><span class="line">pi.hello();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> PersonChild <span class="keyword">extends</span> PersonAlias &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// 불가능</span></span><br></pre></td></tr></table></figure><ul><li>extends와 implements의 차이<br><code>class A extends B</code> 라고 하면<br>A는 B라는 클래스를 상속 받아서 +a 시키겠다는 뜻.<br><code>class A implements C</code> 라고 하면<br>A는 C라는 인터페이스를 구현하겠다~ 라는 뜻입니다.</li></ul><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://gdthink.blogspot.kr/2006/06/extends%EC%99%80-implements%EC%9D%98-%EC%B0%A8%EC%9D%B4.html" target="_blank" rel="external">http://gdthink.blogspot.kr/2006/06/extends%EC%99%80-implements%EC%9D%98-%EC%B0%A8%EC%9D%B4.html</a></li><li><a href="http://poiemaweb.com/typescript-interface" target="_blank" rel="external">http://poiemaweb.com/typescript-interface</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;타입스크립트 정리 글은 이웅재님의 &lt;a href=&quot;https://www.youtube.com/user/2woongjae/videos&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;강의&lt;/a&gt;와 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="TIL &amp;#9997;" scheme="http://feel5ny.github.io/categories/TIL-9997/"/>
    
      <category term="Typescript" scheme="http://feel5ny.github.io/categories/TIL-9997/Typescript/"/>
    
    
      <category term="til" scheme="http://feel5ny.github.io/tags/til/"/>
    
      <category term="typescript" scheme="http://feel5ny.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>3/ Typescript_기본 데이터 타입</title>
    <link href="http://feel5ny.github.io/2017/11/17/Typescript_04/"/>
    <id>http://feel5ny.github.io/2017/11/17/Typescript_04/</id>
    <published>2017-11-17T03:33:40.000Z</published>
    <updated>2017-11-27T12:22:45.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="기본-데이터-타입-🌱"><a href="#기본-데이터-타입-🌱" class="headerlink" title="기본 데이터 타입 🌱"></a>기본 데이터 타입 🌱</h2><p>타입스크립트에서 기본 자료형을 <code>잘!</code> 숙지해야 한다. 타입스크립트는 타입을 새로 만들면서 짜는 방식인데, 특정한 골격을 갖출 때 결국 남는건 기본 자료형들이 남는다. 이때 기본 자료형이 정확히 어떤 것들이 있는지 인지하고 있어야, 그 기본 자료형들을 잘 조합해서 내가 사용할 인터페이스를 만들어 낼 수 있고, 타입을 만들 수 있다. 자바스크립트의 기본자료형을 모두 포함한다.</p><hr><blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="external">강의</a>와 <a href="http://slides.com/woongjae/deck-8#" target="_blank" rel="external">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다 .</p></blockquote><ol><li><a href="#literal">literal</a></li><li>기본 자료형 Primitive Type (javascript) 🌱<ol><li><a href="#boolean">boolean</a></li><li><a href="#number">number</a></li><li><a href="#string">string</a></li><li><a href="#Template_String">Template String</a></li><li><a href="#Undefined_null">Undefined &amp; null</a><ol><li>undefined &amp; null are subtypes of all other types</li><li>null in JavaScript</li><li>undefined in JavaScript</li></ol></li></ol></li><li>참조타입 (javascript) 🎯<ol><li><a href="#Array">Array</a></li><li><a href="#Symbol">Symbol</a></li></ol></li><li>타입스크립트에서 추가로 제공하는 타입 🐥<ol><li><a href="#Void">Void</a></li><li><a href="#Any">Any</a></li><li><a href="#Never">Never</a></li><li><a href="#Tuple">Tuple</a></li><li><a href="#Enum">Enum</a></li></ol></li></ol><hr><h3 id=""><a href="#" class="headerlink" title=""></a><a name="literal"></a></h3><p>0. literal</p><ul><li><code>값 자체가 변하지 않는 값을 의미합니다 .</code></li><li>상수와 다른 것은 상수는 가리키는 포인터가 고정이라는 것이고, 리터럴은 그 자체가 <strong>값이자 그릇</strong>입니다 .</li><li>“<code>리터럴 상수</code>는 5, 1.23 과 같은 숫자나, ‘This is a string’ 혹은 “It’s a string!” 과 같은 문자열 등을 말합니다. 이것들이 리터럴 상수라고 불리우는 이유는 이것들이 프로그램 내에 직접 <code>문자 형태</code>로 (literally) 지정되는 값들 이기 때문입니다. <code>이러한 값들은 한번 지정되면 변하지 않습니다 .</code></li><li>예를 들면 숫자 <code>2</code>는 언제나 자기 자신이 2 라는 숫자임을 나타내며 어떤 다른 의미도 갖지 않습니다 .</li><li>이들은 한번 지정되면 그 값을 변경할 수 없기 때문에 <em>상수</em>입니다 . 그 중에서도 특별히 이러한 값들을 리터럴 상수라고 부릅니다. @kangpual</li></ul><hr><h2 id="1-기본-자료형-Primitive-Type"><a href="#1-기본-자료형-Primitive-Type" class="headerlink" title="1. 기본 자료형 Primitive Type"></a>1. 기본 자료형 Primitive Type</h2><ul><li>object 와 reference 형태가 아닌 실제 값을 저장하는 자료형입니다 .</li><li>프리미티브 형의 내장 함수를 사용 가능한것은 자바스크립트 처리 방식 덕분<ul><li>동작 자체는 마치 객체인 것처럼 처리된다 .</li><li>메모리를 아끼기 위해서</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'Nayoung'</span></span><br><span class="line"></span><br><span class="line">name.toString()</span><br></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=""></a><a name="boolean"></a></h3><p>1-1. boolean</p><ul><li>가장 기본적인 데이터 타입</li><li>단순한 true 혹은 false값 입니다 .</li><li>JavaScript / TypeScript 에서 <strong>‘boolean’</strong> 이라고 부른다 .</li></ul><p><strong>소문자 boolean 과 대문자 Boolean</strong></p><ul><li>소문자 boolean 은 프리미티브 타입의 불린 , 대문자 Boolean 은 레퍼 오브젝트의 생성자 class 인데 , 자바스크립트에서는 두 가지의 차이가 크게 없지만, 타입스크립트에서는 차이가 있다 . 타입스크립트에서는 소문자를 권장한다.<ul><li><code>Type &#39;boolean&#39; is assignable to type &#39;Boolean&#39;.</code></li><li>Type ‘Boolean’ is not assignable to type ‘boolean’.</li><li>‘boolean’ is a primitive, but ‘Boolean’ is a wrapper object.</li><li>Prefer using ‘boolean’ when possible.</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: boolean = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> isDone === <span class="string">'boolean'</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Type 'boolean' is assignable to type 'Boolean'.</span></span><br><span class="line"><span class="keyword">let</span> isOk: <span class="built_in">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Type 'Boolean' is not assignable to type 'boolean'.</span></span><br><span class="line"><span class="comment">// 'boolean' is a primitive, but 'Boolean' is a wrapper object.</span></span><br><span class="line"><span class="comment">// Prefer using 'boolean' when possible.</span></span><br><span class="line"><span class="keyword">let</span> isNotOk: boolean = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="-2"><a href="#-2" class="headerlink" title=""></a><a name="number"></a></h3><p>1-2. number</p><ul><li>JavaScript 와 같이, TypeScript 의 모든 숫자는 부동 소수점 값 입니다.</li><li>TypeScript 는 16진수 및 10진수 리터럴 외에도, ECMAScript 2015에 도입된 2진수및 8진수를 지원합니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decimal: number = <span class="number">6</span> <span class="comment">// 10진수 리터럴</span></span><br><span class="line"><span class="keyword">let</span> hex: number = <span class="number">0xf00d</span> <span class="comment">// 16진수 리터럴</span></span><br><span class="line"><span class="keyword">let</span> binary: number = <span class="number">0b1010</span> <span class="comment">// 2진수 리터럴</span></span><br><span class="line"><span class="keyword">let</span> octal: number = <span class="number">0o744</span> <span class="comment">// 8진수 리터럴</span></span><br></pre></td></tr></table></figure><h3 id="-3"><a href="#-3" class="headerlink" title=""></a><a name="string"></a></h3><p>1-3. string</p><ul><li>Template String을 자주 쓴다 .</li><li>다른 언어에서와 마찬가지로 텍스트 형식을 참조하기 위해 <code>string</code>형식을 사용한다.</li><li>자바스크립트와 마찬가지로, 타입스크립트는 문자열 데이터를 둘러싸기 위해 큰 따옴표나 작은따옴표를 사용한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: string = <span class="string">'mark'</span></span><br><span class="line">name = <span class="string">'anna'</span></span><br></pre></td></tr></table></figure><h3 id="-4"><a href="#-4" class="headerlink" title=""></a><a name="Template_String"></a></h3><p>1-4. Template String</p><ul><li>주로 사용한다.</li><li>행에 걸쳐 있거나, 표현식을 넣을 수 있는 문자열</li><li>이 문자열은 backtick (= backquote <figure class="highlight plain"><figcaption><span>기호에 둘러쌓여 있습니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">* 포함된 표현식은 `$&#123; expr &#125;`와 같은 형태로 사용합니다.</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">let fullName: string = `Bob Bobbington`</span><br><span class="line">let age: number = 37</span><br><span class="line"></span><br><span class="line">let sentence: string = `Hello, my name is $&#123;fullName&#125;.</span><br><span class="line"></span><br><span class="line">I&apos;ll be $&#123;age + 1&#125; years old next month.`</span><br><span class="line"></span><br><span class="line">// template string 을 사용하지 않을 경우</span><br><span class="line">let sentence: string =</span><br><span class="line">  &apos;Hello, my name is &apos; +</span><br><span class="line">  fullName +</span><br><span class="line">  &apos;.\n\n&apos; +</span><br><span class="line">  &quot;I&apos;ll be &quot; +</span><br><span class="line">  (age + 1) +</span><br><span class="line">  &apos; years old next month.&apos;</span><br></pre></td></tr></table></figure></li></ul><h3 id="-5"><a href="#-5" class="headerlink" title=""></a><a name="Undefined_null"></a></h3><p>1-5. Undefined &amp; null</p><ul><li>TypeScript에서 ‘undefined’와 ‘null’은 실제로 각각 ‘undefined’와 ‘null’이라는 고유한 타입을 가집니다.</li><li>‘void’ 와 마찬가지로, undefined 와 null 은 그 자체로는 쓸모가 없습니다.</li><li>둘다 소문자만 존재합니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이 변수들에 할당할 수 있는 것들은 거의 없다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure><ul><li>위 처럼 사용하기 보다는 <code>return</code>에서 주로 사용</li></ul><h3 id="1-5-1-undefined-amp-null-are-subtypes-of-all-other-types"><a href="#1-5-1-undefined-amp-null-are-subtypes-of-all-other-types" class="headerlink" title="1-5-1. undefined &amp; null are subtypes of all other types"></a>1-5-1. undefined &amp; null are subtypes of all other types</h3><ul><li>기본 설정이 그렇습니다.</li><li>대입이 가능하다는 것이다.</li><li>number에 null 또는 undefined 를 <code>할당할 수 있다는 의미</code>입니다.</li><li>하지만, 컴파일 옵션에서 <code>--strictNullChecks</code>사용하면, null과 undefined 는 void 나 자기 자신들에게만 할당할 수 있습니다.</li><li>이 경우, null과 undefined를 할당할 수 있게 하려면, union type 을 이용해야합니다. (union type: 두개의 타입을 합치는 것.)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 대입 가능</span></span><br><span class="line"><span class="keyword">let</span> name: string = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> age: number = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// strictNullChecks =&gt; true</span></span><br><span class="line"><span class="comment">// 보통 위의 옵션을 true로 하진 않는다..</span></span><br><span class="line"><span class="comment">// 위의 옵션이 추가되면 자기 자신이나 void에게만 할당 가능, 다른 타입에는 할당하지 못함.</span></span><br><span class="line"><span class="comment">// let name: null = null; // (O)</span></span><br><span class="line"><span class="comment">// Type 'null' is not assignable to type 'string'.</span></span><br><span class="line"><span class="keyword">let</span> name: string = <span class="literal">null</span> <span class="comment">// (X)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null =&gt; null || void, undefined =&gt; undefined || void</span></span><br><span class="line"><span class="comment">// Type 'null' is not assignable to type 'undefined'.</span></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">null</span> <span class="comment">// (X)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> v: <span class="keyword">void</span> = <span class="literal">undefined</span> <span class="comment">// (O)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> union: string | <span class="literal">null</span> | <span class="literal">undefined</span> = <span class="string">'str'</span></span><br></pre></td></tr></table></figure><h3 id="1-5-2-null-in-JavaScript"><a href="#1-5-2-null-in-JavaScript" class="headerlink" title="1-5-2. null in JavaScript"></a>1-5-2. null in JavaScript</h3><ul><li>null 이라는 값으로 할당된 것을 null 이라고 합니다.</li><li><code>무언가가 있는데, 사용할 준비가 덜 된 상태.</code> (undefined 는 <code>무언가가 아예 준비가 안된 상태</code>)</li><li>null 이라는 타입은 null 이라는 값만 가질 수 있습니다.</li><li>런타임에서 typeof 연산자를 이용해서 알아내면 , <code>object</code> 입니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(n) <span class="comment">// null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> n) <span class="comment">// object</span></span><br></pre></td></tr></table></figure><h3 id="1-5-3-undefined-in-JavaScript"><a href="#1-5-3-undefined-in-JavaScript" class="headerlink" title="1-5-3. undefined in JavaScript"></a>1-5-3. undefined in JavaScript</h3><ul><li>값을 할당하지 않은 변수는 undefined 라는 값을 가집니다.</li><li><code>무언가가 아예 준비가 안된 상태</code></li><li>object 의 property 가 없을 때도 undefined 입니다.</li><li>런타임에서 typeof 연산자를 이용해서 알아내면 , <code>undefined</code> 입니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(u) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> u) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-참조타입-javascript"><a href="#2-참조타입-javascript" class="headerlink" title="2. 참조타입 (javascript)"></a>2. 참조타입 (javascript)</h2><h3 id="-6"><a href="#-6" class="headerlink" title=""></a><a name="Array"></a></h3><p>2-1. Array</p><ul><li>원래 자바스크립트에서 array는 객체입니다.</li><li>사용방법 2가지 &#9996;<ul><li>Array&lt;타입&gt; (내부적으로 제네릭을 이용한 것이다.)</li><li>타입 []</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="-7"><a href="#-7" class="headerlink" title=""></a><a name="Symbol"></a></h3><p>2-2. Symbol 🙄</p><ul><li>ECMAScript 2015의 Symbol 입니다.</li><li><code>프리미티브 타입</code>의 값을 담아서 사용합니다.</li><li>고유하고 수정불가능한 값으로 만들어줍니다.</li><li>그래서 주로 접근을 제어하는데 쓰는 경우가 많았습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [sym]: <span class="string">'value'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj[sym]) <span class="comment">// "value"</span></span><br></pre></td></tr></table></figure><hr><h2 id="3-타입스크립트에서-추가로-제공하는-타입"><a href="#3-타입스크립트에서-추가로-제공하는-타입" class="headerlink" title="3. 타입스크립트에서 추가로 제공하는 타입"></a>3. 타입스크립트에서 추가로 제공하는 타입</h2><h3 id="-8"><a href="#-8" class="headerlink" title=""></a><a name="Void"></a></h3><p>3-1. Void</p><ul><li>타입이 없는 상태입니다.</li><li><code>any</code> 와 반대의 의미를 가집니다.</li><li>Void 는 대문자가 없습니다. 소문자입니다.</li><li>주로 함수의 <code>리턴이 없을 때</code> 사용합니다. 그 외에는 <code>사용할 일이 거의 없습니다.</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnVoid</span>(<span class="params">message</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">returnVoid(<span class="string">'리턴이 없다'</span>)</span><br></pre></td></tr></table></figure><h3 id="-9"><a href="#-9" class="headerlink" title=""></a><a name="Any"></a></h3><p>3-2. Any</p><ul><li>어떤 타입이어도 상관없는 타입입니다.</li><li>이걸 최대한 쓰지 않는게 핵심입니다.</li><li>왜냐면 컴파일 타임에 타입 체크가 정상적으로 이뤄지지 않기 때문입니다.</li><li>그래서 컴파일 옵션 중에는 any 를 쓰면 오류를 뱉도록 하는 옵션도 있습니다.<ul><li><code>noImplicitAny</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnAny</span>(<span class="params">message</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">returnVoid(<span class="string">'리턴은 아무거나'</span>)</span><br></pre></td></tr></table></figure><h3 id="-10"><a href="#-10" class="headerlink" title=""></a><a name="Never"></a></h3><p>3-3. Never</p><ul><li>리턴에 주로 사용된다.</li><li>아래의 3 가지 정도가 대부분</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function returning never must have unreachable end point</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: string</span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inferred return type is never</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> error(<span class="string">'Something failed'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function returning never must have unreachable end point</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="-11"><a href="#-11" class="headerlink" title=""></a><a name="Tuple"></a></h3><p>3-4. Tuple</p><ul><li><strong>배열인데 타입이 한가지가 아닌 경우</strong></li><li>마찬가지로 <strong>객체</strong>입니다.</li><li>꺼내 사용할때 주의가 필요합니다.<ul><li>배열을 Destructuting 하면 타입이 제대로 얻어집니다.</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare a tuple type</span></span><br><span class="line"><span class="keyword">let</span> x: [string, number]</span><br><span class="line"><span class="comment">// Initialize it</span></span><br><span class="line">x = [<span class="string">'hello'</span>, <span class="number">10</span>] <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// Initialize it incorrectly</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">'hello'</span>] <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">3</span>] = <span class="string">'world'</span> <span class="comment">// OK, 'string' can be assigned to 'string | number'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x[<span class="number">5</span>].toString()) <span class="comment">// OK, 'string' and 'number' both have 'toString'</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">6</span>] = <span class="literal">true</span> <span class="comment">// Error, 'boolean' isn't 'string | number'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: [string, number] = [<span class="string">'mark'</span>, <span class="number">35</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [name, age] = person</span><br></pre></td></tr></table></figure><h3 id="-12"><a href="#-12" class="headerlink" title=""></a><a name="Enum"></a></h3><p>3-5. Enum</p><ul><li>C 에서 보던것과 같습니다.</li><li>아래 예제만 이해하면 사용 준비 끝</li><li>Enum 의 결과값은 string 형이다.<blockquote><p>Da,Da 할때 아침 / 점심 / 저녁 / 간식을 Enum 타입으로 받았는데 , 이때 문자열<br>이였기 때문에 <code>*1</code>을 해줬었다 .</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;Red, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line">enum Color &#123;Red = <span class="number">1</span>, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line">enum Color &#123;Red = <span class="number">1</span>, Green = <span class="number">2</span>, Blue = <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line">enum Color &#123;Red = <span class="number">1</span>, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> colorName: string = Color[<span class="number">2</span>]; <span class="comment">// 결과값은 string으로 해야한다.</span></span><br></pre></td></tr></table></figure><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://jaroinside.tistory.com/10" target="_blank" rel="external">http://jaroinside.tistory.com/10</a></li><li><a href="http://poiemaweb.com/typescript-vscode" target="_blank" rel="external">http://poiemaweb.com/typescript-vscode</a></li><li><a href="http://spectrumdig.blogspot.kr/2016/12/chrome-source-map-coffeescripttypescrip.html" target="_blank" rel="external">http://spectrumdig.blogspot.kr/2016/12/chrome-source-map-coffeescripttypescrip.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;기본-데이터-타입-🌱&quot;&gt;&lt;a href=&quot;#기본-데이터-타입-🌱&quot; class=&quot;headerlink&quot; title=&quot;기본 데이터 타입 🌱&quot;&gt;&lt;/a&gt;기본 데이터 타입 🌱&lt;/h2&gt;&lt;p&gt;타입스크립트에서 기본 자료형을 &lt;code&gt;잘!&lt;/cod
      
    
    </summary>
    
      <category term="TIL &amp;#9997;" scheme="http://feel5ny.github.io/categories/TIL-9997/"/>
    
      <category term="Typescript" scheme="http://feel5ny.github.io/categories/TIL-9997/Typescript/"/>
    
    
      <category term="til" scheme="http://feel5ny.github.io/tags/til/"/>
    
      <category term="typescript" scheme="http://feel5ny.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>2016년 A월 B일</title>
    <link href="http://feel5ny.github.io/2017/11/16/algorithm_02/"/>
    <id>http://feel5ny.github.io/2017/11/16/algorithm_02/</id>
    <published>2017-11-16T04:42:33.000Z</published>
    <updated>2017-11-27T09:10:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2016년-A월-B일"><a href="#2016년-A월-B일" class="headerlink" title="2016년 A월 B일"></a>2016년 A월 B일</h2><p>2016년 1월 1일은 금요일입니다. 2016년 A월 B일은 무슨 요일일까요? 두 수 A,B를 입력받아 A월 B일이 무슨 요일인지 출력하는 getDayName 함수를 완성하세요. 요일의 이름은 일요일부터 토요일까지 각각<br><code>SUN,MON,TUE,WED,THU,FRI,SAT</code><br>를 출력해주면 됩니다. 예를 들어 A=5, B=24가 입력된다면 5월 24일은 화요일이므로 TUE를 반환하면 됩니다. </p><hr><h3 id="1-처음-생각한-로직"><a href="#1-처음-생각한-로직" class="headerlink" title="1. 처음 생각한 로직"></a>1. 처음 생각한 로직</h3><ul><li>월마다 일 수가 다르다.<br>a월이 1,3,5,7,10,12 &gt; 31일<br>a월이 4,6,8,9,11 &gt; 30일<br>a월이 2 &gt; 28일</li></ul><ul><li><p>일별로 요일이 다르다.<br><code>const day = [&quot;FRI&quot;, &quot;SAT&quot;, &quot;SUN&quot;, &quot;MON&quot;, &quot;TUE&quot;, &quot;WED&quot;, &quot;THU&quot;]</code><br>7일 day[0]<br>6일 day[6]</p><p>전체 일수가 x라면<br>x일을 7로 나눈후 나머지값 arr[x%7]<br>x의 값은 ?</p></li></ul><ul><li>전체 일수를 배열과 연결하자.<br>31일 + 1 = 32 // 배열에서 금요일부터 32번 후의 값<br>1월 <code>0</code><br>2월 <code>31일 + b</code><br>3월 <code>31일 + 29일 + b</code><br>4월 <code>31일 + 29일 + 31일 + b</code><br>5월 <code>31일 + 29일 + 31일 + 30일 + b</code><br>6월 <code>31일 + 29일 + 31일 + 30일 + 31일</code> = <code>31일 * 3 + 30일 * 2 - 1</code><br>7월 <code>31일 * 3 + 30일 * 3 -1</code><br>8월 <code>31일 * 4 + 30일 * 3 -1</code><br>9월 <code>31일 * 5 + 30일 * 3 -1</code><br>10월 <code>31일 * 5 + 30일 * 4 -1</code><br>11월 <code>31일 * 6 + 30일 * 4 -1</code><br>12월 <code>31일 * 6 + 30일 * 5 -1</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDayName</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">let</span> month = a;</span><br><span class="line">  <span class="keyword">let</span> date = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> inputDate = b;</span><br><span class="line">  <span class="keyword">let</span> week = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> day = [<span class="string">"FRI"</span>, <span class="string">"SAT"</span>, <span class="string">"SUN"</span>, <span class="string">"MON"</span>, <span class="string">"TUE"</span>, <span class="string">"WED"</span>, <span class="string">"THU"</span>]</span><br><span class="line">  <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      date = <span class="number">0</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      date = <span class="number">31</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      date = <span class="number">31</span> + <span class="number">28</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">2</span> + <span class="number">29</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">2</span> + <span class="number">30</span> * <span class="number">2</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">3</span> + <span class="number">30</span> * <span class="number">2</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">3</span> + <span class="number">30</span> * <span class="number">3</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">4</span> + <span class="number">30</span> * <span class="number">3</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">5</span> + <span class="number">30</span> * <span class="number">3</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">5</span> + <span class="number">30</span> * <span class="number">4</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">6</span> + <span class="number">30</span> * <span class="number">4</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">6</span> + <span class="number">30</span> * <span class="number">5</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  date = date + inputDate</span><br><span class="line">  <span class="keyword">return</span> day[date % <span class="number">7</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//아래 코드는 테스트를 위한 코드입니다.</span></span><br><span class="line"><span class="built_in">console</span>.log(getDayName(<span class="number">5</span>, <span class="number">24</span>));</span><br></pre></td></tr></table></figure><h3 id="2-case-문이-너무-비효율적이다-gt-반복문으로-바꾸자"><a href="#2-case-문이-너무-비효율적이다-gt-반복문으로-바꾸자" class="headerlink" title="2. case 문이 너무 비효율적이다. &gt; 반복문으로 바꾸자"></a>2. case 문이 너무 비효율적이다. &gt; 반복문으로 바꾸자</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDayName</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> answer = [<span class="string">"THU"</span>, <span class="string">"FRI"</span>, <span class="string">"SAT"</span>, <span class="string">"SUN"</span>, <span class="string">"MON"</span>, <span class="string">"TUE"</span>, <span class="string">"WED"</span>,];</span><br><span class="line">  <span class="keyword">let</span> month = [<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>];</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    sum += month[i];</span><br><span class="line">  &#125;</span><br><span class="line">  sum += b;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> answer[(sum % <span class="number">7</span>)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Date-메소드를-사용해보자"><a href="#3-Date-메소드를-사용해보자" class="headerlink" title="3. Date 메소드를 사용해보자."></a>3. Date 메소드를 사용해보자.</h3><p>메소드 사용</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDayName</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="string">'SUN'</span>, <span class="string">'MON'</span>, <span class="string">'TUE'</span>, <span class="string">'WED'</span>, <span class="string">'THU'</span>, <span class="string">'FRI'</span>, <span class="string">'SAT'</span>];</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">`2016,<span class="subst">$&#123;a&#125;</span>,<span class="subst">$&#123;b&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">let</span> day = date.getDay()</span><br><span class="line">  <span class="keyword">return</span> arr[day];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>템플릿 리터럴을 사용하지 않으면 값이 이상하게 나온다.</p><ul><li><p>이유 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new Date();</span><br><span class="line">new Date(value);</span><br><span class="line">new Date(dateString);</span><br><span class="line">new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);</span><br></pre></td></tr></table></figure><p><strong> *dateString</strong><br>날짜를 표현하는 <code>문자열값</code>. 문자열은 parse 메소드에 의해 인식가능한 형식이어야 한다.</p><p><strong> *year, month, date</strong><br>날짜의 각 부분을 표현하는 <code>정수값</code>. 월(month)부분은 0부터 11까지의 값을 가지며, 0이 1월을, 11이 12월을 가리킨다. </p></li></ul><blockquote><p>때문에 템플릿 리터럴로 넣게 되면 문자열이 되어서 그대로 파싱하지만, 숫자일 경우 배열의 인덱스값으로 인지하여서 월의 시작숫자가 0이게 된다.<br>즉, let date = new Date(2016,<code>a-1</code>,b) 이렇게 넣어야 한다.</p></blockquote><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="external">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2016년-A월-B일&quot;&gt;&lt;a href=&quot;#2016년-A월-B일&quot; class=&quot;headerlink&quot; title=&quot;2016년 A월 B일&quot;&gt;&lt;/a&gt;2016년 A월 B일&lt;/h2&gt;&lt;p&gt;2016년 1월 1일은 금요일입니다. 2016년 A월 B일은 
      
    
    </summary>
    
      <category term="Algorithm &amp;#128583;" scheme="http://feel5ny.github.io/categories/Algorithm-128583/"/>
    
      <category term="Level2" scheme="http://feel5ny.github.io/categories/Algorithm-128583/Level2/"/>
    
    
      <category term="algorithm" scheme="http://feel5ny.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>2/ Typescript_tsconfig.json 프로퍼티의 종류</title>
    <link href="http://feel5ny.github.io/2017/11/15/Typescript_03/"/>
    <id>http://feel5ny.github.io/2017/11/15/Typescript_03/</id>
    <published>2017-11-15T10:30:01.000Z</published>
    <updated>2017-11-27T17:09:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="컴파일러-옵션"><a href="#컴파일러-옵션" class="headerlink" title="컴파일러 옵션"></a>컴파일러 옵션</h2><p>실제 프로젝트에서는 컴파일러 옵션을 그렇게 많이 셋팅하진 않는다 . 옵션을 셋팅할 수 있는 전체 스펙은 <a href="http://json.schemastore.org/tsconfig" target="_blank" rel="external">이 링크</a>로 가면 확인가능하다 .</p><hr><blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="external">강의</a>와 <a href="http://slides.com/woongjae/deck-8#" target="_blank" rel="external">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><ol><li>최상위 프로퍼티</li><li>compileOnSave</li><li>extends</li><li>files, include, exclude</li><li>types</li><li>compileOptions<ul><li>6-1. target과 lib</li><li>6-2. outDir, outFile</li><li>6-3. module</li></ul></li></ol><hr><h2 id="1-최상위-프로퍼티"><a href="#1-최상위-프로퍼티" class="headerlink" title="1. 최상위 프로퍼티"></a>1. 최상위 프로퍼티</h2><blockquote><p>tsconfig.json 파일에서 제일 상위에 정의되어있는 컴파일 옵션들</p></blockquote><ul><li>compileOnSave</li><li>extends</li><li>compileOptions ( 초기에는 compileOptions 요소가 많이 존재한다 .)</li><li>files</li><li>include</li><li>exclude</li></ul><h2 id="2-compileOnSave"><a href="#2-compileOnSave" class="headerlink" title="2. compileOnSave"></a>2. compileOnSave</h2><p>파일 변경 후 저장하면 바로 컴파일을 해준다 . 에디터마다 안될 수도 있다.</p><ul><li>true / false (default false)<ul><li>true 이면 저장하면 바로 컴파일됨</li></ul></li><li>최상단에 설정해야 한다.</li><li>누가 ??<ul><li>Visual Studio 2015 with TypeScript 1.8.4 이상</li><li>atom-typescript 플러그인</li></ul></li></ul><h2 id="3-extends"><a href="#3-extends" class="headerlink" title="3. extends"></a>3. extends</h2><p>보통 많이 사용하지 않는다 . 사용 예를 들면 , 클라이언트 타입스크립트와 서버사이드 타입스크립트가 있을 때, 설정이 비슷하다면 어떤 파일을 만든 후, 상속을 받아서 작은 부분만 바꿔서 쓰는 경우 사용 가능하다.</p><ul><li>파일 (상대) 경로명 : string</li><li>TypeScript 2.1 New Spec</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> // in config/base.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"strictNullChecks"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// in tsconfig.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: <span class="string">"./configs/base"</span>,</span><br><span class="line">  <span class="attr">"files"</span>: [</span><br><span class="line">    <span class="string">"main.ts"</span>,</span><br><span class="line">    <span class="string">"supplemental.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-files-include-exclude"><a href="#4-files-include-exclude" class="headerlink" title="4. files, include, exclude"></a>4. files, include, exclude</h2><ul><li><p>셋다 설정이 없으면 , 전부다 컴파일</p></li><li><p>files</p><ul><li>상대 혹은 절대 경로의 리스트 배열.</li><li>파일별 부분 컴파일이 된다.</li><li>exclude 보다 쎕니다. (exclude가 해놓아도 files 에 있으면 컴파일 실행된다는 뜻)</li><li>특정 폴더를 exclude가 있어도 컴파일 된다.</li></ul></li><li><p>include, exclude</p><ul><li><p>glob 패턴 (마치 .gitignore)</p></li><li><p>include</p><ul><li>exclude 보다 약하다.</li><li><ul><li>같은걸 사용하면 , .ts / .tsx / .d.ts 만 include (allowJS)</li></ul></li></ul></li><li><p>exclude</p><ul><li>설정 안하면 4가지 (node_modules, bower_components, - jspm_packages, <outdir>)를 default 로 제외한다 .</outdir></li><li><outdir> 은 <code>항상 제외합니다 .</code> (include 에 있어도 )</outdir></li></ul></li></ul></li></ul><h2 id="5-types-중요"><a href="#5-types-중요" class="headerlink" title="5.@types (중요 !)"></a>5.@types (중요 !)</h2><p>TypeScript 2.0 부터 사용 가능해진 <code>내장 type definition 시스템</code></p><ul><li>이전 버전에서는 사용하지 못한다.</li><li>아무 설정을 안하면 ?<ul><li>node_modules/@types 라는 모든 경로를 찾아서 사용</li></ul></li><li>typeRoots 를 사용하면 ?<ul><li>배열 안에 들어있는 경로들 아래서만 가져옵니다 .</li></ul></li><li>types 를 사용하면 ?<ul><li>패키지 이름입니다.</li><li>배열 안의 모듈 혹은 <code>./node_modules/@types/</code> 안의 모듈 이름에서 찾아옵니다 .</li><li>[] 빈 배열을 넣는다는건 이 시스템을 이용하지 않겠다는 것입니다 .<ul><li>블루베리 플젝에서는 types 를 사용한다 .</li></ul></li></ul></li><li><code>typeRoots 와 types 를 같이 사용하지 않습니다 .</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// compiileOptions : type</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Instructs the TypeScript compiler how to compile .ts files."</span>,</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"typeRoots"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specify list of directories for type definition files to be included. Requires TypeScript version 2.0 or later."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">      <span class="attr">"items"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"types"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Type declaration files to be included in compilation. Requires TypeScript version 2.0 or later."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">      <span class="attr">"items"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-compileOptions"><a href="#6-compileOptions" class="headerlink" title="6. compileOptions"></a>6. compileOptions</h2><h3 id="6-1-target과-lib"><a href="#6-1-target과-lib" class="headerlink" title="6-1. target과 lib"></a>6-1. target과 lib</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Instructs the TypeScript compiler how to compile .ts files."</span>,</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"target"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specify ECMAScript target version. Permitted values are 'es3', 'es5', 'es2015', 'es2016', 'es2017' or 'esnext'."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="attr">"default"</span>: <span class="string">"es3"</span>,</span><br><span class="line">      <span class="attr">"anyOf"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"enum"</span>: [</span><br><span class="line">            <span class="string">"es3"</span>,</span><br><span class="line">            <span class="string">"es5"</span>,</span><br><span class="line">            <span class="string">"es2015"</span>,</span><br><span class="line">            <span class="string">"es2016"</span>,</span><br><span class="line">            <span class="string">"es2017"</span>,</span><br><span class="line">            <span class="string">"esnext"</span> // 확정은 아니지만 곧 확정될 것 같은 문법들을 모아둔</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"pattern"</span>: <span class="string">"^([eE][sS]([356]|(201[567])|[nN][eE][xX][tT]))$"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"lib"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specify library file to be included in the compilation. Requires TypeScript version 2.0 or later."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">      <span class="attr">"items"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">        <span class="attr">"enum"</span>: [</span><br><span class="line">          <span class="string">"es5"</span>,</span><br><span class="line">          <span class="string">"es6"</span>,</span><br><span class="line">          <span class="string">"es2015"</span>,</span><br><span class="line">          <span class="string">"es7"</span>,</span><br><span class="line">          <span class="string">"es2016"</span>,</span><br><span class="line">          <span class="string">"es2017"</span>,</span><br><span class="line">          <span class="string">"esnext"</span>,</span><br><span class="line">          <span class="string">"dom"</span>,</span><br><span class="line">          <span class="string">"dom.iterable"</span>,</span><br><span class="line">          <span class="string">"webworker"</span>,</span><br><span class="line">          <span class="string">"scripthost"</span>,</span><br><span class="line">          <span class="string">"es2015.core"</span>,</span><br><span class="line">          <span class="string">"es2015.collection"</span>,</span><br><span class="line">          <span class="string">"es2015.generator"</span>,</span><br><span class="line">          <span class="string">"es2015.iterable"</span>,</span><br><span class="line">          <span class="string">"es2015.promise"</span>,</span><br><span class="line">          <span class="string">"es2015.proxy"</span>,</span><br><span class="line">          <span class="string">"es2015.reflect"</span>,</span><br><span class="line">          <span class="string">"es2015.symbol"</span>,</span><br><span class="line">          <span class="string">"es2015.symbol.wellknown"</span>,</span><br><span class="line">          <span class="string">"es2016.array.include"</span>,</span><br><span class="line">          <span class="string">"es2017.object"</span>,</span><br><span class="line">          <span class="string">"es2017.sharedmemory"</span>,</span><br><span class="line">          <span class="string">"esnext.asynciterable"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"noLib"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Do not include the default library file (lib.d.ts)."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"boolean"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>target</strong></p><ul><li>빌드의 결과물을 어떤 버전으로 할 것이냐</li><li>지정을 안하면 <code>es3</code> 입니다.</li></ul><p><strong>lib</strong></p><ul><li>기본 type definition 라이브러리를 어떤 것을 사용할 것이냐</li><li>잘 정의하지 않으면 빨간줄이 계속 생긴다 .</li><li>lib 를 지정하지 않을 때 ,<ul><li>target 이 ‘es3’ 이고, 디폴트로 lib.d.ts 를 사용합니다.</li><li>target 이 ‘es5’ 이면 , 디폴트로 dom, es5, scripthost 를 사용합니다 .</li><li>target 이 ‘es6’ 이면, 디폴트로 dom, es6, dom.iterable, scripthost 를 사용합니다.</li><li>es5 이후에는 문법별 쪼개서도 설정 가능하다 .</li></ul></li><li>​lib 를 지정하면 그 lib 배열로만 라이브러리를 사용하니다.<ul><li>​ 빈 [] =&gt; ‘no definition found 어쩌구’</li><li>혹은 <code>&quot;noLib&quot; : true</code>로 바꾸면 된다. ( 거의 안쓸듯 )</li></ul></li></ul><h3 id="6-2-compileOptions-outDir-outFile"><a href="#6-2-compileOptions-outDir-outFile" class="headerlink" title="6-2. compileOptions: outDir, outFile"></a>6-2. compileOptions: outDir, outFile</h3><ul><li>파일을 다 모아서 하나의 컴파일된 하나의 파일로 모으고 싶을 때 outFile을 사용</li><li>소스디렉토리에 그대로 똑같이 구조를 컴파일된 상태로 옮길 때 outDir 를 사용</li><li>많이 사용한다 .</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Instructs the TypeScript compiler how to compile .ts files."</span>,</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"outFile"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Concatenate and emit output to single file."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"outDir"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Redirect output structure to the directory."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"rootDir"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specifies the root directory of input files. Use to control the output directory structure with --outDir."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-compileOptions-module"><a href="#6-3-compileOptions-module" class="headerlink" title="6-3. compileOptions: module"></a>6-3. compileOptions: module</h3><p><strong>module</strong></p><ul><li>결과물을 어떻게 무엇을 쓸것인가에 대한 것이다 .</li><li>컴파일 된 모듈의 결과물을 어떤 모듈 시스템으로 할지를 결정</li><li>target 이 ‘es6’ 이면 es6 가 디폴트이고 ,</li><li>target 이 ‘es6’ 가 아니면 <code>commonjs</code> 가 디폴트 입니다 .</li><li>AMD 나 System 와 사용하려면, <code>outFile 이 지정되어야 합니다 .</code></li><li>ES6 나 ES2015 를 사용하려면, target 이 es5 이하여야 합니다.</li></ul><p><strong>moduleResolution</strong></p><ul><li>ts 소스에서 모듈을 사용하는 방식을 지정해야 합니다 .</li><li>classic 아니면 node 입니다 .</li><li>commonJS 일때만 node 라고 생각하시면 됩니다.</li></ul><p><strong>path<em>s</em> 와 baseUrl</strong></p><ul><li>상대경로 방식이 아닌 baseUrl 로 꼭지점과 paths 안의 키/ 밸류로 모듈을 가져가는방식입니다 .</li></ul><p><strong>rootDirs</strong></p><ul><li>배열 안에서 상대 경로를 찾는 방식입니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Instructs the TypeScript compiler how to compile .ts files."</span>,</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"module"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specify module code generation: 'none', 'CommonJS', 'Amd', 'System', 'UMD', or 'es2015'."</span>,</span><br><span class="line">      <span class="attr">"enum"</span>: [<span class="string">"commonjs"</span>, <span class="string">"amd"</span>, <span class="string">"umd"</span>, <span class="string">"system"</span>, <span class="string">"es6"</span>, <span class="string">"es2015"</span>, <span class="string">"none"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specifies module resolution strategy: 'node' (Node) or 'classic' (TypeScript pre 1.6) ."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="attr">"pattern"</span>: <span class="string">"^(([Nn]ode)|([Cc]lassic))$"</span>,</span><br><span class="line">      <span class="attr">"default"</span>: <span class="string">"classic"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"baseUrl"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Base directory to resolve non-relative module names."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"paths"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specify path mapping to be computed relative to baseUrl option."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"object"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"rootDirs"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specify list of root directories to be used when resolving modules."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">      <span class="attr">"items"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="현재-플젝-tsconfig-json"><a href="#현재-플젝-tsconfig-json" class="headerlink" title="현재 플젝 tsconfig.json"></a>현재 플젝 tsconfig.json</h3><p>처음보는 옵션들이 있어서 정리해보았다 . 참고 : <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="external">타입스크립트 공식 페이지</a></p><p><code>allowSyntheticDefaultImports: true</code></p><ul><li>Allow default imports from modules with no default export. This does not<br>affect code emit, just typechecking.</li><li>리엑트에서 컴포넌트를 import 할 때 주로 쓰는 <code>import Something from &#39;./Something&#39;</code>을 사용할 수 있다 .</li></ul><p><code>noImplicitAny: false</code></p><ul><li>Raise error on expressions and declarations with an implied any type.</li><li>암시적으로 선언되었는데 any 로 추론되면 에러를 알려줍니다 . false이면 무시됨.</li></ul><p><code>preserveConstEnums: true</code></p><ul><li>Do not erase const enum declarations in generated code. See const enums documentation for more details.</li><li>enum 변수선언을 유지한다는 것 같은데 정확히 잘 모르겠다.</li></ul><p><code>allowJs : false</code></p><ul><li>include 에 있는 파일 경로들에 존재하는 모든 .ts, .tsx파일들이 컴파일되는데 ,<br>allowJs를 true 로 하면 .js와 .jsx 파일도 컴파일 대상이 된다 .</li></ul><p><code>sourceMap : true</code></p><ul><li>Generates corresponding .map file.</li><li>트랜스파일을 거치는 많은 모듈들이 디버깅을 위해서 기본적으로 source map 출력을 지원한다 .</li></ul><p><code>noImplicitReturns : true</code></p><ul><li>Report error when not all code paths in function return a value.</li><li>제대로 리턴 다 안되면 에러 -&gt; 오류에 대해 강력하게 체크한다는 뜻입니다.</li></ul><p><code>noUnusedParameters : true</code></p><ul><li>Report errors on unused parameters.</li><li>사용하지 않는 파라미터가 있으면 에러를 알려줍니다.</li></ul><p><code>noUnusedLocals : true</code></p><ul><li>Report errors on unused locals.</li><li>사용 안하는 로컬 변수가 있으면 에러를 알려줍니다 .</li></ul><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://jaroinside.tistory.com/10" target="_blank" rel="external">http://jaroinside.tistory.com/10</a></li><li><a href="http://poiemaweb.com/typescript-vscode" target="_blank" rel="external">http://poiemaweb.com/typescript-vscode</a></li><li><a href="http://spectrumdig.blogspot.kr/2016/12/chrome-source-map-coffeescripttypescrip.html" target="_blank" rel="external">http://spectrumdig.blogspot.kr/2016/12/chrome-source-map-coffeescripttypescrip.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;컴파일러-옵션&quot;&gt;&lt;a href=&quot;#컴파일러-옵션&quot; class=&quot;headerlink&quot; title=&quot;컴파일러 옵션&quot;&gt;&lt;/a&gt;컴파일러 옵션&lt;/h2&gt;&lt;p&gt;실제 프로젝트에서는 컴파일러 옵션을 그렇게 많이 셋팅하진 않는다 . 옵션을 셋팅할 수 있는
      
    
    </summary>
    
      <category term="TIL &amp;#9997;" scheme="http://feel5ny.github.io/categories/TIL-9997/"/>
    
      <category term="Typescript" scheme="http://feel5ny.github.io/categories/TIL-9997/Typescript/"/>
    
    
      <category term="til" scheme="http://feel5ny.github.io/tags/til/"/>
    
      <category term="typescript" scheme="http://feel5ny.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>overview</title>
    <link href="http://feel5ny.github.io/2017/11/14/dada_06week/"/>
    <id>http://feel5ny.github.io/2017/11/14/dada_06week/</id>
    <published>2017-11-14T01:10:04.000Z</published>
    <updated>2017-11-27T08:56:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="식단-다이어리-서비스-DA-DA"><a href="#식단-다이어리-서비스-DA-DA" class="headerlink" title="식단 다이어리 서비스, DA,DA"></a>식단 다이어리 서비스, DA,DA</h1><p>프론트엔드 스쿨을 마지막 달에는 그동안 배운 기술을 토대로 프로젝트를 필수적으로 진행해야 했다. node.js 스쿨과 함께 5명으로 이루어진 우리 조는 33일간의 대장정을 끝으로, 알바퍼전의 웹서비스가 배포할 수 있게 되었다. 블로그에서는 <strong>프론트엔드 중심으로</strong> 이번 프로젝트에 대한 개인적인 후기와 더불어 전반적인 진행과정, 이슈에 대해서 5가지 챕터로 포스팅하려고 한다.</p><hr><p>chapter 1 : 기획 및 프로토타입 및 디자인<br>chapter 2 : 퍼블리싱<br>chapter 3 : 핵심기능 개발<br>chapter 4 : 리팩토링 및 테스트<br>chapter 5 : 추가개발 및 배포</p><hr><p>이번 프로젝트를 통해서 크게 3가지를 얻을 수 있었다.</p><ol><li>비동기통신</li><li>redux 자유로운 사용</li><li>react 라이프사이클과 한계</li></ol><hr><ul><li>github : <a href="https://github.com/huusz/Da-Da" target="_blank" rel="external">https://github.com/huusz/Da-Da</a></li><li>DA,DA : <a href="https://dada.downmix.net" target="_blank" rel="external">https://dada.downmix.net</a> (카카오 아이디로 로그인)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;식단-다이어리-서비스-DA-DA&quot;&gt;&lt;a href=&quot;#식단-다이어리-서비스-DA-DA&quot; class=&quot;headerlink&quot; title=&quot;식단 다이어리 서비스, DA,DA&quot;&gt;&lt;/a&gt;식단 다이어리 서비스, DA,DA&lt;/h1&gt;&lt;p&gt;프론트엔드 스쿨
      
    
    </summary>
    
      <category term="Project &amp;#127939;" scheme="http://feel5ny.github.io/categories/Project-127939/"/>
    
      <category term="DA, DA" scheme="http://feel5ny.github.io/categories/Project-127939/DA-DA/"/>
    
    
      <category term="react" scheme="http://feel5ny.github.io/tags/react/"/>
    
      <category term="DADA" scheme="http://feel5ny.github.io/tags/DADA/"/>
    
  </entry>
  
  <entry>
    <title>야근지수 (미제)</title>
    <link href="http://feel5ny.github.io/2017/11/13/algorithm_01/"/>
    <id>http://feel5ny.github.io/2017/11/13/algorithm_01/</id>
    <published>2017-11-13T08:10:04.000Z</published>
    <updated>2017-11-27T09:10:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="야근-지수"><a href="#야근-지수" class="headerlink" title="야근 지수"></a>야근 지수</h2><p>회사원인 수민이는 많은 일이 쌓여 있습니다. 수민이는 야근을 최소화하기 위해 남은 일의 작업량을 숫자로 메기고, 일에 대한 야근 지수를 줄이기로 결정했습니다. 야근 지수는 남은 일의 작업량을 제곱하여 더한 값을 의미합니다. 수민이는 1시간 동안 남은 일 중 하나를 골라 작업량 1만큼 처리할 수 있습니다. 수민이의 퇴근까지 남은 N 시간과 각 일에 대한 작업량이 있을 때, noOvertime 함수를 제작하여 수민이의 야근 지수를 최소화 한 결과를 출력해 주세요. 예를 들어, N=4 일 때, 남은 일의 작업량이 [4, 3, 3] 이라면 야근 지수를 최소화하기 위해 일을 한 결과는 [2, 2, 2]가 되고 야근 지수는 22 + 22 + 22 = 12가 되어 12를 반환해 줍니다.</p><hr><ul><li>처음 생각한 로직</li></ul><ol><li>해당 배열의 전체 합 - N값</li><li>1번의 값을 배열의 길이로 나눈다.</li><li>나머지가 0인 경우와, 0이 아닌 경우가 생긴다.<ul><li>나머지가 0인 경우, 해당 몫의 제곱근에 length값을 곱한다. (끝)</li><li>나머지가 0이 아닌경우, <ul><li>몫이 소수점이 나온는데, 이는 내림하여 소수점 자리수들을 버리고 (floor)</li><li>해당 값과 배열의 인자를 비교하여, 해당 값보다 작은 인자의 경우 바로 제곱근화 하고, 나머지 값은 해당 몫으로 제곱하여 더한다. <strong>(이 부분이 잘못되었음)</strong></li></ul></li></ul></li><li>3번의 첫번째 나머지가 0인 경우는 테스트가 통과하는데 2번째 경우는 로직이 잘못됨</li></ol><hr><blockquote><p>통과하고 싶다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;야근-지수&quot;&gt;&lt;a href=&quot;#야근-지수&quot; class=&quot;headerlink&quot; title=&quot;야근 지수&quot;&gt;&lt;/a&gt;야근 지수&lt;/h2&gt;&lt;p&gt;회사원인 수민이는 많은 일이 쌓여 있습니다. 수민이는 야근을 최소화하기 위해 남은 일의 작업량을 숫자로 
      
    
    </summary>
    
      <category term="Algorithm &amp;#128583;" scheme="http://feel5ny.github.io/categories/Algorithm-128583/"/>
    
      <category term="Level3" scheme="http://feel5ny.github.io/categories/Algorithm-128583/Level3/"/>
    
    
      <category term="algorithm" scheme="http://feel5ny.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Firebase의 storage 연동하기</title>
    <link href="http://feel5ny.github.io/2017/11/12/firebaseStorage/"/>
    <id>http://feel5ny.github.io/2017/11/12/firebaseStorage/</id>
    <published>2017-11-12T01:10:04.000Z</published>
    <updated>2017-11-27T08:56:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="학교-로고-모음-사이트"><a href="#학교-로고-모음-사이트" class="headerlink" title="학교 로고 모음 사이트"></a>학교 로고 모음 사이트</h2><blockquote><p>현재 상황</p></blockquote><p>팀 프로젝트인 식단 다이어리 서비스 dada 프로젝트에서는 db 설계에 대한 이슈가 없었다. 당연히 난 프론트엔드다보니.. db 설계를 담당하지 않아서인 건데, 현재 개인 프로젝트에서는 db 구조까지 짜는 작업을 하고 있다.</p><h3 id="DB-구조짜기"><a href="#DB-구조짜기" class="headerlink" title="DB 구조짜기"></a>DB 구조짜기</h3><p>300개의 데이터와 개당 storage에 연동되어있는 파일들이 있는데, 제일 좋은 건 db에 url 칼럼을 넣는 방식. 파이어베이스에서는 스토리지와 데이터베이스 연결하는 것까지는 제공하지 않는 듯하다. 수동으로 작업해야 하는데 아직 좋은 방법이 떠오르지 않는다. </p><h3 id="데이터-불러오기"><a href="#데이터-불러오기" class="headerlink" title="데이터 불러오기"></a>데이터 불러오기</h3><p>storage에 있는 데이터를 가져오는데, 현재 이슈.</p><ol><li>한 디렉토리에 300개를 넣어두고 한 번에 갖고 오는 방식이라 아주 느리다.<ul><li>db 디렉토리를 20개씩 분리한 후, 더 보기 형태의 방식으로 해결해야겠다.<br><br></li></ul></li><li>map을 돌려서 해당 db 인덱스값과 같은 값의 파일을 갖고 오게 하기위해서 파일 이름에 학교 이름이 아닌 PNG_1.png 이런 방식의 파일 이름으로 지정해두었다. 매칭이 잘못된 학교 이름을 찾아 내기도 힘들고, ux도 너무 안 좋을 것 같아서, 파일 이름을 학교 이름으로 바꾸기로 결정했다.<br><br></li><li>생각해 보니 지역별 칼럼을 정리하지 않았다.<br><br></li><li>비록 일일이 검토 후에 로고를 올리는 것이지만, 한 번 더 체킹을 위해 학교 url을 넣는게 좋겠다고 판단. 칼럼을 추가해야겠다.<ul><li>공공api가 있었으면 좋겠다.</li></ul></li></ol><blockquote><p>생각보다 db 짜는건 굉장한 노가다다! dada 프로젝트 할 때 백엔드 분께서 ‘생각보다 노가다도 많이 하게 되는데, 또 생각보다 어렵진 않더라구요!’ 라고 했던 말이 와닿는 하루다. </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;학교-로고-모음-사이트&quot;&gt;&lt;a href=&quot;#학교-로고-모음-사이트&quot; class=&quot;headerlink&quot; title=&quot;학교 로고 모음 사이트&quot;&gt;&lt;/a&gt;학교 로고 모음 사이트&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;현재 상황&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
      <category term="Project &amp;#127939;" scheme="http://feel5ny.github.io/categories/Project-127939/"/>
    
      <category term="Univ Project" scheme="http://feel5ny.github.io/categories/Project-127939/Univ-Project/"/>
    
    
      <category term="react" scheme="http://feel5ny.github.io/tags/react/"/>
    
      <category term="firebase" scheme="http://feel5ny.github.io/tags/firebase/"/>
    
      <category term="db" scheme="http://feel5ny.github.io/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>1/ Typescript_환경 셋팅</title>
    <link href="http://feel5ny.github.io/2017/11/10/Typescript_02/"/>
    <id>http://feel5ny.github.io/2017/11/10/Typescript_02/</id>
    <published>2017-11-10T01:52:01.000Z</published>
    <updated>2017-11-27T17:06:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="개발환경-구축-및-컴파일러-셋팅"><a href="#개발환경-구축-및-컴파일러-셋팅" class="headerlink" title="개발환경 구축 및 컴파일러 셋팅"></a>개발환경 구축 및 컴파일러 셋팅</h2><p><a href="https://feel5ny.github.io/2017/11/08/TS_01/">앞선 글</a>에서 컴파일러와 트랜스파일러 인터프리터의 차이점을 알아보았다. 트랜스파일러와 컴파일러의 차이가 있다고는 했지만, 앞으로의 글에서는 컴파일러라고 통일해서 쓰려고 한다 . 타입스크립트는 컴파일드 언어라고 했지만 , 실제적으로 어떻게 환경을 셋팅하고 작업해야하는지 알아보자 .</p><p><img src="/images/post_img/12/index.jpg"></p><hr><blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="external">강의</a>와 <a href="http://slides.com/woongjae/deck-8#" target="_blank" rel="external">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><ol><li>실행환경</li><li>컴파일러 셋팅, 에디터</li><li>간단하게 실습</li><li>컴파일러 옵션</li></ol><p><strong>목표</strong><br>타입스크립트를 사용하기 위해서 첫번째 실행환경을 셋팅하고 , 컴파일러 셋팅(npm으로 설치), 에디터에서 환경셋팅(tslint, 등등) 을 하고 , 간단하게 실습으로 컴파일 테스팅해본다. 기본 테스트가 완료되면 컴파일러 옵션을 어떻게 추가해야하는지 알아본다 .</p><hr><h2 id="1-실행환경"><a href="#1-실행환경" class="headerlink" title="1. 실행환경"></a>1. 실행환경</h2><p>런타임 환경</p><h3 id="1-1-node-js"><a href="#1-1-node-js" class="headerlink" title="1-1. node.js"></a>1-1. node.js</h3><ul><li>자바스크립트 런타임 환경으로 node.js를 사용한다.</li><li>컴파일러를 설치하기 위해서 필요하다.</li><li>타입스크립트에서 컴파일러 프로그램을 제공하는 것이 npm 모듈로 있기 때문에 ..</li><li>node.js없이 VScode에서도 셋팅이 가능하긴하다 . (2번에서 확인!)</li><li>버전을 바꾸고 싶을 때는 nvm (node.js version manager) 사용 ~</li></ul><h3 id="1-2-browser"><a href="#1-2-browser" class="headerlink" title="1-2. browser"></a>1-2. browser</h3><ul><li>결과를 보는 곳.. 그냥 있는거 쓰자 .</li></ul><hr><h2 id="2-타입스크립트-컴파일러-셋팅-에디터"><a href="#2-타입스크립트-컴파일러-셋팅-에디터" class="headerlink" title="2. (타입스크립트) 컴파일러 셋팅 , 에디터"></a>2. (타입스크립트) 컴파일러 셋팅 , 에디터</h2><p>타입스크립트를 셋팅해 보자. 셋팅 방법에는 npm 과 VScode plugin으로 설치하는 방법이 있는데 , npm으로 설치해보았다 .</p><h3 id="2-1-npm으로-설치하기"><a href="#2-1-npm으로-설치하기" class="headerlink" title="2-1. npm으로 설치하기"></a>2-1. npm으로 설치하기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i typescript -g</span><br></pre></td></tr></table></figure><p>설치 후 node_modules 폴더의 bin파일에 tsc 파일이 생성되는 것을 볼 수 있다 .<br><code>.bin</code> 내부에 있는 파일들은 스크립트에서 경로 없이 파일 이름으로만 바로 실행시킬수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/tsc 파일이름</span><br><span class="line">// 원래는 이렇게</span><br><span class="line"></span><br><span class="line">tsc source.ts</span><br><span class="line">// 경로 생략 가능, 뒷부분은 컴파일 할 파일 이름</span><br></pre></td></tr></table></figure><h3 id="2-2-Visual-Studio-Code-내장-플러그인-사용하기"><a href="#2-2-Visual-Studio-Code-내장-플러그인-사용하기" class="headerlink" title="2-2. Visual Studio Code 내장 플러그인 사용하기"></a>2-2. Visual Studio Code 내장 플러그인 사용하기</h3><p>타입스크립트로 만들어졌기 때문에 타입스크립트에 대한 지원이 강력 !</p><p><img src="/images/post_img/12/vs_01.jpg"><br>ts파일을 선택 후 하단 bar를 보면 Typescript라는 단어와 버전이 보인다. 버전을 누르면 옵션창이 보이게 되는데, 이는 VS Code에 내장되어있는 컴파일러 리스트 중 선택하라는 옵션창이다. 내장된 컴파일러 버전은 VS Code 가 업데이트 되면서 자동으로 올라가며, 컴파일러 버전과 VS Code 의 버전은 상관 관계가 있다. 내장된 컴파일러를 선택할수 있고, 직접 설치한 컴파일러를 선택할 수도 있다.</p><h3 id="2-3-tslint-설치"><a href="#2-3-tslint-설치" class="headerlink" title="2-3. tslint 설치"></a>2-3. tslint 설치</h3><p>eslint와 같이 코딩 컨벤션을 맞추기 위한 프로그램이다 .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i typescript tslint (로컬)</span><br><span class="line">tslint --init</span><br></pre></td></tr></table></figure><p>tslint.json파일이 생성되고, 프로젝트에 맞게 코딩 컨벤션을 셋팅할 수 있다 .<br><a href="https://palantir.github.io/tslint/" target="_blank" rel="external">https://palantir.github.io/tslint/</a></p><ul><li><p>에디터에서 tslint 플러그인 설치</p><ol><li>cmd + p &gt; 옵션창</li><li>ext install tslint 그냥 확장프로그램에 가서 tslint 검색 후 다운로드 받아도<br>된다.</li></ol><p>VScode : <a href="https://marketplace.visualstudio.com/items?itemName=eg2.tslint" target="_blank" rel="external">https://marketplace.visualstudio.com/items?itemName=eg2.tslint</a></p></li></ul><hr><h2 id="3-간단하게-실습"><a href="#3-간단하게-실습" class="headerlink" title="3. 간단하게 실습"></a>3. 간단하게 실습</h2><h3 id="3-1-특정-프로젝트-폴더에서-타입스크립트-컴파일러-설정에-맞춰-컴파일"><a href="#3-1-특정-프로젝트-폴더에서-타입스크립트-컴파일러-설정에-맞춰-컴파일" class="headerlink" title="3-1. 특정 프로젝트 폴더에서 타입스크립트 컴파일러 설정에 맞춰 컴파일"></a>3-1. 특정 프로젝트 폴더에서 타입스크립트 컴파일러 설정에 맞춰 컴파일</h3><p>tsconfig.json 파일에서 옵션을 추가하여 컴파일시 여러 조건을 걸 수 있다.</p><ul><li>tsconfig 파일 초기셋팅</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p>tsconfig.json 파일이 생성이 된다. 처음 생성시 디폴트로 되어있는 tsconfig.json파일</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    /* Basic Options */</span><br><span class="line">    "target":</span><br><span class="line">      "es5" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'. */,</span><br><span class="line">    "module":</span><br><span class="line">      "commonjs" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */,</span><br><span class="line">    "strict": true /* Enable all strict type-checking options. */</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>target : 컴파일된 결과물을 es5 버전으로 맞추겠다는 것</li><li>module : 컴파일된 결과물이 어떤 모듈로 사용할 것인지?</li></ul><p>옵션에 대한 자세한 설명은 4번에서 설명!</p><h3 id="3-2-watch-모드"><a href="#3-2-watch-모드" class="headerlink" title="3-2. watch 모드"></a>3-2. watch 모드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -w</span><br></pre></td></tr></table></figure><ul><li>변경되면 감지해서 새로 컴파일 해주는 것 .</li><li>보통은 gulp 를 사용한다 .</li></ul><h3 id="3-3-프로젝트-파일-내에서만-설치할-경우-로컬"><a href="#3-3-프로젝트-파일-내에서만-설치할-경우-로컬" class="headerlink" title="3-3. 프로젝트 파일 내에서만 설치할 경우 ( 로컬)"></a>3-3. 프로젝트 파일 내에서만 설치할 경우 ( 로컬)</h3><p>셋팅 방법</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm i typescript // 프로젝트 이름(폴더이름)이 동일하면 안된다.</span><br><span class="line">package.json &gt; <span class="string">"scripts"</span>에 <span class="string">"transpile"</span> : <span class="string">"tsc"</span> 추가.</span><br><span class="line">// tsc파일이 .bin폴더 내부에 있는데, npm에서는 .bin내부의 파일들은 전체 상대 경로를 적지 않아도 접근가능하다.</span><br><span class="line">npm run transpile</span><br></pre></td></tr></table></figure><ul><li>typescirpt 를 글로벌로 설치할 경우 <code>tsc 파일이름.ts</code> 명령어만으로 컴파일이 가능하다.</li><li>로컬로만 설치할 경우 , 위의 방법처럼 따로 스크립트에 추가 후에 명령어를 사용하면된다.</li></ul><blockquote><p>cli 명령어로 명렁어를 다 걸어둘 수 있지만 json 파일을 만들어서 설정을 정리하며서 쓴다 .</p></blockquote><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=eg2.tslint" target="_blank" rel="external">https://marketplace.visualstudio.com/items?itemName=eg2.tslint</a></li><li><a href="https://palantir.github.io/tslint/" target="_blank" rel="external">https://palantir.github.io/tslint/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;개발환경-구축-및-컴파일러-셋팅&quot;&gt;&lt;a href=&quot;#개발환경-구축-및-컴파일러-셋팅&quot; class=&quot;headerlink&quot; title=&quot;개발환경 구축 및 컴파일러 셋팅&quot;&gt;&lt;/a&gt;개발환경 구축 및 컴파일러 셋팅&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;h
      
    
    </summary>
    
      <category term="TIL &amp;#9997;" scheme="http://feel5ny.github.io/categories/TIL-9997/"/>
    
      <category term="Typescript" scheme="http://feel5ny.github.io/categories/TIL-9997/Typescript/"/>
    
    
      <category term="til" scheme="http://feel5ny.github.io/tags/til/"/>
    
      <category term="typescript" scheme="http://feel5ny.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>0/ Typescript?</title>
    <link href="http://feel5ny.github.io/2017/11/08/Typescript_01/"/>
    <id>http://feel5ny.github.io/2017/11/08/Typescript_01/</id>
    <published>2017-11-08T09:23:55.000Z</published>
    <updated>2017-11-27T17:05:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="자바스크립트-말고-타입스크립트"><a href="#자바스크립트-말고-타입스크립트" class="headerlink" title="자바스크립트 말고 타입스크립트 ?"></a>자바스크립트 말고 타입스크립트 ?</h2><p>최근 <a href="https://feel5ny.github.io/2017/11/14/dada_06week/">프로젝트</a>를 진행하면서<br>나도 모르는 사이에 타입이 자주 바뀌는 자바스크립트의 불편함을 느끼곤 했었다. 애초에 값을 할당할 때 타입 체킹은 그 순간에 내 머릿속에서만 생각만 하지, 그 이후는 케어하지 못하게 되었다. 나중에 에러가 발생하면, <code>삽질</code> 후에 원인이 타입 때문이라는 것을 알게 되고.. 이는 생각보다 빈번하게 일어났다. 콘솔에서 타입 에러를 잡지않고 렌더링이 될 때가 있기 때문에 타입으로 발생한 버그를 잡을 때는 시간이 더 걸린다.( 왜 에러가 나는 거여? 물론 리액트는 타입도 종종 잡아준다 . 무튼 시간 아까워! ) 버그 잡는 게 중요하긴 한데 , 타입이 원인이라는 것은 뭔가 어처구니없는 실수라는 생각도 들었다 .. 그러다 문득! 예전에 타입 버그가 날 때마다 <code>타입스크립트를 배우면 이런 버그는 애초에 만나지 않을 겁니다!</code> 라고 자주 얘기하셨던 선생님이 종종 생각났고 .. 게다가 지금 여러 프로젝트에서 타입스크립트을 도입하고도 있고, 얼마 후에 앵귤러도 시작하고자 해서 .. 겸사겸사 동기부여가 여러 군데에서 생겼기 때문에!! 시작!!</p><hr><blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="external">강의</a>와 <a href="http://slides.com/woongjae/deck-8#" target="_blank" rel="external">강의록</a>을 참고하여 작성하였습니다 . (짱짱<br>) <strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다 .</p></blockquote><ol><li>타입스크립트는 무엇인가</li><li>컴파일러? 트랜스파일러? 인터프리터 ?</li><li>정적타입 언어 vs 동적타입 언어</li></ol><hr><h2 id="1-타입스크립트는-무엇인가"><a href="#1-타입스크립트는-무엇인가" class="headerlink" title="1. 타입스크립트는 무엇인가."></a>1. 타입스크립트는 무엇인가.</h2><p>타입스크립트는 프로그래밍 언어 중 하나이다 . 자바스크립트가 인터프리터 기반의 언어로써, 실행과 동시에 렌더링이 되는데 , 타입스크립트는 인터프리터 방식이 아닌 컴파일 후에 실행되는 <code>Compiled Language</code>이다 . 별도의 빌드 과정이 필요 ! 전통적인 컴파일 언어와는 다른데 , (C언어 , 자바 …) 때문에 Compile 말고, <code>Transpile</code>이라는 용어를 사용하기도 한다 . 혹은 meta programming이라고 한다.</p><h2 id="2-컴파일러-트랜스파일러-인터프리터"><a href="#2-컴파일러-트랜스파일러-인터프리터" class="headerlink" title="2. 컴파일러? 트랜스파일러? 인터프리터 ?"></a>2. 컴파일러? 트랜스파일러? 인터프리터 ?</h2><p>간단하게 3가지를 비교해보면 아래 그림과 같다.<br><img src="/images/post_img/11/CompileTranspileInterpreter.jpg"></p><ul><li><strong>transpiler</strong> 하나의 <strong>언어</strong>를 다른 형태의 <strong>언어</strong>로 변환해 주는 기능을 <code>부각</code>시키는 표현으로 compiler라는 표현보다 transpiler라는 표현을 쓴다. ( 번역이라는 말과 합쳐진 듯 하다 .) ex. Typescript, Babel <br></li><li><strong>compiler</strong> 한 번 컴파일 하게 되면, 별도 생성된 목적 파일을 통해 빠르게 실행할 수 있다. 대용량 소스에 적합</li></ul><ul><li>컴파일이 필요 O </li><li>컴파일러가 필요 O </li><li>컴파일 하는 시점 O =&gt; 컴파일 타임 </li><li>컴파일된 결과물을 실행 </li><li>컴파일된 결과물을 실행하는 시점 ex. C, Go, C#, JAVA, … <br></li></ul><ul><li><strong>interpreter</strong> 목적 파일 산출 과정이 없이 실행과 동시에 줄 단위로 번역이 된<br>다. 저용량 소스에 적합\<ul><li>컴파일이 필요 X - 컴파일러가 필요 X - 컴파일하는 시점 X - 코드 자체를 실행 -<br>코드를 실행하는 시점 o = 런타임 ex. javascript</li></ul></li></ul><h3 id="Tranditional-Compiled-Language"><a href="#Tranditional-Compiled-Language" class="headerlink" title="*Tranditional Compiled Language"></a>*Tranditional Compiled Language</h3><ul><li>컴파일 언어라고 한다.</li><li>C, C++, Go, C#, Java, …</li><li>프로그래머가 작성한 <code>Source Code</code> 를 기계어로 변환하는 과정을 <code>Compile</code>이라고<br>한다.</li><li>기계어로 변환된 결과물을 <code>Object Code</code> (목적 코드 )라 한다.</li><li><code>Compile</code> 하는 프로그램을 <code>Compiler</code> 라고 한다 .</li><li><code>Compile</code> 하는 동안을 <code>Compile Time</code> 이라고 한다 .</li><li>컴파일된 코드는 프로세서에 따라 다르다.</li><li>소스 코드에서는 OS 에 따라 라이브러리가 다르다 .</li><li>컴파일된 코드는 작은 크기에 최적화된다.</li><li>일반적으로 실행시 기계어로 바꾸는 방식 (인터프리터 언어) 보다 빠르다 .</li><li>실행시 기계어로 바꿔주는 연산이 필요없기 때문이다 .</li></ul><h2 id="3-정적타입-언어-vs-동적타입-언어"><a href="#3-정적타입-언어-vs-동적타입-언어" class="headerlink" title="3. 정적타입 언어 vs 동적타입 언어"></a>3. 정적타입 언어 vs 동적타입 언어</h2><ul><li>정적 타입 언어 : 미리 타입을 지정해놓고 시작<ul><li>자바스크립트에서 정적타입언어만 갖고오자라고 한 것이 TypeScript</li><li>동적 타입 언어가 갖고 있는 단점을 커버하자 .하는 목적이다 .</li><li>test coverage를 올리면 상관없긴하다 .</li><li>ex. Typescript</li></ul></li><li>동적 타입 언어 : 타입을 정하지 않는다. 타입 자체가 변화하는 것을 막지않는다.<ul><li>ex. Javascript</li></ul></li></ul><h3 id="The-End-of-Dynamic-Languages-vs-Have-Static-Languages-Won"><a href="#The-End-of-Dynamic-Languages-vs-Have-Static-Languages-Won" class="headerlink" title="*The End of Dynamic Languages vs Have Static Languages Won?"></a>*<a href="http://elbenshira.com/blog/the-end-of-dynamic-languages/" target="_blank" rel="external">The End of Dynamic Languages</a> vs <a href="https://pointersgonewild.com/2015/11/25/have-static-languages-won/?utm_source=Clojure+Gazette&amp;utm_medium=email&amp;utm_campaign=152" target="_blank" rel="external">Have Static Languages Won?</a></h3><ul><li>최근 나타나는 신생언어들은 대부분 정적 타입을 지원한다. (Typed Racket, Typed<br>Clojure, TypeScript, Typed Lua, Python with type hints)</li><li><code>정적 언어로 작성된 코드의 버그는 해당 코드를 실행하기 전까지는 찾을 수 없다.</code></li><li>동적 언어의 경우 대부분 대충 디자인되어있다 . JavaScript의 경우에는 2 주만에<br>개발된 언어이다보니 컴파일러와 힌들리- 밀너 타입추론 시스템과 같은 CS 지식으로<br>무장한 사람들이 디자인한 언어와 비교하는건 무리다.</li><li>Closure 같은 경우에도 이제는 대부분의 언어에서 지원하게 되면서 functional 과<br>imperative 프로그래밍이 융합되듯이, 동적 언어와 정적 언어도 그렇게 되지 않을<br>까? Crystal Programming Language 의 경우 루비를 기반으로 하는 정적/ 동적 언어<br>가 합쳐진 언어이다.</li></ul><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://www.notforme.kr/archives/1541" target="_blank" rel="external">http://www.notforme.kr/archives/1541</a></li><li><a href="http://www.geekhours.com/2017/03/08/difference-compiling-transpiling/" target="_blank" rel="external">http://www.geekhours.com/2017/03/08/difference-compiling-transpiling/</a></li><li><a href="https://ruslanspivak.com/lsbasi-part1/" target="_blank" rel="external">https://ruslanspivak.com/lsbasi-part1/</a></li><li><a href="http://blog.sejongin.kr/44" target="_blank" rel="external">http://blog.sejongin.kr/44</a></li><li><a href="http://hieroglyph.tistory.com/4" target="_blank" rel="external">http://hieroglyph.tistory.com/4</a></li><li><a href="https://okky.kr/article/304342" target="_blank" rel="external">https://okky.kr/article/304342</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;자바스크립트-말고-타입스크립트&quot;&gt;&lt;a href=&quot;#자바스크립트-말고-타입스크립트&quot; class=&quot;headerlink&quot; title=&quot;자바스크립트 말고 타입스크립트 ?&quot;&gt;&lt;/a&gt;자바스크립트 말고 타입스크립트 ?&lt;/h2&gt;&lt;p&gt;최근 &lt;a href
      
    
    </summary>
    
      <category term="TIL &amp;#9997;" scheme="http://feel5ny.github.io/categories/TIL-9997/"/>
    
      <category term="Typescript" scheme="http://feel5ny.github.io/categories/TIL-9997/Typescript/"/>
    
    
      <category term="til" scheme="http://feel5ny.github.io/tags/til/"/>
    
      <category term="typescript" scheme="http://feel5ny.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 설치</title>
    <link href="http://feel5ny.github.io/2017/09/10/aboutHEXO/"/>
    <id>http://feel5ny.github.io/2017/09/10/aboutHEXO/</id>
    <published>2017-09-10T11:46:25.000Z</published>
    <updated>2017-11-13T10:16:59.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>intro</p></blockquote><p> 무언가를 배울때 하루하루의 기록을 남기는 것은 자기계발의 첫 스타트라고 생각합니다. 머리속에 있는 것을 그대로 옮기는 작업은, 정리하며 내것으로 만들기에도 좋고, 그때그때의 생각을 기록하는 용으로도 좋기 때문입니다. 그래서 우리는 일기를 쓰고, 일지를 쓰고, 이렇게 블로그도 만들며 기록합니다. 특히나 개발은 많은 개념을 숙지하면서 공부해야하기 때문에 블로깅 자체가 공부가 됩니다.</p><p> 이왕 <code>node.js</code>까지 배우고 있으니, <code>jekyll</code>이 아닌, <code>hexo</code>를 사용해서 블로그를 만들었습니다. </p><p><img src="/images/post_img/01/post_1-10.jpg"></p><hr><blockquote><p>목차</p></blockquote><ol><li>Github 간단 소개<ol><li>원격 저장소</li><li>원격저장소 Github이 제공하는 정적웹사이트, Github Pages</li><li>호스팅을 편리하게 만들어주는 generator, Jekyll &amp; HEXO</li></ol></li><li>Github Pages로 정적 페이지 Hosting하기<ol><li>로컬에 저장소 생성하기</li><li>원격 저장소 생성하기 (Github Repository)</li><li>원격 저장소와 로컬 저장소 연결하기</li></ol></li><li>Hexo 설치하기<ol><li>Hexo 설치 전 준비</li><li>Hexo npm 설치하기</li><li>설정파일 업데이트</li></ol></li><li>Github에 배포하기<ol><li>hexo 설정을 통해 정적 리소스를 생성하기</li><li>배포하기</li></ol></li><li>anatol 테마적용하기</li></ol><hr><h2 id="0-Github-간단-소개"><a href="#0-Github-간단-소개" class="headerlink" title="0. Github 간단 소개"></a>0. Github 간단 소개</h2><p>깃에 대해서 잘 알고 있다면 1번으로 넘어가도 됩니다.</p><h3 id="0-1-원격저장소"><a href="#0-1-원격저장소" class="headerlink" title="0-1. 원격저장소"></a>0-1. 원격저장소</h3><p><img src="/images/post_img/01/post_1-01.svg" width="600px"><br><a href="https://backlogtool.com/git-tutorial/kr/intro/intro1_1.html" target="_blank" rel="external">Git</a>이란 소스코드를 효과적으로 관리하기 위해 개발된 ‘분산형 버전 관리 시스템’입니다.<br>git은 저장소에서 관리를 하는데, 내 컴퓨터에 있는 저장소를 <code>로컬저장소</code>라고 하고, 웹 상에 있는 저장소를 <code>원격저장소</code>라고 합니다. 우리가 흔히 알고 있는 원격저장소를 제공하는 서비스에는 <strong>깃헙, 비트버킷, 깃랩</strong>등이 있습니다다. 헥소를 이용한 블로그 개설을 위해서는 <strong>깃헙</strong>을 사용해야합니다.</p><h3 id="0-2-원격저장소-Github이-제공하는-정적웹사이트-Github-Pages"><a href="#0-2-원격저장소-Github이-제공하는-정적웹사이트-Github-Pages" class="headerlink" title="0-2. 원격저장소 Github이 제공하는 정적웹사이트, Github Pages"></a>0-2. 원격저장소 Github이 제공하는 정적웹사이트, Github Pages</h3><p><img src="/images/post_img/01/post_1-02.svg" width="600px"><br>Github에서 제공하는 Static Website, Github Pages가 있다. 깃헙 저장소에 리소스를 <code>push</code>만 해도(push란 저장소에 리소스를 넣을때 사용하는 명령어) 간단하게 웹사이트를 만들 수 있다. 즉, 다른 호스팅 서비스의 도움없이, 원격저장소에 올리기만해도 호스팅이 가능하다.</p><h3 id="0-3-호스팅을-편리하게-만들어주는-generator-Jekyll-amp-HEXO"><a href="#0-3-호스팅을-편리하게-만들어주는-generator-Jekyll-amp-HEXO" class="headerlink" title="0-3. 호스팅을 편리하게 만들어주는 generator, Jekyll &amp; HEXO"></a>0-3. 호스팅을 편리하게 만들어주는 generator, Jekyll &amp; HEXO</h3><p><img src="/images/post_img/01/post_1-04.svg" width="600px"></p><p>사실, hexo나 jekyll이 없이도, html,css,javascript를 통해서도 호스팅이 가능하나, 블로그 구성상 <strong>글을 등록하고, 리스트를 보여주며, 댓글을 달 수 있는, 블로그가 갖고 있는 기능을 편라히게 사용하기 위해서</strong> hexo나 jekyll과 같은 generator를 사용해야 한다.</p><p>Static Website generator는 마크다운을(.md 파일)로 편집 후 html로 변환할 수 있도록 돕는다. generator에는 jekyll과 HEXO가 있는데, jekyll은 <code>ruby</code>기반, HEXO는 <code>node.js</code>기반이다.</p><hr><p>그럼 generator을 셋팅하기 전, 내 컴퓨터에 디렉토리(폴더)를 생성하고, 원격저장소(github)에 연결을 시켜보자.</p><h2 id="1-Github-Pages로-정적-페이지-호스팅하기"><a href="#1-Github-Pages로-정적-페이지-호스팅하기" class="headerlink" title="1. Github Pages로 정적 페이지 호스팅하기"></a>1. Github Pages로 정적 페이지 호스팅하기</h2><p>Github Pages를 사용하기 위해 Github의 원격저장소에 리소스를 올려야한다는 사실을 잊지말자. 아래 그림의 저장소들이 필요하다.</p><p><img src="/images/post_img/01/post_1-05.svg" width="600px"></p><h3 id="1-1-로컬에-저장소-생성하기"><a href="#1-1-로컬에-저장소-생성하기" class="headerlink" title="1-1. 로컬에 저장소 생성하기"></a>1-1. 로컬에 저장소 생성하기</h3><p>내 컴퓨터 원하는 장소에 폴더를 생성한다.<br>terminal없이도 생성해도 된다.<br>아래는 terminal을 이용한 생성방법</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 바탕화면에 생성한다는 가정 </span><br><span class="line">(글쓴이는 운영체제가 mac입니다.) --&gt;</span><br><span class="line">$ <span class="built_in">cd</span> Desktop</span><br><span class="line">$ mkdir github-blog</span><br></pre></td></tr></table></figure><p>바탕화면에 <code>github-blog</code>라는 이름의 폴더가 생성이 되었다.</p><h3 id="1-2-원격-저장소-생성하기-Github-Repository"><a href="#1-2-원격-저장소-생성하기-Github-Repository" class="headerlink" title="1-2. 원격 저장소 생성하기 (Github Repository)"></a>1-2. 원격 저장소 생성하기 (Github Repository)</h3><p><img src="/images/post_img/01/post_1-11.jpg" width="600px"><br>github pages를 통해 손쉽게 <code>USERNAME.github.io</code>를 통해 정적 페이지를 호스팅 할 수 있다. </p><blockquote><p>번외 &gt; gh-pages 브랜치를 생성하면, 각 repository마다 <code>USERNAME.github.io/레포이름</code>으로 호스팅이 가능하다.</p></blockquote><p>지금부터 말하는 USERNAME은, 당신의 아이디이다. 깃헙주소 뒷부분 <code>/</code>이후 붙는 유저네임을 붙이면된다. 아래 순서로 깃 저장소를 생성한다.</p><ol><li>New Repository &gt; 이름은 꼭 <code>USERNAME.github.io</code>로 적용한다. </li><li>Public선택.</li><li>원격저장소 생성 완료</li></ol><p><img src="/images/post_img/01/post_1-12.jpg" width="600px"></p><h3 id="1-3-원격-저장소와-로컬-저장소-연결하기"><a href="#1-3-원격-저장소와-로컬-저장소-연결하기" class="headerlink" title="1-3. 원격 저장소와 로컬 저장소 연결하기"></a>1-3. 원격 저장소와 로컬 저장소 연결하기</h3><p><img src="/images/post_img/01/post_1-06.svg" width="600px"><br>내 컴퓨터에 저장소를 만들고, 원격에도 만들었으니, 연결을 해야한다. 연결하는 방법은 간단하다. 지금은 터미널을 열고 명령어를 입력해야하는 타이밍이다.</p><ol><li>1번에서 만들었던 디렉토리로 이동한다.</li><li>해당 디렉토리에서 원격저장소의 git을 clone한다. clone 뒤에 생성한 원격저장소의 주소를 입력하는데, 이는 remote가 동시에 일어나므로, 따로 remote 명령어를 입력안해도 된다.</li><li>연결 테스트겸, READMD.md 파일을 생성한다.</li><li>생성된 README.md파일을 푸시한다. (commit &gt; push)</li></ol><p>위의 순서를 코드로 옮기면. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 1. 해당 디렉토리로 이동 --&gt;</span><br><span class="line"><span class="built_in">cd</span> Desktop</span><br><span class="line"><span class="built_in">cd</span> github-blog</span><br><span class="line"></span><br><span class="line">&lt;!-- 2. git <span class="built_in">clone</span> --&gt;</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/feel5ny/TEST.github.io.git</span><br><span class="line"><span class="built_in">cd</span> test.github.io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 3. README.md파일 생성 --&gt;</span><br><span class="line"><span class="built_in">echo</span> README.md</span><br><span class="line"></span><br><span class="line">&lt;!-- 4. 원격저장소에 올리기 --&gt;</span><br><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>step 1이 끝났다! 그리고 벌써 호스팅이 완료되었다.<br><strong>USERNAME.github.io</strong>에 가보자.</p><hr><p>아직 블로그의 형태를 띄지 않았다. 위에서 말했던 generator를 이용하여 블로그의 구조를 짤 예정인데, 우리는 HEXO를 이용할 것이다. </p><h2 id="2-Hexo-설치하기"><a href="#2-Hexo-설치하기" class="headerlink" title="2. Hexo 설치하기"></a>2. Hexo 설치하기</h2><p>Hexo는 node.js기반이기 때문에 npm을 통해 쉽게 설치가 가능하다. 다양한 plugin과 테마를 지원하고 있다.<br><img src="/images/post_img/01/post_1-07.svg" width="600px"></p><h3 id="2-1-Hexo-설치-전-준비"><a href="#2-1-Hexo-설치-전-준비" class="headerlink" title="2-1. Hexo 설치 전 준비"></a>2-1. Hexo 설치 전 준비</h3><p>Hexo는 말했다 싶이 node.js 기반이기 때문에 node.js가 로컬에 기본적으로 설치되어있어야 한다. node.js는 <a href="https://nodejs.org/en/" target="_blank" rel="external">공식 사이트</a>에서 설치가 가능하다. stable버전을 추천한다.</p><h3 id="2-2-Hexo-npm-설치하기"><a href="#2-2-Hexo-npm-설치하기" class="headerlink" title="2-2. Hexo npm 설치하기"></a>2-2. Hexo npm 설치하기</h3><p>Node.js를 설치 한 후에 아래 CLI를 순서대로 입력하여 npm을 설치한다.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>node.js를 설치하면 npm을 사용할 수 있는데, 패키지 중에 hexo-cli를 설치한다. blog파일을 생성하여 hexo를 초기화한다. blog 디렉토리로 이동후, npm install을 사용하여, blog에 필요한 파일들을 자동으로 설치한다.</p><h3 id="2-3-설정파일-업데이트"><a href="#2-3-설정파일-업데이트" class="headerlink" title="2-3. 설정파일 업데이트"></a>2-3. 설정파일 업데이트</h3><p>위의 순서가 끝나면, root 디렉토리에 <code>_config.yml</code>이라는 설정파일이 생성된다. (yml파일은 사람이 쉽게 읽을 수 있는 데이터 직력화 양식으로,…<a href="http://www.openthefile.net/ko/extension/yml" target="_blank" rel="external">more</a>) 해당 파일에 블로그 정보를 수정한다. 나머지 정보는 <a href="https://hexo.io/docs/" target="_blank" rel="external">hexo 공식 문서</a>에서.</p><ol><li><p>Site 정보<br>블로그 정보를 수정할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 제목(html head에 들어가는 title태그에 들어가는 제목과 같다.)</span><br><span class="line">subtitle: </span><br><span class="line">description:</span><br><span class="line">author: Nayoung Kim</span><br></pre></td></tr></table></figure></li><li><p>URL 정보<br>블로그 URL 정보를 설정할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url: https://USERNAME.github.io</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure></li><li><p>Github 정보<br>배포를 위해서 저장소 주소를 추가한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/feel5ny/TEST.github.io.git</span><br></pre></td></tr></table></figure></li></ol><p>테마별로 구성을 수정하는 스타일이 다르다. 테마 적용하기 파트에서 anatol 레이아웃 수정방법을 설명하겠다.</p><h3 id="2-4-로컬에서-테스트하기"><a href="#2-4-로컬에서-테스트하기" class="headerlink" title="2-4. 로컬에서 테스트하기"></a>2-4. 로컬에서 테스트하기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>blog 디렉토리에 위치되어있는 상태에서 서버를 구동한다. blog에 위치되어있지 않으면 서버구동이 안된다. 서버 구동이 완료되면 4000번 포트로 접속이 가능하다. </p><ul><li><a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></li></ul><p>테스트시 구동이 잘 안될 경우, 서버를 껐다가 다시 실행해 보면된다. 서버를 끄는 방법은 터미널에서 <code>ctrl+c</code>를 두번 입력하면 된다. </p><hr><h2 id="3-Github에-배포하기"><a href="#3-Github에-배포하기" class="headerlink" title="3. Github에 배포하기"></a>3. Github에 배포하기</h2><p>로컬에서 테스트를 완료하면 USERNAME.github.io 주소로 배포해보자.<br><img src="/images/post_img/01/post_1-08.svg" width="600px"></p><h3 id="3-1-hexo-설정을-통해-정적-리소스를-생성하기"><a href="#3-1-hexo-설정을-통해-정적-리소스를-생성하기" class="headerlink" title="3-1. hexo 설정을 통해 정적 리소스를 생성하기"></a>3-1. hexo 설정을 통해 정적 리소스를 생성하기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하면, github에 올라갈 리소스만 정리되어 따로 폴더가 생성된다.</p><h3 id="3-2-배포하기"><a href="#3-2-배포하기" class="headerlink" title="3-2. 배포하기"></a>3-2. 배포하기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하면 배고가 완료된다. generate와 deploy를 한번에 진행하고 싶은 경우 아래 명령어를 입력한다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure><p>약자로 <code>hexo d g</code>를 사용해도 됩니다.</p><h3 id="3-3-배포가-잘-안될-경우"><a href="#3-3-배포가-잘-안될-경우" class="headerlink" title="3-3. 배포가 잘 안될 경우"></a>3-3. 배포가 잘 안될 경우</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;intro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 무언가를 배울때 하루하루의 기록을 남기는 것은 자기계발의 첫 스타트라고 생각합니다. 머리속에 있는 것을 그대로 옮기는 작업은, 정리하며 내것으로 만들기에도 좋고, 그때그때의
      
    
    </summary>
    
      <category term="blog" scheme="http://feel5ny.github.io/categories/blog/"/>
    
      <category term="hexo" scheme="http://feel5ny.github.io/categories/blog/hexo/"/>
    
    
      <category term="hexo" scheme="http://feel5ny.github.io/tags/hexo/"/>
    
      <category term="node.js" scheme="http://feel5ny.github.io/tags/node-js/"/>
    
  </entry>
  
</feed>
