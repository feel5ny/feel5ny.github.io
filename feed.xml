<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>필오의 개발일지</title>
  
  <subtitle>Frontend developer &amp; love UX, Interaction</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="http://feel5ny.github.io/"/>
  <updated>2021-02-23T09:38:12.273Z</updated>
  <id>http://feel5ny.github.io/</id>
  
  <author>
    <name>Joy Kim</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>웹 버저닝과 배포내역관리 (feat. standard-version)</title>
    <link href="http://feel5ny.github.io/2021/02/23/standard-version/"/>
    <id>http://feel5ny.github.io/2021/02/23/standard-version/</id>
    <published>2021-02-23T10:00:00.000Z</published>
    <updated>2021-02-23T09:38:12.273Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>셋팅은 여기 <a href="https://github.com/feel5ny/test-spa-version" target="_blank" rel="noopener">레포</a>에서 확인 가능하다.</p></blockquote><p>최근 버그와 관련된 CS가 인입이 되어, 픽스 후 배포했음에도 불구하고 유사한 CS가 인입이 되었을때 또 다시 버그 개선 티켓이 생성되곤 했다. 버그 픽스가 제대로 되지 못했을 수도있지만, 상황을 확인해보면 이슈를 CS단계에서 확인하지 못하고 바로 넘어오는 상황이 많았다. (커뮤니케이션으로 해결가능한 것들도) 이런 상황이 반복되고 누적되다보니 개발 집중력이 떨어지고, 불필요한 커뮤니케이션에 시간을 쏟고 있다는 생각이 들어, 개선해야겠다는 생각이 들었다.<br><img src="/images/2021/03/02.png" alt="유저, CS담당자, 개발자"></p><a name="problem"><h2 id="문제-사항"><a href="#문제-사항" class="headerlink" title="문제 사항"></a>문제 사항</h2><p>CS단계에서 진행되지 못하고 넘어올수밖에 없었던 이유</p><ol><li>CS 대응 메뉴얼에 새로고침과 관련된 항목이 없었음.<blockquote><p>CSR의 경우 새로운 배포가 이루어졌을때, 새로고침을 하지 않을 경우 새로 배포한 JS파일을 바라보지 못하고, 이전 JS파일을 바라보고 있게 된다.</p></blockquote></li><li>새로고침 이전에 사용자가 바라보는 버전이 신규 배포 버전의 JS파일인지 확인을 해야하지만 서비스에 버전을 명시하지 않아, CS 담당자가 확인할 수 없었다는 점. </li><li>버전명을 확인해도 해당 버전에 어떤 배포가 이루어졌었는지. 이전에 등록됐던 버그 픽스건이 배포가 되었었는지 확인할 수 있는 내역을 슬랙에서 검색해서 찾는 등 히스토리를 찾아야하는 상황.<blockquote><p>배포 notice를 확인할 수 있는 채널이 있지만, CS담당자가 이를 확인하지 못했거나, 잊을수도 있다.</p></blockquote></li></ol><p>사실 1번과 2번의 경우 SSR형태의 프로젝트나, 브라우저를 오래 유지하지 않고 사용하는 프로젝트라면 화면을 이동할때나 새로 들어갈때 최근에 배포한 파일을 load하기때문에 문제가 거의 발생하지 않는다. 하지만 어드민과 같은 프로젝트의 경우 브라우저를 끄지 않거나 컴퓨터를 아예 끄지 않는 경우 등, 오랫동안 새로고침하지 않고 유지되는 상황이 존재하기에 위 상황이 발생할 가능성이 있다.</p><a name="solution"><h2 id="해결-방향"><a href="#해결-방향" class="headerlink" title="해결 방향"></a>해결 방향</h2><p>생각나는 해결 방법은 아래와 같았다.</p><ul><li>CS담당자가 사용자가 바라보고 있는 버전을 확인할 수 있게 한다.</li><li>CS담당자가 배포된 내역을 확인할 수 있게 한다.</li><li>사용자는 새로 배포된 버전이 있을 경우 새로고침을 유도하는 팝업을 받는다.</li><li>…</li></ul><p>문제사항의 해결방향으로 다시 바라보면</p><ul><li>문제사항 1번의 경우 메뉴얼에 해당항목 추가</li><li>문제사항 2번의 경우 해결방향 3번으로 해결 가능</li><li>문제사항 3번의 경우 해결방향 1번, 2번으로 해결 가능하다.</li></ul><p>해결방법 3번이 가장 효과적인 방법이긴하나, 이번 포스팅에서는..<br>해결방법 1,2번의 경우에 해당되는 <strong>버전관리, 배포내역관리</strong>에대해 작성하고자 했다.ㅎㅎ</p><a name="develop"><h2 id="구현-방향"><a href="#구현-방향" class="headerlink" title="구현 방향"></a>구현 방향</h2><p>버전관리와 배포내역 관리는 배포시점에 진행해야하는데, 생각나는 순서는 아래와 같았다.</p><ol><li>프러덕션 배포 전 버전을 업데이트<ol><li>버전의 경우 배포하는 기능의 범위와 유형에 따라 major, minor, patch를 올릴지 결정</li><li>package.json의 버전을 결정한 버전으로 변경</li></ol></li><li>빌드 및 배포</li><li>배포가 성공하면 배포사항을 내역에 추가</li></ol><p>버전을 업데이트하고, 배포사항을 내역에 추가하는 일련의 과정을 배포때마다 한다는 것은 여간 번거로운 일이 아니다. 직접 구현전에 자동화로 만들어 놓은 오픈소스를 찾아보고, 배포시점때마다 진행되어야해서 CI툴에 JOB으로 단계별로 생성하여 진행하기로 했다.</p><ol><li>관련 라이브러리 찾아보기</li><li>배포 파이프라인에 추가하기</li></ol><a name="library"><h2 id="1-라이브러리-서칭"><a href="#1-라이브러리-서칭" class="headerlink" title="1. 라이브러리 서칭"></a>1. 라이브러리 서칭</h2><p>찾기전에 버전과 배포내역이라는 개념을 정리해볼 필요가 있었다.<br>두 가지는 <strong>오픈소스 프로젝트</strong>에서 자주 볼 수 있었다.<br>이를 참고하여 리서칭해보니 2가지 개념이 나온다.</p><ol><li>시맨틱 버저닝</li><li>CHANGLOG</li></ol><h3 id="개념-시멘틱-버저닝이란"><a href="#개념-시멘틱-버저닝이란" class="headerlink" title="개념) 시멘틱 버저닝이란?"></a>개념) 시멘틱 버저닝이란?</h3><p>시맨틱 버저닝의 경우 <a href="https://semver.org/lang/ko/" target="_blank" rel="noopener">이 링크</a>에서 자세히 확인 가능하다. 소프트웨어의 버전 변경 규칙에 대한 제안이다. 간단히 말하자면 의존성 지옥을 해결하고자 배포시 버전번호를 명시하여 정의를 내림으로써 의존성관리를 용이하게 한다. SemVer의 형태는 아래와 같다. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MAJOR.MINOR.PATCH</span><br></pre></td></tr></table></figure><img src="https://bytearcher.com/goodies/semantic-versioning-cheatsheet/wheelbarrel-no-tilde-caret-white-bg-w1000.jpg" alt="출처: bytearcher"><p>npm에서는 버전을 관리할 수 있는 cli를 제공한다.<br>이 명령어를 통해서 package.json의 버전명을 올릴 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm version </span><br><span class="line">    [</span><br><span class="line">        &lt;newversion&gt; </span><br><span class="line">        | major </span><br><span class="line">        | minor </span><br><span class="line">        | patch </span><br><span class="line">        | premajor </span><br><span class="line">        | preminor </span><br><span class="line">        | prepatch </span><br><span class="line">        | prerelease [--preid=&lt;prerelease-id&gt;] </span><br><span class="line">        | from-git</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h3 id="개념-CHANGELOG란"><a href="#개념-CHANGELOG란" class="headerlink" title="개념) CHANGELOG란?"></a>개념) CHANGELOG란?</h3><ul><li>체인지로그(CHANGLOG, 변경 기록)는 웹 사이트나 프로그램을 제작하는 것 같은 어떤 프로젝트를 진행할 때에 변경 사항에 대한 기록이다. </li><li>많은 오픈소스 프로젝트에서는 체인지로그 파일을 가장 상위에 포함해서 배포한다.<br>(<a href="https://ko.wikipedia.org/wiki/%EC%B2%B4%EC%9D%B8%EC%A7%80%EB%A1%9C%EA%B7%B8" target="_blank" rel="noopener">위키</a>)</li></ul><img src="https://d33wubrfki0l68.cloudfront.net/abc69d24631dca030e29dd6c2be5898d8a5ae881/1af65/static/43682732cd75b06795c875eccd0aae1a/b1001/changelog.png" alt="CHANGELOG"><h4 id="릴리즈-노트와-CHANGLOG"><a href="#릴리즈-노트와-CHANGLOG" class="headerlink" title="릴리즈 노트와 CHANGLOG"></a>릴리즈 노트와 CHANGLOG</h4><p><strong>CHANGLOG</strong></p><ul><li>CHANGLOG의 경우 조금 더 개발레벨의 변경사항을 작성한거에 가깝다고 생각한다. </li><li>만약 지금과같은 문제사항이서 CS담당자에게는 CHANGLOG파일보다는 기능요약, 버그수정을 비개발자가 알 수 있는 언어로 정리된 릴리즈노트를 제공하는게 맞다고 생각한다.</li><li>만약 릴리즈 노트를 작성하지 않는 팀이라면, 비개발용어로 commit 타입을 생성하여 개발자가 일반용어로 작성하여 CHANGLOG에 포함하는 것도 나쁘지 않다고 본다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .versionrc</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"types"</span>: [</span><br><span class="line">    ...</span><br><span class="line">    &#123;<span class="string">"type"</span>:<span class="string">"release"</span>&#125;, <span class="comment">// release용으로 생성</span></span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><img src="/images/2021/03/04.png" alt="Gatsby.js내의 릴리즈노트 페이지"><p><strong>release note</strong></p><ul><li>릴리스 정보 는 제품 또는 서비스의 새 버전 릴리스에 대한 자세한 설명을 제공하기 위해 고객에게 제공되는 문서이다. </li><li>이 문서는 일반적으로 PM 또는 PO가 생성하고 기능 요약, 버그 수정, 사용 사례 및 기타 자료를 포함한다. </li><li>릴리스 정보는 사용자 문서 외부에서 변경된 사항에 대한 빠른 가이드로 사용된다.</li></ul><h3 id="library-standard-version"><a href="#library-standard-version" class="headerlink" title="library) standard-version"></a>library) <a href="https://github.com/conventional-CHANGLOG/standard-version" target="_blank" rel="noopener">standard-version</a></h3><p><strong>이 2가지를 관리할 수 있는 standard-version이라는 라이브러리가 존재한다.</strong><br><code>standard-version</code> 스크립트 하나로 여러가지 일을 실행해주는데 아래와 같다.</p><ol><li>깃의 commit로그를 확인하여<ol><li>새로운 버전을 생성하고 package.json의 <strong>버전 업데이트</strong> (npm version 명령어 대체가능)</li><li><u>커밋을 기준</u>으로 <strong>CHANGLOG파일 생성 및 갱신</strong></li></ol></li><li>해당 과정이 마무리되면 CHANGLOG파일과 package.json의 변경내역 <strong>커밋을 진행한다.</strong><ul><li>자동 커밋메세지 : <code>chore(release): 버전명</code></li></ul></li><li>버전명을 Tag로 만들어서 추가한다.</li></ol><h4 id="생각-및-고민"><a href="#생각-및-고민" class="headerlink" title="생각 및 고민"></a>생각 및 고민</h4><ol><li>장점) 버전 업데이트, 릴리즈 tag명시, CHANGLOG 갱신을 한번에 해결해준다.</li><li>고민) 기여자 모두가 커밋을 conventional commit 스펙에 맞추어 엄격하게 작성해야한다.</li><li>장점) 커밋 규칙을 지키며 개발하는 덕분에 커밋정리 및 규칙도 정리된다.</li><li>확장) 배포때마다 tag관리가 되어 롤백등의 상황에서도 태그기준으로 롤백이 편리하게 가능하다.</li></ol><h4 id="커밋에-의존적인-상황"><a href="#커밋에-의존적인-상황" class="headerlink" title="커밋에 의존적인 상황"></a>커밋에 의존적인 상황</h4><p>하나 걱정되는 것은 기여자 모두가 conventional commit 스펙을 정확히 맞춰서 작성해야하는 부분이였는데<br>아래 라이브러리들로 해결이 가능했다.</p><ul><li>휴먼에러나 규칙을 자동으로 체킹하기 위해 lint와 같은 기능이 필요<ul><li><a href="https://github.com/conventional-CHANGLOG/commitlint" target="_blank" rel="noopener">commitlint</a>라는 라이브러리</li></ul></li><li>내가 개발한 코드가 어떤 목적인지 카테고라이징을 하는 기준이 각자 정의하기 애매하다면?<ul><li><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen/cz-cli</a>라는 라이브러리</li></ul></li></ul><img src="https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png" alt="'commitizen/cz-cli' 셋팅 후 commit 진행시"><h3 id="규격-conventional-commit"><a href="#규격-conventional-commit" class="headerlink" title="규격) conventional commit"></a>규격) <a href="https://www.conventionalcommits.org/ko/v1.0.0/" target="_blank" rel="noopener">conventional commit</a></h3><p>컨벤셔널 커밋은 페이지에서 이렇게 설명한다.</p><ul><li>Conventional Commits 스펙은 <strong>커밋 메시지에 곁들여진 가벼운 컨벤션</strong>으로<br>  <strong>명확한 커밋 히스토리</strong>를 생성하기 위한 간단한 규칙을 제공합니다. </li><li>이렇게 만들어진 커밋 히스토리를 이용하여 더 쉽게 자동화된 도구를 만들 수 있습니다.<br>  (commitlint, standard-version)</li><li>이 컨벤션은 커밋 메세지에 신규 기능 추가, 문제 수정, 커다란 변화가 있음을 기술함으로써<br>  유의적 버전(Sementic Versioning)과 일맥상통한 면이 있습니다.</li></ul><blockquote><p>프로젝트에 셋팅하지 않아도 커밋 습관을 들이기 좋은 컨벤션이라고 생각이 들었다.</p></blockquote><p>형태는 아래와 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;타입&gt;[적용 범위(선택 사항)]: &lt;설명&gt;</span><br><span class="line"></span><br><span class="line">[본문(선택 사항)]</span><br><span class="line"></span><br><span class="line">[꼬리말(선택 사항)]</span><br></pre></td></tr></table></figure><p>즉, 위의 규격을 지키며 커밋을 진행해야한다.</p><p>(예시)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fix: correct minor typos in code</span><br><span class="line"></span><br><span class="line">see the issue for details</span><br><span class="line"></span><br><span class="line">on typos fixed.</span><br><span class="line"></span><br><span class="line">Reviewed-by: Z</span><br><span class="line">Refs #133</span><br></pre></td></tr></table></figure><h3 id="library-commitlint"><a href="#library-commitlint" class="headerlink" title="library) commitlint"></a>library) commitlint</h3><p>commitlint를 사용해 commit시에 컨벤션을 잘 지켰는지 체크한다. 컨벤션은 어느정도 <a href="https://github.com/conventional-CHANGLOG/commitlint/blob/master/docs/reference-rules.md" target="_blank" rel="noopener">규격화</a>되어있다. </p><ol><li>컨벤션 셋팅</li><li>commit hook에 셋팅</li></ol><h4 id="컨벤션-셋팅"><a href="#컨벤션-셋팅" class="headerlink" title="컨벤션 셋팅"></a>컨벤션 셋팅</h4><ul><li>standard-version에서 따르는 <code>conventional-commit</code>을 따르려면 <code>@commitlint/config-conventional</code>를 상속받아서 사용하면된다.</li></ul><img src="/images/2021/03/03.png" alt=".commitlintrc.js파일. 기본 아이콘 이뿜"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  extends: [<span class="string">"@commitlint/config-conventional"</span>],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">"type-enum"</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">"always"</span>,</span><br><span class="line">      [</span><br><span class="line">        <span class="string">"build"</span>,</span><br><span class="line">        <span class="string">"ci"</span>,</span><br><span class="line">        <span class="string">"chore"</span>,</span><br><span class="line">        <span class="string">"docs"</span>,</span><br><span class="line">        <span class="string">"feat"</span>,</span><br><span class="line">        <span class="string">"fix"</span>,</span><br><span class="line">        <span class="string">"perf"</span>,</span><br><span class="line">        <span class="string">"refactor"</span>,</span><br><span class="line">        <span class="string">"revert"</span>,</span><br><span class="line">        <span class="string">"style"</span>,</span><br><span class="line">        <span class="string">"test"</span>,</span><br><span class="line">        <span class="string">"release"</span>,</span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="commit-hook에-셋팅"><a href="#commit-hook에-셋팅" class="headerlink" title="commit hook에 셋팅"></a>commit hook에 셋팅</h4><p>husky를 사용하여 셋팅하였다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="string">"husky"</span>: &#123;</span><br><span class="line">  <span class="string">"hooks"</span>: &#123;</span><br><span class="line">    <span class="string">"commit-msg"</span>: <span class="string">"commitlint -E HUSKY_GIT_PARAMS"</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><img src="/images/2021/03/06.png" alt="정리 이미지"><ul><li>버전관리, 배포내역관리를 자동화하기 위해 standard-version를 사용한다.<ul><li>conventional-commit 규격에 엄격하므로,<br>해당 컨벤션을 적용하기 힘든 상황이라면 <ul><li><code>npm version</code> 명령어를 통해 버전을 관리하고, </li><li>배포때마다 직접 <strong>CHANGLOG</strong>를 작성한다.</li></ul></li></ul></li><li>standard-version 이외에 필요한 라이브러리는<ul><li>(필수) @commitlint/cli : 커밋 작성시 컨벤션용 린트</li><li>(옵션) commitizen/cz-cli : conventional commit의 규격을 하나씩 문항에 답하면서 커밋을 완성한다.</li></ul></li></ul><a name="cicd"><h2 id="2-배포-파이프라인에-추가하기"><a href="#2-배포-파이프라인에-추가하기" class="headerlink" title="2. 배포 파이프라인에 추가하기"></a>2. 배포 파이프라인에 추가하기</h2><ul><li>문제사항 2번을 해결하기 위해 footer같은 곳에 버전명을 명시할 수 있다. </li><li>이처럼 버전명이 서비스에 명시되기 때문에 프러덕션 배포시 빌드전 새로운 버전명 업데이트되어야하며 이에 맞춰 버전업과 CHANGLOG셋팅은 빌드 전에 진행한다. </li><li>jenkins를 쓴다면 파이프라인 프로젝트로 만들어서 사용하고, github action을 사용한다면 worflow에 셋팅하면된다. </li><li>이번 포스팅에서는 github action으로 설명</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="attr">  steps:</span></span><br><span class="line"><span class="attr">    - uses:</span> <span class="string">actions/checkout@v2</span> <span class="comment"># 레포 바라보게 하기용</span></span><br><span class="line"><span class="attr">    - uses:</span> <span class="string">fregante/setup-git-user@v1</span> <span class="comment"># 유저 셋팅용</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">패키지</span> <span class="string">설치</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">yarn</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 커밋타입에 release 타입을 추가하여</span></span><br><span class="line">      <span class="comment"># 릴리즈 노트를 마지막 커밋에 대신 작성하게 하였다.</span></span><br><span class="line">      <span class="comment"># 해당 스크립트는 lastCommit.sh 파일을 실행한다.</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">릴리즈</span> <span class="string">내역</span> <span class="string">커밋</span> <span class="string">확인</span> </span><br><span class="line"><span class="attr">      run:</span> <span class="string">yarn</span> <span class="attr">check:lastCommit</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># standard-version 진행</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">version</span> <span class="string">업데이트</span> <span class="string">및</span> <span class="string">changelog</span> <span class="string">생성</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">yarn</span> <span class="string">release</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># 빌드 및 배포 start</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">빌드</span> <span class="string">시작</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">yarn</span> <span class="string">build</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">    - name:</span> <span class="string">배포</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">echo</span> <span class="string">"배포2"</span></span><br><span class="line">      <span class="comment"># 빌드 및 배포 end</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">변경내역</span> <span class="string">푸시</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">ad-m/github-push-action@master</span></span><br><span class="line"><span class="attr">      with:</span></span><br><span class="line"><span class="attr">        github_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        branch:</span> <span class="string">$&#123;&#123;</span> <span class="string">github.ref</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">        tags:</span> <span class="literal">true</span> <span class="comment"># 태그까지 생성되기때문에 같이 추가한다.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">배포완료</span> <span class="string">사항</span> <span class="string">노티</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Job</span> <span class="string">상태</span> <span class="string">노티</span></span><br><span class="line">      <span class="string">...</span></span><br></pre></td></tr></table></figure><img src="/images/2021/03/05.png" alt="github action 캡쳐"><a name="comment"><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>운영이슈에서 오는 피로감을 개선하고자 여러가지 방향을 고민해보았는데, 문제해결로 가다가 살짝 옆으로 샌감이 없지않아 있다.ㅎㅎ 무튼 덕분에 버전관리와 배포내역관리에 대한 라이브러리들 을 알 수 있었고 github액션도 사용해보아서 개인적으로 재밌었던 포스팅이었다.</p><hr><p><strong>참고자료</strong></p><ol><li><a href="https://semver.org/lang/ko/" target="_blank" rel="noopener">SemVr</a></li><li><a href="https://ko.wikipedia.org/wiki/%EC%B2%B4%EC%9D%B8%EC%A7%80%EB%A1%9C%EA%B7%B8" target="_blank" rel="noopener">wiki-CHANGELOG</a></li><li><a href="https://github.com/conventional-CHANGLOG/standard-version" target="_blank" rel="noopener">standard-version</a></li><li><a href="https://github.com/conventional-CHANGLOG/commitlint" target="_blank" rel="noopener">commitlint</a></li><li><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener">commitizen/cz-cli</a></li><li><a href="https://github.com/conventional-CHANGLOG/commitlint/blob/master/docs/reference-rules.md" target="_blank" rel="noopener">규격화</a></li></ol></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;셋팅은 여기 &lt;a href=&quot;https://github.com/feel5ny/test-spa-version&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;레포&lt;/a&gt;에서 확인 가능하다.&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
      <category term="03_Communication" scheme="http://feel5ny.github.io/categories/03-Communication/"/>
    
      <category term="Application" scheme="http://feel5ny.github.io/categories/03-Communication/Application/"/>
    
    
      <category term="version" scheme="http://feel5ny.github.io/tags/version/"/>
    
      <category term="standard-version" scheme="http://feel5ny.github.io/tags/standard-version/"/>
    
      <category term="CHANGLOG" scheme="http://feel5ny.github.io/tags/CHANGLOG/"/>
    
      <category term="SemVr" scheme="http://feel5ny.github.io/tags/SemVr/"/>
    
      <category term="commitlint" scheme="http://feel5ny.github.io/tags/commitlint/"/>
    
      <category term="conventional-commit" scheme="http://feel5ny.github.io/tags/conventional-commit/"/>
    
  </entry>
  
  <entry>
    <title>피츠의 법칙과 Touch Target</title>
    <link href="http://feel5ny.github.io/2021/01/24/%ED%94%BC%EC%B8%A0%EC%9D%98-%EB%B2%95%EC%B9%99/"/>
    <id>http://feel5ny.github.io/2021/01/24/피츠의-법칙/</id>
    <published>2021-01-24T11:00:00.000Z</published>
    <updated>2021-02-07T03:58:31.463Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>[UX/UI의 10가지 심리학 법칙]</strong> 책을 읽으며 법칙별로<br>내용 요약 + 개인적으로 찾았던 레퍼런스 + 그밖에 자료들을 모아서 작성한 글입니다.</p></blockquote><a name="ux"><h2 id="사용하기-위해-움직이는-소비하는-시간을-줄인다-→-접근성"><a href="#사용하기-위해-움직이는-소비하는-시간을-줄인다-→-접근성" class="headerlink" title="사용하기 위해 움직이는(소비하는) 시간을 줄인다. → 접근성"></a>사용하기 위해 움직이는(소비하는) 시간을 줄인다. → 접근성</h2><ul><li>인터렉션은 최소한의 노력만으로 불편없이 간단하게 이뤄져야 한다.</li><li><strong>사용자가 인터랙티브 요소를 사용하려고 움직이는 데 드는 시간</strong>은, <strong>인터렉션의 중요한 지표</strong>다.</li><li>디자이너는 인터랙티브 요소의 크기와 위치를 적절하게 지정함으로써, <ul><li>사용자가 해당 요소를 손쉽게 선택하게 하고, </li><li>선택 가능 영역에 관한 사용자의 기대에 부응시켜야 한다.</li></ul></li><li>마우스나 손처럼 정밀도가 제각기 다른 다양한 입력 방식이 존재하는 오늘날의 사용환경을 고려하면, 꽤 어려운 과제다.</li></ul><a name="Fitts"><h3 id="피츠의-법칙"><a href="#피츠의-법칙" class="headerlink" title="피츠의 법칙"></a>피츠의 법칙</h3><ul><li>대상이 커지면, → 대상 선택에 드는 시간이 줄어든다. (W)</li><li>대상 선택을 위해 움직이는 거리가 줄면, → 대상을 선택하는 데 드는 시간도 줄어든다. (D)</li></ul><a name="history"><h4 id="기원"><a href="#기원" class="headerlink" title="기원"></a>기원</h4><ul><li><p>1954년 미국의 심리학자 : 폴 피츠</p></li><li><p>터치 대상까지 움직이는 데 드는 시간을 대상까지 거리와 대상 너비 간의 비율에 관한 함수를 통해 예측하면서 탄생</p></li><li><p>피츠의 법칙은 오늘날 인체 움직임에 관한 가장 영향력 있는 수학적 모델로 여겨지며,</p><ul><li>인체 공학, <a href="(https://ko.wikipedia.org/wiki/%EC%9D%B8%EA%B0%84-%EC%BB%B4%ED%93%A8%ED%84%B0_%EC%83%81%ED%98%B8%EC%9E%91%EC%9A%A9)">인간-컴퓨터 상호작용</a> 분야에서</li><li>실제로든 가상으로든,</li><li>대상을 가리키는 행동에 관한 모델을 만드는 데 널리 쓰이다.</li></ul></li><li><p>피츠는 대상 선택 작업의 난이도 ID를 정량화하는 측정 기준도 제시했다.</p>  <img src="/images/2021/02/01.png" style="width: 200px;margin-top:10px"><ul><li>D : 대상 중심까지의 거리 → 신호 signal</li><li>W : 대상의 허용 오차 혹은 너비 → 잡음 noise</li></ul></li></ul><img src="/images/2021/02/Fitts_Law.svg" alt="출처: wikipidia"><a name="Accessibility"><h3 id="피츠의-법칙과-Accessibility"><a href="#피츠의-법칙과-Accessibility" class="headerlink" title="피츠의 법칙과 Accessibility"></a>피츠의 법칙과 Accessibility</h3><ul><li>피츠의 법칙에서는 2가지 개념이 나온다.<br>대상 선택을 위해 움직인 <strong>거리</strong>와 대상 선택이 용이하게끔 <strong>키우는 것</strong>.</li><li>인터렉션의 향상을 위해 → 잡읍을 없애고 거리를 줄이는 것이 핵심이다.</li><li>3가지 개념이 나오는데, <strong>대상</strong>과 <strong>타겟</strong>, <strong>거리</strong>이다.<ul><li>대상은<ol><li>모바일 : 내 손가락</li><li>웹 : 마우스 포인터, 및 기타 기기</li></ol></li><li>타겟은 <strong>UI 엘리먼트</strong></li><li>대상과 타겟과의 거리에 영향을 주는 것은 여러가지가 있겠지만<br>여기서는 2가지를 얘기한다.<ol><li>대상이 어떤 목적을 위해 움직일때의 맥락(상황)</li><li>기기</li></ol></li><li>결국에는 상황에 맞춘 레이아웃을 잡는 것인데, 이는 디자이너의 영역으로 생각하자.</li></ul></li><li>여기서 프론트 개발자가 제어할 수 있는 부분은 <strong>UI 엘리먼트</strong>이다.</li><li><a href="http://www.kwacc.or.kr/WAI/wcag21/#target-size" target="_blank" rel="noopener">웹 콘텐츠 접근성 가이드(WCAG 2.0)</a>에서도 타겟 사이즈에 대한 내용이 나온다.</li><li>이처럼 피츠의 법칙은 접근성과 관련이 있으며, 이중에서도 터치 타겟과 관련이 있다.</li></ul><hr><ol><li>영향력있는 단체에서 잡은 터치 사이즈 권장 규격을 확인하고,(머테리얼 디자인 기준)<ul><li>터치 대상의 크기</li><li>요소 사이의 간격</li></ul></li><li>적용한 사례를 살펴보자.</li></ol><h2 id="Touch-Target"><a href="#Touch-Target" class="headerlink" title="Touch Target"></a>Touch Target</h2><p><strong>터치 타겟의 개념</strong>에 3가지가 나오는데, 크기, 다른 요소간의 간격, 유사한 흐름에 배치</p><ol><li>터치 대상의 크기는 사용자가 정확하게 선택할 수 있을 정도로 <strong>충분히 커야 한다.</strong></li><li>터치 대상 사이에 <strong>충분한 거리</strong>를 확보해야 한다.</li><li>터치 대상은 인터페이스상에서 <strong>쉽게 도달할 수 있는 영역에 배치</strong>해야 한다.</li></ol><a name="guideline"><h3 id="터치-대상의-최소-권장-규격"><a href="#터치-대상의-최소-권장-규격" class="headerlink" title="터치 대상의 최소 권장 규격"></a>터치 대상의 최소 권장 규격</h3><ul><li>Human interface guideLine : <strong>44 * 44 pt</strong></li><li>Material design guideLine : <strong>48 * 48 dp</strong></li><li>Web contents Access GuideLine(WCAG) : <strong>44 * 44 CSS px</strong></li><li>닐슨 노먼 그룹 : <strong>1 * 1cm</strong></li></ul><a name="design-system"><h3 id="디자인-시스템에-적용하긔"><a href="#디자인-시스템에-적용하긔" class="headerlink" title="디자인 시스템에 적용하긔"></a>디자인 시스템에 적용하긔</h3><ul><li>프론트에서는 프로젝트에 디자인 가이드라인이나 basic philosophy부분에 디자이너와 협의하여 최소 권장규격을 지정하고, (혹은 위에서 제안하는 권장규격을 따르거나) 개발자는 input 성격을 갖고 있는 컴포넌트 소스에 기본 값으로 해당 값을 지정하는 코드를 넣어두면 될 듯 하다.</li><li>아래에 머테리얼 디자인에서 구현한 방식을 따르는 것도 좋은 방법인듯하다.</li><li>최근에는 구글 머테리얼 디자인의 desgin foundation을 따르는 곳이 많아진 듯 하다. (글쓴이 피셜)</li></ul><a name="media-query"><h4 id="대상이-다를-경우"><a href="#대상이-다를-경우" class="headerlink" title="대상이 다를 경우"></a>대상이 다를 경우</h4><ul><li>웹의 경우 데스크탑웹과 모바일 웹이 존재하는데, 각각 사용대상이 다르다.</li><li>데스크탑의 경우 마우스 포인터를 사용, 모바일 웹에서는 손가락 터치를 사용한다.</li><li>만약 이를 구분하여 적용해야할 여백등이 고려되어야할 경우 미디어 쿼리의 pointer를 활용하면 된다.</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> (pointer: coarse) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">8em</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a name="touch-target"><h3 id="Material-design-Touch-Target"><a href="#Material-design-Touch-Target" class="headerlink" title="Material design - Touch Target"></a>Material design - Touch Target</h3><ul><li>구글 머테리얼 디자인에서는 최소 규격을 48dp로 지정하였다. 웹에서도 터치 최소 규격이 48px로 계산된다.</li><li>구글 머테리얼 디자인에서 <code>@material/touch-target</code>라는 패키지를 제공하는데, 추가적인 sass파일을 적용시켜준다.</li></ul><p><strong>기본 버튼</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"mdc-button"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mdc-button__ripple"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mdc-button__label"</span>&gt;</span>My Inaccessible Button<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>touch-target로 감싸기</strong></p><ul><li><p>mdc-touch-target-wrapper로 감싸고 </p></li><li><p>mdc-button__touch를 추가해두었다. → 여기에 absolute로 height값이 지정된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mdc-touch-target-wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"mdc-button mdc-button--touch"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mdc-button__ripple"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mdc-button__label"</span>&gt;</span>My Accessible Button<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mdc-button__touch"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>touch-target의 scss 파일을 보면, height값과 width값에 default값으로 48px을 적용한 부분이 보인다.</p></li><li><p>마지막 margin부분은, 강제로 적용한 touch target 영역을 채우기 위해 margin을 추가적으로 적용하는 부분이 보인다.</p><blockquote><p>아름답다.. 지금까지 scss를 잘 활용하지 못했다고 생각했다..</p></blockquote></li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node_modules/@material/touch-target/_touch-target.scss</span></span><br><span class="line"></span><br><span class="line">@use <span class="string">'@material/base/mixins'</span> as base-mixins;</span><br><span class="line">@use <span class="string">'@material/feature-targeting/feature-targeting'</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$height</span>: <span class="number">48px</span> !default; 👈👈👈</span><br><span class="line"><span class="variable">$width</span>: <span class="variable">$height</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// Styles applied to the component's touch target wrapper element.</span></span><br><span class="line">@<span class="keyword">mixin</span> wrapper(<span class="variable">$query</span>: feature-targeting.all()) &#123;</span><br><span class="line">  <span class="variable">$feat-structure</span>: feature-targeting.create-target(<span class="variable">$query</span>, structure);</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.mdc-touch-target-wrapper</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> feature-targeting.targets(<span class="variable">$feat-structure</span>) &#123;</span><br><span class="line">      @<span class="keyword">include</span> base-mixins.emit-once(<span class="string">'mdc-touch-target/wrapper'</span>) &#123;</span><br><span class="line">        <span class="attribute">display</span>: inline;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> touch-target(<span class="variable">$set-width</span>: false, <span class="variable">$query</span>: feature-targeting.all()) &#123;</span><br><span class="line">  <span class="variable">$feat-structure</span>: feature-targeting.create-target(<span class="variable">$query</span>, structure);</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">include</span> feature-targeting.targets(<span class="variable">$feat-structure</span>) &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">$height</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$set-width</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> feature-targeting.targets(<span class="variable">$feat-structure</span>) &#123;</span><br><span class="line">      <span class="comment">/* @noflip */</span></span><br><span class="line">      <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">width</span>: <span class="variable">$width</span>;</span><br><span class="line">      <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; @<span class="keyword">else</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> feature-targeting.targets(<span class="variable">$feat-structure</span>) &#123;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">transform</span>: translateY(-<span class="number">50%</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> margin(</span><br><span class="line">  <span class="variable">$component-height</span>,</span><br><span class="line">  <span class="variable">$component-width</span>: null,</span><br><span class="line">  <span class="variable">$touch-target-height</span>: <span class="variable">$height</span>,</span><br><span class="line">  <span class="variable">$touch-target-width</span>: <span class="variable">$width</span>,</span><br><span class="line">  <span class="variable">$query</span>: feature-targeting.all()</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="variable">$feat-structure</span>: feature-targeting.create-target(<span class="variable">$query</span>, structure);</span><br><span class="line"></span><br><span class="line">  <span class="variable">$vertical-margin-value</span>: (<span class="variable">$touch-target-height</span> - <span class="variable">$component-height</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">include</span> feature-targeting.targets(<span class="variable">$feat-structure</span>) &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="variable">$vertical-margin-value</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="variable">$vertical-margin-value</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @<span class="keyword">if</span> <span class="variable">$component-width</span> &#123;</span><br><span class="line">    <span class="variable">$horizontal-margin-value</span>: (<span class="variable">$touch-target-width</span> - <span class="variable">$component-width</span>) / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> feature-targeting.targets(<span class="variable">$feat-structure</span>) &#123;</span><br><span class="line">      <span class="attribute">margin-right</span>: <span class="variable">$horizontal-margin-value</span>;</span><br><span class="line">      <span class="attribute">margin-left</span>: <span class="variable">$horizontal-margin-value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a name="space-methods"><h3 id="Material-design-Space-methods"><a href="#Material-design-Space-methods" class="headerlink" title="Material design - Space methods"></a>Material design - Space methods</h3><ul><li>구글 머테리얼 디자인에서는 UI 요소사이의 공간을 8dp 혹은 4dp 단위로 측정한다.</li><li>웹에서도 8px, 4px 단위로 여백을 조정한다.<ul><li>보통은 8px로 진행하는 듯 하다. <a href="https://brunch.co.kr/@blackindigo-red/8" target="_blank" rel="noopener">이 글</a>과 연관이 있지 않을까 싶다.</li></ul></li></ul><a name="layout"><h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><ul><li>사용자의 <strong>맥락</strong>을 고려한 레이아웃은 <strong>디자이너의 영역</strong>에 가깝지만,<br>사용자의 <strong>기기</strong>와 관련된 나용은 한번은 읽어볼만한 내용이였다.</li></ul><hr><p>스마트폰 <strong>form factor</strong>가 다양하다.</p><ul><li>어떤 작업을 할지, 양손을 다 쓸수 있는지에 따라 → 스마트폰을 손에 쥐는 방식도 달라진다.</li><li>한손밖에 쓰지 못할 때 : 기기를 쥔 손의 엄지손가락으로 터치하는 경우, 잘 닿지 않는 영역이 생긴다.<ul><li>한 손을 쓸 때의 정확도는 오른쪽 하단에서 왼쪽 상단까지 선형으로 증가하지 않는다.</li><li>스티븐 후버가 진행한 연구<ul><li>사람들이 시선을 두거나, 터치하기 선호하는 영역은 → 스마트폰 화면의 중앙부. 정확도도 중앙부가 높다.</li><li>집중하고 싶어하는 영역 : 중앙부</li><li>PC와는 다르다. PC는 왼쪽 상단에서 오른쪽 하단으로 훑어봄</li></ul></li></ul></li><li>양손을 쓸 수 있어서 한손으로 기기를 쥐고 다른 손으로 터치하는 경우 동일한 영역도 쉽게 선택할 수 있다.</li></ul><hr><p>위 내용은 uxmatters의 글을 읽어보는 것이 더 재밌다. 해당 포스팅에서는 자세히 다루진 않겠다.<br><a href="https://www.uxmatters.com/mt/archives/2017/03/design-for-fingers-touch-and-people-part-1.php" target="_blank" rel="noopener">Design for Fingers, Touch, and People, Part 1</a><br><a href="https://www.uxmatters.com/mt/archives/2017/05/design-for-fingers-touch-and-people-part-2.php" target="_blank" rel="noopener">Design for Fingers, Touch, and People, Part 2</a><br><a href="https://www.uxmatters.com/mt/archives/2017/07/design-for-fingers-touch-and-people-part-3.php" target="_blank" rel="noopener">Design for Fingers, Touch, and People, Part 3</a></p><h2 id="적용한-컴포넌트-사례"><a href="#적용한-컴포넌트-사례" class="headerlink" title="적용한 컴포넌트 사례"></a>적용한 컴포넌트 사례</h2><ul><li>요즘은 개발자도구에도 접근성이 아주 잘나온다..!</li><li>토스는 전체적으로 시원시원한 UI를 갖고있다는 느낌이 들곤했는데, 아무래도 이런 Touch Target의 최소규격을 사용성이 좋게 적당히 잡아둔 듯 하다.</li></ul><a name="touch-target-example"><h3 id="Touch-Target-1"><a href="#Touch-Target-1" class="headerlink" title="Touch Target"></a>Touch Target</h3><ol><li>(Material design) Radio <img src="/images/2021/02/10.png" style="margin-top:10px" alt="Material design의 Radio - 라디오 버튼은 48px보다 작지만, touch영역은 48px을 유지"></li><li>(Material design) Slider <img src="/images/2021/02/11.png" style="margin-top:10px" alt="Material design의 Slider - 슬라이더의 pointer부분의 높이값을 48px을 유지"></li><li>(Material design) Switch <img src="/images/2021/02/12.png" style="margin-top:10px" alt="Material design의 Switch"></li><li>(Facebook) Button <img src="/images/2021/02/02.png" style="margin-top:10px" alt="Facebook의 Button - 버튼의 높이 영역을 50px로 유지"></li><li>(Facebook) Button - icon <img src="/images/2021/02/04.png" style="margin-top:10px" alt="Facebook의 Button - 버튼의 터치영역을 44px로 유지"></li><li>(Airbnb) Input <img src="/images/2021/02/07.png" style="margin-top:10px" alt="Airbnb의 Button - input의 터치영역을 44px로 유지"></li><li>(토스) Button - fullfilled <img src="/images/2021/02/05.png" style="margin-top:10px" alt="Toss의 Button - 버튼의 터치영역을 58px로 유지 (wow)"></li></ol><a name="space-example"><h3 id="Space"><a href="#Space" class="headerlink" title="Space"></a>Space</h3><ol><li>(Material design) Dialog  <img src="/images/2021/02/09.png" style="margin-top:10px" alt="Material design의 Button 컴포넌트들 여백"></li><li>(Material design) Chips  <img src="/images/2021/02/14.png" style="margin-top:10px" alt="Material design의 Chips 컴포넌트들 여백"></li></ol><hr><p><strong>참고자료</strong></p><ol><li><a href="https://web.dev/accessible-tap-targets/" target="_blank" rel="noopener">Accessible tap targets</a></li><li><a href="https://developer.mozilla.org/ko/docs/Learn/CSS/CSS_layout/%EB%AF%B8%EB%94%94%EC%96%B4_%EC%BF%BC%EB%A6%AC_%EC%B4%88%EB%B3%B4%EC%9E%90_%EC%95%88%EB%82%B4%EC%84%9C" target="_blank" rel="noopener">미디어 쿼리 초보자 안내서</a></li><li><a href="https://material.io/design/usability/accessibility.html#layout-and-typography" target="_blank" rel="noopener">Material - Layout and typography</a></li><li><a href="https://material.io/develop/web/components/touchtarget" target="_blank" rel="noopener">Material - web - touch target</a></li><li><a href="https://material.io/design/layout/spacing-methods.html" target="_blank" rel="noopener">Material - Spaceing methods</a></li><li><a href="https://material-components.github.io/material-components-web-components/demos/index.html" target="_blank" rel="noopener">Material Web Components Catalog</a></li><li><a href="https://www.google.com/accessibility/for-developers/" target="_blank" rel="noopener">Google - 접근성을 고려한 개발</a></li><li><a href="https://developers.google.com/web/fundamentals/accessibility" target="_blank" rel="noopener">Google Web Fundamentals - Accessibility</a></li><li><a href="https://toss.im/" target="_blank" rel="noopener">toss</a></li><li><a href="https://www.uxmatters.com/mt/archives/2017/03/design-for-fingers-touch-and-people-part-1.php" target="_blank" rel="noopener">Design for Fingers, Touch, and People, Part 1</a></li><li><a href="https://www.uxmatters.com/mt/archives/2017/05/design-for-fingers-touch-and-people-part-2.php" target="_blank" rel="noopener">Design for Fingers, Touch, and People, Part 2</a></li><li><a href="https://www.uxmatters.com/mt/archives/2017/07/design-for-fingers-touch-and-people-part-3.php" target="_blank" rel="noopener">Design for Fingers, Touch, and People, Part 3</a></li><li><a href="https://m.blog.naver.com/viviang777/50171045913" target="_blank" rel="noopener">[피츠의 법칙] Fitts’ Law &amp; Paul M. Fitts</a></li></ol></a></a></a></a></a></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[UX/UI의 10가지 심리학 법칙]&lt;/strong&gt; 책을 읽으며 법칙별로&lt;br&gt;내용 요약 + 개인적으로 찾았던 레퍼런스 + 그밖에 자료들을 모아서 작성한 글입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a na
      
    
    </summary>
    
      <category term="04_UX 💅" scheme="http://feel5ny.github.io/categories/04-UX-%F0%9F%92%85/"/>
    
      <category term="Accessibility" scheme="http://feel5ny.github.io/categories/04-UX-%F0%9F%92%85/Accessibility/"/>
    
    
      <category term="UX" scheme="http://feel5ny.github.io/tags/UX/"/>
    
      <category term="Frontend" scheme="http://feel5ny.github.io/tags/Frontend/"/>
    
      <category term="UX Law" scheme="http://feel5ny.github.io/tags/UX-Law/"/>
    
      <category term="Fitts Law" scheme="http://feel5ny.github.io/tags/Fitts-Law/"/>
    
      <category term="Touch Target" scheme="http://feel5ny.github.io/tags/Touch-Target/"/>
    
      <category term="Accessibility" scheme="http://feel5ny.github.io/tags/Accessibility/"/>
    
  </entry>
  
  <entry>
    <title>프론트엔드 개발자에게 UX는? 연기에 몰입해서 나오는 배우들의 애드립</title>
    <link href="http://feel5ny.github.io/2021/01/10/UX%EC%99%80%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%EA%B0%9C%EB%B0%9C%EC%9E%90/"/>
    <id>http://feel5ny.github.io/2021/01/10/UX와 프론트엔드개발자/</id>
    <published>2021-01-10T11:00:00.000Z</published>
    <updated>2021-01-10T15:46:12.088Z</updated>
    
    <content type="html"><![CDATA[<p>피플웨어 책 초반에 이런내용이 나온다.</p><blockquote><p>.. 우리가 아는 프로젝트 대다수에서 그 어떤 기술적인 난관보다 사회적인 복잡도가 훨씬 더 컸다는 사실이 분명해 졌다. 그러면서, 불가피하게, 우리는 아주 속상한 겨론에 도달했다. 다분히 사회학이 기술보다 더 중요하다는 사실을 오랫동안 느낌으로 알아왔으면서도 정작 우리 중 누구도 그렇게 관리하려 시도하지 않는다는 사실이었다. 물론, 때때로 팀의 ㅎ벼력을 돕거나, 팀 내 긴장을 풀어주기 위해 사회학적인 방법을 사용하기도 했지만, 한번도 우리 업무의 본질이라 여기지 않았다. … - ‘피플웨어’ 중</p></blockquote><p>UX에 대해서 중요하다고 생각은 했는데, 항상 생각만하고 막상 공부나 여러가지 시도를 하지 못하고 있었다. 직감적으로는 알겠는데, 조금 더 스스로 정리하기 위해 해당 글을 작성하였다. 개인적인 견해이니 자유롭게 읽으면 좋을 듯 하다. </p><a name="growth"><h2 id="1-UX이전에-좀-먼-얘기부터-해보자-성장"><a href="#1-UX이전에-좀-먼-얘기부터-해보자-성장" class="headerlink" title="1. UX이전에 좀 먼 얘기부터 해보자.. 성장"></a>1. UX이전에 좀 먼 얘기부터 해보자.. 성장</h2><h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h3><ol><li>오래 일하려면 재밌게 일하고 공부해야함<ol><li>어떤 상황에서 재밌었지?</li><li>목적지향일때 -&gt; 공부도 그런방향으로 해야함</li><li>공부의 이유와 목적을 찾아서 우선순위를 지정해야함.</li></ol></li><li>공부해야할 영역을 찾기위해, 원래 역할을 다시 돌아보면<ol><li>웹을 잘 만들어야 한다. (완성도, 서비스 효용성)<ol><li>결국 누가 쓰냐? 사용자를 이해야함</li><li>내가 만드는 제품을 사용하는 사용자를 알게되면 어떤걸 원하는지, 그걸 위해 어떻게 만들고, 어떻게 해야 잘 만들지 알 수 있을 것</li></ol></li><li>사용자를 생각하는 것은 디자이너와 롤이 겹칠 수 있지만, 구현관점에서 프론트도 알아야함 (영역이 겹쳐서)<ol><li>알게된 후 아이디어를 낼 때 <strong>배우들의 애드립</strong>처럼 나오지 않을까 생각</li></ol></li><li>결론 : 사용자의 기저를 알면 프론트개발자도 충분히 아이디어를!</li></ol></li><li>사용자의 기저를 알기위해     <ol><li>UX 심리학 법칙을 읽어보며</li><li>그 기준으로 공부 방향을 잡아본다.</li></ol></li></ol><hr><p>웹개발자를 직업으로 갖으면서 이런 생각이 든다.</p><ul><li><strong>직</strong>) 즐겁고 재밌게 일하고, 시야를 넓혀서 융합적으로 접근하고 싶다.</li><li><strong>업</strong>) 개인적으로는 뭔가를 만들고, 피드백 받고 개선하며, 고도화하며 프러덕트를 더 잘 만드는 것을 기본적으로 좋아한다.</li><li>SO, -&gt; 공부를 꾸준히 해야한다. 재밌게! 그리고 오랫동안 일하고 싶다.</li></ul><p>제품을 잘 만들어서, 내 업의 성취감을 얻으려면 -&gt; 재밌고 오랫동안 일하고 공부해야한다.<br>그동안 재밌게 일했던 순간들은 언제였을까? 어떤 조건이 있었을까?</p><h3 id="1-1-재밌게-일하려면-어떤-상황이여야-하는지"><a href="#1-1-재밌게-일하려면-어떤-상황이여야-하는지" class="headerlink" title="1-1. 재밌게 일하려면, 어떤 상황이여야 하는지"></a>1-1. 재밌게 일하려면, 어떤 상황이여야 하는지</h3><p>프론트개발자로 일을 하면, 여러 유관부서와 협업하며 업무를 진행하게 된다. 디자이너뿐만아니라, 마케터, 기획자, 타 부서 엔지니어등. 그들은 내가 어떤 개발을 해야할지 알려주고, 개발을 요청해 오거나, 혹은 나 스스로가 일을 만들때도 있었다. 몇 년을 이렇게 프로젝트들을 진행하면서, 주변 피드백을 통해 나의 특이점을 찾게 되었는데, <strong>흥미가 있는 프로젝트이거나, 이유가 명확한 프로젝트일수록 업무의 생산성과 속도가 올라가곤 했다.</strong> 그리고 그 마음가짐이 오래간다. (근데 모.. 이는 모두가 같을 것이다.) (흥미의 포인트는 개인의 관점일수도, 서비스의 관점일 수도있다.) 여기에 같이 일하는 사람과의 합이 잘 맞을 경우 몇 배나 더 즐겁게 일했던 기억이 난다.</p><h4 id="목표지향적인-공부가-되기-위해서는"><a href="#목표지향적인-공부가-되기-위해서는" class="headerlink" title="목표지향적인 공부가 되기 위해서는?"></a>목표지향적인 공부가 되기 위해서는?</h4><p>이렇듯, 사람은 자신이 하는 일에 이유가 있다면, 업무 자체가 <strong>목표지향적</strong>이게 되어서 빠르게 치고 나갈 수 있는데, 최근 들어서 내가 공부하려는 프론트 skill들은 어떤 이유에서 비롯해서 공부해야하는지? 알긴알고 있지만, 그 이유, 동기들을 정리할 필요가 있다고 생각이 들었다. 굳이 모든 일에 이유를 찾을 필요는 없지만, 조금 더 재밌게 하기위해서는? 시간을 효율적으로 나눠서 공부하기 위해서는? 조금더 근본적인 이유를 찾을 필요는 있는 듯 하다. 그리고 공부가 재밌는 순간은 공부한 내용을 <strong>바로 활용할때..!</strong>이니, 이또한 고려가 되어야한다.</p><h3 id="1-2-이유를-찾기-위한-공부할-주제와-성격"><a href="#1-2-이유를-찾기-위한-공부할-주제와-성격" class="headerlink" title="1-2. 이유를 찾기 위한, 공부할 주제와 성격"></a>1-2. 이유를 찾기 위한, 공부할 주제와 성격</h3><p>인터넷에 돌아다니는 XXX 로드맵들을 보고 있으면, 참 공부해야할게 많다. 브라우저 엔진에 대하여, 사용하는 언어의 최신문법, 특정상황에 필요한 기술들, 성능향상을 위한 알고리즘, 네트워크, DB, 아키텍처, 패러다임, 디자인 패턴 …<br>모두가 중요하지만 오랫동안 재밌게 공부하기 위해서는, 공부할 내용의 성격, 분량, 목적 등을 정리해서, 꾸준히 공부할 수 있도록 해야한다고 생각했다.</p><img src="https://miro.medium.com/max/2400/1*qan3U0peL-CSdtKaCwKohA.png"><h4 id="나의-역할을-다시-되돌아보자-프론트엔드-개발자"><a href="#나의-역할을-다시-되돌아보자-프론트엔드-개발자" class="headerlink" title="나의 역할을 다시 되돌아보자. (프론트엔드 개발자)"></a>나의 역할을 다시 되돌아보자. (프론트엔드 개발자)</h4><p>웹 개발자는 웹 어플리케이션을 만들고, 사용자는 우리의 웹 서비스를 필요한 상황에 고용하여 사용한다. 사용자는 서비스를 사용하면서, pain point를 개선하게 되고, 이런 혜택을 제일 잘 얻을 수 있는 어플리케이션을 maker들은 ‘잘’ 만들어야한다. 나의 position은 maker에 속하며, 유저가 잘 인지하게 하고, 잘 input하고, 잘 피드백받을 수 있는 <strong>인터페이스</strong>를 ‘구현’하는 역할이다. </p><h4 id="웹을-잘-만들어야한다-완성도-서비스-효용성"><a href="#웹을-잘-만들어야한다-완성도-서비스-효용성" class="headerlink" title="웹을 잘 만들어야한다. (완성도, 서비스 효용성)"></a>웹을 잘 만들어야한다. (완성도, 서비스 효용성)</h4><p>인터페이스를 만드는 maker에는 여러 유관부서가 기여하게 된다. PO, 디자이너, 클라이언트 개발자 등. 여기서 기여의 비중이 높은 순으로는 디자이너, 클라이언트 개발자라고 생각하는데 이 두 부서간의 교집합은 크다. 클라이언트 개발자가 백엔드 개발자와 커뮤니케이션을 많이 하는 만큼, 디자이너와의 커뮤니케이션 비중도 높다. </p><ul><li>백엔드 개발자와는 <strong>프러덕트 구현의 퀄리티</strong>를 높이기 위해서 커뮤니케이션을, </li><li>디자이너와는 <strong>프러덕트 사용성의 퀄리티</strong>를 높이기 위해서 커뮤니케이션을 한다. </li></ul><p>즉, 구현을 위해서는 시스템의 이해도, 기술력의 이해도를 높여하고, <strong>사용성의 퀄리티를 올리기 위해서는 사용자 맥락의 이해도를 올려야한다.</strong> </p><h4 id="결국-누가쓰나-사용자를-이해해야한다"><a href="#결국-누가쓰나-사용자를-이해해야한다" class="headerlink" title="결국 누가쓰나? 사용자를 이해해야한다."></a>결국 누가쓰나? 사용자를 이해해야한다.</h4><p><strong>‘잘’ 만들려고는 하고 있다.</strong></p><ul><li>구현관점에서 이해도를 높이기 위해 기본적인 공부는 꾸준히 진행하며, 어느 정도 실무를 통해서도 자연스럽게 진행하고 있다. 그리고 이쪽은 나름? 우선순위 정리가 되었다. (도움을 준 책은 의외로 : 객체지향의 사실과 오해) </li><li>하지만 사용자 맥락의 이해를 올리는 부분은, 중요하다는 인지는 하지만, 막상 업무의 본질로써는 수면위로 올리지 못했다. <ul><li>아마 구현을 위한 공부에 여유가 없어서일 가능성이 있다. </li><li>혹은 디자이너라는 포지션이 있기때문에 나의 영역은 아니라고도 생각하기도 했다.</li></ul></li></ul><h4 id="디자인-영역과-교집합에서의-UX"><a href="#디자인-영역과-교집합에서의-UX" class="headerlink" title="디자인 영역과 교집합에서의 UX"></a>디자인 영역과 교집합에서의 UX</h4><img src="https://bradfrost.com/wp-content/uploads/2016/02/frontend-design.gif" alt="Frontend Design"><p>여러가지 프로젝트를 하면서, 프론트개발자는 시각적인 부분을 구현하는 역할이지만, 제일 큰 <strong>킬링 포인트</strong>라고 생각되는 점은<br>구현 관점에서도 사용성을 올릴 수 있는 <strong>디테일한 포인트를 캐치할 수 있는 역할</strong>이 프론트개발자라고도 생각이 들었다.</p><ol><li>프론트 개발자만이 할 수 있는 UX개선 (구현 기술력이 요구되는)</li><li>프론트 개발자와 디자인의 교집합에 있는 UX 개선 (구현과 시각화 사이)</li><li>디자이너가 더 잘 고민할 수 있는 UX개선이 있다고 본다. (시각화)</li></ol><p>의외로 구현하면서 “생각해보니 이렇게 하는게 좋지 않을까요?”라는 말을 많이 했던 기억이 난다. </p><h4 id="프론트-개발자의-UX개선은-‘몰입해야-나오는-배우들의-애드립’과-비슷"><a href="#프론트-개발자의-UX개선은-‘몰입해야-나오는-배우들의-애드립’과-비슷" class="headerlink" title="프론트 개발자의 UX개선은 ‘몰입해야 나오는 배우들의 애드립’과 비슷?"></a>프론트 개발자의 UX개선은 ‘몰입해야 나오는 배우들의 애드립’과 비슷?</h4><p>즉, </p><ul><li>1번은 필수적으로 고민하고 진행해야하는 부분, </li><li>2번은 협업관점에서 잘 커뮤니케이션하고 전달하기 위해서는, 감각에 의지하지말고, 개념적인 부분을 공부를 하며 끌어올려야하는 영역이라고 생각한다. <ul><li>그리고 2번의 개념이 올라가고 익숙해지면, </li><li>마치 배우들이 연기를 하다가 연기 몰입해서 애드립을 내듯이 프론트개발자도 디자이너와의 합이 잘 맞으면서 적합한 애드립이 튀어나오지 않을까 싶다. </li><li>이는 반대로 디자이너가 개발을 배워도 같은 효과. (= 융합의 꽃)</li></ul></li><li>3번은 디자이너분들의 역할. 3번 영역은 디자이너분의 의견을 존중한다!!</li></ul><img src="https://2.bp.blogspot.com/-0OCJZpfIMxA/W1LbTUj07nI/AAAAAAAABqY/VrBENQeXuxk58FnRuaK1uDlVRsgaMflTACLcBGAs/s1600/01%2B%25ED%2586%25A0%25EB%258B%2588%2B%25EB%258C%2580%25EC%2582%25AC%2B%25281%2529.gif" alt="로다주의 애드립력.."><p>이 외에도 단순하게 생각하면, 서비스의 수명이 오래가기위해서는 결국에는 두가지 포인트는(퀄리티 관점, UX관점) 병렬로 꾸준히 유지되어야 한다고 생각한다.<br>프론트 개발자도 이 2가지를 같은 레벨로 계속 습득하고, 유지해야한다.</p><h4 id="사용자의-본질을-공부해서-서비스의-효용성-전달력을-높이는데-주력하자"><a href="#사용자의-본질을-공부해서-서비스의-효용성-전달력을-높이는데-주력하자" class="headerlink" title="사용자의 본질을 공부해서 서비스의 효용성, 전달력을 높이는데 주력하자."></a>사용자의 본질을 공부해서 서비스의 효용성, 전달력을 높이는데 주력하자.</h4><p>요즘에는 가이드 툴, 프로토타이핑 툴, 인터렉션을 가이드할 수 있는 여러가지 도구가 나오면서, 디자이너가 사용성을 고민하고 시각화를 하거나 가이드안을 산출하는 상황이 많지만, 도움을 줄 수 있는 도구가 나왔다고 해서, 본질적인 부분, 즉 이 교집합인 부분의 지식을 습득하는 것은 여전히 중요하다고 생각한다. </p><img src="https://miro.medium.com/max/6400/1*giatPggr8L1CCEsZOIGRWQ.png" alt="Designers tool stack of 2020"><p>프러덕트 개발은 항상 리소스는 한정되어있는 상황에 마주한다. 이런 상황에서도 좋은 퀄리티의 제품을 만들기 위해서는, 정확한 방향을 잡고, 병렬적으로 여러 사람이 제한된 시간에 많은 아이디어를 내고, 디테일한 부분까지 챙기면서 구현하는 것이 이상적이지만 중요한 부분이라고 생각한다.</p><h4 id="그래도-우선순위는-완성도"><a href="#그래도-우선순위는-완성도" class="headerlink" title="그래도 우선순위는 완성도"></a>그래도 우선순위는 완성도</h4><p>프론트 개발자의 성장관점에서는 구현의 퀄리티와 사용성의 퀄리티의 우선순위로 보면, 당연히 구현완성도를 높이는 기술력 습득이 1순위이다.</p><a name="How"><h2 id="2-어떻게-접근해볼까-어떻게-정리해볼까"><a href="#2-어떻게-접근해볼까-어떻게-정리해볼까" class="headerlink" title="2. 어떻게 접근해볼까? 어떻게 정리해볼까?"></a>2. 어떻게 접근해볼까? 어떻게 정리해볼까?</h2><blockquote><p>사용자 경험 패턴을 지식으로 습득하지 않고, 기저에 있는 심리학 법칙을 이해하고 사용한다면, 훨씬 더 설득력 있는 인터페이스로 이어질 것이다. - UX/UI의 10가지 심리학 법칙</p></blockquote><p>내가 왜 이 기능을 구현해야하는지. 이 부분은 왜 기본적으로 지켜야하는지를 알기 위해 사용자의 근본적인 심리학과 관련된 책을 읽어보고자 한다. 책은 [UX/UI의 10가지 심리학 법칙]이며, 아마.. 이 책을 다 읽으면 다른 책을 선택해보지 않을까 싶다.<br>해당 책은 10가지 심리학 법칙이 나오는데, 법칙들을 읽으면서, 이런 기본적으로 갖고 있는 심리를 유지하기 위해서는 어떤 기술력이 필요로할지 정리하고, 앞으로의 공부방향과 공부분야의 중요성을 이 법칙을 기준으로 정리해보고자한다. 또한 이런 심리를 고려해서 어떤식으로 구현했는지를 정리해보고자한다.  </p><p><strong>두 분야 다 알야아하는 부분</strong></p><ul><li>제이콥의 법칙 : 관습은 유지한다. 멘탈모델은 유지하면서 개선</li><li>힉의 법칙 : 인지 부하를 줄여햐한다.</li><li>테슬러의 법칙 : 복잡성을 낮춘다. (추상화의 개념과 굉장히 유사)</li></ul><p><strong>구현관점</strong></p><ul><li>피츠의 법칙 : 입력 사용성 올리기</li><li>포스텔의 법칙 : 어떤 상황에서도 일관되게 -&gt; 디자인시스템, 접근성, 반응형</li><li>피크엔드 법칙 : 최고의 순간을 극대화 -&gt; 시각적 요소 이용, 모션 이용</li><li>도허티 임계 : 체감 성능을 높인다. -&gt; 성능 최적화, 속도개선, …</li></ul><p><strong>시각디자인 관점</strong></p><ul><li>심미적 사용성 효과 : 레이아웃, 위치 포지션</li><li>폰 레스토프 효과 : 특정 맥락에서의 강조 효과</li></ul></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;피플웨어 책 초반에 이런내용이 나온다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.. 우리가 아는 프로젝트 대다수에서 그 어떤 기술적인 난관보다 사회적인 복잡도가 훨씬 더 컸다는 사실이 분명해 졌다. 그러면서, 불가피하게, 우리는 아주 속상한 겨론에 
      
    
    </summary>
    
      <category term="04_UX 💅" scheme="http://feel5ny.github.io/categories/04-UX-%F0%9F%92%85/"/>
    
      <category term="Notion" scheme="http://feel5ny.github.io/categories/04-UX-%F0%9F%92%85/Notion/"/>
    
    
      <category term="UX" scheme="http://feel5ny.github.io/tags/UX/"/>
    
      <category term="Frontend" scheme="http://feel5ny.github.io/tags/Frontend/"/>
    
  </entry>
  
  <entry>
    <title>2020 상반기 회고, 남은 2020년은?</title>
    <link href="http://feel5ny.github.io/2020/11/15/2020-%EC%83%81%EB%B0%98%EA%B8%B0-%ED%9A%8C%EA%B3%A0/"/>
    <id>http://feel5ny.github.io/2020/11/15/2020-상반기-회고/</id>
    <published>2020-11-15T11:00:00.000Z</published>
    <updated>2020-11-15T12:42:48.675Z</updated>
    
    <content type="html"><![CDATA[<p>벌써 11월 중순이다. 60일도 안 남았다.<br>올해는 6월,7월에 상반기 회고를 하지 못했다. 정신이 없었던 것도 있고, 여러가지 이벤트가 많았다는 핑계를 대고싶긴 하지만.. 회고는 하면 할수록 스스로를 돌아볼 수 있는 계기가 되어서, 잊지말고 나를 위해서라도 해야겠다는 생각이 든다. 사실 개인적인 솔직한 회고는 한달에 한번씩 진행하고 있고, 이또한 꾸준히 하려고 노력하고 있다. 앞으로 꾸준히 IT에서 즐겁게 일하기 위해서..! </p><a name="2020"><h1 id="작년-계획-잘-지켰을까"><a href="#작년-계획-잘-지켰을까" class="headerlink" title="작년 계획, 잘 지켰을까?"></a>작년 계획, 잘 지켰을까?</h1><p><a 12 22 2019 href https: feel5ny.github.io joylog_004 "">2019 회고 + 2020 다짐 (feat. 글또) ➔</a></p><p>작년 글을 보면, 웹 프론트엔드 개발자로써, 실력향상을 위해서 잡아두었던 계획들이 있었다. 구체적인 일정이나 어떤 방법으로 공부할지는 작성하진 않았었고, 우선순위, 중요도 정도로 작성해두었는데, 결론은 ㅎㅎ 하나도 못했다.. 대신 다른 관심있는 분야 위주로 공부를 하긴했는데, 잡아두었던 방향과는.. 유사한부분도 있고, 아닌 부분도 있다.</p><img src="/images/2020/11/01.png" alt="작년에 다짐했던 개인공부 계획"><h2 id="1-1-개인공부-🧐"><a href="#1-1-개인공부-🧐" class="headerlink" title="1.1. 개인공부 🧐"></a>1.1. 개인공부 🧐</h2><p><strong>요약 회고</strong><br>요즘 나의 공부스타일로 봐서는, 아예 날짜를 정해서 계획하고 실행했으면 공부를 했을텐데, 블로그에만 작성하고 다른 관심사가 생기면 해당건들을 공부하거나, 현실에 더 필요한 분야를 공부하다보니 놓쳤던 듯 하다.</p><h3 id="토이프로젝트-데이터-기반-특정-주제에-대한-리포팅-웹페이지-제작"><a href="#토이프로젝트-데이터-기반-특정-주제에-대한-리포팅-웹페이지-제작" class="headerlink" title="토이프로젝트 : 데이터 기반 특정 주제에 대한 리포팅 웹페이지 제작"></a>토이프로젝트 : 데이터 기반 특정 주제에 대한 리포팅 웹페이지 제작</h3><ul><li>달성률 : 30%</li></ul><p>음.. 어떻게보면 오히려 해당 프로젝트는 회사에서 유사하게 진행하였다. 다만, 토이프로젝트에서 녹이고 싶었던 부분은, 조금 더 <strong>인터렉션</strong> 기술이 많이 녹아져 있는 페이지였으면 좋겠다는 생각이였는데, 회사 프로젝트로는 정말 딱 <strong>통계 프로젝트</strong> 형식으로 진행되고 있어서, “데이터 기반” 이라는 컨셉은 같았지만, 원하는 리포팅 페이지 스타일은 아니였다.<br>그래도 데이터 기반으로 어떻게 집계해서 보여주는게 좋을지 등등 <strong>통계화면에 대한 기획</strong>은 배울 수 있었다.</p><h3 id="Big-덩어리-큰-공부-🙅‍♀️"><a href="#Big-덩어리-큰-공부-🙅‍♀️" class="headerlink" title="Big(덩어리 큰) 공부 🙅‍♀️"></a>Big(덩어리 큰) 공부 🙅‍♀️</h3><ul><li>자료구조 공부 / 디자인 패턴 공부</li><li>둘다 달성하지 못했다.😞 </li><li><strong>디자인 패턴</strong>의 경우 최근에 공부할 의지가 생겨서, 사내에서든 외부에서든 책모임 스터디를 오픈하려고 준비하는 중이다. 다만, 저번에 진행했던 <a href https: github.com bookcrush httpperfectguide"">HTTP 완벽가이드 책모임</a>과 같이 이론만 개인적으로 공부하고 정리하는 스타일로는 어려울 듯 하여, 실습위주로 같이 스터디하되, 어떤 멤버로, 어떤 방법으로 진행하는 것이 제일 적합한지를 고민중이다. 현재 사내에서도 실습이 조금 가미된 개발스터디를 진행하고 있는데, 이참에 실습이 포함된 스터디는 어떻게 진행하면 좋을지 고민해 보려고 한다.</li></ul><h3 id="Small-덩어리가-작은-공부-🙅‍♀️"><a href="#Small-덩어리가-작은-공부-🙅‍♀️" class="headerlink" title="Small(덩어리가 작은) 공부 🙅‍♀️"></a>Small(덩어리가 작은) 공부 🙅‍♀️</h3><ul><li>구글 web fundamentals / 자바스크립트 공부</li><li>둘다 달성하지 못했다.😞 </li><li>구글 web fundamentals은 회사에서만 작업하는 프론트엔드 방향 이외에 흥미를 올릴 수 있는? 주제들이 모여있어서, 회사일이 지겨울때나, 흥미있는 개발주제를 알고 싶을 때, 보기 좋은 글들이 존재한다. </li><li>이 페이지의 정보들은 타이트하게 잡기보다는.. 텀을 두고 읽어볼 거리로 남겨두면 좋을 듯한데, 이번 글또 때 다 보는 걸 목표로 삼아도 좋겠다는 생각이 든다.</li></ul><h2 id="1-2-2020-다짐"><a href="#1-2-2020-다짐" class="headerlink" title="1.2. 2020 다짐"></a>1.2. 2020 다짐</h2><img src="/images/2019/46/07.jpg" alt="2019 하반기에 잡은, 2020 다짐"><ol><li>🦠 <strong>내공 다지기</strong> : 코로나 때문에도 그랬지만, 오프라인 활동은 못했다. 다만, 발표도 책모임등의 외부할동은 진행했던 듯 하다. 내실을 다지는 작업도 놓지지 않았던 듯하다.</li><li>🦠 <strong>건강, 휴식</strong> : 내면의 건강과 휴식을 위해서 해외 여행을 생각했지만 코로나 때문에 진행되지 못했다.</li><li><strong>다른 분야 책 3권 읽기</strong> : 마케팅과 데이터쪽 책을 꽤 읽게 되었던 해였다. 중간부터 점점 개발책을 안 읽게 되었다는 생각에 현타가와서 개발 외의 읽을 책의 비율을 낮추긴 했다. 특히 “경제”라고 했던 ㅎㅎ 부분은 이루지 못했다.</li><li>🦠 <strong>헬스</strong> : 필라테스를 시작하려 했으나 이 또한 코로나.. </li></ol><a name="insight"><h1 id="올해-있었던-Event와-Insight"><a href="#올해-있었던-Event와-Insight" class="headerlink" title="올해 있었던 Event와 Insight"></a>올해 있었던 Event와 Insight</h1><p>올해는 정말 다이나믹한 해였다. 다양한 일을 해보면서, 개인적으로는 내가 잘 하는 부분, 노력하면 잘 될것 같은 부분, 잘 못하는 부분 등. 여러가지 성찰도 해보고, 개발자로써는 어떻게 크로스되는 방향으로 나아가야할지, 그리고 어떻게 하면 <strong>함께 잘 일을 해야할지</strong>. 고민을 많이 했던 해라고 생각된다. 그리고 그 고민의 해결에는 주변에 도와주는 많인 이들과 <strong>책이 있었다.</strong></p><h2 id="함께-잘-일하는-법"><a href="#함께-잘-일하는-법" class="headerlink" title="함께 잘 일하는 법"></a>함께 잘 일하는 법</h2><p>올해는 기존에 같이 일하는 분들 이외에 비개발자 직군들과 새로 입사하신 개발자분들 등, 나와 다른 관점을 가진 사람들과 일하는 상황이 많이 있었는데, 그때마다 어떻게 일을 해야 효율적인지(<strong>생산성</strong>), 어떻게 커뮤니케이션을 해야 효율적이고 피로도가 덜 쌓일지(<strong>프로세스</strong>), 어떤 태도를 가져야 곱하기로 나아갈 수 있을지 고민을 많이 하게 되었다.<br>때문에 시간할당이 개발에만 몰리진 않았었는데, 처음 있는 일이다보니, 혼란이 왔지만(내가 이런 고민을?), <strong>결론적으로는 팀을 위한 고민이다 생각을 하니, 같은 업무 레벨로 봐야겠다는 생각이 들었다.</strong></p><img src="/images/2020/11/02.jpeg" alt="피플웨어 중"><p>이 고민의 해결에는 <strong>책이 정말 많이 도움</strong>이 되었다. 그 중에 꼽자면, <strong>피플웨어</strong>라는 책과 <strong>함께 자라기</strong>라는 책이 있는데, 함께 자라기는 입사하고 완전 주니어시절에 읽었지만, 올해 다시 읽어보면서 2년이 지난 이 시점에 또 다른 면을 볼 수 있게 되었다.<br>피플웨어라는 책은 개발자가 읽기보다는 개발자와 함께 일하는 <strong>비개발직군들도 꼭!! 읽어야하는 필수책</strong>이라고 생각한다. <strong>지식노동자인 개발자와 건강하게 함께 일할 수 있는 노하우</strong>가 담겨져 있는 책이라고 생각한다.</p><img src="/images/2020/11/03.png" alt="사내 테크톡때 발표했던 '함께 자라기'"><h2 id="함께-잘-일할-수-있는-문화"><a href="#함께-잘-일할-수-있는-문화" class="headerlink" title="함께 잘 일할 수 있는 문화"></a>함께 잘 일할 수 있는 문화</h2><p>기존에 존재하고 있던 분위기에서 어떤 문화를 녹이는 것을 많은 시도가 필요하다. 계속 나아갈 것은 유지하고, 개선해야할 부분은 하나씩 개선해나가면서, 우리에 맞는 색을 찾는 것이 중요하다고 생각한다. 그렇게 만들게 된 회사의 분위기와 문화로 인해 어느새 회사에서 일하는 업무가 내가 일하고 싶은 업무로 변하게 되고, 이는 나의 성장과 회사의 성장이 일치되는 순간이라고 생각한다. 이런 분위기에서 낼 수 있는 시너지란 곱하기 이상, 제곱이 될 수 있지 않다.</p><p> 개발자가 재밌게 일하고 잘 일하게 만드는 문화란 무엇일까 고민하며, 우리의 상황에 맞게 만들어가려고 팀 내에서는 많은 고민을 하고 있다. 여러 번의 회고 등을 통해서 하나씩 잡아가고 있으며, 이런 과정이 잘 이루어지고 다른 포지션에도 전파되길 기대하고 있다.</p><h2 id="책-공부-습관"><a href="#책-공부-습관" class="headerlink" title="책 공부 습관"></a>책 공부 습관</h2><p>올해는 여러가지 분야에 대해 알야아하는 환경이 되다보니, <strong>모르는 분야를 접하는 순간</strong>도 많았고 때문에 이를 해소하기 위해서 스터디, 인강, 책 등 <strong>여러가지 공부 방법</strong>을 찾아보려고 했다. 시도 끝에 <strong>책을 보는 것을 메인</strong>으로 잡고, 나머지는 스터디나 인강을 통해서 보충하거나 다른 시야를 접하는 방식이 나한테 맞는 공부법이라는 것을 깨달았다.<br>또한, 작년에 진행했던 http 완벽가이드 스터디를 (마지막에는 살짝 흐지부지 됐지만) 마친 후, 책을 보는 것에 대한 두려움이 예전보다 많이 감소했다. 특히나 이 책이 400쪽 가까이 되는 두꺼운 책이어서 더더욱 그랬던 듯 하다. </p><img src="/images/2020/11/05.png" alt="다양한 분야에 관심이 많아졌"><p>그리고 올해는 6월부터 PO 책모임인 프만사(프러덕트 만드는 사람들)라는 책모임에 참여하면서 습관 붙이기에 더 불이 붙었던 듯 하다. 물론 이 모임도 중간에 정신없는 상황때문에 참여가 더디긴했지만, 책을 읽고 모임때는 모임장이 발제한 질문에 서로 얘기하는 분위기가 책에 대한 거부감을 줄여주었던 것도 있었다. 특히나 모임장인 민지님의 독서 열정을 보고 있으면, 더더욱 큰 효과가..</p><img src="/images/2020/11/04.png" alt="나영쓰 책목록"><p>외부 책모임에서 얻은 좋은 경험을 사내에도 전파하고 싶어서, 여러가지 책모임들을 스멀스멀 진행해보았었다. 제일 재밌었던 책은 “빅데이터를 통한 예측마케팅”이라는 책과 “손에 잡히는 10분 정규표현식”이였는데, 책을 읽고 책모임 인원들이 회사의 업무에 바로 적용하던 모습이 인상깊어서 그랬던 거 같기도 하다.</p><img src="/images/2020/11/06.png" alt="나영쓰 책목록"><a name="last-2020"><h1 id="한달-반-남은-2020년과-글또-5기-다짐"><a href="#한달-반-남은-2020년과-글또-5기-다짐" class="headerlink" title="한달 반 남은 2020년과 글또 5기 다짐"></a>한달 반 남은 2020년과 글또 5기 다짐</h1><p>내년 상반기까지 글또에 글을 작성할 예정이다. 13번의 글을 작성한다고 하는데, 어떤 글을 써볼까</p><h2 id="주제고민"><a href="#주제고민" class="headerlink" title="주제고민"></a>주제고민</h2><ol><li>개발 공부<ol><li>프론트엔드 기반 공부</li><li>패러다임 공부</li><li>패턴 공부</li><li>다른 언어 공부</li></ol></li><li>삽질기<ol><li>어떤 경험을 통해 알게된 내용을 정리해서 글을 올리자.</li></ol></li><li>믹스해서 작성해보기<ol><li>개발자인데 마케팅을 안다면?<ul><li>매체 + 유저 베이스 + 데이터를 혼합한.. 뭔가의 글을 쓰지 않을까</li><li>퍼포먼스 마케팅과 유사한 주제를 개발자입장에서 작성하지 않을까 싶다.</li></ul></li></ol></li></ol><h2 id="지양해야할-주제와-지향해야할-주제"><a href="#지양해야할-주제와-지향해야할-주제" class="headerlink" title="지양해야할 주제와 지향해야할 주제"></a>지양해야할 주제와 지향해야할 주제</h2><ol><li>지양해야할 글 - <strong>정리 글</strong> : 책 정리글은 노션에 1차적으로 정리하고, 책을 읽고 난 생각이나 인사이트들을 개인이 특정 주제를 발제를 하던지해서, 인사이트 형태로만 블로그에 올려야겠다는 생각이 든다.</li><li>지향해야할 글 - <strong>인사이트</strong></li></ol><p>올해는 코로나의 여파일지는 모르겠지만, 참 순식간에 지나갔다.<br>빠르게 지나가는만큼, 기록과 회고는 중요하니 <strong>꾸준히</strong> 성찰, 개인 성장, 함께 성장, 되돌아보기를 지치지 않게 해나가보자!</p></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;벌써 11월 중순이다. 60일도 안 남았다.&lt;br&gt;올해는 6월,7월에 상반기 회고를 하지 못했다. 정신이 없었던 것도 있고, 여러가지 이벤트가 많았다는 핑계를 대고싶긴 하지만.. 회고는 하면 할수록 스스로를 돌아볼 수 있는 계기가 되어서, 잊지말
      
    
    </summary>
    
      <category term="blog 🙆" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/"/>
    
      <category term="JoyStory" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/JoyStory/"/>
    
    
      <category term="Joy" scheme="http://feel5ny.github.io/tags/Joy/"/>
    
      <category term="blog" scheme="http://feel5ny.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>고객 Profiling (3장)</title>
    <link href="http://feel5ny.github.io/2020/07/03/Communication_004/"/>
    <id>http://feel5ny.github.io/2020/07/03/Communication_004/</id>
    <published>2020-07-03T14:23:55.000Z</published>
    <updated>2020-07-05T08:20:46.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><h1 id="고객-프로파일링"><a href="#고객-프로파일링" class="headerlink" title="고객 프로파일링"></a>고객 프로파일링</h1><ul><li>고객 데이터를 활용하여 새로운 성장 기회를 찾거나, 고객을 초정밀 타겟팅하기 전에</li><li>먼저 고객 데이터 자체를 <strong>통합하고 클렌징</strong>하고 분석해야 한다.<ul><li>결코 쉬운일이 아니다!!</li></ul></li></ul><a name="quantity"><h2 id="얼마나-많은-데이터를-수집할-것인가"><a href="#얼마나-많은-데이터를-수집할-것인가" class="headerlink" title="얼마나 많은 데이터를 수집할 것인가"></a>얼마나 <code>많은</code> 데이터를 수집할 것인가</h2><ul><li>각 개인 고객은 매일 수백개의 데이터 포인트를 생성하며, 여기에 수천 또는 수백만명의 고객을 곱하면 진정한 고객 빅데이터를 얻을 수 있다.<ul><li>데이터의 양, 다양성, 속도가 큰 경우 빅데이터라고 한다.</li></ul></li><li>가장 중요한 설계 원칙은 <strong>목표를 염두에 두고 시작하는 것</strong>이다.</li></ul><a name="principle"><h2 id="데이터-수집을-위한-설계-원칙"><a href="#데이터-수집을-위한-설계-원칙" class="headerlink" title="데이터 수집을 위한 설계 원칙"></a>데이터 수집을 위한 <code>설계 원칙</code></h2><ul><li>수집된 데이터 : 빈도, 파생데이터, 세분가능성</li><li>이걸갖고 뭘? : 유추하고자하는 <strong>인사이트</strong>, <strong>실행</strong>가능성,</li><li>데이터 관리 : 정합성, 신상정보 충실도, 저장, 접근성</li></ul><h3 id="수집된-데이터"><a href="#수집된-데이터" class="headerlink" title="수집된 데이터"></a>수집된 데이터</h3><ul><li><p><strong>빈도</strong> : 얼마나 자주, 어떤 촉발이벤트에 의해 데이터를 수집할 것인가?</p></li><li><p><strong>파생 데이터</strong> : 파생 데이터는 원 데이터에서 <strong>의미를 추추출하여 만든 데이터 요소</strong>이다.</p><ol><li><p>웹사이트를 방문하고 </p></li><li><p>제품을 5회 탐색한 후 </p></li><li><p>7일 이내에 상점에서 구입하는 고객은 </p><p>⇒ 온라인으로 정보를 수집하지만, 오프라인에서 구매하는 고객이라고 분류할 수 있다.</p></li></ol></li><li><p><strong>세분 가능성</strong> granularity : 웹 데이터는 클릭 하나하나 각기 수집될 수 있고 웹 세션에 대한 요약만으로 충분한 경우들도 있다.</p></li></ul><h3 id="이걸갖고-무엇을"><a href="#이걸갖고-무엇을" class="headerlink" title="이걸갖고 무엇을?"></a>이걸갖고 무엇을?</h3><ul><li><strong>유추하고자 하는 인사이트</strong><ul><li>고객의 구매력 상승 여력을 예측하는 것이 목표인 경우<ul><li>고객이 구매하는 제품의 유형</li><li>고객이 거주하는 지역의 우편번호가 중요하다.</li></ul></li><li><strong>유추하고자 하는 인사이트가 데이터 수집 대상을 결정한다.</strong></li></ul></li><li>실행가능성 <strong>액션!!</strong><ul><li>수집된 데이터는 직접 또는 간접적으로 <strong>실행</strong>으로 이어질 수 있어야 한다.</li><li>스포츠에 대한 고객의 관심 여부를 모았을 때,<ul><li>그러한 정보는 스포츠 용품 판매업자에게는 실행으로 이어질 수 있지만,</li><li>세무 컨설팅을 하는 회사의 경우는 그렇지 않다.</li></ul></li></ul></li></ul><h3 id="데이터-관리"><a href="#데이터-관리" class="headerlink" title="데이터 관리"></a>데이터 관리</h3><ul><li><strong>정확성</strong> :<ul><li>연령을 물어보면 일부 고객들은 아무렇게나 답변을 입력한다.</li><li>특히 마케터가 이를 컨텐츠 열람을 위한 사전 조건 또는 가입을 위해 사용하는 경우 더욱 그런 경우가 많다.</li><li>마케터는 <strong>대체값 삽입을 통해 이러한 부정확성에 대처</strong>해야 한다. 결측값 대체는 누락된 값을 대체값으로 대신하는 프로세스이다.</li></ul></li><li><strong>신상정보 충실도 :</strong><ul><li>마케터는 고객의 신상정보 충실도를 높이기 위해 누적 프로파일링을 사용하여 고객 데이터를 수집하고자 하는 경우가 많다.</li></ul></li><li><strong>저장 :</strong><ul><li>데이터를 얼마나 많이 또는 얼마나 오래 보관할지는 데이터의 시의성에 따라 다르다.</li><li>웹 브라우징 데이터는 몇 주가 지나면 관련성이 없어지지만, 구매 데이터는 수년간 관련성이 유지된다.</li></ul></li><li><strong>접근성 :</strong><ul><li>수집된 데이터는 분석 및 실행을 위해 마케터가 엑세스할 수 있어야 한다.</li><li>고객 데이터가 사일로 안에 갇혀서 현업 마케터가 액세스 할 수 없는 경우가 너무 자주 발생한다.</li></ul></li></ul><h2 id="어떤-유형의-데이터를-수집할-것인가"><a href="#어떤-유형의-데이터를-수집할-것인가" class="headerlink" title="어떤 유형의 데이터를 수집할 것인가"></a>어떤 유형의 데이터를 수집할 것인가</h2><ul><li>전통적 마케터 : 구매데이터, 고객의 인구사회학적 데이터 사용</li><li>요즘 : 일시적 정보를 제공해주는 행위데이터 포인트에도 더 많이 액세스<ul><li>일시적 정보는 <strong>맥락을 추출하고 마케팅을 적시에 고객과 더욱 관련성 있게</strong> 만드는 데 사용될 수 있다.</li></ul></li><li>예_ 마비<ul><li>90%거래에서 각 고객을 확인할 수 있었다.<ol><li>목표와 측정을 제대로 설정했고, 항상적으로 개선에 집중</li><li>수집한 데이터를 이용하여 고객을 즐겁게 함</li><li>매장 직원은 그로인한 이점을 목격했고, 왜 자신들이 그 러한 일을 하는지에 대해 항상 교육을 받았다.</li></ol></li></ul></li></ul><a name="prepare"><h2 id="분석을-위한-데이터-정비"><a href="#분석을-위한-데이터-정비" class="headerlink" title="분석을 위한 데이터 정비"></a>분석을 위한 데이터 정비</h2><ul><li>불량한 또는 불완전한 고객 데이터 프로파일을 바탕으로 고객 세분화나 예측 모델을 구축하면, 고객에게 잘못된 추천을 하게 된다.<br>= 데이터와의 씨름은 업무에서 거대한 부분을 차지한다.</li><li>한 고객에 대한 싱글뷰 <strong>sigle view</strong>가 없이는, 개별고객에 대한 진정한 이해나 고객 트랜드에 대한 결론을 이끌어 내는 것이 불가능하다.<ul><li>어떤 사람이 자주 웹사이트를 탐색하지만, 최종적으로는 항상 매장에서 구매한다면, 웹사이트에서는 이 사람을 ‘낮은가치’의 고객으로 인식하는 실수를 범하게 된다.</li><li>한 고객이 많은 돈을 지출하고 자주 구매하지만, 물건들을 자주 반품해버리거나, 회사의 콜센터로 뻔질나게 전화를 건다. 이 고객은 높은가치의 고객처럼 보이지만, 사실은 수익성이 낮은 고객이다.</li></ul></li><li>수집한 모든 정보를 통합하고, 연결하고, 중복을 제거할 수 있어야 한다.</li></ul><img src="/images/2020/10/prepare.jpeg" alt="데이터 정비 프로세스"><a name="profile"><h2 id="고객1명의-프로파일에-포함된-정보의-예시-⭐️"><a href="#고객1명의-프로파일에-포함된-정보의-예시-⭐️" class="headerlink" title="고객1명의 프로파일에 포함된 정보의 예시 ⭐️"></a>고객1명의 프로파일에 포함된 정보의 <strong>예시</strong> ⭐️</h2><details>  <summary>일반 인구통계 <b>Master</b></summary>  <ul style="margin-left: 16px;margin-top:0;">    <li>이름</li>    <li>이메일</li>    <li>성별</li>    <li>링크드인 검색</li>    <li>주소</li>    <li>위치</li>    <li>주소의 google지도 보기</li>  </ul></details><details>  <summary>예측 분석 (군집) <b>attribute</b></summary>  <ul style="margin-left: 16px;margin-top:0;">    <li>구매가능성 : 높음</li>    <li>행위 기반 군집 : 할인중독자</li>    <li>제품 기반 군집 : 노트북 컴퓨터 구매자</li>    <li>브랜드 기반 군집 : dell</li>    <li>생애주기 군집 : 신규고객</li>    <li>제품 추천</li>  </ul></details><details>  <summary>접촉 전략 (매체,채널) <b>attribute</b></summary>  <ul style="margin-left: 16px;margin-top:0;">    <li>선호 채널</li>    <li>선호 매장</li>    <li>가장 까가운 매장</li>    <li>선호 브랜드</li>    <li>전화로 판매 가능한가? Y/N</li>    <li>우편으로 판매 가능한가? Y/N</li>    <li>이메일로 판매 가능한가? Y/N</li>  </ul></details><details>  <summary>생애주기 군집 값( enum같은 )</summary>  <ul style="margin-left: 16px;margin-top:0;">    <li>예상 고객</li>    <li>신규 고객</li>    <li>반복 고객</li>    <li>기간 경과된 일회성 고객</li>    <li>기간 경과된 반복 고객</li>    <li>비활성화된 일회성 고객</li>    <li>비활성화된 반복 고객</li>  </ul></details><details>  <summary>구매 데이터 분석 <b>attribute</b></summary>  <ul style="margin-left: 16px;margin-top:0;">    <li>평생 매출 (예: 2007달러)</li>    <li>평생 마진 (예: 576달러)</li>    <li>평생 주문 수</li>    <li>최근 12개월 매출</li>    <li>최근 12개월 마진</li>    <li>최근 12개월 주문수</li>    <li>평균 주문 금액</li>    <li>최근 12개월 매출 세그먼트 (예: 상위 n% 고객)</li>    <li>12개월 이전 매출 세그먼트</li>    <li>매출 추세 (증가,유지,감소)</li>  </ul></details><details>  <summary>행위 <b>behavior</b></summary>  <ul style="margin-left: 16px;margin-top:0;">    <li>마지막 주문 날짜</li>    <li>마지막 주문 채널</li>    <li>마지막 주문 매출</li>    <li>웹사이트 마지막 방문 날짜</li>    <li>웹사이트 방문 횟수</li>    <li>마지막 이메일 발송 날짜</li>    <li>마지막 이메일 열람 날짜</li>    <li>마지막 이메일 링크 클릭 날짜</li>    <li>지난 달 이메일 열람 횟수</li>    <li>이전 2개월 이메일 열람 횟수</li>    <li>지난 달 이메일 링크 클릭 수</li>    <li>이전 2개월 이메일 클릭 횟수</li>    <li>최초 주문 날짜</li>    <li>최초 주문 채널</li>    <li>최초 주문 매출</li>    <li>선호 distinct 채널</li>    <li>선호 제품</li>    <li>선호 카테고리</li>    <li>최근 5개 주문 (채널/날짜/제품/브랜드)</li>    <li>최근 5회 웹사이트 검색 (검색어, 날짜)</li>  </ul></details><hr><ul><li>고객기업 지원팀, 콜센터 팀, 매장 직원에게 프로파일에 액세스 권한을 준다.<ul><li>이 정보를 활용, 고객에게 더 나은 서비스를 제공</li></ul></li><li>고객 데이터를 모두 통합한 뒤 고객에 대해 중요한 발견을 하게 되는 경우가 흔히 있다.</li></ul><a name="what"><h2 id="데이터에-대해-물어봐야할-100가지-질문-⭐️"><a href="#데이터에-대해-물어봐야할-100가지-질문-⭐️" class="headerlink" title="데이터에 대해 물어봐야할 100가지 질문 ⭐️"></a>데이터에 대해 물어봐야할 100가지 질문 ⭐️</h2><p>일단 모든 데이터를 한곳에 모으게 되면, 이 데이터를 사용하여 <strong>비즈니스와 고객을 더 잘 이해할 수 있다.</strong><br>질문은 예측마케팅을 시작하는데 도움을 줄것이다.</p><details>  <summary>판매</summary>  <ol style="margin-left: 16px;margin-top:0;">    <li>매달 얼마나 많은 신규고객을 획득?</li>    <li>신규고객을 획득하는 데 드는 비용은 얼마?</li>    <li>고객당 매출액은 얼마? 추세는 어떠함?</li>    <li>나의 매출과 마진은 계절에 따라 어떻게 변하는가?</li>    <li><b>매출</b>의 대부분이 신규 구매자로부터 발생하는가, 아니면 반복 구매자로부터 발생하는가?</li>    <li><b>마진</b>의 대부분이 신규 구매자로부터 발생하는가, 아니면 반복 구매자로부터 발생하는가?</li>    <li>출하한 제품의 연간 총 주문 수는 얼마나 되는가?</li>    <li><b>월별</b> 주문 금액은 얼마인가? 어떤 달들은 거래가 더 많이 발생하는가?</li>    <li><b>연간</b>평균 주문 금액은 얼마이며, 시간경과에 따른 추세는 어떠한가?</li>    <li>매출은 액세스 기기(모바일, 태블릿, 기타)별로 어떻게 나뉘는가?</li>    <li>매출은 지역별로 어떻게 나뉘는가?</li>    <li>매출은 매장별로 또는 영업 담당자별로 어떻게 나뉘는가?</li>    <li>매출액 중 마케팅 불가능한 고객으로부터 발생하는 매출은 얼마인가?</li>  </ol></details><details>  <summary>고객</summary>  <details style="padding-left: 16px;">    <summary>제품기반 군집</summary>    <ol style="margin-left: 16px;margin-top:0;">      <li>각 제품 기반 군집에는 몇 명의 고객이 있는가?</li>      <li>제품 기반 군집의 각 구성원은 어느정도의 가치가 있는가?</li>      <li>가장 많은 <b>매출</b>을 올리는 제품 기반 군집은 어느것인가?</li>      <li>가장 큰 <b>마진</b>을 낳는 제품 기반 군집은 어느 것인가?</li>      <li>각 제품 기반 <b>군집별로 선호하는 채널</b>은 어떤 것인가?</li>    </ol>  </details>  <details style="padding-left: 16px;">    <summary>브랜드 기반 군집</summary>    <ol style="margin-left: 16px;margin-top:0;">      <li>각 브랜드 기반 군집에는 몇명의 고객이 있는가?</li>      <li>각 브랜드 기반 군집의 각 구성원은 어느정도의 가치가 있는가?</li>      <li>가장 많은 매출을 올리는 브랜드 기반 군집은 어느것인가?</li>      <li>가장 큰 마진을 낳는 브랜드 기반 군집은 어느것인가?</li>      <li>각 브랜드 기반 군집별로 선호하는 채널은 어떤 것인가?</li>    </ol>  </details>  <details style="padding-left: 16px;">    <summary>행위기반 군집</summary>    <ol style="margin-left: 16px;margin-top:0;">      <li>각 행위 기반 군집에는 몇 명의 고객이 있는가?</li>      <li>행위 기반 군집의 각 구성원은 어느 정도의 가치가 있는가?</li>      <li>가장 많은 매출을 올리는 행위기반 군집은 무엇인가?</li>      <li>가장 큰 마진을 낳는 행위 기반 군집은 어느것인가?</li>      <li>각 행위 기반 군집별로 선호하는 채널은 어떤 것인가?</li>      <li>각 행위 기반 군집별로 선호하는 채널은 어떤 것인가?</li>      <li>고객 중 몇 %가 할인 구매자인가?</li>      <li>고객 중 몇 %가 (마진이 높은) 정가 구매자인가?</li>      <li>고객 중 몇 %가 일회성 구매자인가?</li>      <li>반품이 많은 불평 고객은 누구인가?</li>      <li>계절성 고객은 누구인가?</li>      <li>단일 채널 고객은 누구인가?</li>    </ol>  </details>  <details style="padding-left: 16px;">    <summary>평생가치</summary>    <ol style="margin-left: 16px;margin-top:0;">      <li>가장 높은 가치의 고객은 누구인가?</li>      <li>최상위 10% 고객의 (예상) 평생가치는 얼마인가?</li>      <li>매출 중 최상위 10% (또는 최하위 10%) 고객으로부터 발생하는 매출이 전체 매출에서 차지하는 비율은 몇%인가?</li>      <li>최상위 10% (또는 최하위 10%) 고객의 주문 빈도는 얼마나 되는가?</li>      <li>최고액 소비자들은 어떤 브랜드를 선호하는가?</li>      <li>최고액 소비자들은 어떤 제품 카테고리를 선호하는가?</li>      <li>최고액 소비자들은 어떤 채널을 선호하는가?</li>      <li>VIP를 어떻게 정의하는가?</li>      <li>높은 가치의 고객들 중 이탈할 위험이 있는 고객들은 얼마나 되는가?</li>      <li>고객별 (고객 세그먼트 별) 지갑 점유율은 얼마나 되는가?</li>      <li>개별 고객의 매출액 상승 여력은 얼망인가?</li>      <li>잠재적 평생가치는 높지만 자사의 점유율이 낮은 계정들은 어떤 것들인가?</li>      <li>성별에 따른 예상 평생가치는 무엇인가?</li>      <li>할인 사냥꾼들 bargain bunters의 예상 평생가치는 더 낮은가?</li>      <li>모바일 쇼핑객의 평생가치는 더 낮은가?</li>      <li>가장 높은 가치의 고객들은 어떤 브랜드를 선호하는가?</li>      <li>멤버십 적립 프로그램 가입자의 평생가치는 평균보다 높은가?</li>    </ol>  </details>  <details style="padding-left: 16px;">    <summary>구매가능성</summary>    <ol style="margin-left: 16px;margin-top:0;">      <li>무료 배송 서비스의 제공은 매출(및 마진)에 어떤 영향을 미치는가?</li>      <li>할인이 판매 증가를 촉진했는가?</li>      <li>프로모션 비용을 고려할 때 할인이 마진 증가를 촉진했는가?</li>      <li>각 고객에 대한 최고의 인센트브는 무엇인가?</li>      <li>방문하는 사람들 중에 고매 가능성이 높은 잠재 고객들이 있는가?</li>      <li>회원가입비를 받을 것인가?</li>      <li>기존고객들 중 재무개할 가능성이 가장 높은것은 누구인가?</li>    </ol>  </details>  <details style="padding-left: 16px;">    <summary>생애주기 단계</summary>    <ol style="margin-left: 16px;margin-top:0;">      <li>활성고객 (지난 12개월 동안 구매한적이 있는 고객)은 몇명인가?</li>      <li>기간이 경과한 고객은 몇 명인가?</li>      <li>매출 및 마진의 대부분을 신규고객이 차지하는가 아니면 반복 고객이 차지하는가?</li>      <li>구매자는 일반적으로 얼마나 빨리 재구매를 할것인가?</li>      <li>리필 캠페인을 통해서 몇 명의 고객을 다시 불러들일 수 있는가?</li>      <li>신규 고객 환영 캠페인을 통해서 몇명의 고객을 다시 불러들일 수 있는가?</li>      <li>회사가 이메일 주소를 갖고 있는 구매자들 중 최근에 회사 웹사이트를 방문했으나, 구매하지 않은 사람은 몇명인가?</li>      <li>오랫동안 구매하지 않다가 최근에 이메일을 열어본 고객은 몇명인가? </li>      <li>고객 유지에 초점을 맞춰야하는가?</li>      <li>신규고객들이 다시 돌아오고 있는가 (그리고 이것이 더 나아지고 있는가 아니면 더 나빠지고 있는가)?</li>      <li>여러번 구매한 사람들은 몇명이며, 그들이 마지막으로 구매한 것은 언제인가?</li>      <li>이탈할 위험이 있는 고객들은 누구인가?</li>    </ol>  </details>  <details style="padding-left: 16px;">    <summary>인구사회학적 특징</summary>    <ol style="margin-left: 16px;margin-top:0;">      <li>우리로부터 구매한 가구수는 얼마나 되는가?</li>      <li>성별에 따른 평균 주문 금액은 얼마인가?</li>      <li>고객별(세그먼트별)로 가장 가까운 매장까지의 거리는 얼마인가?</li>    </ol>  </details>  <details style="padding-left: 16px;">    <summary>제품추천</summary>    <ol style="margin-left: 16px;margin-top:0;">      <li>고객별로 다음에는 어떤 제품을 추천해야 하는가?</li>      <li>각 고객별로 핵심적인 채널은 어느 것인가?</li>    </ol>  </details></details><details>  <summary>마케팅/채널</summary>  <ol style="margin-left: 16px;margin-top:0;">    <li>매월 몇 개의 장바구니가 매출로 이어지지 않고, 중도에서 포기되고 있는가?</li>    <li>매월 몇 개의 웹 검색이 매출로 이어지지 않고 중도에서 포기되고 있는가?</li>    <li>이메일 1개당 매출은 얼마이며, 시간 경과에 따라 어떻게 변화하는가?</li>    <li>가입자 중 우리가 보낸 이메일을 실제로 읽은 사람들은 몇명인가?</li>    <li>가입자 수가 늘어나고 있는가, 아니면 줄어들고 있는가?</li>    <li>다이렉트 마케팅 캠페인의 성과는 무엇인가?</li>    <li>어떤 마케팅 프로그램이 최고의 수익을 내고 있는가?</li>    <li>어떤 프로모션 행사가 가장 많은 판매액을 올리는가?</li>    <li>우리 회사의 카탈로그 발송이 이익 증가로 이어지는가?</li>    <li>지난 1년동안 우리 이메일을 한통도 받지 못한 고객은 누구인가?</li>    <li>전체 매출에서 각 채널이 차지하는 퍼센트는 얼마인가?</li>    <li>전체 마진에서 각 채널이 차지하는 퍼센트는 얼마인가?</li>    <li>채널별 연간 매출 추세는 어떠한가?</li>    <li>채널별 월간 매출 추세는 어떠한가?</li>    <li>채널별 마진 추세는 어떠한가?</li>    <li>어떤 채널에서 가장 수익성 높은 고객을 얻는가?</li>    <li>어떤 채널에서 가장 충성도 높은 고객을 얻는가?</li>  </ol></details><details>  <summary>제품</summary>  <ol style="margin-left: 16px;margin-top:0;">    <li>제품 카테고리별 매출 및 마진은 어떠한가?</li>    <li>제품 소개 캠페인으로 타겟팅할 수 있는 사람들은 얼마나 되는가?</li>    <li>가장 실적이 좋은 제품 카테고리는 무엇인가?</li>    <li>특정한 제품 카테고리의 구매빈도는 얼마인가?</li>    <li>특정한 우편번호 지역의 사람들이 특정한 제품을 구매하고 있는가?</li>    <li>새로운 제폼/콘텐츠/행사 등에 어떤 고객이 관심을 가질 것인가?</li>    <li>각 고객은 얼마나 많은 유형의 제품들을 우리에게서 구매하는가?</li>  </ol></details><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9791195327799&orderClick=LEA&Kc=" "">빅데이터를 활용한 예측마케팅 전략</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;h1 id=&quot;고객-프로파일링&quot;&gt;&lt;a href=&quot;#고객-프로파일링&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="03_Communication" scheme="http://feel5ny.github.io/categories/03-Communication/"/>
    
      <category term="Marketing" scheme="http://feel5ny.github.io/categories/03-Communication/Marketing/"/>
    
    
      <category term="maketing" scheme="http://feel5ny.github.io/tags/maketing/"/>
    
      <category term="LTV" scheme="http://feel5ny.github.io/tags/LTV/"/>
    
  </entry>
  
  <entry>
    <title>예측 분석이란? (2장)</title>
    <link href="http://feel5ny.github.io/2020/07/02/Communication_003/"/>
    <id>http://feel5ny.github.io/2020/07/02/Communication_003/</id>
    <published>2020-07-02T14:23:55.000Z</published>
    <updated>2020-07-04T14:01:48.784Z</updated>
    
    <content type="html"><![CDATA[<h1 id="예측-분석이란"><a href="#예측-분석이란" class="headerlink" title="예측 분석이란?"></a>예측 분석이란?</h1><h3 id="마케터가-알아야할-예측분석"><a href="#마케터가-알아야할-예측분석" class="headerlink" title="마케터가 알아야할 예측분석"></a>마케터가 알아야할 예측분석</h3><ol><li><strong>자율학습</strong> (군집화모델)<ul><li>데이터속의 숨겨져있는 패턴을 찾아낸다.</li></ul></li><li><strong>감독학습</strong> (경향성 모델 또는 예측)<ul><li>입력 샘플과 목적변수를 학습하여,<br>어떤 입력값이 주어졌을 때,<br>출력값을 추정하는 데 사용</li><li>고객평생가치 engage 가능성 / 다음에 구매할 가능성이 있는 특정한 제품을 추정</li></ul></li><li><strong>강화학습</strong> (추천기능)<ul><li>데이터속의 숨겨진 패턴과 유사성을 지렛대 삼아<br>사용자 또는 특정 이벤트에서 최적의 다음단계, 결과, 제품, 콤텐츠를 정확하게 에측할 수 있게해준다.</li></ul></li></ol><a name="cluster"><h2 id="1-자율학습-군집화-모델-cluster"><a href="#1-자율학습-군집화-모델-cluster" class="headerlink" title="1. 자율학습: 군집화 모델 cluster"></a>1. 자율학습: 군집화 모델 <code>cluster</code></h2><ul><li>당신이 찾고 있는 것이<br>무엇인지 미리 알지 못하거나, 명시적 변수명을 사용하지 않고도<br>데이터의 패턴을 인식해내는 것</li><li>이러한 접근법 중 하나를 <strong>군집화 cluster</strong><ul><li>행위가 유사한 고객을 그룹화함으로써<br>이 그룹의 패턴이 어떤 것인지 드러날 수도 있다.</li></ul></li></ul><h3 id="군집화와-세분화의-차이점-clustering-segmentation"><a href="#군집화와-세분화의-차이점-clustering-segmentation" class="headerlink" title="군집화와 세분화의 차이점 clustering, segmentation"></a>군집화와 세분화의 차이점 <code>clustering</code>, <code>segmentation</code></h3><ol><li><strong>세분화</strong> <code>segmentation</code><ul><li>유사성을 기반으로 고객들을 여러 그룹에 각기 <strong>수동</strong>으로 배치하는 프로세스</li><li>타깃으로 삼을 사람을 사전에 알고 있다.</li></ul></li><li><strong>군집화</strong> <code>clustering</code><ul><li>고객을 그룹으로 묶을 수 있도록<br>그들 내의 유사성들을 찾아내는 <strong>자동화</strong>된, 통계적으로 엄격한 프로세스이다.<ul><li><strong>누구를 타깃으로 삼을 것인지 발견하는 것</strong><br>⇒ 고객에 대해 이미 <strong>알고있는 속성들</strong>을 사용하여<br> 회사의 고객 기반 속에 존재하는 세그먼트들을<br> <strong><u>자동</u>으로 발견해내는 방법</strong></li></ul></li><li>군집화 알고리즘<ul><li>K-means</li><li>Apriori</li></ul></li><li>군집화를 알고리즘은 더 많은 차원을 검토한다.</li></ul></li></ol><ul><li>마케터들은 이제<br>브랜드 선호도,<br>할인 선호도,<br>웹사이트에 머문시간,<br>웹페이지 열람행위,<br>통화길이 등<br>수백가지 <strong>고객특성 feature</strong>을 확보하고 있다.</li><li>하나의 고객<strong>군집</strong>은 일반적으로 <strong>약 8~15개의 속성</strong>을 통해서 설명된다.<ul><li>자동으로 발견된, 마케팅 대상으로 삼을 수 있는 페르소나로 간주할 수 있다.</li></ul></li></ul><a name="likelihood"><h2 id="2-감독학습-경향성-모델-반응모델-response-models-우도모델-likelihood"><a href="#2-감독학습-경향성-모델-반응모델-response-models-우도모델-likelihood" class="headerlink" title="2. 감독학습: 경향성 모델 (= 반응모델 response models = 우도모델 likelihood)"></a>2. 감독학습: 경향성 모델 (= 반응모델 <code>response models</code> = 우도모델 <code>likelihood</code>)</h2><ul><li><p><strong>경향성 모델</strong>은<br>과거의 사례들을 통해 학습함으로써,<br>고객의 <strong>미래 행위를 예측</strong>해낸다는 점</p><ul><li>예_ 고객이 제품을 구매할 가능성 또는<br>예상 고객이 웹사이트에서 뭔가 행동할 가능성</li></ul></li><li><p>반응모델 <strong><code>response models</code></strong>라고도 종종 불린다.</p><ul><li>다이렉트 메일을 수신한 결과로<br>제품을 구매하게 될지 아닐지와 같은<br><strong>고객반응</strong>을 예측하기 때문</li></ul></li><li><p>우도 모델 (<code>likelihood</code>,가능성)</p><ul><li>알고리즘<ul><li>신경망 neural networks</li><li>로지스틱 회귀 logistic regression</li><li>랜덤 포레스트 random forest</li><li>회귀 트리 regresstion trees</li></ul></li></ul></li><li><p>가이드 학습 guided-learning 모델이다.<br>= 데이터를 학습하는데 시간이 걸린다는 것<br>= 시간이 지남에 따라 모델이 더 나아진다는 것을 의미</p><ul><li>대부분의 경향성 모델은 예측을 위해 사용하기 전에 짧은 훈련기간과 검증 기간을 필요로 한다.</li></ul></li></ul><img src="/images/2020/08/response models.png" alt="경향성 모델의 훈련"><h3 id="경향성-십분위를-사용하는-법-deciles"><a href="#경향성-십분위를-사용하는-법-deciles" class="headerlink" title="경향성 십분위를 사용하는 법 deciles"></a>경향성 십분위를 사용하는 법 <code>deciles</code></h3><h4 id="십분위"><a href="#십분위" class="headerlink" title="십분위"></a>십분위</h4><ul><li>개별 고객 점수 대신에 대부부의 실무자는 고객을 10분위로 나눈다.<ul><li>예_고객이 평생동안 얼마나 돈을 쓸 것인지 예측하려면?<br>평생가치 예측 모델이라고 불리느 것을 사용한다.</li></ul></li><li>2가지 측명에서 유용<ol><li>평생가치 또는 지출과 같이 기업이 기대하는 행위에 대한<br><strong>평균값</strong>을 제공한다.</li><li>고객들을 동일한 크기의 묶음 bucket 10개로 나누어,<br>그 중에서 가장 가치가 높은 것부터 가장 낮은것까지,<br>또는 구매할 가능성이 가장 높은 것부터 가장 낮은 것까지<br>순위를 매길 수 있도록 해준다.</li></ol></li><li>예<ul><li>값비싼 카탈로그를 누구에게 보낼지 결정할때</li><li>a/b 행상도 테스트를 설계하 ㄹ때</li><li>이탈한 웹사이트 방문자를 대상으로 한 캠페인<ul><li>비구매자들을 추적할 수 있는 많은 리타겟팅 솔루션들을 이용할 수 있다.</li><li>구매 가능성에 따라 고객에게 제공하는 혜택을 차별화할 수 있다면?<ul><li>구매 가능성이 높은 사람 ⇒ 리마인드 메세지만으로 지갑을 열게 함</li><li>구매 가능성이 낮은 사람 ⇒ 할인 또는 무료배송 제안</li></ul></li></ul></li></ul></li><li>이 유형의 모델은 예상 고객과 기존 고객의 미래 행위를 예측하는데 사용할 수 있다.<ul><li>예_ 구찌 핸드백을 구입한 순간부터</li><li>이 사치품 업체는 내가 앞으로 핸드백을 몇개나 더 구매할지에 대해서 높은 정확도로 예측할 수 있다.</li><li>구찌의 알고리즘은 나의 구매, 웹사이트 방문, 이메일 클릭이나 나의 연령, 성별, 지역 등을 이전에 구매한 수천명의 다른 고객의 행동 미 인구사회학적 특징과 비교한다.</li><li>미래 구매행위를 나보다 더 잘 예측할 수 있다.</li></ul></li></ul><h3 id="경향성-모델과-RFM-모델링의-비교"><a href="#경향성-모델과-RFM-모델링의-비교" class="headerlink" title="경향성 모델과 RFM 모델링의 비교"></a>경향성 모델과 RFM 모델링의 비교</h3><h4 id="RFM-모델링"><a href="#RFM-모델링" class="headerlink" title="RFM 모델링"></a>RFM 모델링</h4><ul><li><p>예측분석이 널리 보급되기 전에는 RFM이라고 불리는 모델이 구매 가능성이 높은 사람을 파악하는 업계 표준 방식이었다.</p><ul><li>그 효용이 제한적, 현실 생활에 적용하기가 생각보다 너무 어렵다.</li><li>통계적, 예측적 기반이 없는, 단순한 경험적 접근방식일 뿐이다. (주먹구구식으로 나름 지적인 추측을 하는)</li></ul></li><li><p>이 모델의 핵심 아이디어는</p><ul><li>한 고객이 다른 제품을<br>최근에 구입했거나,<br>자주 구입했거나,<br>당신의 제품에 많은 돈을 지출하였다면<br>그 고객은 당신의 제품을 다시 구매할 가능성이 높다는 것이다.</li></ul><ol><li><strong>시기</strong> : 이 고객이 우리 제품을 마지막으로 구입한 이래로 며칠이 지났는가?</li><li><strong>빈도</strong> : 그 고객은 우리 제품을 얼마나 자주 구매했는가?</li><li><strong>금액</strong> : 그 고객은 우리에게 얼마나 많은 매출을 가져다 주었는가?</li></ol></li><li><p>데이터에서 파생될 수 있는 많은 다른 변수들 중에는 <strong>추가적으로 우수한 예측 변수로 사용할 수 있는 것들</strong>이 있지만, 이 모델리에서는 변수 사용을 많이 안하는 방법이다.</p></li><li><p><strong>과거의 결과가 미래의 성과를 보장하지 못한다</strong>가 적용되는 방법이다.</p></li><li><p>한 고객의 현재 행동을 과거 다른사람들의 이후 행동과 비교하기 보다는,<br>오로지 해당 고객의 과거에 대해서만 되돌아본다.</p></li><li><p>높은 가치의 고객이 실제로 구매를 하기 전에는 이들을 인지할 수 없다.</p></li><li><p>예</p><ul><li>대부분의 고객이 3번 구매한 다음 사라진다면</li><li>이미 3번 구매한 어떤 고객이 다시 구매할 가능성은 사실 매우 낮지만<ul><li>RFM모델은 이 고객을 <code>구매 가능성 매우 높음</code> 이라는 세그먼트에 배치할 것이다.</li></ul></li><li>반응을 할 가능성이 높은 좋은 고객이<br>⇒ 가치가 그다지 높지 않은 세그먼트에 포함될 수도<br>⇒ 프로모션 발송대상에서 제외될 수도</li></ul></li><li><p><strong>구매가 빈번한 환경에서만</strong> 향후 구매할 가능성에 대한 예측을 할 수 있다.</p><ul><li>감독학습 모델은 이러한 모든 고객 행위를 예측하는 데 사용할 수 있다.</li><li>경향성 모델은 RFM모델보다 평균 40% 더 정확</li></ul></li></ul><a name="likelihood"><h2 id="3-강화학습-및-협업-필터링-reinforcement-learning-collavorative-filtering"><a href="#3-강화학습-및-협업-필터링-reinforcement-learning-collavorative-filtering" class="headerlink" title="3. 강화학습 및 협업 필터링(reinforcement learning, collavorative filtering)"></a>3. 강화학습 및 협업 필터링<br>(<code>reinforcement learning</code>, <code>collavorative filtering</code>)</h2><ul><li>강화학습은 일반적으로 협업필터링 모델과 함께 사용된다.</li><li>협업필터링 모델의 일반적인 마케팅 응용 프로그램은 ⇒ <strong><code>추천</code></strong></li><li>추천모델<ul><li>협업 필터링</li><li>베이지안 네트워크 bayesian networks</li><li>빈발 항목집합 frequent item sets</li><li>시간가중치 time-decay<ul><li>최근 행동이 이전 행동보다 예측에 대한 가중치가 더 크다는 사실을 감안하기 위해서</li></ul></li></ul></li><li>강화학습은 고객의 선호에 조응하도록(꼭 맞게 대응함)<br>모델을 교육하기 위해 적용된다.</li></ul><hr><h3 id="고객이-처한-맥락에-맞는-추천을-하는-것이-중요하다"><a href="#고객이-처한-맥락에-맞는-추천을-하는-것이-중요하다" class="headerlink" title="고객이 처한 맥락에 맞는 추천을 하는 것이 중요하다."></a>고객이 처한 맥락에 맞는 추천을 하는 것이 중요하다.</h3><ol><li>잘못된 추천 또는 맥락을 벗어난 추천은<ul><li>불쾌한</li><li>간섭하는</li><li>부적합한 것으로 간주된다.</li></ul></li><li>추천하는 시점도 적절해야한다.<ul><li>예<ul><li>장바구니 결제시 ‘이것을 구입한 고객은 또한 XX도 추가했다’</li><li>2일 후에 후속구매를 제안하는 감사 이메일</li></ul></li></ul></li><li>추천이유를 제공하기 시작<ul><li>간섭적 특성을 제거하기 위해</li><li>아마존<ul><li>당신이 이 제품을 보았으므로, 이런 제품들에도 관심이 있으실 것입니다.</li><li>어떤 제품이 추천되는지에 대해서 소비자에게 통제 권한을 부여하기 시작<ul><li>설정메뉴에서 추천알고리즘이 특정한 항목을 고려대상에서 배제하도록 설정가능</li></ul></li></ul></li></ul></li><li>추천 알고리즘의 중요한 3가지<ol><li>고객과의 관련성을 유지하기 위해 이상적으로는 추천이 <code>실시간</code>으로 갱신되어야 함</li><li>추천모델이<br>재고가 없는 제품,<br>반품 비율이 높은 제품,<br>사용후기가 나쁜 제품을 추천하는 것은 바람직하지 않다.</li></ol></li></ol><h3 id="다양한-유형의-추천모델"><a href="#다양한-유형의-추천모델" class="headerlink" title="다양한 유형의 추천모델"></a>다양한 유형의 추천모델</h3><ol><li><p>상향 판매 upsell 추천</p><ul><li>고객에게 더 나은 가격 조건을 제안하거나, 상품의 품질을 강조하는 등 고객이 희망했던 상품보다 <strong>단가가 높은 상품 판매 구입을 유도하는 판매방법</strong>입니다. </li><li>판매 증대는 물론 고객 만족을 위해서도 중요한 마케팅 활동입니다.<ul><li>ex) 500원 추가하면 라지사이즈 가능한데 변경하시겠습니까?</li></ul></li></ul></li><li><p>후속 판매 next sell 추천</p><ul><li>후속 판매는 구매하고 며칠 후에 구매자의 기존 구매를 바탕으로 구매자에게 다른 제안을 독점적으로 진행하는, 후속 조치를 취하는 판매 행위입니다. <ul><li>ex) 구매자가 콤보 식사를 구매 한 경우 패스트 푸드 체인은 그들에게 독점적 인 월별 버거 클럽 제공을 실제 버거 애호가에게만 제공 할 수 있습니다.</li><li>ex_ 컴퓨터를 구매하는 경우, 상점은 그들에게 ‘99 달러 할인 가격으로 ‘컴퓨터 사용 방법’워크숍에 참석할 수있는 독점적 인 제안을 보낼 수 있습니다.</li></ul></li><li>참고: <a href="https://salesgravy.com/the-triple-sales-threat-upselling-cross-selling-and-next-selling/" target="_blank" rel="noopener">Upselling, Cross-selling and Next selling </a></li></ul></li><li><p>교차 판매 cross sell 추천</p><ul><li>한 제품을 구입한 고객이 <strong>다른 제품을 추가로 구입할 수 있도록 유도하는 것을 목적</strong>으로 합니다.</li><li>금융회사들이 자체 개발한 상품에만 의존하지 않고 다른 금융회사가 개발한 상품까지 파는 적극적인 판매방식입니다.<ul><li>ex) 햄버거만 시킬때, 점원이 ‘음료수는 안하시겠습니까?</li></ul></li></ul></li></ol><h3 id="일반적으로-함께-구입하는-제품들"><a href="#일반적으로-함께-구입하는-제품들" class="headerlink" title="일반적으로 함께 구입하는 제품들"></a>일반적으로 <code>함께</code> 구입하는 제품들</h3><ul><li>고객별로 특화된 것이 아니다.</li><li><strong>제품 대 제품 추천</strong></li><li>이 제품을 구입한 고객은 일반적으로 어떤 다른 제품들을 구입했습니까? 라는 질문에 대한 답</li><li>동일한 제품을 검색하는 두 사람에게 동일한 추천을 적용한다.</li><li>이러한 유형의 일반적인 추천은<br>당신의 웹사이트를 처음 방문한 사람들처럼,<br>당신이 특정한 고객에 대해 별로 알지 못하고 있는 경우에 특히 적합하다</li></ul><h3 id="사용자에게-특화된-추천"><a href="#사용자에게-특화된-추천" class="headerlink" title="사용자에게 특화된 추천"></a>사용자에게 특화된 추천</h3><ul><li><strong>제품 대 사용자 추천</strong></li><li>비키니 세트를 탐색하는 동안 비키니 탑을 추천하는 것이 적절할 수 있다.<ul><li>이 고객이 물건을 구입한 뒤, 2일 후에<br>그에게 감사 이메일을 보내면서 다음 구매 항목에 대한 추천을 이메일로 보내는 경우라면?<ul><li>이 고객이 가장 최근에 검색한 내용들뿐만 아니라</li><li>그와 과거 기록 전체를 고려하여 이 사용자만을 위해 특화된 추천을 하는 것이 좋다</li></ul></li></ul></li><li>ex_사쟘<ul><li>사용자가 자신이 좋아하는 음악을 태그하면 그의 음악적 취향을 기록</li><li>취향에 근거해서 샤잠은 관심 있어 할 만한 콘서트들을 추천하는데<br>그 콘서트가 실제로 당신이 살고 있는 지역 근방에서 열리는 경우에만 추천한다.<ul><li>샤잠이 고객의 취향뿐만 아니라, 고객의 지리적 위치를 알아야 한다.</li></ul></li></ul></li></ul><h1 id="예측분석-프로세스"><a href="#예측분석-프로세스" class="headerlink" title="예측분석 프로세스"></a>예측분석 프로세스</h1><a name="preparation"><h2 id="데이터의-수집-클랜징-정비-preparation"><a href="#데이터의-수집-클랜징-정비-preparation" class="headerlink" title="데이터의 수집, 클랜징, 정비 preparation"></a>데이터의 수집, 클랜징, 정비 preparation</h2><img src="/images/2020/09/process.jpg" alt="예측분석 프로세스 개요"><ul><li>수집된 모든 데이터를 즉시 사용할 수 있는 것은 아니다.</li><li>누락된 데이터 또는 아웃라이어로 인해서 결과가 왜곡될 수 있고 (지나치게 높거나 낮은 데이터)</li><li>보유한 데이터 생성 시스템과 맞지 않는 데이터 유형이 있을 수도 있다.</li></ul><h3 id="이상치-검출"><a href="#이상치-검출" class="headerlink" title="이상치 검출"></a>이상치 검출</h3><ul><li><strong>아웃라이어</strong><ul><li>일반 지속적 구매 소비자가 아닌 소수의 단기적 고액 소비자가 생길 경우 지표를 왜곡시킬 수 있음</li><li>상황을 인지하지 못한다면 vip 고객이라고 생각할 것이다.<ul><li>vip 고객 정의가 왜곡되어 진정한 vip 고객을 놓치게 됨</li><li>마케팅 전략의 방향을 읽게됨</li></ul></li><li>아웃라이어를 제거해야함</li></ul></li><li><strong>결측값 대체</strong><ul><li>방법<ul><li>평균값으로 대체</li><li>데이터가 가지고 있는 분포유형에서 무작위로 숫자를 선택</li><li>사용가능한 다른 변수를 기반으로 데이터 모델링</li></ul></li></ul></li></ul><h3 id="feature의-생성-및-추출"><a href="#feature의-생성-및-추출" class="headerlink" title="feature의 생성 및 추출"></a>feature의 생성 및 추출</h3><ol><li>데이터가 그대로 사용하기에 너무 큰 경우</li><li>현재 방식으로 표현된 데이터가 모델에 적합하지 않은 경우</li></ol><ul><li>특징 추출은 불필요한 정보를 삭제하거나 노이즈 제거를 위해 변환한다.</li><li>최적의 추출은 데이터에 포함된 노이즈를 감소시킴으로써, 예측분석의 정확성을 높인다.</li></ul><h3 id="분류-변수-classifier-및-시스템-설계"><a href="#분류-변수-classifier-및-시스템-설계" class="headerlink" title="분류 변수 classifier 및 시스템 설계"></a>분류 변수 classifier 및 시스템 설계</h3><ol><li>올바른 알고리즘을 선택<ul><li>올바른 문제에 올바른 알고리즘 선택하기 위해서는 문제를 잘 이해하는 것이 중요</li><li>편향 분산 딜래마 bias-variance<ul><li>특정한 문제에 편향된 biased 시스템은 다른 문제들을 해결하기 위한 성능이 점점 더 떨어지게 된다는 것이다.<br>참고 : <a href="https://bywords.tistory.com/entry/%EB%B2%88%EC%97%AD-%EC%9C%A0%EC%B9%98%EC%9B%90%EC%83%9D%EB%8F%84-%EC%9D%B4%ED%95%B4%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-biasvariance-tradeoff" target="_blank" rel="noopener">쉽게 이해해보는 bias-variance tradeoff</a></li></ul></li></ul></li><li>설계하고</li><li>미세조정하는 것</li></ol><ul><li>back-test를 통해 실제로 작동하는지 테스트<ul><li>자체 개발시 필요</li><li>80%훈련 + 10% 테스트 + 10% 유효성 검사</li></ul></li></ul><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9791195327799&orderClick=LEA&Kc=" "">빅데이터를 활용한 예측마케팅 전략</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ol><li><a href="https://bywords.tistory.com/entry/%EB%B2%88%EC%97%AD-%EC%9C%A0%EC%B9%98%EC%9B%90%EC%83%9D%EB%8F%84-%EC%9D%B4%ED%95%B4%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-biasvariance-tradeoff" target="_blank" rel="noopener">쉽게 이해해보는 bias-variance tradeoff</a></li><li><a href="https://salesgravy.com/the-triple-sales-threat-upselling-cross-selling-and-next-selling/" target="_blank" rel="noopener">Upselling, Cross-selling and Next selling </a></li></ol></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;예측-분석이란&quot;&gt;&lt;a href=&quot;#예측-분석이란&quot; class=&quot;headerlink&quot; title=&quot;예측 분석이란?&quot;&gt;&lt;/a&gt;예측 분석이란?&lt;/h1&gt;&lt;h3 id=&quot;마케터가-알아야할-예측분석&quot;&gt;&lt;a href=&quot;#마케터가-알아야할-예측분석&quot; c
      
    
    </summary>
    
      <category term="03_Communication" scheme="http://feel5ny.github.io/categories/03-Communication/"/>
    
      <category term="Marketing" scheme="http://feel5ny.github.io/categories/03-Communication/Marketing/"/>
    
    
      <category term="maketing" scheme="http://feel5ny.github.io/tags/maketing/"/>
    
      <category term="LTV" scheme="http://feel5ny.github.io/tags/LTV/"/>
    
  </entry>
  
  <entry>
    <title>예측 마케팅이란? (1장)</title>
    <link href="http://feel5ny.github.io/2020/07/01/Communication_002/"/>
    <id>http://feel5ny.github.io/2020/07/01/Communication_002/</id>
    <published>2020-07-01T14:23:55.000Z</published>
    <updated>2020-07-04T13:19:33.734Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><img src="/images/2020/08/tldr.jpg" alt="요약 이미지"><p>예측마케팅은 예측분석을 사용하여서 고객접점마다 고객과 더 관련성 있고, 의미 있는 고객경험을 제공하고, 이를 통해 고객 충성도와 수익을 향상시킬 수 있다. 고객들도 개인화 접근방식을 원하며, 잘되는서비스들 또한 이를 증명해내고 있으며, 마케터들도 쉽게 다가갈 수 있는 좋은 솔루션들이 나오고 있다. 고객의 평생가치와 지갑점유율의 최적화에 초점을 맞추고, 고객관련성이 핵심지표가 된다.</p><h1 id="고객-자산의-힘과-예측-마케팅"><a href="#고객-자산의-힘과-예측-마케팅" class="headerlink" title="고객 자산의 힘과 예측 마케팅"></a>고객 자산의 힘과 예측 마케팅</h1><a name="marketing"><h2 id="1-예측-마케팅에-대하여"><a href="#1-예측-마케팅에-대하여" class="headerlink" title="1. 예측 마케팅에 대하여"></a>1. 예측 마케팅에 대하여</h2><img src="/images/2020/08/01.jpg" alt="고객 충성도와 수익을 향상!"><ul><li>예측마케팅은<br><strong>예측분석</strong>을 사용하여,<br>고객생애주기 전반에 걸쳐 모든 <strong>고객접점</strong>에서<br><strong>고객과 더 관련성 있고, 의미 있는 고객경험을 제공</strong>하고<br>이를 통해 <strong>고객 충성도</strong>와 <strong>수익</strong>을 향상시킬 것이다.</li></ul><h3 id="1-1-예측-마케팅의-증가요인"><a href="#1-1-예측-마케팅의-증가요인" class="headerlink" title="1-1. 예측 마케팅의 증가요인"></a>1-1. 예측 마케팅의 증가요인</h3><ol><li>고객이 많은 채널들을 통해 마케팅 및 세일즈에 접하게 되면서,<br>고객들은 점점 더 <strong>개인적, 통합적 접근방식을 원하고 있다</strong>.</li><li>얼리어답터들은(잘되는 서비스들) 예측마케팅이 엄청난 가치를 가져다준다는 것을 보여주었다.<ul><li>넷플릭스의 콘텐츠 추천</li><li>아미존의 장바구니 내의 추천 상품</li></ul></li><li>새로운 기술 등장 </li></ol><a name="customer"><h2 id="2-고객자산의-힘-customer-equity"><a href="#2-고객자산의-힘-customer-equity" class="headerlink" title="2. 고객자산의 힘 customer equity"></a>2. 고객자산의 힘 <code>customer equity</code></h2><ul><li><p>수익성을 높이기 위해 <strong>고객평상가치</strong>와 <strong>지갑점유율</strong> share of wallet을 최적화하는데 중점을 둔다.</p><ul><li><dl><dt><strong>지갑점유율 (share of wallet)</strong></dt><dd>한 소비자의 전체 지출 중에서 <strong>특정 제품에 대한 지출이 차지하는 비중</strong>을 말한다.</dd></dl><img src="/images/2020/08/share_of_wallet.png" alt="지갑점유율(출처: 오픈서베이)"></li></ul></li><li><p>더 타게팅된 고객 의사소통이 이루어지며,<br>도달 범위가 아니라 <strong>고객관련성 relevance</strong>이 핵심 지표가 된다.</p></li><li><p>고객에게 제공하는 경험을 더 많이 개인화할수록<br>고객은 <strong>브랜드 충성도를 유지</strong>하게 된다.</p></li></ul><h3 id="2-1-예측-마케팅을-하면"><a href="#2-1-예측-마케팅을-하면" class="headerlink" title="2-1. 예측 마케팅을 하면,"></a>2-1. 예측 마케팅을 하면,</h3><ol><li>고객 타게팅 및 고객 획득 활동의<br><strong>정밀도를 향상시킨다</strong><ul><li>가장 수익성 높은 고객을 창출하는 <strong>채널 파악</strong>하기<ul><li>마케팅 지출 최적화</li></ul></li><li>구매자 페르소나에 대한 더 나은 행동과학 정보로 무장한 마케터는<br>특정한 마이크로 세그먼트를 초정밀 타깃으로 설정하고<br>이들의 고객 전환율을 4배 이상 증가시키는<br>더 효과적인 고객 획득 캠페인을 설계할 수 있다.</li></ul></li><li>개인화된 경험을 활용하여<br><strong>고객 평생가치를 높인다.</strong><ul><li>마케터는 고객상호작용의 개인화, 관련성, 타이밍을 개선할 수 있다.</li><li>고객으로 하여금 재방문하게 만들고<br>고객평생가치를 극대화한다</li></ul></li><li>고객 <strong>유지 및 충성도</strong>에 대해서 이해한다.<ul><li>언제, 왜, 어떤 고객이 되돌아올지 아니면 이탈할지 예측하는 것은 많은 기업에게 커다란 미션</li><li>예측마케팅은 고객을 계속 붙잡아두기 위해<br><strong>선제적</strong>으로 조치를 취할 수 있도록 이탈 위험이 있는 고객을 찾아내어 리스트에 표시할 수 있다.</li></ul></li><li><strong>고객 인게이지먼트</strong>를 최적화한다.<ul><li>이메일 프로모션에 누가 응답할 것인지</li><li>구경꾼 <code>browser</code>을 구매자로 전환하기 위해서 필요한 것이 무엇인지</li><li>거래를 완료하도록 고객을 유인하는 데 필요한 할인은 어느 정도인지를 예측하는 것</li></ul></li></ol><h3 id="2-2-예측-마케팅으로-답할-수-있는-질문들"><a href="#2-2-예측-마케팅으로-답할-수-있는-질문들" class="headerlink" title="2-2. 예측 마케팅으로 답할 수 있는 질문들"></a>2-2. 예측 마케팅으로 답할 수 있는 질문들</h3><ol><li>(현재) 최우수고객<ul><li><strong>최우수 고객</strong>은 누구인가?</li></ul></li><li>(현재) 유사고객<ul><li>기존의 최우수 고객과 <strong>유사한 신규고객</strong>은 누구인가?</li><li>데이터에서 페르소나를 찾아내어<br>그것과 <strong>유사한 고객</strong>을 더 많이 획득한다.</li></ul></li><li>(현재) 채널<ul><li>어떤 <strong>마케팅 채널</strong>이 가장 수익성이 높은가?</li></ul></li><li>(현재) 지갑점유율 <ul><li>특정고객에게 우리 회사의 <strong>지갑점유율</strong>은 얼마나 되는가?</li></ul></li><li>(예측) 구매 가능성<ul><li>어떤 <strong>예상고객</strong>(비구매자)이 <strong>구매할 가능성</strong>이 가장 높은가?</li><li>어떤 기존(또는 과거) 고객이 <strong>구매할 가능성</strong>이 가장 높은가?</li><li>기존고객 중 구매할 가능성이 가장 <strong>낮은 것</strong>은 누구인가?</li></ul></li><li>(예측) 제품 관심도<ul><li>어떤 고객이 <strong>특정한 신제품</strong>에 대해서 <strong>관심</strong>이 있을까?</li><li>이 고객이 관심을 가질만한 <strong>다른 제품이나 콘텐츠</strong>는 무엇일까?</li></ul></li></ol><a name="why"><h2 id="3-예측마케팅-도입이-가속화되는-이유"><a href="#3-예측마케팅-도입이-가속화되는-이유" class="headerlink" title="3. 예측마케팅 도입이 가속화되는 이유"></a>3. 예측마케팅 도입이 가속화되는 이유</h2><h3 id="💁‍♀️-고객은-브랜드-업체와-더-의미-깊은-관계를-요구하고-있다-⭐️"><a href="#💁‍♀️-고객은-브랜드-업체와-더-의미-깊은-관계를-요구하고-있다-⭐️" class="headerlink" title="💁‍♀️ 고객은 브랜드 업체와 더 의미 깊은 관계를 요구하고 있다 ⭐️"></a>💁‍♀️ 고객은 <code>브랜드 업체</code>와 더 <u>의미 깊은 관계</u>를 요구하고 있다 ⭐️</h3><ul><li><p>🙋‍♀️ <strong>소비자는</strong></p><ul><li>브랜드 업체들에게 일정한 형태의 <strong>개인맞춤형 설정</strong>을 기대한다.<ul><li>아무래도 그동안의 <strong>피로도</strong> 때문에<ul><li>예_전자상거래 사이트가, 자신들의 <strong>과거구매내역을 기억하고 있기를 기대한다.</strong></li></ul></li><li>가장 <strong>인기 있는 개인맞춤형</strong> 경험 ⭐️<ul><li>자신이 이전에 들여다 보았던 제품에 대한 할인</li><li>자신이 원하는 제품의 출시에 대한 알림</li><li>vip 고객 사은 행사를 제공하는 이메일</li></ul></li></ul></li><li>신규고객으로서 <strong>환영인사</strong>를 받기를 원한다.</li><li>밀레니엄세대(18세 ~ 34세) <strong>개인맞춤화</strong>를 좋게 평가할 가능성이 더 높다.<ul><li>예_생일을 기억하기를 기대한다.</li></ul></li><li>📩 이메일의 개인맞춤화가<br>웹페이지의 DA(display ads)의 개인맞춤화보다 훨씬 인기가 있다.<ul><li><strong>이메일 리타겟팅을 환영</strong></li><li>웹기반 리타겟팅은 20%미만이 이를 환영</li><li>오늘날 고객들은 자신과 관련성이 더 많은 이메일을 적절한 시기에 받는다.</li></ul></li></ul></li><li><p>🤦‍♀️ 고객이 자신이 주목받기를 기대했지만,<br><strong>그것을 얻지 못하고 있다는 신호</strong></p><ul><li>수신거부가 많이 발생?</li><li>불만 CS가 비정상적으로 많이 발생?</li><li>반복 구매자가 적음?</li></ul></li></ul><h3 id="생각-방향-틀어보기"><a href="#생각-방향-틀어보기" class="headerlink" title="생각 방향 틀어보기"></a>생각 방향 틀어보기</h3><ul><li>많은 마케터들은 고객과 관련이 있는 경험을 제공한다고 스스로 생각하지만,<br>소비자들의 인식은 종종 매우 다르다.</li><li>마케터들은 사고방식을 극적으로 바꿔야한다.<ul><li>이메일 캠페인에서 클릭률이 4%가 되면 마케터는 기뻐할것이다.</li><li>반대로 96%가 그 이메일이 자신과 관련성이 없다고 판단했다는 것을 의미한다.</li></ul></li></ul><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9791195327799&orderClick=LEA&Kc=" "">빅데이터를 활용한 예측마케팅 전략</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;img src=&quot;/images/2020/08/tldr.jpg&quot; alt=&quot;요약 이미지&quot;&gt;

&lt;p&gt;예측마케팅은 
      
    
    </summary>
    
      <category term="03_Communication" scheme="http://feel5ny.github.io/categories/03-Communication/"/>
    
      <category term="Marketing" scheme="http://feel5ny.github.io/categories/03-Communication/Marketing/"/>
    
    
      <category term="maketing" scheme="http://feel5ny.github.io/tags/maketing/"/>
    
      <category term="customer" scheme="http://feel5ny.github.io/tags/customer/"/>
    
  </entry>
  
  <entry>
    <title>리팩토링2판) 1. 예시로 알아보기</title>
    <link href="http://feel5ny.github.io/2020/04/04/Refactoring_002/"/>
    <id>http://feel5ny.github.io/2020/04/04/Refactoring_002/</id>
    <published>2020-04-04T11:12:34.000Z</published>
    <updated>2020-04-04T14:23:02.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>⭐️⭐️⭐️</p><ol><li>리팩토링하기 전에 제대로 된 <strong>테스트</strong>부터 마련한다. 테스트는 반드시 <strong>자가진단</strong>하도록 만든다.</li><li>프로그램이 새로운 기능을 추가하기에 편한 구조가 아니라면, 먼저 <strong>기능을 추가하기 쉬운 형태로 리팩터링</strong>하고 나서 원하는 기능을 추가한다.</li><li>리팩터링은 프로그램 수정을 <strong>작은 단계</strong>로 나눠 진행한다. 그래서 <strong>중간에 실수하더라도 버그를 쉽게 찾을 수 있다.</strong></li><li>컴퓨터가 이해하는 코드는 바보도 작성할 수 있다. <strong>사람이 이해하도록 작성하는 프로그래머</strong>가 진정한 실력자다.</li><li>캠핑자들에게는 도착했을 때보다 깔끔하게 정돈하고 떠난다는 규칙이 있다. 프로그래밍도 마찬가지다. 항시 코드베이스를 <strong>작업 시작 전보다 건강하게(healthy) 만들어놓고 떠나야 한다.</strong></li><li>좋은코드를 가늠하는 확실한 방법은 <strong>얼마나 수정하기 쉬운가다</strong>. (다형성을 활용해 계산 코드 재구성하기)</li><li>코드를 건강하게 관리하려면 프로그래밍 팀의 <strong>현재와 이상의 차이에 항상 신경 쓰면서</strong>, 이상에 가까워지도록 리팩토링해야한다.</li></ol><hr><hr><h3 id="예시로-접근해보기"><a href="#예시로-접근해보기" class="headerlink" title="예시로 접근해보기"></a>예시로 접근해보기</h3><ul><li>다양한 연극을 외주로 받아서 공연하는 극단에서<br>공연 요청이 들어오면,<br>연극의 장르와 관객 규모를 기초로 비용을 책정하는데,<br>이때 발생했던 공연료와 포인트를 확인하는 프로그램이다.</li></ul><h1 id="최초-코드"><a href="#최초-코드" class="headerlink" title="최초 코드"></a>최초 코드</h1><iframe src="https://codesandbox.io/embed/ripaegtoring2panyesi5-xw7qt?fontsize=14&hidenavigation=1&module=%2Fsrc%2Finit%2Findex.js&theme=dark&view=editor" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="[리팩토링2판]_예시" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><p>발견부분</p><ol><li>청구내역을 HTML로 출력하는 기능이 필요.</li><li>예측 가능한 기획 변경 대응</li></ol><ul><li>비슷한 함수를 복사할 경우 중복되는 부분의 수정이 <strong>일관되게 반영되도록 보장해야한다.</strong></li><li>리팩터링이 필요한 이유는 <strong>변경</strong>때문이다.</li></ul><h2 id="리팩토링하기-전에-제대로-된-테스트부터-마련한다-테스트는-반드시-자가진단하도록-만든다"><a href="#리팩토링하기-전에-제대로-된-테스트부터-마련한다-테스트는-반드시-자가진단하도록-만든다" class="headerlink" title="리팩토링하기 전에 제대로 된 테스트부터 마련한다.테스트는 반드시 자가진단하도록 만든다."></a>리팩토링하기 전에 제대로 된 <code>테스트부터 마련</code>한다.<br>테스트는 반드시 <code>자가진단</code>하도록 만든다.</h2><ul><li>테스트코드들부터 마련해야한다.</li><li>리팩터링에서 테스트의 역할은 굉장히 중요하다.</li><li>리팩터링 기법들이 버그 발생 여지를 최소화하도록 구성됐다고는 하나,<br>실제 작업은 사람이 수행하기 때문에 언제든지 실수할 수 있다.</li></ul><hr><ul><li>리팩터링 시 테스트에 상당히 의지할 필요가 있다.</li><li>테스트를 작성하는 데 시간이 좀 걸리지만,<br>신경 써서 만들어두면 디버깅시간이 줄어서 전체 작업시간은 오히려 단축된다.</li><li>리펙터링 후에는 반드시 테스트하는 습관을 가져야한다.</li></ul><h2 id="프로그램이-새로운-기능을-추가하기에-편한-구조가-아니라면-먼저-기능을-추가하기-쉬운-형태로-리팩터링하고-나서원하는-기능을-추가한다"><a href="#프로그램이-새로운-기능을-추가하기에-편한-구조가-아니라면-먼저-기능을-추가하기-쉬운-형태로-리팩터링하고-나서원하는-기능을-추가한다" class="headerlink" title="프로그램이 새로운 기능을 추가하기에 편한 구조가 아니라면,먼저 기능을 추가하기 쉬운 형태로 리팩터링하고 나서원하는 기능을 추가한다."></a>프로그램이 새로운 기능을 추가하기에 <code>편한 구조가 아니라면</code>,<br>먼저 <code>기능을 추가하기 쉬운 형태로 리팩터링</code>하고 나서<br>원하는 기능을 추가한다.</h2><ul><li><p>프로그램이 잘 작동하는 상황에서 그저 코드가 ‘<strong>지저분하다</strong>‘는 이유료 불평하는 것은<br>프로그램의 구조를 너무 미적인 기준으로만 판단하는 건 아닐까</p><ul><li>코드를 수정하려면 <strong>사람이 개입되고</strong>, 사람은 미적 상태에 민감하다.</li><li>설계가 나쁜 시스템은 수정하기 어렵다.</li><li>무엇을 수정할지 찾기 어렵다면 실수를 저질러서 버그가 생길 가능성도 높아진다.</li></ul></li><li><p>수백줄짜리 코드를 수정할 때면,<br>먼저 프로그램의 작동방식을 더 쉽게 파악할 수 있도록<br>코드를 여러 함수와 프로그램 요소로 재구성한다.</p></li></ul><h2 id="리팩터링은-프로그램-수정을-작은-단계로-나눠-진행한다-그래서-중간에-실수하더라도-버그를-쉽게-찾을-수-있다"><a href="#리팩터링은-프로그램-수정을-작은-단계로-나눠-진행한다-그래서-중간에-실수하더라도-버그를-쉽게-찾을-수-있다" class="headerlink" title="리팩터링은 프로그램 수정을 작은 단계로 나눠 진행한다. 그래서 중간에 실수하더라도 버그를 쉽게 찾을 수 있다."></a>리팩터링은 프로그램 수정을 <code>작은 단계</code>로 나눠 진행한다. <br>그래서 중간에 실수하더라도 <code>버그</code>를 쉽게 찾을 수 있다.</h2><iframe src="https://codesandbox.io/embed/ripaegtoring2panyesi5-xw7qt?fontsize=14&hidenavigation=1&module=%2Fsrc%2Frefactor%2F02%2Findex.js&theme=dark&view=editor" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="[리팩토링2판]_예시" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><ul><li>함수 추출하기</li><li>변수명 변경</li><li>변수 인라인으로 변경</li><li>반복문 쪼개기</li></ul><hr><p>함수 추출 이후에는 <strong>명확하게</strong> 표현할 수 있는 간단한 방법을 찾아보자.</p><ul><li>변수명<ul><li>접두어로 타입을 표현한다.</li><li>매개변수의 타입이 뚜렷하지 않으면 부정관사를 붙인다. (a/an)</li><li>캔트백 [Smalltalk Best Practice Patterns]를 참고했다고함</li></ul></li><li>좋은 코드라면 하는 일이 명확히 드러나야하며, 변수 이름은 커다란 역할을 한다.</li><li>추출한 함수에는 그 코드가 하는 일을 설명하는 이름을 지어준다.<ul><li>다음번에 코드를 볼때 다시 분석하지 않아도<br>코드 스스로가 자신이 하는 일이 무엇인지 이야기해줄 것이다.</li></ul></li></ul><hr><h2 id="컴퓨터가-이해하는-코드는-바보도-작성할-수-있다-사람이-이해하도록-작성하는-프로그래머가-진정한-실력자다"><a href="#컴퓨터가-이해하는-코드는-바보도-작성할-수-있다-사람이-이해하도록-작성하는-프로그래머가-진정한-실력자다" class="headerlink" title="컴퓨터가 이해하는 코드는 바보도 작성할 수 있다.사람이 이해하도록 작성하는 프로그래머가 진정한 실력자다."></a>컴퓨터가 이해하는 코드는 바보도 작성할 수 있다.<br><code>사람이 이해하도록 작성하는 프로그래머</code>가 진정한 실력자다.</h2><ul><li><strong>임시변수를 질의함수로 바꾸기</strong>(7장): 긴 함수를 쪼갤때마다 변수를 최대한 제거한다.<ul><li>지역변수를 제거해서 얻는 가장 큰 장점은 추출 작업이 훨씬 쉬워진다는 것이다.</li><li>유효범위를 신경써야 할 대상이 줄어들기 때문이다.</li></ul></li><li><strong>변수 인라인하기</strong>(6장): 변수를 제거하고 바로 함수를 적용한다.<blockquote><p>개인적으로 이건 잘 모르겠다.<br>함수 안에서 해당변수가 여러번 필요한 경우가 있는데 그때마다 호출하는거가 더 나은건지,<br>변수로 해서 레퍼런스만 호출하는게 좋은건지.</p></blockquote><hr><blockquote><p>라고 했지만, 책 마지막에는<br>“특별한 경우가 아니라면 <strong>성능이슈는 일단 무시</strong>하라는 것,<br>리팩토링때문에 성능이 떨어진다면,<br>리팩터링을 마무리하고 나서 성능을 개선하자”</p></blockquote></li><li><strong>함수명 바꾸기</strong>(6장)<ul><li>이름짓기는 중요하면서도 쉽지 않은 작업이다.</li><li>이름이 좋으면 함수 본문을 읽지 않고도 무슨일을 하는지 알 수 있다.</li></ul></li><li><strong>반복문 쪼개기</strong>(8장): 반복문안에서 여러 역할을 하는 것들을 반복분을 따로 만들어서 각각 수행하도록..<ul><li>논리적인 요소를 파악하기 쉽도록 코드의 구조를 보강하는데 주안점을 두고 리팩터링.<br>== 복잡하기 얽힌 덩어리를 잘게 쪼개는 작업</li></ul></li><li><strong>문장 슬라이드하기</strong>(8장): 문장 위치를 바꾸는것..?</li></ul><hr><h2 id="캠핑자들에게는-도착했을-때보다-깔끔하게-정돈하고-떠난다는-규칙이-있다-프로그래밍도-마찬가지다-항시-코드베이스를-작업-시작-전보다-건강하게-healthy-만들어놓고-떠나야-한다"><a href="#캠핑자들에게는-도착했을-때보다-깔끔하게-정돈하고-떠난다는-규칙이-있다-프로그래밍도-마찬가지다-항시-코드베이스를-작업-시작-전보다-건강하게-healthy-만들어놓고-떠나야-한다" class="headerlink" title="캠핑자들에게는 도착했을 때보다 깔끔하게 정돈하고 떠난다는 규칙이 있다.프로그래밍도 마찬가지다.항시 코드베이스를 작업 시작 전보다 건강하게(healthy) 만들어놓고 떠나야 한다."></a>캠핑자들에게는 <code>도착했을 때보다 깔끔하게 정돈하고 떠난다</code>는 규칙이 있다.<br>프로그래밍도 마찬가지다.<br>항시 코드베이스를 <code>작업 시작 전보다 건강하게(healthy) 만들어놓고 떠나야 한다.</code></h2><iframe src="https://codesandbox.io/embed/ripaegtoring2panyesi5-xw7qt?fontsize=14&hidenavigation=1&module=%2Fsrc%2Frefactor%2F03%2Findex.js&theme=dark&view=editor" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="[리팩토링2판]_예시" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><ul><li><strong>단계 쪼개기</strong>(6장): 1. 필요한 데이터를 처리하고 =&gt; 2. 그 다음 단계 =&gt; …</li><li><strong>함수 옮기기</strong>(8장)</li><li><strong>반복문을 파이프라인으로 바꾸기</strong>(8장)</li><li>간결함이 지혜의 정수일지 몰라도, 프로그래밍에서만큼은 명료함이 진화할 수 있는 소프트웨어의 정수다.</li></ul><hr><h2 id="좋은코드를-가늠하는-확실한-방법은-얼마나-수정하기-쉬운가다-다형성을-활용해-계산-코드-재구성하기"><a href="#좋은코드를-가늠하는-확실한-방법은-얼마나-수정하기-쉬운가다-다형성을-활용해-계산-코드-재구성하기" class="headerlink" title="좋은코드를 가늠하는 확실한 방법은 얼마나 수정하기 쉬운가다.다형성을 활용해 계산 코드 재구성하기"></a>좋은코드를 가늠하는 확실한 방법은 <code>얼마나 수정하기 쉬운가</code>다.<br><code>다형성</code>을 활용해 계산 코드 재구성하기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">amountFor</span>(<span class="params">aPerformance</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (aPerformance.play.type) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"tragedy"</span>: <span class="comment">//비극</span></span><br><span class="line">        result = <span class="number">40000</span>;</span><br><span class="line">        <span class="keyword">if</span> (aPerformance.audience &gt; <span class="number">30</span>)</span><br><span class="line">          result += <span class="number">1000</span> * (aPerformance.audience - <span class="number">30</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"comedy"</span>: <span class="comment">//희극</span></span><br><span class="line">        result = <span class="number">30000</span>;</span><br><span class="line">        <span class="keyword">if</span> (aPerformance.audience &gt; <span class="number">20</span>)</span><br><span class="line">          result += <span class="number">1000</span> + <span class="number">500</span> * (aPerformance.audience - <span class="number">20</span>);</span><br><span class="line">        result += <span class="number">300</span> * aPerformance.audience;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`알 수 없는 장르: <span class="subst">$&#123;aPerformance.play.type&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>위 코드는 타입이 추가될수록 <strong>복잡도가 올라간다.</strong><ul><li>다형성을 활용하는 것이 자연스럽다.</li></ul></li><li><strong>조건부 로직을 다형성으로 바꾸기</strong>(10장)<ul><li>class로 함수옮기기를 하는 것은 다른 컨텍스트로 옮기는 큰 작업</li></ul></li><li><strong>타입코드를 서브클래스로 바꾸기</strong>(12장)</li><li><strong>생성자 팩터리 함수로 바꾸기</strong>(11장)</li></ul><iframe src="https://codesandbox.io/embed/ripaegtoring2panyesi5-xw7qt?fontsize=14&hidenavigation=1&module=%2Fsrc%2Frefactor%2F04%2FcreateStatementData.js&theme=dark&view=editor" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="[리팩토링2판]_예시" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><ol><li>원본함수를 중첩 함수 여러개로 나눴다.</li><li>계산코드와 출력코드를 분리했다. (단계 쪼개기)</li><li>계산로직을 다형성으로 표현했다.</li></ol><ul><li>코드는 명확해야한다.</li><li>코드를 수정해야 할 상황이 되면 고쳐야 할 곳을 쉽게 찾을 수 있고,<br>오류 없이 빠르게 수정할 수 있어야 한다.</li><li>건강한 코드베이스는 <strong>생산성을 극대화</strong>하고,<br>고객에게 필요한 기능을<br><strong>더 빠르고 저렴한 비용으로 제공</strong>하도록 해준다.</li></ul><hr><h2 id="코드를-건강하게-관리하려면프로그래밍-팀의-현재와-이상의-차이에-항상-신경-쓰면서-이상에-가까워지도록-리팩토링해야한다"><a href="#코드를-건강하게-관리하려면프로그래밍-팀의-현재와-이상의-차이에-항상-신경-쓰면서-이상에-가까워지도록-리팩토링해야한다" class="headerlink" title="코드를 건강하게 관리하려면프로그래밍 팀의 현재와 이상의 차이에 항상 신경 쓰면서,이상에 가까워지도록 리팩토링해야한다."></a>코드를 건강하게 관리하려면<br>프로그래밍 팀의 현재와 이상의 차이에 항상 신경 쓰면서,<br><code>이상에 가까워지도록 리팩토링</code>해야한다.</h2><p>리팩토링을 효과적으로 하는 핵심은</p><ul><li>단계를 잘게 나눠야 더 빠르게 처리할 수 있고</li><li>코드는 절대 깨지지 않으며</li><li>작은 단계들이 모여서 상당히 큰 변화를 이룰 수 있다는 사실을 깨닫는 것이다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;p&gt;⭐️⭐️⭐️&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;리팩토링하기 전에 제대로 된 &lt;strong&gt;테스트&lt;/strong&gt;부터
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="CleanCode" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/CleanCode/"/>
    
    
      <category term="refactoring" scheme="http://feel5ny.github.io/tags/refactoring/"/>
    
  </entry>
  
  <entry>
    <title>WebDAV와 공동작업</title>
    <link href="http://feel5ny.github.io/2020/02/03/HTTP_019/"/>
    <id>http://feel5ny.github.io/2020/02/03/HTTP_019/</id>
    <published>2020-02-02T15:10:10.000Z</published>
    <updated>2020-04-04T07:35:15.671Z</updated>
    
    <content type="html"><![CDATA[<hr><!-- 1. WebDAV와 XML1. WebDAV 헤더1. WebDAV 메서드  1. WebDAV 잠금과 덮어쓰기 방지    1. LOCK 메서드    2. UNLOCK 메서드  2. 속성과 meta 데이터    1. propfind 메서드    2. proppatch 메서드  3. 콜랙션과 이름공간 관리    1. MKCOL 메서드    2. DELETE 메서드    3. COPY와 MOVE 메서드  4. 향상된 HTTP/1.1 메서드1. WebDAV의 버전관리1. WebDAV의 미래 --><hr><ul><li>웹 분산 저작과 버저닝 Web Distributed Authoring and Versioning, WebDAV</li><li>WebDAV는 웹 배포 공동 작업에 대한 또 다른 영역을 개척했다.<ul><li>현재 공동작업으로 <strong>svn, git</strong>이 널리 쓰이고 있다</li></ul></li><li>WebDAV은 공동 저작에 적합한 플랫폼을 제공하려고 HTTP를 확장하는 데 집중하였다.</li></ul><a name="xml"><h1 id="1-WebDAV와-XML"><a href="#1-WebDAV와-XML" class="headerlink" title="1. WebDAV와 XML"></a>1. WebDAV와 XML</h1><ul><li>WebDAV의 메서드는 요청과 응답 관련 정보를 모두 잘 다루어야 한다.</li><li>HTTP는 보통 이 정보를 메세지 헤더에 담아 전달한다.<ul><li>헤더에만 정보를 담아 전송하는 것은 한계가 있다.</li><li>WebDAV는 이를 해결하기 위해 XML을 지원한다.</li></ul></li><li>XML은 구조화된 데이터를 표현할 때 사용하는 포맷. <strong>메타 마크업 언어</strong>다.</li><li>다음과 같은 용도로 사용한다.<ol><li>데이터를 어떻게 처리할 것인지 설명하는 <strong>명령 포맷</strong></li><li>서버의 <strong>복잡한 응답을 표현</strong>하는 데 사용하는 포맷</li><li>콜렉션과 리소스를 처리하는 데 사용하는 <strong>커스텀 정보 포맷</strong></li><li><strong>데이터 자체를 표현</strong>할 수 있는 유연한 포맷</li><li>대부분의 <strong>국제화</strong> 관련 문제에 대한 훌륭한 해결책</li></ol></li><li>WebDAV는 <code>DAV.</code>라는 별도의 XML namespace를 정의한다.<ul><li>요소나 속성 이름의 집합</li><li>이미 정의된 스키마는,<br>구문 분석 소프트웨어가 DTD 파일을 읽고 그것들을 정확히 해석할 필요 없이,<br>XML 스키마에서 데이터를 추정할 수 있게 한다. </li></ul></li></ul><a name="header"><h1 id="2-WebDAV-헤더"><a href="#2-WebDAV-헤더" class="headerlink" title="2. WebDAV 헤더"></a>2. WebDAV 헤더</h1><ul><li><strong>DAV</strong><ul><li>WebDAV를 제공하는 서버와 통신할 때 사용. </li><li>WebDAV에서 지원하는 모든 리소스는 OPTIONS 요청에 대한 응답에 이 헤더를 포함해야 한다.</li></ul></li><li><strong>Depth</strong></li><li><strong>Destination</strong> : COPY나 MOVE 메서드가 목적지 URI를 식별하는데 쓰인다.</li><li><strong>If</strong>: 조건집합을 정의한다. 조건들에 모두 많지 않으면 요청은 실패. </li><li><strong>Lock-Token</strong>: UNLOCK 메서드에서 사용한다.</li><li><strong>Overwrite</strong>: 대상을 덮어쓸 것인지 아닌지 기술한다.</li><li><strong>Timeout</strong></li></ul><a name="method"><h1 id="3-WebDAV-메서드"><a href="#3-WebDAV-메서드" class="headerlink" title="3. WebDAV 메서드"></a>3. WebDAV 메서드</h1><h2 id="3-1-WebDAV-잠금과-덮어쓰기-방지"><a href="#3-1-WebDAV-잠금과-덮어쓰기-방지" class="headerlink" title="3.1 WebDAV 잠금과 덮어쓰기 방지"></a>3.1 WebDAV 잠금과 덮어쓰기 방지</h2><ul><li><p>공동 작업과 관련한 문제들</p></li><li><p>WebDAV는 이 문제를 개선하기 위해 <strong>잠금</strong>이라는 개념을 지원한다.</p></li><li><p>잠금이 완벽한 해결책은 아니다.</p><ul><li>완벽한 해결을 위해서는<br>버저닝와 메세징을 지원해야 한다.</li></ul></li><li><p>WebDAV는 2가지 형식의 잠금을 지원한다.</p><ol><li>리소스나 콜렉션에 대한 배타적 쓰기 잠금</li><li>리소스나 콜렉션에 대한 공유된 쓰기 잠금</li></ol></li></ul><h3 id="1-리소스나-콜렉션에-대한-배타적-쓰기-잠금"><a href="#1-리소스나-콜렉션에-대한-배타적-쓰기-잠금" class="headerlink" title="1. 리소스나 콜렉션에 대한 배타적 쓰기 잠금"></a>1. 리소스나 콜렉션에 대한 배타적 쓰기 잠금</h3><ul><li>잠금 소유자만 쓸 수 있게 보장한다.<ul><li>이 잠금 형식은 잠재적인 충돌을 완벽히 제거한다.</li><li>공유된 쓰기 잠금은<br>여러 사람으로 이루어져 있는 그룹이<br>하나의 문서에 작업할 수 있게 한다. </li><li>이 잠금 형식은 모든 저자가 각각 서로의 활동을 인식하고 있는 상황에서는 잘 동작한다.</li></ul></li><li>WebDAV는 잠금과 관련한 메서드로 <code>LOCK</code>, <code>UNLOCK</code>을 제공한다.<ol><li>잠금을 수행하려면, <em>저자를 식별하는 메커니즘</em>이 필요한다.<br>=&gt; WebDAV는 <strong>다이제스트 인증</strong>을 요구한다.</li><li>잠금이 승인되면, 서버는 도메인 전체에서 유일한 토큰을 클라에 반환한다.<br>: <strong>opaquelocktoken</strong> 잠금 토큰 URI 스킴</li><li>그 이후에 클라가 서버에 쓰기를 보내고자 할때, 서버에 연결하고 다이제스트 인증을 수행한다.<ul><li>인증이 완료되면 WebDAV 클라는 PUT 요청을 통해 잠금 토큰을 보낸다.</li></ul></li></ol></li></ul><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong><br><a href="https://tools.ietf.org/html/rfc4918" target="_blank" rel="noopener">RFC 4918</a></p></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;!-- 1. WebDAV와 XML
1. WebDAV 헤더
1. WebDAV 메서드
  1. WebDAV 잠금과 덮어쓰기 방지
    1. LOCK 메서드
    2. UNLOCK 메서드
  2. 속성과 meta 데이터
    1. propf
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="release" scheme="http://feel5ny.github.io/tags/release/"/>
    
  </entry>
  
  <entry>
    <title>웹 호스팅</title>
    <link href="http://feel5ny.github.io/2020/02/02/HTTP_018/"/>
    <id>http://feel5ny.github.io/2020/02/02/HTTP_018/</id>
    <published>2020-02-01T15:10:10.000Z</published>
    <updated>2020-02-02T15:09:11.350Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>콘텐츠 리소스를 저장, 중개, 관리하는 일을 통틀어 <strong>웹 호스팅</strong>이라 한다.</li><li>필요한 하드웨어나 소프트웨어를 직접 관리하기 어렵다면,<br>호스팅 서비스나 호스팅 업체가 필요할 것이다.</li><li>호스팅 업체는 서버와 웹 사이트 관리 프로그램을 대여해주고<br>다양한 등급의 보안, 리포트, 사용 편의를 제공한다.</li></ul><a name="service"><h1 id="1-호스팅-서비스"><a href="#1-호스팅-서비스" class="headerlink" title="1. 호스팅 서비스"></a>1. 호스팅 서비스</h1><ul><li>웹이 빠르게 대세가 되면서,<br>모든 사람이 웹 사이트를 원했지만,<br>냉난방 장치가 있는 서버실을 짓고, 도메인 이름을 등록하고, 네트워크 대역폭을 구매할 기술과 시간을 가진 사람은 드물었다.</li><li>그 시간을 절약하기 위해, 전문적으로 관리하는 웹 호스팅 서비스를 제공하는 여러 신사업이 만들어졌다.<ul><li>물리적인 장비관리 ~ 고객이 직접 콘텐츠를 제공할 수 있는 총괄적인 웹 호스팅까지<br>다양한 종류의 서비스들이 있다.</li></ul></li></ul><h2 id="1-1-예-전용-호스팅"><a href="#1-1-예-전용-호스팅" class="headerlink" title="1.1 예: 전용 호스팅"></a>1.1 예: 전용 호스팅</h2><ul><li><a href="https://ko.wikipedia.org/wiki/%EC%A0%84%EC%9A%A9_%ED%98%B8%EC%8A%A4%ED%8C%85_%EC%84%9C%EB%B9%84%EC%8A%A4" target="_blank" rel="noopener">참고 wiki</a></li><li><a href="https://kr.godaddy.com/hosting/dedicated-server" target="_blank" rel="noopener">GoDaddy의 전용호스팅</a></li></ul><hr><hr><a name="virtual"><h1 id="2-가상-호스팅"><a href="#2-가상-호스팅" class="headerlink" title="2. 가상 호스팅"></a>2. 가상 호스팅</h1><ul><li>많은 웹 호스팅 업자는 <strong>컴퓨터 한 대</strong>를 <strong>여러 고객이 공유</strong>하게 해서<br><strong>저렴한</strong> 웹 호스팅 서비스를 제공한다.<ul><li>이를 <strong>공유호스팅</strong> 혹은 <strong>가상호스팅</strong> 이라고 부른다.</li><li>각 웹사이트는 다른 서버에서 호스팅하는 것처럼 보이겠지만,<br>사실은 물리적으로 <strong>같은 서버</strong>에서 호스팅되는 것이다.<ul><li>최종 사용자의 관점에서 가상 호스팅에 있는 웹사이트는,<br>물리적으로 분리된 전용 서버에서 호스팅 하는 사이트와 구분할 수 없어야 한다.</li></ul></li></ul></li><li>가상 호스팅은 비용, 공간, 관리에 이점이 있으므로,<br>가상 호스팅을 제공하는 업체는 한 서버에 여러 개의 웹 사이트를 호스팅하려고 한다.<ul><li>하지만 그것이 PC한대에 웹 사이트 여러 개를 구축한다는 뜻은 아니다.</li><li>호스팅 업자는 복제 서버 더미(<strong><a href="https://ko.wikipedia.org/wiki/%EC%84%9C%EB%B2%84_%ED%8C%9C" target="_blank" rel="noopener">서버 팜</a></strong>)를 만들고<br>서버팜에 부하를 분산할 수 있다.</li><li>팜에 있는 각 서버는 다른 서버를 복제한 것이며,<br>수많은 가상 웹사이트를 호스팅하고 있기 때문에 관리자는 훨씬 편해진다.</li></ul></li></ul><h2 id="2-1-호스트-정보가-없는-가상-서버-요청"><a href="#2-1-호스트-정보가-없는-가상-서버-요청" class="headerlink" title="2.1 호스트 정보가 없는 가상 서버 요청"></a>2.1 호스트 정보가 없는 가상 서버 요청</h2><ul><li>HTTP/1.0 명세는 공용 웹 서버가 호스팅하고 있는 가상 웹사이트에<br><strong>누가 접근하고 있는지</strong> 식별하는 기능을 제공하지 않는다.</li><li><a href="https://feel5ny.github.io/index.html을">https://feel5ny.github.io/index.html을</a> 요청한다면, HTTP/1.0 요청은 호스트명에 대한 별다른 언급 없이 “GET /index.html”이라는 요청을 한다.<ul><li>서버가 여러개의 사이트를 가상 호스팅하고 있으면, 사용자가 어떤 가상 웹 사이트로 접근하려고 하는것인지 아는 데 필요한 정보가 충분하지 않다.</li></ul></li><li>HTTP 대리 서버와 인터셉트 프락시 또한<br>어떤 사이트를 요청하는지에 관한 정보가 필요하다.</li></ul><h2 id="2-2-가상-호스팅-동작하게-하기-VirtualHost"><a href="#2-2-가상-호스팅-동작하게-하기-VirtualHost" class="headerlink" title="2.2 가상 호스팅 동작하게 하기 VirtualHost"></a>2.2 가상 호스팅 동작하게 하기 VirtualHost</h2><ul><li>HTTP 설계자들이 공유 서버인 가상 호스팅을 고려하지 않았다.</li><li>이를 해결하기 위해서, HTTP 요청 메세지에<br><strong>완전한 URL도 포함</strong>해서 보내게 해서 간단히 해결하였다.</li></ul><ol><li><p>URL경로를 통한 가상 호스팅</p><ul><li>서버가 어떤 사이트를 요청하는 것인지 알 수 있게<br>URL에 특별한 경로 컴포넌트를 추가한다.</li><li>“GET /joy/index.html” 조이 사이트에 대한 요청이다.<br>“GET /grey/index.html” 그레이 사이트에 대한 요청이다.</li><li>거의 사용하지 않는다.</li></ul></li><li><p>포트번호를 통한 가상 호스팅</p><ul><li>각 사이트에 다른 포트번호를 할당,<br>분리된 웹 서버의 인스턴스가 요청을 처리한다.</li></ul></li><li><p>IP 주소를 통한 가상 호스팅</p><ul><li>각 가상 사이트에 별도의 IP 주소를 할당하고, 모든 IP 주소를 장비 하나에 연결한다.</li><li>웹 서버는 IP 주소로 사이트 이름을 식별한다.</li><li>각 가상 웹 사이트에 유일한 IP 주소를 한 개 이상 부여한다. 모든 가상 서버의 IP주소는 같은 공용 서버에 연결되어 있다.</li><li>예<ul><li><a href="http://feel5ny.github.io은" target="_blank" rel="noopener">http://feel5ny.github.io은</a> 210.89.164.90<br><a href="http://feel5ny.me는" target="_blank" rel="noopener">http://feel5ny.me는</a> 210.89.164.91 이라고 가정해보자</li></ul><ol><li>클라A는 <a href="http://feel5ny.github.io/index.html을">http://feel5ny.github.io/index.html을</a> 요청한다.</li><li>클라A는 IP 주소를 요청해 210.89.164.90를 얻는다.</li><li>클라A는 210.89.164.90에 공용 웹서버에 TCP 커넥션을 맺는다.</li><li>클라A는 “GET /index.html HTTP/1.0” 요청을 보낸다.</li><li>실제 목적지 IP 주소를(210.89.164.90) 기록하고,<br>이것이 조이의 웹사이트에 대한 가상IP 주소라는 것을 판단하고 요청을 처리한다.</li></ol><ul><li>클라B도 유사하게 처리된다.</li></ul></li><li>규모가 큰 호스팅 업자에게는 약간 어려운 <strong>문제점</strong>이 있다.<ul><li>컴퓨터 시스템이 연결할 수 있는 장비의 <strong>IP 갯수는 제한</strong>되어있다.</li><li>IP주소는 <strong>희소 상품</strong>이다. </li><li>IP주소가 부족한 문제는 호스팅 업자가 용량을 늘리려고 서버를 복제하면서 더 심각해진다.</li></ul></li><li>위의 문제점이 있지만 많이 사용되는 방식이다.</li><li>참고<ul><li><a href="http://furuyakoumuten.com/manual/ko/vhosts/ip-based.html" target="_blank" rel="noopener">IP 기반 가상호스팅 관련: 아파치</a></li></ul></li></ul></li><li><p>Host 헤더를 통한 가상 호스팅</p><ul><li>HTTP/1.1에 Host 요청 헤더를 정의했다.</li><li>웹 서버는 Host 헤더로 가상 사이트를 식별할 수 있다.</li><li>브라우저와 서버 개발자들은 서버가 원 호스트 명을 받아 볼 수 있게 HTTP를 확장했다.</li><li>모든 요청에 호스트 명(그리고 포트)를 Host 확장 헤더에 기술해서 전달한다.</li></ul></li></ol><img src="/images/2020/05/01.png"><h2 id="2-3-HTTP-1-1-Host-헤더"><a href="#2-3-HTTP-1-1-Host-헤더" class="headerlink" title="2.3 HTTP/1.1 Host 헤더"></a>2.3 HTTP/1.1 Host 헤더</h2><ul><li><a href="https://tools.ietf.org/html/rfc7230#section-5.4" target="_blank" rel="noopener">RFC 7230</a></li></ul><h3 id="문법과-사용방법"><a href="#문법과-사용방법" class="headerlink" title="문법과 사용방법"></a>문법과 사용방법</h3><ul><li>Host 헤더에 포트가 기술되어 있지 않으면, 해당 스킴의 기본 포트를 사용한다.</li><li>URL에 IP주소가 있으면, Host 헤더는 같은 주소를 포함해야 한다.</li><li>URL에 호스트 명이 기술되어 있으면,<ul><li>Host 헤더는 같은 호스트 명을 포함해야 한다.</li><li>Host 헤더는 URL의 호스트명이 가리키는 IP 주소를 포함해서는 안된다.<ul><li>여러개의 가상 사이트를 한개의 IP주소에 연결한 가상 호스트 서버에서 문제가 될 수 있기 때문</li></ul></li></ul></li><li>클라가 특정 프락시 서버를 사용한다면<ul><li>Host헤더에는 origin 서버의 호스트명과 포트를 기술해야 한다.</li></ul></li><li>웹 클라는 모든 요청 메세지에 Host헤더를 기술해야 한다.</li><li>웹 프락시는 요청을 전달하기 전에 요청 메세지에 Host 헤더를 추가해야 한다</li><li>HTTP/1.1 웹 서버는<br><strong>Host 헤더 필드가 없는</strong> HTTP/1.1 요청 메세지를 받으면<br>400 상태 코드로 응답해야 한다. </li></ul><h3 id="Host-헤더-해석하기"><a href="#Host-헤더-해석하기" class="headerlink" title="Host 헤더 해석하기"></a>Host 헤더 해석하기</h3><ul><li><p>호스트를 기준으로 리소스를 구분하는 모든 웹 서버는 HTTP/1.1을 통해 오는 리소스를 결정하려면 다음과 같은 규칙을 사용해야 한다.</p></li><li><p>HTTP 요청 메세지에 </p><ul><li>전체 URL이 기술되어 있으면<br>Host 헤더에 있는 값은 무시하고<br>URL을 사용한다.</li><li>전체 URL이 기술되어 있지 않고<br>요청에 Host 헤더가 있으면, 호스트 명과 포트를 Host 헤더에서 가져온다.</li></ul></li><li><p>전체 URL이나 Host 둘다 없을 경우<br>클라에게 400 Bad Request 응답을 반환한다.</p></li></ul><h3 id="Host헤더는-누가-자동-셋팅을"><a href="#Host헤더는-누가-자동-셋팅을" class="headerlink" title="Host헤더는 누가 자동 셋팅을?"></a>Host헤더는 누가 자동 셋팅을?</h3><ul><li>Host나 Connection같이, 셋팅하는 코드를 넣지 않았는데<br>네트워크 탭에서 보면 종종 request 헤더에 포함되어있는 것을 보았다.</li><li>이는 브라우저 엔진 내부에서 자동으로 셋팅해준다.<ul><li>예) <a href="https://github.com/chromium/chromium/blob/bb384192e4fb83e9779c08ef2243b72e11f24166/net/http/http_network_transaction.cc#L929" target="_blank" rel="noopener">chromium</a></li></ul></li><li>자동 셋팅해주는 헤더는 <strong>어디서 확인 가능할까?</strong><ul><li>크롬 확장 api중 webRequest API에는 라이프사이클이 존재하는데 <code>onBeforeSendHeaders</code>라는 콜백으로 확인 가능하다.</li><li><a href="https://developer.chrome.com/extensions/webRequest#life_cycle_footnote" target="_blank" rel="noopener">참고</a></li></ul></li></ul><hr><hr><a name="stable"><h1 id="3-안정적인-웹사이트-만들기"><a href="#3-안정적인-웹사이트-만들기" class="headerlink" title="3. 안정적인 웹사이트 만들기"></a>3. 안정적인 웹사이트 만들기</h1><p>웹 사이트에 장애가 생기는 몇가지 상황</p><ol><li>서버다운</li><li>트래픽 폭증</li><li>네트워크 장애나 손실</li></ol><h2 id="3-1-미러링-된-서버-팜"><a href="#3-1-미러링-된-서버-팜" class="headerlink" title="3.1 미러링 된 서버 팜"></a>3.1 미러링 된 서버 팜</h2><ul><li>서버팜은 서로 대신할 수 있고 식별할 수 있게 설정된 웹 서버들의 집합이다.</li><li>서버팜의 서버에 있는 콘텐츠들은 한 곳에 문제가 생기면,<br>다른 한 곳에서 대신 전달할 수 있게 미러링 할 수 있다.</li><li>미러링된 서버는 계층적인 관계에 있다.<ul><li>한 서버는 (원본 콘텐츠를 가지고 있는) ‘콘텐츠의 원본 제작자’ 같이 행동한다.<ul><li>=&gt; <strong>마스터 원 서버</strong>라 부른다. Master Origin Server</li></ul></li><li>마스터 원 서버로부터 콘텐츠를 받은 미러링된 서버는<ul><li>=&gt; <strong>복제 원 서버</strong>라 부른다. Replica Origin Server</li></ul></li></ul></li></ul><img src="/images/2020/05/03.png"><ul><li>서버 팜에 배포하는 간단한 방법 하나는<br><strong><a href="https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC_%EC%8A%A4%EC%9C%84%EC%B9%98" target="_blank" rel="noopener">네트워크 스위치</a></strong>를 사용해서 서버에 분산 요청을 보내는 것이다.<ul><li>서버에 호스팅 되고 있는<br>각 웹사이트의 IP주소는<br>스위치의 IP주소가 된다.</li></ul></li><li>마스터 원 서버는 복제 원 서버에 콘텐츠를 보낼 책임이 있다.<ul><li>외부에서 볼 때, 이 콘텐츠를 가리키는 IP주소는 스위치의 IP주소다.<br>스위치는 서버에게 요청을 전송해야 하는 책임이 있다.</li><li>미러링된 웹 서버에는 다른 위치에 있는 콘텐츠와 정확히 같은 복제본이 있다.</li></ul></li></ul><img src="/images/2020/05/02.png"><ul><li>위 그림의 시나리오에서는, 클라의 요청이 특정 서버로 가는 2가지 방법이 있다.<ol><li><strong>HTTP 리다이렉션</strong><br>: 콘텐츠에 대한 URL은 <strong>마스터 서버의 IP</strong>를 가리키고,<br> 마스터 서버는 요청을 받는 즉시 복제 서버로 리다이렉트 시킨다.</li><li><strong>DNS 리다이렉션</strong><br>: 콘텐츠의 URL은 4개의 IP주소를 가리킬 수 있고,<br> DNS 서버는 클라에게 전송할 IP주소를 선택할 수 있다.</li></ol></li></ul><h2 id="3-2-콘텐츠-분산-네트워크-CDN"><a href="#3-2-콘텐츠-분산-네트워크-CDN" class="headerlink" title="3.2 콘텐츠 분산 네트워크 CDN"></a>3.2 콘텐츠 분산 네트워크 <code>CDN</code></h2><ul><li>Contents Delivery Network</li><li>콘텐츠 분산 네트워크 CDN 은 특정 콘텐츠의 분산을 목적으로 하는 단순한 네트워크이다.</li><li>네트워크의 노드는 <ol><li>서버 </li><li>대리 서버 </li><li>프락시 서버</li></ol></li></ul><p>가 될 수 있다.</p><blockquote><p>기본적으로 사용자가 원격지에 있는 서버(Origin Server)로 부터 Content(예. Web Object, Video, Music, Image, Document 등)를 다운로드 받을 때 가까이 있는 서버에서 받는 것보다 시간이 오래 걸리므로, <strong>사용자와 가까운 곳에 위치한 Cache Server에 해당 Content를 저장(캐싱)하고</strong> Content 요청시에 Cache Server가 응답을 주는 기술입니다.<br><a href="https://cdn.hosting.kr/cdn%EC%9D%B4%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80%EC%9A%94/" target="_blank" rel="noopener">참고</a></p></blockquote><h2 id="3-3-CDN의-대리-캐시-리버스-프락시"><a href="#3-3-CDN의-대리-캐시-리버스-프락시" class="headerlink" title="3.3 CDN의 대리 캐시 ( == 리버스 프락시 )"></a>3.3 <code>CDN</code>의 대리 캐시 ( == 리버스 프락시 )</h2><ul><li><strong>Gateway 캐시</strong>: 실제 요청을 담당하는 서버에서 관리되는 캐시</li><li>== Reverse 프락시 : forward 프락시의 반대 방향</li><li>대리 서버는 <strong>복제 원 서버를 대신해 사용될 수 있다.</strong></li><li>대리 서버는 미러링 된 웹 서버처럼, 콘텐츠에 대한 요청을 받는다.</li><li>그들은 특정 원 서버 집합을 대신해 요청을 받는다.<ul><li>이는 콘텐츠에 대한 IP주소가 알려졌기 때문에 가능하다.<br>보통 원 서버와 대리 서버가 연결되며, 대리 서버는 특정 원 서버를 가리키는 요청을 받는다.<blockquote><p>??</p></blockquote></li></ul></li><li>대리 서버와 미러링 된 서버의 차이점<ul><li>대리 서버는 <strong>수요에 따라서 동작한다.</strong></li><li>대리 서버는 원서버의 전체 콘텐츠를 복사하지 않는다.</li><li><strong>클라이언트가 요청하는 콘텐츠만 저장할 뿐이다.</strong></li><li>대리 서버의 캐시에 콘텐츠가 분산되는 방식은<br>그들이 받는 요청에 따라 달라진다.</li></ul></li><li>원 서버는 그들의 콘텐츠를 업데이트 해 줄 의무는 없다. </li><li>많은 요청이 있는 콘텐츠를 빠르게 제공하려고,<br>사용자가 요청하기도 전에 콘텐츠를 가져오는 “<strong>미리 가져오기 기능</strong>“을 가진 대리 서버도 있다.</li></ul><h2 id="3-4-CDN의-프락시-캐시"><a href="#3-4-CDN의-프락시-캐시" class="headerlink" title="3.4 CDN의 프락시 캐시"></a>3.4 <code>CDN</code>의 프락시 캐시</h2><ul><li><strong>네트워크 레이어 캐시</strong>: ISP, 방화벽에 설치됨. shared cache</li><li>전통적인 프락시 캐시는 어떤 웹 서버 요청이든지 다 받을 수 있다.</li><li>대리 서버를 사용하면,<br>프락시 캐시의 콘텐츠는 요청이 있을 때만 저장될 것이고,<br>원본 서버 콘텐츠를 정확히 복제한다는 보장이 없다.</li><li>어떤 프락시는 요청이 많이 받는 콘텐츠를 미리 로딩하기도 한다.</li></ul><img src="/images/2020/05/04.png"><ul><li>요청이 있을 때만 저장하는 프락시 캐시<ul><li>레이어2 혹은 레이어3 장비(스위치 혹은 라우터)가 중간에 웹 트래픽을 가로채 처리하기도 한다.</li><li>가로채기 설정은, 클라와 서버 사이의 모든 HTTP 요청이 물리적으로 캐시를 거치게 네트워크 설정을 할 수 있는지에 따라 달라진다.</li><li>콘텐츠는 받는 요청에 따라서 캐시에 분산된다.</li></ul></li></ul><hr><hr><a name="faster"><h1 id="4-웹-사이트-빠르게-만들기"><a href="#4-웹-사이트-빠르게-만들기" class="headerlink" title="4. 웹 사이트 빠르게 만들기"></a>4. 웹 사이트 빠르게 만들기</h1><ul><li><p>서버 팜이나 분산 크락시 캐시, 대리 서버는 혼잡을 조절하고 네트워크 트래픽을 분산시킨다.</p></li><li><p>콘텐츠를 분산시키면,<br>그 콘텐츠를 사용자에게 더 가깝게 만들어 주므로,<br>콘텐츠를 서버에서 클라로의 전송하는 시간이 단축된다.</p></li><li><p>리소스의 로딩속도를 좌우하는 요소</p><ol><li><strong>리다이렉션</strong><br>어떻게 요청과 응답이 클라와 서버 사이에서 연결을 맺고 인터넷을 가로질러 데이터를 전송하는 지.</li><li><strong>인코딩</strong> 콘텐츠를 인코딩 하는 것.</li></ol></li></ul><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ul><li><a href="https://jcdgods.tistory.com/322" target="_blank" rel="noopener">Reverse 프록시 관련</a></li><li><a href="https://blog.ordinarysimple.com/posts/programming/2018-02-25-http-cache/" target="_blank" rel="noopener">캐시 관련</a></li></ul></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;콘텐츠 리소스를 저장, 중개, 관리하는 일을 통틀어 &lt;strong&gt;웹 호스팅&lt;/strong&gt;이라 한다.&lt;/li&gt;
&lt;li&gt;필요한 하드웨어나 소프트웨어를 직접 관리하기 어렵다면,&lt;br&gt;호스팅 서비스나 호스팅 업체가 필요할 것이다.
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="hosting" scheme="http://feel5ny.github.io/tags/hosting/"/>
    
  </entry>
  
  <entry>
    <title>내용협상과 트랜스코딩</title>
    <link href="http://feel5ny.github.io/2020/01/20/HTTP_017/"/>
    <id>http://feel5ny.github.io/2020/01/20/HTTP_017/</id>
    <published>2020-01-20T00:10:10.000Z</published>
    <updated>2020-02-02T15:01:02.261Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>http는 클라와 서버가 서로 내용을 협상할 수 있도록 방법을 제공한다. content-negotiation</li><li><strong>하나의 url이 여러가지 리소스 중 적합한 것에 대응되도록 할 수 있다.</strong><ul><li>여기서는 서로 다른 버전을 <code>varient</code>라고 부른다.</li></ul></li><li>서버는 특정 url에 대해 어떤 콘텐츠가 클라에게 보내주기 가장 적절한지에 대한 판단도 할 수 있어야 한다.</li><li>트랜스코딩은 http 클라와 서버 사이의 내용 협상에 대한 응답에서 수행된다.</li></ul><a name="negotiation"><h1 id="내용-협상-기법"><a href="#내용-협상-기법" class="headerlink" title="내용 협상 기법"></a>내용 협상 기법</h1><ul><li>서버에 있는 페이지들 중<br>어떤 것이 클라에게 맞는지 판단하는<br>3가지 방법</li></ul><ol><li>클라에게 선택지를 주거나 = <strong>클라이언트 주도 협상</strong><ul><li><strong>HOW</strong>: 클라가 요청을 보내면, 서버는 클라에게 선택지를 보내주고, <strong>클라가 선택한다.</strong></li><li><strong>장점</strong>: 서버 입장에서 가장 구현하기 쉽다. 클라는 최선의 선택을 할 수 있다.</li><li><strong>단점</strong>: 대기시간이 증가한다. 즉, 올바른 콘텐츠를 얻으려면 <strong>최소 두번의 요청</strong>이 필요하다.</li></ul></li><li>서버가 자동으로 판단하는 방법 = <strong>서버 주도 협상</strong><ul><li><strong>HOW</strong>: 서버가 클라의 요청 헤더를 검증해서 <strong>어떤 버전을 제공</strong>할지 결정한다.</li><li><strong>장점</strong>: 클라 주도 협상보다 빠르다. <ul><li>HTTP는 서버가 가장 적절한 것을 선택할 수 있도록 q값 메커니즘을 제공하고,<br>서버가 다운스트림 장치에게 요청이 어떻게 평가되는지 말해줄 수 있도록 하기 위해 <code>Vary</code> 헤더를 제공한다.</li></ul></li><li><strong>단점</strong>: 만약 결정이 뻔하지 않으면 (헤더에 맞는 것이 없으면), 서버는 추측을 해야만 한다.</li></ul></li><li>중개자에게 선택하도록 부탁하는 방법 = <strong>투명한 협상</strong><ul><li><strong>HOW</strong>: 투명한 중간장치(주로 프락시 캐시)가 서버를 대신하여 협상을 한다.</li><li><strong>장점</strong>: 웹서버가 협상을 할 필요가 없다. 클라 주도 협상보다 빠르다.</li><li><strong>단점</strong>: 투명 협상을 어떻게 하는지에 대한 정형화된 명세가 없다.</li></ul></li></ol><a name="client"><h1 id="1-클라-주도-협상"><a href="#1-클라-주도-협상" class="headerlink" title="1. 클라 주도 협상"></a>1. 클라 주도 협상</h1><ul><li>서버에게 있어 가장 쉬운 방법은<ul><li>서버가 클라의 요청을 받았을 때,<br>가능한 페이지의 목록을 응답으로 돌려주어<br>클라가 보고 싶은 것을 선택하게 하는 것이다.</li><li>서버 입장에서 구현하기 쉽고,<br>최선의 사본이 선택될 것이다.</li></ul></li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ol><li>(<strong>기술</strong>측면) 각 페이지에 <strong>두 번의 요청</strong>이 필요하다는 것.<ul><li>한번은 <strong>목록</strong>을 얻고</li><li>두번째는 <strong>선택한</strong> 사본을 얻는다.</li><li>선택지를 표현하는 2가지 방법<ol><li>여러가지 버전에 대한 링크와 설명이 담긴 html</li><li><strong><code>300 Multiple Choices</code></strong> 응답코드로 응답을 돌려주는 것. (<a href="https://feel5ny.github.io/2019/08/17/HTTP_003_03/#3">상태코드 글 참고</a>)</li></ol></li></ul></li><li>(<strong>ux</strong>측면) 여러개의 url을 요구한다는 점<ul><li>예)<br>아래처럼 여러 url을 요구할 것이다.<br><a href="https://feel5ny.github.io">https://feel5ny.github.io</a> <code>/korean</code><br><a href="https://feel5ny.github.io">https://feel5ny.github.io</a> <code>/english</code></li><li>어떤 링크를 메인 링크라고 생각할 것인가? (공유할때나, 북마킹할때 등등)</li></ul></li></ol><a name="server"><h1 id="2-서버-주도-협상"><a href="#2-서버-주도-협상" class="headerlink" title="2. 서버 주도 협상"></a>2. 서버 주도 협상</h1><ul><li>불필요한 커뮤니케이션 비용을 줄이는 방향으로<br>서버가 어떤 페이지를 돌려줄 것인지 결정하게 하는 것.<ul><li>클라는 반드시 자신이 무엇을 선호하는지에 대한 충분한 정보를 서버에게 주어서,<br>서버가 현명한 결정을 할 수 있게 해 주어야 한다.</li></ul></li><li>http 서버가 클라에게 보내줄 적절한 응답을 계산하기 위해 사용하는 메커니즘은 2가지<ol><li>내용 협상 헤더들을 살펴본다.<ul><li>서버는 클라의 <code>Accept</code> 관련 헤더들을 들여다보고, 그에 알맞은 응답 헤더를 준비한다.</li></ul></li><li>내용 협상 헤더 외의 다른 헤더들을 살펴본다.<ul><li>예_서버는 클라의 <code>User-Agent</code> 헤더에 기반하여 응답을 보내줄 수도 있다.</li></ul></li></ol></li></ul><h2 id="2-1-내용협상-헤더"><a href="#2-1-내용협상-헤더" class="headerlink" title="2.1 내용협상 헤더"></a>2.1 내용협상 헤더</h2><ul><li><code>Accept</code> : 서버가 어떤 <strong>미디어 타입</strong>으로 보내도 되는지 알려준다.</li><li><code>Accept-Language</code> : 서버가 어떤 <strong>언어</strong>로 보내도 되는지 알려준다.</li><li><code>Accept-Charset</code> : 서버가 어떤 <strong>차셋</strong>으로 보내도 되는지 알려준다.</li><li><code>Accept-Encoding</code> : 서버가 어떤 <strong>인코딩</strong>으로 보내도 되는지 알려준다.</li></ul><p>내용 협상 헤더들은</p><ol><li>클라와 서버가 선호 정보를 서로 교환하고, </li><li>문서들의 여러 버전 중 하나를 선택하는 것을 도와, </li><li>클라의 선호에 가장 잘 맞는 문서를 제공해 주기 위한 목적으로 사용된다.</li></ol><ul><li>만약에 클라중 하나가 일본어를 선호한다면<br>한국어을 돌려줘야할까<br>영어를 돌려줘야할까.<ul><li>한국어를 좀 더 선호한다면,<br>선호한다는 의사 정보를 추가하여 전달할 수 있으면 좋겠다고 생각할 것이다.</li></ul></li><li>HTTP는 풍부한 설명을 품질값을 이용해 전달할 수 있는 메커니즘을 제공한다.<ul><li><strong>quality value</strong>, 줄여서 <code>q</code>값</li></ul></li></ul><h2 id="2-2-내용-협상-헤더의-품질값"><a href="#2-2-내용-협상-헤더의-품질값" class="headerlink" title="2.2 내용 협상 헤더의 품질값"></a>2.2 내용 협상 헤더의 품질값</h2><ul><li><p>HTTP 프로토콜은 클라가 각 선호의 카테고리마다, 여러 선택 가능한 항목을<br>선호도와 함께 나열할 수 있도록 품질값을 정의하였다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept-Language: en;q=0.5, fr;q=0.0, nl;q=1.0, tr;q=0.0</span><br></pre></td></tr></table></figure></li><li><p>q는 0.0부터 1.0까지의 값을 가질 수 있다.</p></li><li><p>위 상황은 네덜란드어(nl)로 된 문서를 받기 원하고 잇으나<br>영어(en)로 된 문서라도 받아들일 것임을 의미한다.</p></li></ul><p>때때로 서버는 클라의 선호에 대응하는 문서를 하나도 갖고있지 않을 수 도 있다.<br>이 경우, 서버는 클라의 선호에 맞추기 위해<br><strong>문서를 고치거나 트랜스코딩</strong> 할 수 있다.</p><h2 id="2-3-그-외의-헤더들에-의해-결정"><a href="#2-3-그-외의-헤더들에-의해-결정" class="headerlink" title="2.3 그 외의 헤더들에 의해 결정"></a>2.3 그 외의 헤더들에 의해 결정</h2><ul><li>서버는 또한 User-Agent와 같은 클라의 다른 요청 헤더들을 이용해 알맞은 요청을 만들어내려고 시도할 수 있다.</li><li>최선에 가장 가까운 대응을 찾아낼 수 있는 q값 매커니즘은 없다.</li><li>서버는 정확한 대응을 찾아내거나,<br>그냥 갖고 있는 것을 제공해주어야 한다.</li><li>캐시는 반드시 캐시된 문서의 올바른 ‘최선의’ 버전을 제공해주려 해야 하기 때문에,<br>HTTP 프르토콜은 서버가 응답에 넣어 보낼 수 있는 <code>Vary</code> 헤더를 정의한다.<ul><li><code>Vary</code> 헤더는 캐시에게 서버가 내줄 응답의 최선의 버전을 결정하기 위해<br>어떤 요청 헤더를 참고하고 있는지 말해준다. </li></ul></li></ul><a name="cache"><h1 id="3-투명-협상"><a href="#3-투명-협상" class="headerlink" title="3. 투명 협상"></a>3. 투명 협상</h1><ul><li>클라 입장에서 협상하는 중개자 프락시를 둠으로써,<br>클라와의 메세지 교환을 최소화하는 동시에<br>서버 주도 협상으로 인한 부하를 서버에서 제거한다.</li><li>투명한 내용 협상을 지원하기 위해, http에서 정의한 <code>Vary</code> 헤더를 사용한다.<ul><li>서버는 어떤 요청 헤더를 검사해야 하는지 프락시에게 Vary 헤더를 통해 말해준다.</li></ul></li></ul><h2 id="3-1-캐시와-얼터네이트-alternate"><a href="#3-1-캐시와-얼터네이트-alternate" class="headerlink" title="3.1 캐시와 얼터네이트 alternate"></a>3.1 캐시와 얼터네이트 alternate</h2><ul><li>캐시는 클라의 요청을 서버로 그대로 전달하고, 응답을 저장한다.</li><li>두번째 요청시 응답은 캐시가 URL에 대응하는 문서를 찾아서 돌려줄 것인데,<br>이때 다른 언어의 문서를 원한다면,<br>캐시는 이번응답과 새로운 응답문서 2가지를 저장해야한다.</li><li>이 다른 버전은 <strong>베리언트</strong>나 <strong>얼터네이트</strong>라고 불리다.<br>variant (:변형)<br>alternate (:교대로)</li></ul><h2 id="3-2-Vary-헤더"><a href="#3-2-Vary-헤더" class="headerlink" title="3.2 Vary 헤더"></a>3.2 Vary 헤더</h2><ul><li>http Vary 응답 헤더는<br>서버가 문서를 선택하거나, 커스텀 콘텐츠를 생성할 때 고려한<br><strong>클라 요청 헤더 모두를 나열한다.</strong></li><li>새 요청이 도착했을 때, 캐시는 내용 협상 헤더들을 이용해 가장 잘 맞는 것을 찾는다.<ul><li>캐시는 반드시 캐시된 응답 안에 서버가 보낸 <strong>Vary</strong> 헤더가 들어있는지 확인하고,<br>Vary 헤더가 명시하고 있는 헤더들은<br>새 요청과 오래된 캐시된 요청에서 그 값이 서로 맞아야만 한다.<ul><li>서버는 클라의 요청 헤더에 따라 그들의 응답이 달라질 수 있기 때문에<br>투명 협상을 구현하기 위해 캐시는 반드시<br><strong>캐시된 variant</strong>와 함께<br>클라 요청 헤더와<br>그에 알맞은 서버 응답헤더 양쪽 모두를 저장해야한다.</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vary: User-Agent, Cookie</span><br></pre></td></tr></table></figure><ul><li>서버의 Vary 헤더가 이렇다면, 거대한 수의 다른 User-Agent와 Cookie이 많은 배리언트 variant를 만들어낼 것이다.</li><li>캐시는 각 배리언트마다 알맞은 문서 버전을 저장해야 한다.</li><li>캐시가 검색을 할 때,<ol><li>먼저 내용 협상 헤더로 적합한 콘텐츠를 맞춰보고</li><li>다음에 요청의 배리언트를 캐시된 배리언트와 맞춰본다.</li><li>만약 맞는 것이 없으면, 캐시는 문서를 서버에서 가져온다.<br>맞는 것이 있다면, 해당 콘텐츠를 보내준다.</li></ol></li></ul><img src="/images/2020/04/03.png"><hr><hr><a name="transcoding"><h1 id="트랜스-코딩"><a href="#트랜스-코딩" class="headerlink" title="트랜스 코딩"></a>트랜스 코딩</h1><ul><li>서버가 클라의 요구에 맞는 문서를 아예 갖고 있지 않다면?<br>이론적으로는 서버는 기존의 문서를 클라가 사용할 수 있는 무언가로 변환할 수도 있다.<br>-&gt; 이 옵션을 <strong>트랜스코딩</strong>이라고 부른다.</li></ul><ol><li>HTML 문서 👉 WML 문서</li><li>고해상도 이미지 👉 저해상도 이미지</li><li>64K색 이미지 👉 흑백 이미지</li><li>프레임을 포함한 복잡한 페이지 👉 프레임이나 이미지가 없는 단순한 텍스트 페이지</li><li>자바 애플릿이 있는 HTML 페이지 👉 자바 애플릿이 없는 페이지</li><li>광고가 있는 페이지 👉 광고가 없는 페이지</li></ol><hr><ol><li><strong>포맷 변환</strong><ul><li>포맷변환은 데이터를 클라가 볼 수 있도록 한 포맷에서 다른 포맷으로 변환하는 것이다.</li></ul></li><li><strong>정보 합성</strong><ul><li>문서에서 정보의 요점을 추출하는 것을 정보 합성이라고 한다. <strong>information synthesis</strong></li><li>각 절의 제목에 기반한 <strong>문서의 개요 생성</strong>이나,<br>페이지에서 광고 및 로고 제거를 들 수 있다.<ul><li>본문의 키워드에 기반하여 페이지를 분류하는<br>더 복잡한 기술은 문서의 핵심을 요약할 때도 역시 유용하다.</li></ul></li><li>이 기술을 포털사이트의 웹페이지 디렉터리와 같은<br>자동화된 웹페이지 분류 시스템에 의해 종종 사용된다.</li></ul></li><li><strong>콘텐츠 주입</strong><ul><li>포맷 변환과 정보 합성은 문서의 양을 줄이지만<br>주입 트랜스코딩은 오히려 양을 늘린다.</li><li>내용 주입 트랜스 코딩의 예로 자동 광고 생성과 사용자 추적 시스템이 있다.</li><li>동적으로 문서에 추가된다.</li></ul></li><li><strong>트랜스 코딩 vs 정적으로 미리 생성해놓기</strong><ul><li>트랜스 코딩의 대안은 웹서버에서 웹페이지의 여러가지 사본을 만드는 것이다.<ul><li>예_고해상도는 저해상도 이미지를 만든다.</li></ul></li><li>여러가지 이유로 그다지 현식적인 기법이 못된다.<ul><li>페이지에 대한 어떠한 작은 변화도 여러 페이지의 수정을 요구하게 되고</li><li>각 페이지의 모든 버전을 저장하기 위해 더 많은 공간이 필요하게 되며</li><li>페이지들을 관리하고, 그것들 중 올바른 것을 골라서 제공해주는 웹서버를 프로그래밍하기 어려워진다.</li></ul></li><li>변환은 더 싼 프락시나 캐시에 있는 외부 에이전트에 의해 수행될 수 있다.</li></ul></li></ol><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Content_negotiation" target="_blank" rel="noopener">http 콘텐츠 협상</a></li></ul></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;http는 클라와 서버가 서로 내용을 협상할 수 있도록 방법을 제공한다. content-negotiation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;하나의 url이 여러가지 리소스 중 적합한 것에 대응되도록 할 수 있다.&lt;/strong
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="vary" scheme="http://feel5ny.github.io/tags/vary/"/>
    
      <category term="Accept header" scheme="http://feel5ny.github.io/tags/Accept-header/"/>
    
      <category term="variant" scheme="http://feel5ny.github.io/tags/variant/"/>
    
      <category term="transcoding" scheme="http://feel5ny.github.io/tags/transcoding/"/>
    
  </entry>
  
  <entry>
    <title>국제화</title>
    <link href="http://feel5ny.github.io/2020/01/13/HTTP_016/"/>
    <id>http://feel5ny.github.io/2020/01/13/HTTP_016/</id>
    <published>2020-01-13T00:10:10.000Z</published>
    <updated>2020-01-27T16:47:32.100Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><a name="http"><h1 id="국제적인-콘텐츠를-다루기-위해-필요한-HTTP-지원"><a href="#국제적인-콘텐츠를-다루기-위해-필요한-HTTP-지원" class="headerlink" title="국제적인 콘텐츠를 다루기 위해 필요한 HTTP 지원"></a>국제적인 콘텐츠를 다루기 위해 필요한 HTTP 지원</h1><ul><li><p>HTTP에서 엔터티 본문이란 그저 <strong>비트들로 가득 찬</strong> 상자에 불과하다.</p></li><li><p>서버는 클라에게 문서의 문자와 언어를<br><strong><code>Content-Type charset</code></strong> 매개변수와<br><strong><code>Content-Language</code></strong> 헤더를 통해 알려준다.</p></li><li><p>클라는 서버에게<br>사용자가 어떤 언어를 이해할 수 있고,<br>어떤 알파벳의 코딩 알고리즘이 브라우저에 설치되어 있는지 말해줄 필요가 있다.<br><strong><code>Accept-Charset</code></strong>과<strong><code>Accept-Language</code></strong> 헤더를 보낸다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Accept-Language: fr, en;q=0.8</span><br><span class="line">Accept-Charset: iso-8859-1, utf-8</span><br></pre></td></tr></table></figure></li><li><p>모국어를 선호하지만, 피치 못할 경우 영어도 사용하는 프랑스어 사용자가 보낸 케이스</p></li><li><p><strong>iso-8859-1</strong> =&gt; 서유럽 차셋 인코딩과<br><strong>utf-8</strong> 유니코드 차셋 인코딩을<br>지원할 것이다.</p></li><li><p>q는 품질 인자로 프랑스어보다 영어에 낮은순위를 주었다. (기본은 1.0)</p></li></ul><hr><a name="charset"><h1 id="1-문자-집합과-HTTP"><a href="#1-문자-집합과-HTTP" class="headerlink" title="1. 문자 집합과 HTTP"></a>1. 문자 집합과 HTTP</h1><h2 id="1-1-Charset은-글자를-비트로-변환하는-인코딩이다"><a href="#1-1-Charset은-글자를-비트로-변환하는-인코딩이다" class="headerlink" title="1.1 Charset은 글자를 비트로 변환하는 인코딩이다."></a>1.1 Charset은 글자를 비트로 변환하는 인코딩이다.</h2><ul><li>HTTP Charset 태그는<br>비트들을 글자로 변환하거나 (디코딩)<br>글자를 비트들로 변환하는 (인코딩)<br>알고리즘을 명명한다.<blockquote><p><a href="https://www.iana.org/assignments/character-sets/character-sets.xhtml" target="_blank" rel="noopener">IANA 문자집합</a></p></blockquote></li><li>몇몇 문자 인코딩 (utf-8이나 iso-2022-jp)은 글자당 비트 수가 일정하지 않아, 더 복잡한 가변길이 코드다.</li><li>이런 종류의 코딩은 중국어나 일본어와 같이,<br>많은 글자로 이루어진 문자체계를 지원하기 위해 <strong>추가적인 비트</strong>를 사용할 수 있게 해준다.</li><li>아랍어는 28개의 문자만을 갖는다.<br>8비트 256개의 유일한 값을 제공하므로, 라틴어, 아랍어, 그 밖의 유용한 기호들을 위한 충분한 공간이 된다.</li></ul><h2 id="1-2-문자집합과-인코딩은-어떻게-동작하는가"><a href="#1-2-문자집합과-인코딩은-어떻게-동작하는가" class="headerlink" title="1.2 문자집합과 인코딩은 어떻게 동작하는가"></a>1.2 문자집합과 인코딩은 어떻게 동작하는가</h2><ul><li>비트들을 문자로 변환하는 디코딩 알고리즘을 지칭하고 적용하는<br>표준화된 방법이 필요하다.</li></ul><ol><li>비트 =&gt; 문자로 변환 (의미 해석) - HTTP</li><li>문자 =&gt; 모양으로 표현 (시각적 표현) - 브라우저, 운영체제, 글꼴이 결정</li></ol><h2 id="1-3-잘못된-Charset은-잘못된-글자들을-낳는다"><a href="#1-3-잘못된-Charset은-잘못된-글자들을-낳는다" class="headerlink" title="1.3 잘못된 Charset은 잘못된 글자들을 낳는다."></a>1.3 잘못된 Charset은 잘못된 글자들을 낳는다.</h2><p>브라우저가 본문으로부터 225 (11100001)을 가져온 경우</p><ul><li>iso-8859-1 (서유럽 문자 코드) 인코딩 양음 악센트가 붙은 소문자 a = <code>á</code></li><li>iso-8859-6 (아랍 코드) : <code>FEH</code> = <code>ف</code></li><li>iso-8859-7 (그리스어) : 알파 = <code>α</code></li><li>iso-8859-8 (히브리어) : <code>BET</code> = <code>ב</code></li></ul><h2 id="1-4-표준화된-MIME-Charset-값"><a href="#1-4-표준화된-MIME-Charset-값" class="headerlink" title="1.4 표준화된 MIME Charset 값"></a>1.4 표준화된 MIME Charset 값</h2><ul><li>특정 문자 인코딩과<br>특정 코딩된 문자집합의 결합을 MIME 차셋이라고 부른다.</li><li>HTTP는 표준화된 MIME 차셋 태그를<br><strong>Content-Type</strong>과 <strong>Accept-Charset</strong> 헤더에 사용한다.</li></ul><h3 id="MIME-차셋-인코딩-태그"><a href="#MIME-차셋-인코딩-태그" class="headerlink" title="MIME 차셋 인코딩 태그"></a>MIME 차셋 인코딩 태그</h3><ul><li><strong>us-ascii</strong> : ascii로도 불리지만, 여러가지 국제 변형때문에 us라는 접두어를 붙이는 것을 선호한다.</li><li><strong>iso-8856-1</strong>(Latin1) : <strong>서유럽</strong> 언어를 지원하기 위한 ascii를 확장</li><li><strong>iso-8856-2</strong> : (체코어, 폴란드어, 루마니아어와 같은) <strong>중부유럽 혹은 동부유럽</strong> 언어에서 사용되는 문자들을 포함시키기 위해 ascii를 확장</li><li><strong>iso-8856-5</strong> : (러시아어, 세르비아어, 불가리아어 등에 사용되는) <strong>키릴</strong> 문자를 포함하기 위해 ascii를 확장</li><li><strong>iso-8856-6</strong> : <strong>아랍</strong> 문자들을 포함하기 위해 ascii를 확장</li><li><strong>iso-8856-7</strong> : 현대 <strong>그리스</strong> 문자를 포함하기 위해 ascii를 확장</li><li><strong>iso-8856-8</strong> : <strong>히브리어와 이디시어</strong> 문자를 위해 ascii를 확장</li><li><strong>iso-8856-15</strong>(Latin0) : 몇몇 <strong>구두점, 분수 기호</strong>들을 <strong>고대 프랑스어와 핀란드어</strong> 글자들로 대체하고, 국제 통화 기호를 <strong>새로운 유로 통화 기호</strong>로 대체하기 위해 iso-8859-1을 갱신한 것이다.</li><li><strong>iso-2202-jp</strong> : 일본어 전자우편과 웹 콘텐츠를 위해 널리 사용되는 인코딩</li><li><strong>euc-jp</strong> : 여러 종류의 모드나 이스케이프 문자열 없이 각 글자를 식별하기 위해 명시적 비트 패턴을 사용하는 iso 2022 호환 가변길이 인코딩이다.</li><li><strong>Shift-JIS</strong> : 마소에 의해 개발. 역사적인 호환성문제때문에 복잡, 모든 문자에 대응하지도 못하지만 여전히 흔하게 쓰이고 있다.</li><li><strong>koi8-r</strong> : 러시아어를 위한 인기있는 8비트 인터넷 문자집합 인코딩 이다.</li><li><strong>utf-8</strong> : 전 세계의 문자들에 대한 보편적인 문자집합인 UCS를 표현하기 위한 흔히 쓰이는 가변길이 문자 인코딩 구조다.</li><li><strong>windows-1252</strong> : 마소는 자신의 코딩됭 문자집합을 코드 페이지라고 부른다. 윈도우 코드페이지 1252는 iso-8859-1의 확장이다</li></ul><blockquote><p><strong>euc-kr과 utf-8</strong> <a href="https://ofcourse.kr/html-course/%EC%9D%B8%EC%BD%94%EB%94%A9" target="_blank" rel="noopener">참고</a><br>euc-kr 방식은 원래 영어만을 고려한 1byte 길이의 ASCII 라는 인코딩 방식을 확장하여 한글을 사용할 수 있도록 만든 2byte 길이의 국가 언어 코드입니다.<br>국가 언어코드. <strong>즉 우리나라에서만 쓸 수 있도록 만든 코드</strong>이며 세계 어디에서나 공통으로 사용되는 인코딩 방식이 아니기 때문에, 다른 언어를 사용하는 환경(외국 등)에서는 <strong>한글 페이지를 제대로 볼 수 없는 문제가 발생합니다.</strong><br>이를 해결하기 위해 새로운 인코딩 방식이 개발되었는데, 그중 가장 보편화된 인코딩이 <strong>UTF-8</strong>입니다. (3byte)<br>예전에는 용량이 작은 euc-kr 방식을 선호하는 곳들도 많았으나, 현재는 용량 문제보다 표준화 및 글로벌 환경을 고려해야 하므로 UTF-8 인코딩 방식을 강력하게 권고하는 바입니다.</p></blockquote><h2 id="1-5-Content-Type-charset-헤더와-메타태그"><a href="#1-5-Content-Type-charset-헤더와-메타태그" class="headerlink" title="1.5 Content-Type charset 헤더와 메타태그"></a>1.5 Content-Type charset 헤더와 메타태그</h2><ol><li><p>웹 서버는 클라에게 MIME charset 태그를 charset 매개변수와 함께 Content-Type 헤더에 담아 보낸다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure></li><li><p>만약 나열되지 않았다면, 수신자는 문서의 콘텐츠로부터 문자집합을 추측하려고 시도한다.</p><ol><li><p>받은 HTML 파일에서 <code>meto</code>태그중 <code>HTTP-EQUIV</code>라는 속성을 갖고 있는 태그를 찾는다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>만약 문서가 html이 아니라면, 혹은<br>meta Content-Type 태그가 없다면,<br>소프트웨어는 언어와 인코딩에 대한 일반적인 패턴을 찾기 위해 <strong>실제 텍스트를 스케닝하여 문자 인코딩을 추측한다.</strong></p></li><li><p>클라가 문자 인코딩을 추측하지 못했다면 <code>iso-8859-1</code>인것으로 가정한다.</p></li></ol></li></ol><h2 id="1-6-Accept-Charset-헤더"><a href="#1-6-Accept-Charset-헤더" class="headerlink" title="1.6 Accept-Charset 헤더"></a>1.6 Accept-Charset 헤더</h2><ul><li>대부분의 클라는 모든 종류의 문자 코딩과 매핑 시스템을 지원하지는 않는다.</li><li>HTTP 클라는 서버에게 정확히 어떤 문자 체계를 그들이 지원하는지 Accep-Charset 요청 헤더를 통해 알려준다.</li><li>Accept-Charset 헤더의 값은 클라가 지원하는 문자 인코딩 목록을 제공해준다.</li><li>이 문자 인코딩 구조 중 어떤 것으로 콘텐츠를 반환할지는 서버의 자유다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept-Charset: iso-8859-1, utf-8</span><br></pre></td></tr></table></figure><hr><a name="glyph"><h1 id="2-다중언어-문자-인코딩에-대한-지침"><a href="#2-다중언어-문자-인코딩에-대한-지침" class="headerlink" title="2. 다중언어 문자 인코딩에 대한 지침"></a>2. 다중언어 문자 인코딩에 대한 지침</h1><h2 id="문자집합-용어"><a href="#문자집합-용어" class="headerlink" title="문자집합 용어"></a>문자집합 용어</h2><ol><li>문자 : 글쓰기의 최소단위. </li><li><strong>글리프</strong> glyph<ul><li>하나의 글자를 표현하기 위한, 획의 패턴이나 다른 것과 구분되는 유일한 시각적 형태</li><li>글자를 여러 방식으로 쓰는 것이 가능하다면, 글리프를 여러 개 가질 수도 있다.</li></ul></li><li><strong>코딩된 문자</strong> coded character<ul><li>각 글자에 할당된 유일한 숫자</li><li><a href="https://ko.wikipedia.org/wiki/%EA%B5%AD%EC%A0%9C_%EB%AC%B8%EC%9E%90_%EC%84%B8%ED%8A%B8" target="_blank" rel="noopener">국제 문자 셋트</a></li></ul></li><li><strong>코드 공간</strong> coding space<ul><li>각 문자 코드의 비트 개수</li><li>ex) UTF-8 인코딩은 유니코드 한 문자를 나타내기 위해 1바이트에서 4바이트까지를 사용한다.</li></ul></li><li><strong>사용 가능 문자집합</strong> character repertoire<ul><li>글자들에 대한 특정한 작업 집합</li></ul></li><li><strong>코딩된 문자집합</strong> coded character set<ul><li>사용 가능 문자집합을 받아서, 각 글자에 코드 공간의 코드를 할당해주는 코딩된 문자들의 집합.</li><li>실제 글자들에 숫자로 된 문자코드를 대응시킨 것</li></ul></li><li><strong>문자 인코딩 구조</strong><ul><li>숫자로 된 문자 코드들을 콘텐츠 비트의 연속으로 인코딩하는 알고리즘.</li></ul></li></ol><hr><h3 id="자세히-알아보기"><a href="#자세히-알아보기" class="headerlink" title="자세히 알아보기"></a>자세히 알아보기</h3><ol><li><strong>문자</strong><ul><li>하나의 문자는 하나의 알파벳 글자, 숫자, 구두점, 표의문자(중국어에서와 같은), 수학기호, 그 외에 다른 쓰기의 기본 단위</li><li>문자는 글꼴이나 스타일에 독립적이다.</li><li>같은 글자라도 그 글자가 단어에서 어디에 위치하느냐에 따라 각각 다른 모양을 갖는 표기 체계도 많다.<img src="/images/2020/03/01.png"></li></ul></li><li><strong>글리프(glyphs), 연자(ligatures), 표현형태</strong><ul><li><strong>글리프</strong>는 각 글자를 그리는 특정한 방법니다.<ul><li>글꼴이나 사소한 미적 양식에 의존하지 않는, 글자에 내재된 모양새이다.</li></ul></li><li>연자 ligatures<ul><li>FI 연자 / LA연자<img src="/images/2020/03/02.jpg"></li></ul></li></ul></li><li><strong>코딩된 문자집합</strong> Coded Character Set<ul><li>코딩된 문자집합은 정수를 글자로 대응시킨다.</li><li>코딩된 문자집합은 보통 코드번호로 인덱싱된 배열로 구현된다.</li><li>그 배열의 원소들은 문자들이다.</li></ul><hr><ol><li><strong>US-ASCII</strong> (모든 문자집합의 어머니)<ul><li>1968년 ANSI 표준 X3.4 ‘정보교환을 위한 미국 표준 코드’로 표준화된 가장 유명한 코딩된 문자집합이다.</li><li>아스키는 오직 코드 값 0~127만 사용한다.</li><li>코드 공간을 전체 표현하는데 7비트만 필요하다.</li><li>다른 국제 변종과 구분하기 위해 ‘<strong>US-ASCII</strong>‘를 더 선호한다.</li></ul></li><li><strong>iso-8859</strong><ul><li>US-ASCII 의 8비트 확대 집합들이다.</li><li>국제적인 글쓰기를 위해 필요한 글자들을 하이비트를 이용하여 추가</li><li>추가비트에 의해 제공되는 추가공간은 모든 유럽 글자를 담기에는 충분히 크지 않으므로,<br>iso-8859는 지역에 따라 커스터마이징된 문자집합을 제공한다.</li></ul><ol><li>iso-8859-1 : 서유럽어 (영어, 프랑스어) (= Latin1) - HTML을 위한 기본 문자집합</li><li>iso-8859-2 : 중앙 및 동유럽어 (체코어, 폴란드어)</li><li>iso-8859-3 : 남유럽어</li><li>iso-8859-4 : 북유럽어</li><li>iso-8859-5 : 키릴 (불가리아어, 러시아어, 세르비아어)</li><li>iso-8859-6 : 아랍어</li><li>iso-8859-7 : 그리스어</li><li>iso-8859-8 : 히브리어</li><li>iso-8859-9 : 터키어</li><li>iso-8859-10 : 노르딕어 (아이슬랜드어, 이뉴잇어)</li><li>iso-8859-15 : 새로운 유로 통화 문자를 포함하기 위한 iso-8859-1의 변형</li></ol></li><li><strong>JIS X 0201</strong><ul><li>일본어 가타카나 반각문자를 더해, 확장한 극단적으로 작은 문자집합</li><li>= <strong>JIS ROMAN</strong> 으로 불린다. (JIS = Japanese Industrial Standard = 일본 산업 표준)</li></ul></li><li><strong>JIS X 0208과 JIS X 0212</strong><ul><li>일본어는 여러 문자 체계로부터 온 수천개의 글자를 담고 있다.</li><li>JIS X 0201의 63개 표음 가타카나 문자보다 완전한 문자집합이 필요하다.</li><li>JIS X 02<strong>08</strong>은 최초의 멀티바이트 일본어 문자집합이다. = 일본식 한자인 <strong>6879</strong>개의 코딩문자를 정의했다.</li><li>JIS X 02<strong>12</strong> 문자집합은 6607개의 문자를 <strong>추가</strong>했다.</li></ul></li><li><strong>UCS</strong><ul><li>국제 문자 셋트 Univeral Character Set 은 전 세계의 모든 글자를 하나의 코딩된 문자집합으로 통합하려 노력하는 세계적인 표준이다.</li><li>UCS는 ISO 10646으로 정의된다.</li><li>유니코드는 UCS 표준을 따르는 상업적인 컨소시업이다.</li><li>UCS는 기본 집합은 단 50,000 글자만으로 이루어져 있음에도 불구하고,<br>수백만개의 글자를 위한 코드공간을 갖고 있다.</li></ul></li></ol></li><li><strong>문자 인코딩 구조</strong><ul><li>숫자로 된 문자 코드를 콘텐츠 비트들로 변환</li><li>다른 쪽에서는 그들을 다시 문자코드로 환원한다. </li><li>문자 인코딩 구조는 3종류로 분류할 수 있다. (고정폭/가변폭(비모달)/가변폭(모달))</li></ul><hr><ol><li><strong>고정폭</strong><ul><li>각 코딩된 문자를 고정된 길이의 비트로 표현한다.</li><li>빠르게 처리될 수 있지만 공간을 낭비할 우려가 있다.</li></ul></li><li><strong>가변폭 (비모달)</strong><ul><li>다른 문자 코드 번호에 다른 길이의 비트를 사용한다.</li><li>자주 사용하는 글자의 비트 길이를 줄일 수 있고,<br>국제 문자에 대해서는 여러 바이트를 사용하도록 함으로써<br>이전의 8비트 문자집합과의 호환성도 유지할 수 있다. </li></ul></li><li><strong>가변폭 (모달)</strong><ul><li>다른 모드로의 전환을 위해 특별한 escape 패턴을 사용한다.</li><li>예를 들어<br>어떤 모달 인코딩은 텍스트에서 중첩된 여러가지 문자집합 간의 전환을 위해 사용될 수 있다.</li><li>모달 인코딩은 처리하기 복잡하지만, 복잡한 표기 체계를 효과적으로 지원해 줄 수 있다.</li></ul></li></ol><hr><ol start="4"><li>[고정폭] <strong>8비트</strong><ul><li>간단히 각 문자 코드를 그에 대응하는 8비트 값으로 인코딩한다.</li><li>256개 문자의 코드 범위에 대한 문자집합만을 지원한다.</li><li>iso-8859 문자집합군은 8비트 아이덴티티 인코딩을 사용한다.</li></ul></li><li>[가변폭(비모달)] <strong>UTF-8</strong><ul><li>인기있는 UCS를 위해 설계된 문자 인코딩 구조다. (UTF = UCS Transformation Format)</li><li>첫 바이트의 서두 비트들은 인코딩된 문자의 길이를 바이트 단위로 나타내고,<br>그 이후의 바이트들은 각 6비트 코드값을 담는다.<br>(0ccccccc, 110ccccc,…)</li><li>문자 코드 90(아스키 ‘Z’)는 1바이트로 인코딩 되었을 것이며(01011010), 코드 5073(13비트 이진값 100111101001)은 3바이트로 인코딩되었을 것이다.</li></ul></li><li>[가변폭(모달)]<strong>iso-2022-jp</strong><ul><li>일본어 인터넷 문서를 위해 널리 사용되는 인코딩이다.</li><li>128보다 작은 값으로만 이루어진 가변길이 모달 인코딩이다.</li><li>인코딩 콘텍스트는 4가지 미리 정의된 문자집합 중 하나로 설정된다.</li><li>특별한 이스케이프 문자열(<code>ESC ( B</code>, <code>ESC ( J</code>, <code>ESC $ @</code>, <code>ESC $ B</code>)은 한 집합에서 다른 집합으로 전환시켜준다. (모달)</li></ul></li><li>[가변폭(비모달)]<strong>euc-jp</strong><ul><li>일본어 인코딩</li><li>EUC는 Extended Unix Code의 약자 </li><li>유닉스 운영체제에서 아시아 문자들을 지원하기 위해 처음 개발되었다.</li><li>모드간의 전환을 위한 이스케이프 문자열이 없다.</li><li>euc-jp는 4가지 코딩된 문자집합을 지원한다.<br>(JIS X 0201, JIS X 0208, 반각 가타카나, JIS X 0212)</li></ul></li><li>[가변폭(비모달)]<strong>euc-kr</strong><ul><li>한글 인터넷 문서를 위해 널리 사용되는 가변길이 인코딩</li><li>2가지 문자집합을 지원한다. (KS X 1003, KS X 1001)</li><li>KS X 1001은 총 2350자만 담고 있었고 표현하기에는 부족</li><li>이를 보완하기 위해 <strong>한글 채움문자</strong>를 이용해 한글을 표현하는 방식을 규정하고 있다.</li></ul></li></ol></li></ol><h2 id="Charset은-문자집합이-아닌-매핑-알고리즘의-이름이다"><a href="#Charset은-문자집합이-아닌-매핑-알고리즘의-이름이다" class="headerlink" title="Charset은 문자집합이 아닌 매핑 알고리즘의 이름이다."></a>Charset은 문자집합이 아닌 매핑 알고리즘의 이름이다.</h2><ul><li>MIME charset 태그는 문자집합을 의미하는 것이 아니다.</li><li>MIME charset 값은 데이터 비트를 고유한 문자의 코드로 매핑하는 알고리즘의 이름이다.<br>= 문자 인코딩 구조 + 코딩된 문자집합</li></ul><hr><a name="tag"><h1 id="언어태그와-HTTP"><a href="#언어태그와-HTTP" class="headerlink" title="언어태그와 HTTP"></a>언어태그와 HTTP</h1><ul><li>영어 en / 독일어 de / 한국어 ko<br>많은 다른 언어에 대한 언어 태그가 존재한다.</li><li>브라질 포르투갈어 pt-BR / 미국 영어 en-US / 허난 중국어 zh-ziang<br>지역에 따라 변형된 언어나 방언을 표현할 수 있다.</li></ul><ol><li><p><strong>Content-Language 헤더</strong></p><ul><li>Content-Language 엔터티 헤더 필드는 엔터티가 어떤 언어 사용자를 대상으로 하고 있는지 서술한다.</li></ul></li><li><p><strong>Accept-Lanugage 헤더</strong></p><ul><li>HTTP는 우리에게 우리의 언어 제약과 선호도를 웹 서버에 전달할 수 있게 해준다.</li><li>Accept-Lanugage와 Accept-Charset을 사용할 수 있다.</li></ul></li><li><p><strong>언어 태그의 종류</strong> ([RFC 3066] 기준)</p><ul><li>언어태그는 다음을 표현하기 위해 사용될 수 있다.<ul><li>일반적인 언어의 종류 ex_<code>es</code> (스페인어)</li><li>특정 국가의 언어 ex_<code>en-GB</code> (영국 영어)</li><li>방언 ex_<code>no-bok</code> (노르웨이어의 Book Language를 의미)</li><li>지방어 ex_<code>sgn-US-MA</code> (마서스 비니어드 섬의 수화)</li><li>그외의 다른 언어의 변형이 아닌 표준언어 (ex_<code>i-navajo</code>)</li><li>비표준 언어 ex_<code>x-snowboarder-slang</code> (스노우보드 타는 사람..)</li></ul></li></ul></li><li><p><strong>서브태그</strong></p><ul><li>언어 태그는 하이픈으로 분리된 하나 이상의 서브태그로 이루어져 있다.</li><li>ex_<code>sgn-US-MA</code></li></ul><ol><li>주 서브태그 : 표준화되어 있다. - 알파벳만</li><li>두번째 서브태그: 자신만의 이름 표준을 따름 (선택적) - 알파벳 + 숫자가능 (최대 8글자)</li><li>서브태그는 등록되어 있지 않다.</li></ol><hr><ol><li><p><strong>첫번째 서브태그 : 이름공간</strong></p><ul><li>ISO 639 표준 언어 집합에서 선택된 표준화된 언어 토큰</li><li>첫번째 서브태그가<ul><li>두 글자라면, ISO 639와 639-1 표준의 언어코드다.</li><li>세 글자라면, ISO 639-2표준과 확장에 열거된 언어코드다.</li><li>글자가 <code>i</code>라면, IANA에 등록된 것</li><li>글자가 <code>x</code>라면, 특정 개인이나 집단 전용의 비표준 확장 서브태그다.</li></ul></li><li>한국어 : ko(ISO 639) / kor(ISO 639-2)</li><li>영어 : en(ISO 639) / eng(ISO 639-2)</li></ul></li><li><p><strong>두번째 서비태그: 이름공간</strong></p><ul><li>ISO 3166 국가 코드와 지역 표준 집합에서 선택된 표준화된 국가토큰이다.</li><li>IANA에 등록된 다른 문자열일 수도 있다.</li><li>두번째 서브태그는<ul><li>두글자라면 ISO 3166에 정의된 국가/지역이다.</li><li>3~8 글자라면, IANA에 등록된 것이다.</li><li>한글자라면, 문가 잘못된 것..</li></ul></li><li>일본: JP</li><li>인도: IN</li></ul></li><li><p><strong>나머지 서브태그: 이름공간</strong></p><ul><li>8자 이하의 알파벳과 숫자로 이루어져야 한다는 것을 제외하면 다른 규칙은 없다.</li></ul></li></ol></li></ol><hr><a name="uri"><h1 id="국제화된-URI"><a href="#국제화된-URI" class="headerlink" title="국제화된 URI"></a>국제화된 URI</h1><ul><li>오늘날 URI는 US-ASCII의 부분집합으로 구성되어 있다.</li></ul><ol><li><strong>국제적 가독성 vs 의미있는 문자들</strong> <ul><li>URI에 들어가고 조작하고, 공유하기 쉽게 하기 위하여<br>설계자들은 매우 제한된 공통 문자집합을 선택했다.<ul><li>기본적인 라틴 알파벳 문자, 숫자, 특수문자</li></ul></li><li><strong>단점</strong><ul><li>URI는 비영어권 사람들도 쉽게 사용하고, 기억할 수 있도록 설계되지는 못했다.</li><li>전 세계 사람들이 라틴 알파벳을 인식조차 하지 못하기 때문에 URI를 추상화 패턴으로 기억하는 것은 거의 불가능</li><li>URI 저자들은 리소스 식별자의 가독성과<br>공유 가능성의 보장이<br>대부분의 의미 있는 문자들로 구성될 수 있도록 하는 것이 더 중요하다고 여겼다.</li></ul></li><li>그래서 <strong>아스키 문자들의 제한된 집합으로 이루어진 URI</strong>를 갖게 되었다.</li></ul></li><li><strong>URI에서 사용될 수 있는 문자들</strong><ul><li>URI에서 사용할 수 있는 US-ASCII 문자들의 부분집합은 <ul><li>예약된 문자들, </li><li>예약되지 않은 문자들, </li><li>이스케이프 문자들로 나뉜다.</li></ul></li></ul><hr><ul><li>예약되지 않은 문자들은 일반적으로 사용될 수 있다.</li><li>예약된 문자들은 URI에서 특별한 의미를 가지며, 일반적으로는 사용될 수 없다.</li></ul><hr><ul><li>예약되지 않은 문자: [A-Za-z0-9] <code>-</code> <code>_</code> <code>.</code> <code>!</code> <code>~</code> <code>*</code> <code>&#39;</code>  <code>(</code> <code>)</code></li><li>예약된 문자: <code>;</code> <code>/</code> <code>?</code> <code>:</code> <code>@</code> <code>&amp;</code> <code>=</code> <code>+</code> <code>$</code> <code>,</code></li><li>이스케이프: <code>%</code> <code>&lt;HEX&gt;</code> <code>&lt;HEX&gt;</code></li></ul></li><li><strong>이스케이핑과 역이스케이핑</strong><ul><li>URI 이스케이프는 예약된 문자나 다른 지원하지 않은 글자들(space)을 안전하게 URI에 삽일할 수 있는 방법을 제공한다.</li><li><strong>이스케이프</strong> : 퍼센트 글자 하나와, 뒤이은 16진수 글자 둘로 이루어진 3글자 문자열이다.<ul><li><code></code>스페이스 (아스키 32): %20 (20은 32의 16진법 표현이다.)</li><li><code>%</code>(아스키 25): %25</li></ul></li><li>URI를 해석할 때,<ol><li>이스케이핑된 코드 바이트들을 (<code>encodeURIComponent</code> 메서드를 사용하면 URI 인코딩을 진행할 수 있다.)</li><li>원래 ASCII 코드 바이트로 변한하여 해석한다.</li></ol></li><li>두번 인코딩 되지 않도록 주의한다.</li></ul></li><li><strong>국제 문자들을 이스케이핑하기</strong><ul><li>이스케이프 값들은 US-ASCII 코드의 범위(0~127)에 있어야한다.</li><li>어떤 어플리케이션은 iso-8859-1 확장 문자들(128~255)을 표현하기 위해 이스케이프 값을 사용하려 한다.</li><li>그러나 오늘날에는 아스키 범위 밖의 문자를 인코딩하는 일은 상당히 흔하다.</li></ul></li><li><strong>URI에서의 모달 전환</strong><ul><li>몇몇 URI는 다른 문자집합의 글자를 표현하기 위해 아스키 문자열을 사용한다.<ul><li>예를 들어 iso-2022-jp 인코딩은 JIS-Roman으로 변경하기 위해 <code>ESC ( J</code>를 삽입할 수 있으며 <code>ESC ( B</code>로 다시 아스키로 돌아올 수 있다.</li></ul></li><li>현재 URI는 그다지 국제화에 친화적이지 않다.</li><li>당분간 HTTP 어플리케이션은 아스키와 함께 써야한다.</li></ul></li></ol><hr><a name="etc"><h1 id="기타-고려사항"><a href="#기타-고려사항" class="headerlink" title="기타 고려사항"></a>기타 고려사항</h1><ol><li><strong>헤더와 명세에 맞지 않는 데이터</strong><ul><li>HTTP 헤더는 반드시 US-ASCII 문자집합의 글자들로만 이루어져야 한다.</li><li>많은 HTTP 어플리케이션은 글자들을 처리하기 위해<br>운영체제와 라이브러리 루틴을 사용한다. </li><li>이 모든 라이브러리가 아스키 범위(0~127)를 벗어난 글자를 지원하지 않는다.</li></ul></li><li><strong>날짜</strong><ul><li>HTTP명세는 올바른 GMT 날짜 형식을 명확히 정의하고 있지만, 모든 웹 서버와 클라가 규칙을 따르고 있지 않음을 주의하라.</li></ul></li><li><strong>도메인 이름</strong><ul><li>국제화 문자를 포함하는 도메인 이름을 = 국제화 도메인 이름 Internationalizing Domain Name</li><li>오늘날 대부분의 웹브라우저가 <strong>퓨니코드</strong>를 이용해 이를 지원한다. punycode<ul><li>퓨지코드란 유니코드 문자열을 호스트 명에서 사용 가능한 문자만으로 이루어진 문자열로 변환하는 방법 (RFC 3492)</li><li>웹브라우저들은 이 기법을 이용해, 사용자가 입력한 다국어로 된 도메인 이름을<br>알파벳과 숫자 등으로 된 도메인 이름으로 변환한다.<br>( <code>한글.com</code> =&gt; <code>xn--bj0bj06e.com</code> )</li></ul></li></ul></li></ol><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ul><li><a href="https://www.iana.org/assignments/character-sets/character-sets.xhtml" target="_blank" rel="noopener">IANA 문자집합</a></li></ul></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;hr&gt;
&lt;a name=&quot;http&quot;&gt;

&lt;h1 id=&quot;국제적인-콘텐츠를-다루기-위해-필요한-HTTP-지원&quot;&gt;&lt;a href=&quot;#국제적인-콘텐츠를-다루기-위해-필요한-HTTP-지원&quot; class=&quot;headerlink&quot; title=&quot;국제적인 콘텐츠를
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="internationalization" scheme="http://feel5ny.github.io/tags/internationalization/"/>
    
  </entry>
  
  <entry>
    <title>인스턴스 조작과 인코딩</title>
    <link href="http://feel5ny.github.io/2020/01/06/HTTP_015_02/"/>
    <id>http://feel5ny.github.io/2020/01/06/HTTP_015_02/</id>
    <published>2020-01-05T15:10:10.000Z</published>
    <updated>2020-01-25T14:58:00.989Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>웹 객체는 정적이지 않다.</li><li>같은 URL은 시간에 따라 다른 버전의 객체를 가리킬 수 있다.</li><li>같은 리소스를 여러번 요청했지만, 시간이 흐름에 따라 리소스의 다른 인스턴스를 받게 된다.</li><li>클라가 자신이 갖고 있는 리소스의 사본이<br>서버가 갖고 있는 것과 정확히 같은지 판단하고,<br>상황에 따라서는 새 인스턴스를 요청할 수 있는 능력을 가질 것을 요구한다.</li><li>인스턴스 조작에 대표적으로 범위 요청과 델타 인코딩이 있다.</li></ul><a name="fresh"><h2 id="1-검사기와-신선도"><a href="#1-검사기와-신선도" class="headerlink" title="1. 검사기와 신선도"></a>1. 검사기와 신선도</h2><ul><li>조건부 요청은 클라가 서버에게 자신이 갖고있는 버전을 말해주고, 검사기를 사용해 자신의 사본 버전이 더 이상 유효하지 않을 때만 사본을 보내달라고 요청하는 것이다.</li></ul><h3 id="1-1-신선도"><a href="#1-1-신선도" class="headerlink" title="1.1 신선도"></a>1.1 신선도</h3><ul><li>서버는 클라에게 얼마나 오랫동안 콘텐츠를 캐시하고,<br>그것이 신선하다고 가정할 수 있는지에 대한 정보를 줄 것이다.</li><li>Expires나 Cache-Control 헤더를 통해 정보를제공할 수 있다.</li></ul><ol><li><code>Expires</code><ul><li>문서가 만료되서 더 이상 신선하다고 간주할 수 없게 되는 정확한 날짜를 명시함</li><li>서버와 클라가 시계를 동기화시켜야하는데, 쉽지 않고 때무에 상대시간을 이용하는것을 더 선호한다.</li></ul></li><li><code>Cache-Control</code><ul><li>문서의 최대 수명을<br>문서가 서버를 떠난 후로부터의 총 시간을 초 단위로 정한다.</li><li><a href="https://feel5ny.github.io/2019/10/05/HTTP_007-2/#control">7장 복습</a></li></ul></li></ol><h3 id="1-2-조건부-요청과-검사기"><a href="#1-2-조건부-요청과-검사기" class="headerlink" title="1.2 조건부 요청과 검사기"></a>1.2 조건부 요청과 검사기</h3><ul><li>더이상 신선하지 않다면, 자신이 갖고 있는 사본을 신선한 것으로 만들어야함</li><li>항상 다시 갖고 온다면 불필요한 리소스 낭비가 있을 것.<ul><li>리소스가 바뀐 경우에만 사본을 요청하는 <strong>조건부 요청</strong>을한다.</li></ul></li><li>HTTP 요청 메세지이지만, 특정 조건이 참일 때만 수행된다.<ul><li>예) <code>If-Modified-Since: 날짜</code></li></ul></li><li>각 조건 헤더마다 검사기 조건이 다르다.<ul><li><code>If-Modified-Since</code> : <code>Last-Modified</code> - 변한게 있으면 보내달라</li><li><code>If-Unmodified-Since</code> : <code>Last-Modified</code> - 변한게 없으면 보내달라</li><li><code>If-Match</code> : <code>ETag</code> - 같으면 보내달라</li><li><code>If-None-Match</code> : <code>ETag</code> - 다르면 보내달라</li></ul></li><li>HTTP는 강한검사기, 약한 검사기 2개로 구분한다.<ol><li>약한 검사기<ul><li>인스턴스를 고유하게 식별하지 못하는 경우도 있다.</li><li>바이트의 개수를 세는 방식으로 동작하는 가상의 횟수 검사기</li><li>Last-Modified: 최소단위가 1초라서 약한 검사기 (서버는 1초에 수천번이 요청을 처리하기 때문)</li></ul></li><li>강한 검사기<ul><li>언제나 고유하게 식별한다.</li><li>콘텐츠에 대한 암호 체크섬</li><li>ETag는 강한 검사기<ul><li><code>W/</code>를 붙임으로써 약한 엔터티 태그임을 알릴 수도 있다.</li><li>재검사로 인한 대량 전송을 유발하지 않으면서, 겉모양새만 약간 고치고 싶을 수도 있을 경우</li></ul></li></ul></li></ol></li></ul><a name="range"><h2 id="2-범위-요청"><a href="#2-범위-요청" class="headerlink" title="2. 범위 요청"></a>2. 범위 요청</h2><ul><li><p>클라가 문서의 일부분이나 특정 범위만 요청할 수 있도록 해준다.</p></li><li><p>범위요청을 이용하면, HTTP 클라는 받다가 실패한 엔터티를 일부 혹은 범위로 요청함으로써, 다운로드를 중단된 시점에서 재개할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Range: bytes=4000-</span><br></pre></td></tr></table></figure></li><li><p>모든 서버가 범위 요청을 맏아들일 수 있는 것은 아니지만, 많은 경우 가능하다.</p></li><li><p><code>Accept-Range</code>헤더를 포함시키는 방법으로 알려줄 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure></li></ul><a name="delta"><h2 id="3-델타-인코딩-델타-변경된-부분"><a href="#3-델타-인코딩-델타-변경된-부분" class="headerlink" title="3. 델타 인코딩 (델타: 변경된 부분)"></a>3. 델타 인코딩 (델타: 변경된 부분)</h2><ul><li>객체 전체가 아닌, 변경된 부분에 대해서만 통신하여 전송량을 최적화하는, HTTP 프로토콜 확장이다.</li></ul><ol><li>클라는 페이지의 <strong>어떤 버전</strong>을 갖고 있는지 서버에게 말해준다. (ETag)</li><li>클라는 자신이 갖고 있는 현재 버전에 델타를 적용하기 위해, (A-IM: Accept-Instance-Manipulation)<br><strong>어떤 알고리즘을 알고 있는지</strong>도 서버에게 말해주어야 한다.</li><li>서버는 자신이 클라가 갖고 있는 버전을 갖고 있는지<br>어떻게 최신 버전과 클라의 버전 사이의 델타를 계산할 것인지 체크해야 한다.</li><li>델타를 계산해서 클라에게 보내주고 (ETag)</li><li>서버가 델타를 보내고 있음을 클라에게 알려주고 (IM) (226 IM Used)</li><li>페이지의 최신 버전에 대한 새 식별자를 명시해야 한다. (ETag)</li></ol><h3 id="3-1-인스턴스-조작-델타-생성기-그리고-델타-적용기"><a href="#3-1-인스턴스-조작-델타-생성기-그리고-델타-적용기" class="headerlink" title="3.1 인스턴스 조작, 델타 생성기 그리고 델타 적용기"></a>3.1 인스턴스 조작, 델타 생성기 그리고 델타 적용기</h3><ul><li>클라는 A-IM 헤더를 사용하여 자신이 받아들일 수 있는 인스턴스 조작의 종류를 명시할 수 있다.</li><li>서버는 IM 헤더에 사용한 인스턴스 조작의 종류를 명시할 수 있다.</li><li>IANA에 등록된 인스턴스 조작의 종류<ul><li>vcdiff: vcdiff 알고리즘을 이용한 델타</li><li>diffe: 유닉스 diff-e 명령어를 이용한 델타</li><li>gdiff: gdiff 알고리즘을 이용한 델타</li><li>gzip: gzip 알고리즘을 이용한 압축</li><li>deflate: deflate 알고리즘을 이용한 압축</li><li>range</li><li>identit</li></ul></li><li>문서는 클라에게 반환되기 전에 압축률을 극대화하기 위해 여러번의 인스턴스 조작을 거칠 수 있다.</li><li>델타 인코딩은 전송시간을 줄일 수 있지만, 구현하기가 까다로울 수 있다.</li><li>문서를 제공하는데 걸리는 시간을 줄이는 대신,<br>서버는 문서의 과거 사본을 모두 유지하기 위해 디스크 공간을 더 늘려야 한다.</li></ul><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ul><li><a href="https://tools.ietf.org/html/rfc3229" target="_blank" rel="noopener">RFC3229</a></li></ul></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;웹 객체는 정적이지 않다.&lt;/li&gt;
&lt;li&gt;같은 URL은 시간에 따라 다른 버전의 객체를 가리킬 수 있다.&lt;/li&gt;
&lt;li&gt;같은 리소스를 여러번 요청했지만, 시간이 흐름에 따라 리소스의 다른 인스턴스를 받게 된다.&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="instance" scheme="http://feel5ny.github.io/tags/instance/"/>
    
      <category term="Range" scheme="http://feel5ny.github.io/tags/Range/"/>
    
      <category term="encoding" scheme="http://feel5ny.github.io/tags/encoding/"/>
    
  </entry>
  
  <entry>
    <title>엔터티와 인코딩</title>
    <link href="http://feel5ny.github.io/2020/01/05/HTTP_015_01/"/>
    <id>http://feel5ny.github.io/2020/01/05/HTTP_015_01/</id>
    <published>2020-01-05T11:43:10.000Z</published>
    <updated>2020-01-25T15:41:39.459Z</updated>
    
    <content type="html"><![CDATA[<hr><p>HTTP는 매일 수십억 개의 미디어 객체를 실어 나른다.<br>HTTP는 콘텐츠를 잘 나르기 위한<br><strong>잘 라벨링된 엔터티</strong>를 사용한다.</p><ul><li>엔터티와 엔터티 헤더들</li><li>웹상의 화물을 수송하기 위해 어떤일을 하는지</li><li>HTTP가 어떻게 콘텐츠 크기, 타입, 인코딩에 대한 필수적인 값들을 제공하는지</li><li>복잡하지만 강력한 기능을 알아본다.<br>HTTP 엔터티, 범위요청(range request), 델타 인코딩(delta encoding), 요약(digest), 청크 인코딩(chunked encoding)</li></ul><h1 id="엔터티에-대하여"><a href="#엔터티에-대하여" class="headerlink" title="엔터티에 대하여"></a>엔터티에 대하여</h1><a name="entity"><h2 id="1-메세지는-컨테이너-엔터티는-화물"><a href="#1-메세지는-컨테이너-엔터티는-화물" class="headerlink" title="1. 메세지는 컨테이너, 엔터티는 화물"></a>1. 메세지는 컨테이너, 엔터티는 화물</h2><img src="/images/2020/01/01.png" style="width:200px"><ul><li>엔터티는 엔터티헤더 + 엔터티 본문의 조합</li></ul><h3 id="1-1-엔터티-헤더-참고"><a href="#1-1-엔터티-헤더-참고" class="headerlink" title="1.1 엔터티 헤더 (참고)"></a>1.1 엔터티 헤더 (<a href="https://feel5ny.github.io/2019/08/18/HTTP_003_04/#4">참고</a>)</h3><ul><li>3가지 종류의 헤더가 있다 <ol><li>엔터티 정보헤더, </li><li>콘텐츠 헤더, </li><li>엔터티 캐싱 헤더</li></ol></li></ul><h4 id="1-엔터티-정보헤더"><a href="#1-엔터티-정보헤더" class="headerlink" title="1. 엔터티 정보헤더"></a>1. 엔터티 정보헤더</h4><ol><li><code>Allow</code> : 이 리소스에 대해 <strong>어떤 요청 메서드가 허용</strong>되는지</li></ol><h4 id="2-콘텐츠-헤더"><a href="#2-콘텐츠-헤더" class="headerlink" title="2. 콘텐츠 헤더"></a>2. 콘텐츠 헤더</h4><ol><li><code>Content-Type</code> : 엔터티에 의해 전달된 객체의 <strong>종류</strong></li><li><code>Content-Length</code> : 전달되는 메세지의 <strong>길이나 크기</strong></li><li><code>Content-Language</code> : 전달되는 객체와 가장 잘 대응되는 <strong>자연어</strong></li><li><code>Content-Encoding</code> : 객체 데이터에 대해 행해진 <strong>변형</strong> (압축 등)</li><li><code>Content-Location</code> : 요청 시점 기준으로, 객체의 또 다르 <strong>위치</strong></li><li><code>Content-Range</code> : 이 엔터티가 부분 엔터티라면, 이 헤더는 이 엔터티가 전체에서 <strong>어느 부분에 해당</strong>하는지 정의한다.</li><li><code>Content-MD5</code> : 엔터티 본문의 콘텐츠에 대한 <strong>체크섬</strong>(중복검사의 한 형태)</li></ol><h4 id="3-엔터티-캐싱-헤더"><a href="#3-엔터티-캐싱-헤더" class="headerlink" title="3. 엔터티 캐싱 헤더"></a>3. 엔터티 캐싱 헤더</h4><ol><li><code>Last-Modified</code> : 서버에서 이 콘텐츠가 <strong>생성 혹은 수정된 날</strong></li><li><code>Expires</code> : 이 엔터티 데이터가 <strong>더 이상 신선하지 않은 것으로 간주</strong>되기 시작하는 날짜와 시각</li><li><code>ETag</code> : 이 인스턴스에 대한 <strong>고유한</strong> 검사기</li></ol><h3 id="1-2-엔터티-본문"><a href="#1-2-엔터티-본문" class="headerlink" title="1.2 엔터티 본문"></a>1.2 엔터티 본문</h3><ul><li>엔터티 본문은 가공되지 않은 데이터만을 담고 있다. raw data</li><li>다른 정보들은 모두 헤더에 담겨 있다.</li><li>엔터티본문은 CRLF (캐리지 리턴 + 개행) 줄 바로 다음부터 시작한다.</li></ul><a name="length"><h2 id="2-Content-Length-엔터티의-길이"><a href="#2-Content-Length-엔터티의-길이" class="headerlink" title="2. Content-Length 엔터티의 길이"></a>2. <code>Content-Length</code> 엔터티의 길이</h2><ul><li>메세지의 엔터티 본문의 크기를 <strong>바이트 단위</strong>로 나타낸다.</li><li>어떻게 인코딩 되었든 상관없이 크기를 표현할 수 있다.<ul><li><strong>gzip</strong>으로 압축된 텍스트 파일이라면 =&gt; 원래 크기가 아니라 <strong>압축된 후의 크기</strong></li></ul></li><li>엔터티 본문을 포함한 메세지에서는 필수적으로 있어야 한다.<ul><li>서버 충돌로 인해 메세지가 잘렸는지 감지하고자 할때</li><li>지속 커넥션을 공유하는 메세지를 올바르게 분할하고자 할때 필요</li></ul></li></ul><h3 id="2-1-잘림-검출"><a href="#2-1-잘림-검출" class="headerlink" title="2.1 잘림 검출"></a>2.1 잘림 검출</h3><ul><li>옛날 버전의 HTTP: 커넥션이 닫힌 것을 보고 메세지가 끝났음을 인지<ul><li>Content-Length가 없다면 클라는 <ol><li>커넥션이 정상적으로 닫힌 것인지,</li><li>메세지 전송 중에 서버에 충돌이 발생한 것인지 구분하지 못함</li></ol></li><li>잘림을 검출하기 위해 Content-Length가 필요로 했다.</li></ul></li><li>메세지 잘림은 <strong>캐싱 프락시 서버</strong>에서 특히 취약하다.<ol><li>캐시가 잘린 메세지를 수신했으나 잘렸다는 것을 인식하지 못했다면</li><li>캐시는 결함이 있는 콘텐츠를 저장하고</li><li>계속 제공하게 될 것이다.</li></ol></li><li>캐싱 프락시 서버는 명시적으로 Content-Length 헤더를 갖고 있지 않은 HTTP본문은 <strong>보통 캐시하지 않는다.</strong></li></ul><h3 id="2-2-잘못된-Content-Length"><a href="#2-2-잘못된-Content-Length" class="headerlink" title="2.2 잘못된 Content-Length"></a>2.2 잘못된 Content-Length</h3><ul><li>공식적으로 HTTP/1.1 사용자 에이전트는 잘못된 길이를 받고 그 사실을 인지했을 때 사용자에게 알려주게 되어 있다.</li></ul><h3 id="2-3-Content-Length와-지속커넥션"><a href="#2-3-Content-Length와-지속커넥션" class="headerlink" title="2.3 Content-Length와 지속커넥션"></a>2.3 Content-Length와 지속커넥션</h3><ul><li>Content-Length는 지속커넥션을 위해 필수다.</li><li>만약 응답이 지속커넥션을 통해서 온 것이라면, 또 다른 HTTP 응답이 즉시 그 뒤를 이을 것이다.</li><li>Content-Length 헤더는 클라에게 메세지 하나가 어디서 끝나고 다음 시작은 어디인지 알려주는데, </li><li>커넥션이 지속적일경우 클라가 커넥션이 닫힌 위치를 근거로 메세지의 끝을 인식하는 것은 불가능하므로,<br>Content-Length로 시작과 끝을 가늠한다. </li><li>때문에 지속커넥션에서는 Content-Length는 필수이다.<ul><li>다만, 청크인코딩은 지속커넥션으로 이루어지는데, 이때 Content-Length헤더는 없다.</li></ul></li></ul><h3 id="2-4-콘텐츠-인코딩"><a href="#2-4-콘텐츠-인코딩" class="headerlink" title="2.4 콘텐츠 인코딩"></a>2.4 콘텐츠 인코딩</h3><ul><li>HTTP는<br>보안을 강화하거나<br>압축을 통해 공간을 절약할 수 있도록,<br>엔터티 본문을 인코딩할 수 있게 해준다.</li><li>인코딩 될 경우 Content-Length 헤더는 인코딩된 본문의 길이를 바이트 단위로 정의한다.</li></ul><h3 id="2-5-엔터티-본문-길이-판별을-위한-규칙"><a href="#2-5-엔터티-본문-길이-판별을-위한-규칙" class="headerlink" title="2.5 엔터티 본문 길이 판별을 위한 규칙"></a>2.5 엔터티 본문 길이 판별을 위한 규칙</h3><p>switch (true)</p><ol><li>본문을 갖는 것이 허용되지 않은 특정타입의 HTTP 메세지<ul><li>Content-Length는 무시된다.</li><li>ex_ <code>HEAD</code> 메서드</li></ul></li><li>메세지가 Transfer-Encoding 헤더를 포함하고 있다면<ul><li>엔터티는 ‘0 바이트 청크’라 불리는 특별한 패턴으로 끝나야 한다.</li></ul></li><li>메세지가 Content-Length 헤더를 갖는다면<ul><li>본문의 길이를 담게 된다.</li><li>Transfer-Encoding가 identity가 아닌값을 포함한 메세지를 받았을 경우 Content-Length는 무시된다.</li></ul></li><li>(Content-type: multipart/byteranges) &amp;&amp; (Content-Length가 정의되어있지 않다면)<ul><li>멀티파트 메세지의 각 부분은<br>각자 스스로의 크기를 정의할 것이다.</li><li>멀티파트 유형은 자신의 크기를 스스로 결정할 수 있는 유일한 엔터티 본문 유형이다.</li><li>수신자가 이것을 해석할 수 있다는 사실을 송신자가 알기 전까지 보내지 말아야 한다…</li><li><em>RFC7230</em> 때 삭제됨.</li></ul></li><li>(default)<ul><li>엔터티는 커넥션이 닫힐 때 끝난다.</li><li>Content-Length를 요구하고 싶을 경우 411 Length Required 응답을 보냄</li></ul></li></ol><a name="type"><h2 id="3-미디어-타입과-Charset"><a href="#3-미디어-타입과-Charset" class="headerlink" title="3. 미디어 타입과 Charset"></a>3. 미디어 타입과 Charset</h2><ul><li>Content-Type은 엔터티 본문의 MIME 타입을 기술한다. <a href="https://www.iana.org/assignments/media-types/media-types.xhtml" target="_blank" rel="noopener">IANA에 정리되어있는 MIME타입</a><blockquote><p>IANA: 인터넷 할당 번호 관리기관 <strong>I</strong>nternet <strong>A</strong>ssigned <strong>N</strong>umbers <strong>A</strong>uthority</p></blockquote></li><li>주타입: application, audio, font, example, image, message, model, multipart, text, video</li></ul><h3 id="3-1-텍스트-매체를-위한-문자-인코딩"><a href="#3-1-텍스트-매체를-위한-문자-인코딩" class="headerlink" title="3.1 텍스트 매체를 위한 문자 인코딩"></a>3.1 텍스트 매체를 위한 문자 인코딩</h3><p><code>Content-Type: text/html; charset=iso-8859-7</code></p><ul><li>엔터티의 비트 집합을 텍스트 파일의 글자들로 변환하기 위한 charset 매개변수가 있다.</li></ul><h3 id="3-2-멀티파트-미디어-타입"><a href="#3-2-멀티파트-미디어-타입" class="headerlink" title="3.2 멀티파트 미디어 타입"></a>3.2 멀티파트 미디어 타입</h3><ul><li>서로 붙어있는 여러 개의 메세지를 포함하며, 하나의 복합 메세지로 보내진다.</li><li>각 구성요소는 자족적으로 자신에 대해 서술하는 헤더를 포함한다.</li><li>HTTP는 일부의 경우에 지원한다<ol><li>폼을 채워서 제출할때</li><li>문서의 일부분을 실어 나르는 범위 응답을 할 때</li></ol></li></ul><h4 id="1-멀티파트-폼-제출-multipart-form-data"><a href="#1-멀티파트-폼-제출-multipart-form-data" class="headerlink" title="1. 멀티파트 폼 제출 multipart/form-data"></a>1. 멀티파트 폼 제출 <code>multipart/form-data</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=[abcdefghijklmnopqrstuvwzyz]</span><br></pre></td></tr></table></figure><ul><li>boundary는 본문의 서로 다른 부분을 구분하기 위한 구분자로 쓰인다.</li></ul><img src="/images/2020/01/02.png"><hr><img src="/images/2020/01/03.png"><h4 id="2-멀티파트-범위-응답-multipart-byteranges"><a href="#2-멀티파트-범위-응답-multipart-byteranges" class="headerlink" title="2. 멀티파트 범위 응답 multipart/byteranges"></a>2. 멀티파트 범위 응답 <code>multipart/byteranges</code></h4><ul><li><strong>범위 요청</strong>에 대한 HTTP 응답 또한 멀티파트가 될 수도 있다.</li><li>각각 다른 범위를 담고 있는 멀티파트 본문이 함께 온다.</li><li>multipart/byteranges는 브라우저로 회신하는 부분적인 응답 전송의 컨텍스트 내에서 사용된다. </li><li><strong>206 Partial Content</strong> 상태 코드가 전송된 경우,<br>MIME 타입은 문서가 각각의 요청된 범위들 중 하나인 몇 가지 파트들로 구성되어 있음을 알려주기 위해 사용된다.</li><li>다른 멀티파트 타입처럼, Content-Type은 경계선 문자열을 정의하기 위해 boundary 디렉티브를 사용한다.<br>각각의 다른 파트들은 문서의 실제 타입을 가진 Content-Type 헤더와 그들이 나타내는 범위를 가진 Content-Range를 지니고 있다.</li></ul><img src="/images/2020/01/04.png"><h1 id="전송-전-전송-후"><a href="#전송-전-전송-후" class="headerlink" title="전송 전 ~ 전송 후"></a>전송 전 ~ 전송 후</h1><a name="checksum"><h2 id="1-엔터티-요약-Content-MD5"><a href="#1-엔터티-요약-Content-MD5" class="headerlink" title="1. 엔터티 요약 Content-MD5"></a>1. 엔터티 요약 <code>Content-MD5</code></h2><ul><li>여러가지 이유로 메세지의 일부분이 전송 중에 변형되는 일이 일어난다.</li><li>송신자는 최초 엔터티가 생성될 때 <strong>데이터에 대한 체크섬</strong>을 생성할 수 있다.</li><li>수신자는 모든 의도하지 않은 엔터티의 변경을 잡아내기 위해, 그 체크섬으로 기본적인 검사를 할 수 있다.</li><li>Content-MD5 헤더는 서버가 엔터티 본문에 MD5 알고리즘을 적용한 결과를 보내기 위해 사용된다.<ul><li>응답을 처음 만든 서버만이 Content-MD5헤더를 계산해서 보낼 것이다. </li><li>중간에 있는 프락시와 캐시는 그 헤더를 변경하거나 추가하지 않을 것이다. (건드릴 경우 무결성 검증 목적을 손상시킴)</li></ul></li><li>Content-MD5 헤더는<br>콘텐츠 인코딩은 끝났지만,<br>전송 인코딩은 아직 적용하지 않은 엔터티 본문에 대한 MD5를 담고 있다.<ul><li>메세지의 무결성을 검증하려는 클라는 먼저 전송 인코딩을 디코딩하고</li><li>그 디코딩 된 엔터티 본문에 MD5를 계산해야 한다.</li><li>문서를 gzip 알고리즘으로 압축하여 청크 인코딩으로 보냈다면, MD5 알고리즘은 압축된 본문 전체에 대해 수행된다.</li></ul></li><li>MD5는 문서의 위치를 빠르게 알아내고, 콘텐츠의 중복저장을 방지하기 위한 해시테이블의 키로 이용될 수 있다.<blockquote><p>Content-MD5 헤더는 그다지 <strong>자주 전송되지 않는다.</strong></p></blockquote></li></ul><a name="encoding"><h2 id="2-콘텐츠-인코딩-Content-Encoding"><a href="#2-콘텐츠-인코딩-Content-Encoding" class="headerlink" title="2. 콘텐츠 인코딩 Content-Encoding"></a>2. 콘텐츠 인코딩 <code>Content-Encoding</code></h2><ul><li>전송시간을 줄이기 위해 <strong>압축</strong>하거나</li><li>보안을 위해 콘텐츠를 <strong>암호화</strong>하거나<br>할때 사용한다.</li><li>콘텐츠 인코딩은 콘텐츠 포맷과 연관되어있다.</li></ul><ol><li>과정</li><li>유형</li><li>관련 헤더</li></ol><h3 id="1-과정"><a href="#1-과정" class="headerlink" title="1. 과정"></a>1. 과정</h3><ol><li>웹서버가 원본 Content-Type과 Content-Length 헤더를 수반한 원본 응답 메세지를 생성</li><li>콘텐츠 인코딩 서버가 인코딩된 메세지 생성 (원서버 or 프록시)<ul><li>Content-Length는 변경된다.</li><li>콘텐츠 인코딩 서버는 <strong>어떤 방식으로 인코딩했는지 정보가 담겨있는 Content-Encoding 헤더를</strong> 인코딩된 메세지에 추가<br>수신자가 디코딩할 수 있도록 한다.</li></ul></li><li>수신자는 인코딩된 메세지를 디코딩하고 원본을 얻는다.</li></ol><blockquote><p>모던 <strong>브라우저</strong>에는 <strong>gzip 압축해제</strong>를 자동으로 해준다. <a href="https://stackoverflow.com/questions/32172704/is-gzip-automatically-decompressed-by-browser/32172835#32172835" target="_blank" rel="noopener">참고</a></p></blockquote><h3 id="2-유형"><a href="#2-유형" class="headerlink" title="2. 유형"></a>2. 유형</h3><ul><li>표준 콘텐츠 인코딩 유형이 정의되어있음. (IANA를 통해 표준화됨)</li><li>커스텀으로 확장 인코딩을 추가하는걸 허용해놓음</li><li>gzip, compress, deflate 인코딩은 전송되는 메세지의 크기를 정보으 손실 없이 줄이기 위한 <strong>무손실 압축 알고리즘</strong>이다.</li></ul><p><code>Content-Encoding: {유형}</code></p><ol><li>gzip : GNU zip 인코딩이 적용되었음을 의미</li><li>compress: 유닉스 파일 압축 프로그램인 compress가 실행되었음을 의미</li><li>deflate : zlib 포맷으로 압축되었다는 의미</li><li>identity : 어떤 인코딩도 수행되지 않았음을 의미. (Content-Encoding 헤더가 존재하지 않는다면, 이 값인 것으로 간주)</li></ol><h3 id="3-Accept-Encoding-헤더"><a href="#3-Accept-Encoding-헤더" class="headerlink" title="3. Accept-Encoding 헤더"></a>3. Accept-Encoding 헤더</h3><ul><li>서버에서 클라가 지원하지 않는 인코딩을 사용하는 것을 막기 위해,<br>클라가 자신이 지원하는 인코딩의 목록을 Accept-Encoding 헤더에 포함한다.</li><li>인코딩에 Q(quality)값을 매개변수로 더해<br><strong>선호도</strong>를 나타낼 수 있다.<ul><li>Q의 범위는 원치않음 0.0 ~ 가장선호 1.0 사이이다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Accept-Encoding: compress, gzip</span><br><span class="line">Accept-Encoding:</span><br><span class="line">Accept-Encoding: *</span><br><span class="line">Accept-Encoding: compress; q=0.5, gzip; q=1.0</span><br><span class="line">Accept-Encoding: gzip; q=1.0, identiy; q=0.5, *; q=0</span><br></pre></td></tr></table></figure></li></ul></li></ul><a name="transfer"><h2 id="3-전송-인코딩과-청크-인코딩-Transfer-encoding"><a href="#3-전송-인코딩과-청크-인코딩-Transfer-encoding" class="headerlink" title="3. 전송 인코딩과 청크 인코딩 Transfer-encoding"></a>3. 전송 인코딩과 청크 인코딩 <code>Transfer-encoding</code></h2><ul><li>메세지 데이터가 네트워크를 통해 <strong>전송되는 방법을 바꾸기 위해</strong></li></ul><h3 id="3-1-안전한-전송"><a href="#3-1-안전한-전송" class="headerlink" title="3.1 안전한 전송"></a>3.1 안전한 전송</h3><ul><li>역사적으로, 전송 인코딩은 안전한 전송을 위해 존재했다.</li><li>HTTP에서 전송된 메세지의 본문이 문제를 일으킬 수 있는 이유<ol><li><strong>알수 없는 크기</strong>: 몇몇 게이트 웨이 어플리케이션 or 콘텐츠 인코더는 메세지 본문의 최종 크기를 판단할 수 없다.</li><li><strong>보안</strong> : 메세지 콘텐츠를 보내기 전에, 전송 인코딩을 사용해 알아보기 어렵게 뒤섞어버리는 방법도 있다. SSL이 있어서 전송 인코딩 보안은 흔하지 않다.</li></ol></li></ul><h3 id="3-2-Transfer-encoding-헤더"><a href="#3-2-Transfer-encoding-헤더" class="headerlink" title="3.2 Transfer-encoding 헤더"></a>3.2 <strong><code>Transfer-encoding</code></strong> 헤더</h3><ul><li>전송 인코딩을 제어하고, 서술하기 위해 정의된 헤더는 2개</li><li>최신 HTTP 명세는 오직 하나의 전송 인코딩, 청크 인코딩만을 정의했다.</li><li><strong>어떤 형태의 전송 인코딩을 선호하는지</strong> 표현하는 <code>Q</code>값을 가질 수 있다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET /new_products.html HTTP/1.1</span><br><span class="line">Host: feel5ny.github.io</span><br><span class="line">User-Agent: Mozilla/4.61 [en] (WinNT; I)</span><br><span class="line">TE: trailers, chunked</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Server: Apache/3.0</span><br></pre></td></tr></table></figure><ol><li><strong><code>Transfer-encoding</code></strong><br>: 안전한 전송을 위해, 어떤 인코딩이 메세지에 적용되었는지 수신자에게 알려준다.<img src="https://media.geeksforgeeks.org/wp-content/uploads/20191029112629/1091.png"></li><li><strong><code>TE</code></strong><br>: 어떤 확장된 전송 인코딩을 사용할 수 있는지 서버에게 알려주기 위해, 요청 헤더에 사용한다.</li></ol><h3 id="3-3-청크-인코딩"><a href="#3-3-청크-인코딩" class="headerlink" title="3.3 청크 인코딩"></a>3.3 <strong>청크 인코딩</strong></h3><ul><li>메세지를 일정 크기의 청크 여럿으로 쪼갠다. </li><li>서버는 각 청크를 순차적으로 보낸다.</li><li>청크 인코딩을 이용하면, 메세지를 보내기 전에 전체 크기를 알 필요가 없어진다.</li><li>청크 인코딩은 본문이 아닌, <strong>메세지의 속성</strong>이다.<ul><li>멀티파트 인코딩은 본문의 속성, 청크 인코딩과는 완전 분리되어있다.</li></ul></li></ul><h4 id="청크-인코딩과-지속-커넥션"><a href="#청크-인코딩과-지속-커넥션" class="headerlink" title="청크 인코딩과 지속 커넥션"></a>청크 인코딩과 지속 커넥션</h4><ul><li><p>지속커넥션에서는, 본문을 쓰기 전에 만드시 Content-Length 헤더에 본문의 길이를 담아서 보내줘야 한다.</p></li><li><p>청크 인코딩은 서버가 본문을 여러 청크로 쪼개 보낼 수 있게 해줌으로써</p><ol><li>동적으로 본문이 생성되면서, </li><li>서버는 그 중 일부를 버퍼에 담은 뒤, </li><li>그 한 덩어리를 그의 크기와 함께 보낼 수 있다. </li><li>서버는 크기가 0인 청크로 본문이 끝났음을 알리고</li><li>다음 응답을 위해 커넥션을 열린 채로 유지할 수 있다.</li></ol></li><li><p>청크 인코딩은</p><ul><li>응답 헤더 블록으로 시작하고</li><li>이어서 청크의 스트림이 온다.<ul><li>각 청크는 길이값과 각 청크에 대한 데이터를 담고 있다.</li><li>길이값과 청크 데이터는 <code>&lt;CR&gt;&lt;LF&gt;</code>로 분리된다.</li><li>마지막 청크는 본문의 끝을 의미하기 위해 길이가 0 이다.</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">27&lt;CR&gt;&lt;LF&gt;</span><br><span class="line">블라블라블라 ~</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0&lt;CR&gt;&lt;LF&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>클라 또한</strong> 청크 인코딩된 데이터를 서버로 전송한다.</p></li></ul><h4 id="청크-인코딩된-메세지의-트레일러"><a href="#청크-인코딩된-메세지의-트레일러" class="headerlink" title="청크 인코딩된 메세지의 트레일러"></a>청크 인코딩된 메세지의 트레일러</h4><ul><li>다음 중 하나 이상 조건을 만족하면 청크 메세지에 트레일러를 추가할 수 있다.<ol><li>클라의 <code>TE</code> 헤더가 트레일러를 받아들일 수 있음을 나타내고 있는 경우</li><li>트레일러가 응답을 만든 서버에 의해 추가되었으며,<br>트레일러의 콘텐츠는 클라가 이해하고 사용할 필요가 없어서 <em>무시하고 버려도 되는 경우</em></li></ol></li><li>트레일러에는 본문의 콘텐츠가 먼저 생성되어야 한다거나 하는 등의 이유로</li></ul><p><strong>메세지 시작 시점에서 그 값을 알 수 없는 추가적인 헤더 필드를 담을 수 있다.</strong></p><ul><li>트레일러로 보낼 수 있는 헤더의 예로 <code>Content-MD5</code> 헤더가 있다.</li><li><code>Transfer-Encoding</code>, <code>Trailer</code>, <code>Content-Length</code>를 제외한 어떤 HTTP 헤더도 트레일러로 보낼 수 있다.</li></ul><h4 id="콘텐츠와-전송-인코딩의-조합"><a href="#콘텐츠와-전송-인코딩의-조합" class="headerlink" title="콘텐츠와 전송 인코딩의 조합"></a>콘텐츠와 전송 인코딩의 조합</h4><ul><li>콘텐츠 인코딩과 전송인코딩은 동시에 사용될 수 있다.</li></ul><h4 id="전송-인코딩-규칙"><a href="#전송-인코딩-규칙" class="headerlink" title="전송 인코딩 규칙"></a>전송 인코딩 규칙</h4><ul><li>전송 인코딩 집합은 반드시 chunked를 포함해야 한다.</li><li>청크 전송 인코딩이 사용되었다면, 메세지 본문에 적용된 마지막 전송 인코딩이 존재해야 한다.</li><li>청크 전송 인코딩은 반드시 메세지 본문에 한 번 이상 적용되어야 한다.</li></ul><p><a href="https://www.httpwatch.com/httpgallery/chunked/" target="_blank" rel="noopener">이미지 청크 인코딩 예시</a></p><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;HTTP는 매일 수십억 개의 미디어 객체를 실어 나른다.&lt;br&gt;HTTP는 콘텐츠를 잘 나르기 위한&lt;br&gt;&lt;strong&gt;잘 라벨링된 엔터티&lt;/strong&gt;를 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;엔터티와 엔터티 헤더들&lt;/li&gt;
&lt;li&gt;웹상의 
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="encoding" scheme="http://feel5ny.github.io/tags/encoding/"/>
    
      <category term="entity" scheme="http://feel5ny.github.io/tags/entity/"/>
    
  </entry>
  
  <entry>
    <title>2019 회고 + 2020 다짐 (feat. 글또)</title>
    <link href="http://feel5ny.github.io/2019/12/22/Joylog_004/"/>
    <id>http://feel5ny.github.io/2019/12/22/Joylog_004/</id>
    <published>2019-12-22T12:23:55.000Z</published>
    <updated>2020-11-15T11:44:40.803Z</updated>
    
    <content type="html"><![CDATA[<p>아, 2019년도도 어느새.. 너무나 빠르게 지나갔다. 요즘 참 시간이 빠르게 가는 것 같다. 모니터만 보다가 시간 다 가겠다고 농담으로 자주 얘기하는 요즘이다. 그래도 정신 똑띠 차리고 시간을 잘 써야 하니까.. 오늘도 어김없이! 연말정산을 해보려고 한다.</p><hr><hr><a name="1"><h1 id="1-2019-하반기에-다짐한-것-잘-이루었을까"><a href="#1-2019-하반기에-다짐한-것-잘-이루었을까" class="headerlink" title="1. 2019 하반기에 다짐한 것, 잘 이루었을까?"></a>1. 2019 하반기에 다짐한 것, 잘 이루었을까?</h1><p><a href="https://feel5ny.github.io/2019/07/07/Joylog_003/">2019 상반기 회고 + 하반기 다짐 (feat. 글또) ➔</a> </p><hr><a name="1-1"><h2 id="1-1-기본-실력-키우기"><a href="#1-1-기본-실력-키우기" class="headerlink" title="1.1 기본 실력 키우기"></a>1.1 기본 실력 키우기</h2><p>상반기 때는 <strong>기본 실력의 범위</strong>에 대해서만 재정의하였고, 깊이 있는 공부를 진행하지 못했었다. 깊이 있는 공부란.. 깊이 파보기도 하고, 실습도 하고 이론 정리도 하는 것을 생각하는데, 상반기 때는 “이것도 공부해야 하는구나”라는 식의 <strong>공부할 거리 알아보고 우선순위 정하기</strong> 정도만 진행했었다. </p><p>이에 중간 정산 시에 문제 인지를 하여서, 하반기 때는 구체적인 <strong>action plan</strong>을 그려보았는데,<br>첫째는 웹 네트워크 공부, 두 번째는 기본 공부로써 구글 웹 문서와 mdn 전체 훑어보기를 세웠었다.<br><a href="https://feel5ny.github.io/2019/07/07/Joylog_003/#3">2019 하반기 뭘 해볼까 (목표 설정) ➔ </a></p><h3 id="1-1-1-웹-네트워크-공부"><a href="#1-1-1-웹-네트워크-공부" class="headerlink" title="1.1.1 웹 네트워크 공부"></a>1.1.1 웹 네트워크 공부</h3><p>프론트 개발자가 인지할 수 있는 웬만한 네트워크 이슈는 먼저 인지하고 디버킹하고 싶어서 웹 네트워크 지식은 한번 쭉 정리해보고 싶었다. 팀장님이 추천해주신 ‘http 완벽가이드’라는 책을 선택하였다. 제발 책 전체를 다 읽고 싶었는데, 지금까지 경험상 절대 혼자서는 완주를 못 할 것이라는 생각이 들어서, 주변에 같이 스터디할 사람을 찾아보았다. </p><h4 id="스터디-운영-고민"><a href="#스터디-운영-고민" class="headerlink" title="스터디 운영 고민"></a>스터디 운영 고민</h4><p>스터디를 모집하는 이슈도 있었지만, 운영에 대한 고민도 있었다.</p><ol><li>과연 이 책을 <strong>끝까지 완주</strong>할 수 있을까 라는 걱정이 들고, <ul><li>나조차도 하나의 스터디가 쉬지도 않고 끝까지 달리기에는 무리일 것 같아, </li><li><strong>한 챕터씩 쪼개서 챕터마다 모집하는 방법</strong>으로 스터디를 구성하였다.<ol><li>1회차 2019.8.1 ~ 8.26 (4주) <a href="https://www.notion.so/feel5ny/http-1-5caab9dc98fb49dd83aee4600c35cd56" target="_blank" rel="noopener">모집 글</a></li><li>2회차 2019.9.2 ~ 10.27 (7주) <a href="https://www.notion.so/feel5ny/http-2-06b5c253555b46c1bbb2137e6fe1710d" target="_blank" rel="noopener">모집 글</a></li><li>3회차 2019.11.11 ~ 12.09 (4주) <a href="https://www.notion.so/feel5ny/http-3-http-f21732c476f24dc7923b9a44c1b134b1" target="_blank" rel="noopener">모집 글</a><blockquote><p>2회차 때는 2달을 진행하니 역시나 버거웠다.</p></blockquote></li></ol></li></ul></li><li>최대한 <strong>낙오자</strong>가 생기지 않기 위해서 <ul><li>오프라인 모임은 하지 않고, </li><li><strong>온라인 모임만</strong>으로 진행하며, </li><li>일정 <strong>금액</strong>을 걸고 진행하기로 하였다. </li></ul></li><li>운영에 피로도를 낮추기 위해서 깃헙과 챌린저스라는 앱을 사용하였다. <ul><li>챌린저스 앱에 정한 <strong>예치금을 등록</strong></li><li>운영은 “두꺼운 책 뽀개기” 라는 <strong><a href="https://github.com/bookcrush?type=source" target="_blank" rel="noopener">깃헙 조직</a></strong>을 만들고</li><li>하위에 두꺼운 책마다 <strong><a href="https://github.com/bookcrush/httpPerfectGuide" target="_blank" rel="noopener">레포</a></strong>를 만들어서</li><li>해당 레포에 <strong>과제를 PR</strong>로 올려서 </li><li>해당 PR을 <strong>챌린저스라는 앱으로 인증</strong>하는 방식으로 진행하였다.</li><li>운영자는 글 마감 공지 등을 진행하였다.</li></ul></li></ol><h4 id="스터디-공부-방식-고민"><a href="#스터디-공부-방식-고민" class="headerlink" title="스터디 공부 방식 고민"></a>스터디 공부 방식 고민</h4><ul><li><p>보통의 스터디는 장기 기억을 위해서 </p><ol><li>개인 공부를 하고, 토론하던가, </li><li>발표자를 정해서 일정 기간에 한 번씩 오프라인에서 한 명 혹은 각자가 발표하는 식으로 진행하지만</li></ol></li><li><p>개인적으로 발표 준비라는 것은 콘텐츠 제작과 + 발표라는 2가지 전달 방법을 만들어야 하고,<br>이는 <strong>스터디를 부담스럽게 만드는 요인</strong>이라고 생각이 들었다.</p></li><li><p>발표로 진행하는 스터디는 장기기억을 위해서 </p><ol><li>(듣는이가 있는) 발표자료를 준비하고 </li><li>발표라는 러버덕 비슷한 학습 방법을 사용하는데</li></ol><p>이를 대체하는 방법이 무엇일까 고민했을 때</p></li><li><p>TIL 수준보다 좀 더 읽는 이를 고려야 하는 블로그 글을 정리 매개체로 하고,<br>블로그 글 자체를 <strong>콘텐츠를 만드는 수준</strong>으로 끌어올려서 글을 작성하게 하면<br>린한 기획이 선행되어야 하기 때문에 기억에 오래 남지 않을까 하여,<br>해당 방식의 글 작성 조건으로 모집 글을 작성하였다.</p></li><li><p>또한, 다른 사람의 글을 <strong>첨삭</strong>해주면서 글을 몇 번이라도 더 복습하며 볼 수 있다고 생각하여<br>짝궁 리뷰도 필수로 하게끔 진행하였는데,<br>진행해보니 ‘글을 읽어서 학습하며 첨삭한다’가 아니라 <strong>주객이 전도</strong>되는 상황이 벌어져서,<br>다음에는 리뷰하는 것은 제외하였다.</p></li><li><p>현재 상황을 봤을 때는, 콘텐츠 같은 정리 글을 쓴다기보다는 글에 있는 내용을 요약정리하는 수준으로 되었지만, 정리에서 오는 학습효과 정도는 가져갈 수 있었던 것 같다.</p></li></ul><h4 id="그래서-공부는"><a href="#그래서-공부는" class="headerlink" title="그래서 공부는?"></a>그래서 공부는?</h4><ul><li>현재 20주 정도로 진행하여서 책의 60% 정도 진행하였다.</li><li>http에 대해서 기본정리를 차근차근히 할 수 있어서 시작하길 잘했다는 생각을 매번 하고 있다.</li><li>최근에는 코드스피츠에서 <strong>[리얼월드 http]</strong>를 선물 받아서, 해당 책으로 실습을 병행하고자 한다.</li><li>공부해야겠다 마음을 먹고 스터디 진행까지 실행을 하고 나니, 중간회고가 굉장히 도움이 된다는 생각을 자주 하게 되었다. 자기객관화를 지속해서 해야겠다는 마음이 들었다.</li></ul><h3 id="1-1-2-기본-공부-프론트개발"><a href="#1-1-2-기본-공부-프론트개발" class="headerlink" title="1.1.2 기본 공부 (프론트개발)"></a>1.1.2 기본 공부 (프론트개발)</h3><ul><li>웹 네트워크 공부 때문에 계획했던 기본공부 action plan을 수행하지 못했다.</li><li>action plan으로 구글 웹 문서와 mdn 전체를 훑어보기로 세웠었는데,<br>사전 같은 문서를 훑어보는 것은 유익하겠지만<br>재미가 없을 것 같고.. 꾸준히 하지 못 할 것 같아서, 더 구체적인 plan을 세우려고 한다.</li></ul><hr><a name="1-2"><h2 id="1-2-디자인-시스템-이해도-높이기"><a href="#1-2-디자인-시스템-이해도-높이기" class="headerlink" title="1.2 디자인 시스템 이해도 높이기"></a>1.2 디자인 시스템 이해도 높이기</h2><p>상반기 때는 디자인 시스템을 적용하기 전에 팀원들에게<br>디자인 시스템이 어떤 생산성을 주는지에 대해 알리기 위해 사내 발표를 진행했었다. </p><img src="/images/2019/17/01.jpg"><p>사내 발표 때 디자인시스템의 기본 구조를 <strong>아토믹 패턴 개념</strong>을 기반으로 설명했었는데,<br>발표 피드백으로 <strong>어느 수준까지 쪼개야 하는지에 대해서 잘 모르겠다</strong>는 의견이 나왔고 이점을 보완하여서 개념을 재정리하였다.</p><p>그러던 중에 감사하게도 <strong>GDG-devfest</strong> 발표기회가 찾아와서 정리한 부분을 발표하게 되었다.<br>(발표 회고 글도 작성해야 하는데 언제 하지 8ㅅ8) </p><p>발표자들의 이해를 돕기 위해서 실제로 적용하는 예시까지 정리해드렸는데,<br>이때 스스로 다시 한번 개념에 대해서 정리하게 되었고, 이를 바탕으로 회사 프로젝트의 구조도 수정할 수 있게 되었다.<br>확실히 연필 놓고 멀리서 바라보는 시간은 중요한 듯하다.</p><hr><a name="1-3"><h2 id="1-3-포트폴리오-작업하기"><a href="#1-3-포트폴리오-작업하기" class="headerlink" title="1.3 포트폴리오 작업하기"></a>1.3 포트폴리오 작업하기</h2><p>으… 포트폴리오 작업은 이번에도 이루지 못했다.<br><strong>헥소 블로그 테마 만들기</strong>라도 하자고 action plan을 잡았었는데, 진행하지 못했다.<br>아무래도 공부하는 것을 더 우선순위로 잡아놔서 개인 포폴작업용으로 개발하는 것은 우선순위가 내려간 듯하다.<br><strong>회사 업무와 관련된 토이프로젝트</strong>를 만들 생각으로 다시 접근해야겠다는 생각이 들었다.</p><hr><hr><a name="2"><h1 id="2-2019-하반기-뭘-했을까"><a href="#2-2019-하반기-뭘-했을까" class="headerlink" title="2. 2019 하반기 뭘 했을까"></a>2. 2019 하반기 뭘 했을까</h1><a name="2-1"><h2 id="2-1-👥-외부-활동"><a href="#2-1-👥-외부-활동" class="headerlink" title="2.1  👥 외부 활동"></a>2.1  👥 외부 활동</h2><h3 id="2-1-1-글또-3기-글쓰기-활동"><a href="#2-1-1-글또-3기-글쓰기-활동" class="headerlink" title="2.1.1 글또 3기 (글쓰기 활동)"></a>2.1.1 글또 3기 (글쓰기 활동)</h3><img src="/images/2019/46/01.jpg"><blockquote><p>글또는 예치금을 걸어두고 2주마다 블로그 글을 작성하는 모임이다. </p></blockquote><p>상반기 글또2기 마무리에 이어서 3기도 참여하게 되었다. 이번 기수에는 회사 팀원들도 함께 참여하였다! </p><p>http완벽가이드 스터디와 스터디원도 겹치고, 일정도 겹치는 상황이라,<br>거의 스터디 글을 올리곤 했어서 다양한 글을 작성하지 못해서 아쉬웠다. </p><img src="/images/2019/46/03.png"><p>역시 글 작성은 일주일에 2개는 무리인듯하다..<br>그래도 스터디 글이 아닌 주제로 작성했던 글들이<br>평소에 작성하고 싶었던 글 목록에 있던 글들이라, 작성할 때 만큼은 재미있었다.</p><p>이번 기수에는 포지션끼리 그룹핑하여 피드백하는 방식이어서<br>네트워킹도 되고 기술공유도 되어서 유익하였다.</p><blockquote><p><strong>4기도 해야지! 끝까지 해서 고인물이 되어야겠다.</strong></p></blockquote><h3 id="2-1-2-발표"><a href="#2-1-2-발표" class="headerlink" title="2.1.2 발표"></a>2.1.2 발표</h3><h4 id="WTM-GDG-클라우드-부산-발표"><a href="#WTM-GDG-클라우드-부산-발표" class="headerlink" title="WTM GDG 클라우드 부산 발표"></a>WTM GDG 클라우드 부산 발표</h4><p>기록하며 성장하기라는 주제로 개인 성장기? 공부 방법 등을 공유해 드렸다. <a href="https://speakerdeck.com/feel5ny/giroghamyeo-seongjanghagi" target="_blank" rel="noopener">➔</a><br>취준생분들이 많이 오셔서 도움이 되셨다는 피드백을 많이 주셨다. 🙏</p><script async class="speakerdeck-embed" data-id="dcb5ca25b9a54ef7a5866052d64f00e3" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><h4 id="GDG-devfest-발표"><a href="#GDG-devfest-발표" class="headerlink" title="GDG devfest 발표"></a>GDG devfest 발표</h4><p>발표에 대한 경험담과 준비 과정은 따로 글로 작성하려고 한다.<br>요약하자면 처음 하는 대규모 발표였기 때문에 정신이 혼미했었다..는 것..</p><script async class="speakerdeck-embed" data-id="c4dfbff2a87942e2ba7f99a379ef4152" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>생각보다 발표를 듣고 긍정적인 피드백을 주신 분들이 많으셨다.<br>개인적으로 아토믹 패턴 기반은 아니더라도<br>디자인 시스템은 업무의 생산성과 프로덕트 브랜딩을 위해서<br>다른 회사들에도 꼭 적용되면 좋겠다는 생각이 들어서,<br>해당 개념이 한 사람이라도 더 알게 하는 데에 기여를 했다는 것에 의미를 두었다. 🙏</p><h3 id="2-1-3-코드-스피츠-수업-참여-원론-수업"><a href="#2-1-3-코드-스피츠-수업-참여-원론-수업" class="headerlink" title="2.1.3 코드 스피츠 수업 참여 (원론 수업)"></a>2.1.3 코드 스피츠 수업 참여 (원론 수업)</h3><p>좋아하는 코드 스피츠 강의를 1개 참여했다. </p><ol><li>거침없는 자바스크립트 (10월)</li></ol><p>하반기 때는 너무 코드스피츠 이론 수업에 매달리지 말고 복습이나 실습을 좀 해야겠다는 생각 때문에 다른 강의는 참여하지 않았다 (못했다..는 아니다.) 그러다 강남에서 열린다는 소문을 듣고 +_+ 부랴부랴 신청하게 되었다.(ㅎ.ㅎ)<br>강의장에서 http 완벽가이드 스터디원들도 오프라인에서 얼굴도 한 번씩 뵙기도 했다. </p><p>이번 강의는 3회 강의가 정말 알참 of 알참이었는데 알참을 넘어서 나에게는 overflow한 개념이었다.<br>그래도 제너레이터를 왜 사용해야 하는지, 넌블럭킹에 대한 개념 등을 알 수 있어서 좋긴 했지만<br>아직 3개의 강의를 복습하지 못했다.. 올해 가기 전에 해야 하눈데!! ㅠ</p><img src="/images/2019/46/04.png" style="width:100%"><p>저번 회고 글에서도 작성했지만, <strong>실습 위주로 복습해야 진짜 내 것이 될 텐데</strong><br>자꾸 코드스피츠 수업은 그것을 못 하게 된다ㅠ 리소스 부족도 사치겠지.. 복습하고 꼬옥 실습을 진행하자. </p><p><strong>단기목표</strong></p><ol><li>이번 거침없이 자바스크립트 복습하고 </li><li>제너레이터 실습해보기</li></ol><h3 id="2-1-4-패캠-모의-면접관"><a href="#2-1-4-패캠-모의-면접관" class="headerlink" title="2.1.4 패캠 모의 면접관"></a>2.1.4 패캠 모의 면접관</h3><img src="/images/2019/46/05.png"><p>패스트 캠퍼스의 웹 프로그래밍 스쿨 모의 면접관 제안이 들어와서 10월부터 12월까지 진행하게 되었다.<br>예전 공부했을 때 생각도 나고, 취준했을 때도 생각나서 나름 열심히? 상담 + 모의 면접을 진행하였다.<br>단기간에 학습하느라 힘드실 텐데, 다들 열의도 넘치시고 그 뭐랄까 열정!!이 느껴져서 어떻게든 더 많이 알려드리려고 노력했다. </p><hr><hr><a name="2-2"><h2 id="2-2-🍖어떤-공부를-했늬"><a href="#2-2-🍖어떤-공부를-했늬" class="headerlink" title="2.2  🍖어떤 공부를 했늬"></a>2.2  🍖어떤 공부를 했늬</h2><ul><li><strong>삽질하며 공부하기</strong><ul><li>올해도 여전히 장벽을 부딪쳐가며 공부해 나갔다. </li><li>특히나 실 서버 배포가 이루어지면서 대응하면서 공부한 부분도 꽤 많았다.(먼 산..)</li></ul></li><li><strong>함께 공부하기</strong><ul><li><strong>바닐라JS 스터디</strong>: <strong>적극적인 코드리뷰</strong>가 제일 좋았다. (핑퐁🏓)</li><li><strong>HTTP 완벽가이드 스터디</strong>: 요즘 <strong>인증서</strong> 공부를 하고 있는데 공인인증서랑 관련도 있어서 신기하고 재밌게 배우고 있다.ㅎㅎ</li><li><strong>파이썬 스터디</strong><ul><li>사내에서 파이썬 스터디를 진행하고 있어서 참여해보았다. </li><li>새로운 언어를 공부해보니 자바스크립트가 다르게 보이는 점도 있었다. </li><li><strong><a href="https://feel5ny.gitbook.io/python/" target="_blank" rel="noopener">깃북</a></strong>으로 공부한 부분을 정리하였다.<br>진짜… 깃북 편집하는데 UX가 화딱지나게 생겨서 힘들었었다..</li></ul></li></ul></li><li><strong>개발 외 공부하기</strong><br>비즈니스를 <strong>데이터 기반</strong>으로 살펴보고,<br>퍼널별로 웹 개발자가 내놓을 수 있는 인사이트를 얻기 위해 공부하고 있다<ul><li>데이터 겅부: 시각화 기획 방법(?), 분석 방법, 툴 익히기, …</li><li>마케팅 용어 이해하기 @_@: 마케팅용어에는 왜 이렇게 축약어가 많을까ㅠ 대단한 사람들..</li><li>사실 요즘에 개발 공부도 개발 공부지만 데이터 공부도 너무 재밌다.</li><li>다음에 웹 리포팅 형식으로 토이프로젝트를 진행하려고 한다.</li></ul></li></ul><p>이번 연도에는 실무에서 겪은 것으로 공부하고, 같이 공부하는 스터디 참여, 개발 외적인 부분도 공부하려고 하였다. 확실히 이론 공부보다 실무에서 필요한 공부 위주로 방향을 잡아 공부하니 학습속도가 개인 공부 때보다는 빠른듯하다. 개발 이외의 공부를 해도 좋으나 개발 공부를 소홀히 하지 않는 선에서 진행해야겠다. (라고했지만, 그렇게 되면 속도가 느려져서 답답하다.)<br>두꺼운 책은 부담스러워서 항상 완주하지 못했었는데, 위 스터디 방식대로 진행하고, 현재 완주가 눈앞에 보이니, 앞으로 두꺼운 책 공부는 이런 식으로 공부하면 되겠다 싶다.</p><hr><hr><a name="2-3"><h2 id="2-3-✍️-어떤-글을-썼을까-17"><a href="#2-3-✍️-어떤-글을-썼을까-17" class="headerlink" title="2.3  ✍️ 어떤 글을 썼을까? (17)"></a>2.3  ✍️ 어떤 글을 썼을까? (17)</h2><p>글 갯수는 중요하지 않지만!! 너무 한쪽 방향으로만 글을 쓰면 좋지 않으니까.<br>하반기에 어떤 글을 썼는지 알아보고 다시 계획을 잡아보자.</p><ul><li>📚 공부 정리 글 15 (코드스피츠4, 스터디 글 11)</li><li>💡 작업하다가 내 것이 된 지식 1</li><li>🙆 내가 알고 있는 부분 정리 1</li></ul><p>2기 때 글의 카테고리를 이렇게 정리했었다.</p><ol><li>📚: 공부하자! 내 스타일로 메모</li><li>💡: 작업하다가 삽질해서 내 것이 된 지식을 정리하자.</li><li>🙆: 내가 알고 있는 부분을 정리해보자.</li><li>🏃: 세미나 다녀왔습니다.</li></ol><p>2기 때 잡은 카테고리를 기준으로 3기 때는 <strong>1번 5개/ 2번 3개/ 3번 2개/ 4번 2개</strong> 작성을 목표로 잡았었다. </p><p>😅 이번에는 1번에 굉장히 쏠려버렸다.<br><strong>삽질한 업무</strong>들이 많아서 개인적으로 글감을 정리하고 있었는데,<br>너무 스터디 글만 올리는 것 같다고 인지될 때마다 글감에서 꺼내서 작성하였다. </p><img src="/images/2019/46/06.png" style="width:100%"><p>그나마 2개..ㅎㅎ 세미나 다녀와서 글 쓰는 건.. 정말 손에 안 잡히나보다 😂😂<br>HTML 컨퍼런스랑 구글 SEO는 작성해야 하는데 :(<br>스터디 끝나면 글감에 있는 글 하나씩 꺼내서 작성하자!</p><hr><hr><a name="3"><h1 id="3-Action-Plan-2020년에는-큰-거2개-작은-거2개-토이2개"><a href="#3-Action-Plan-2020년에는-큰-거2개-작은-거2개-토이2개" class="headerlink" title="3. Action Plan - 2020년에는 큰 거2개/작은 거2개/토이2개"></a>3. Action Plan - 2020년에는 큰 거2개/작은 거2개/토이2개</h1><p>2019년도에는 대부분의 목표달성 계획에 추상적이고 모호하게 잡았던 듯하다.<br>물론 지금 이렇게 계획한다고 해서! 100% 지키면 나는 로봇이겠지만.. 최대한 계획한 것을 지키면서 지내보자.</p><hr><a name="3-1"><h2 id="3-1-👤-개인-공부-장-단기"><a href="#3-1-👤-개인-공부-장-단기" class="headerlink" title="3.1 👤 개인 공부 (장/단기)"></a>3.1 👤 개인 공부 (장/단기)</h2><ol><li><p><strong>장기목표</strong>: <strong>2020년도에</strong> 하고 싶은 내용</p><ul><li>토이프로젝트: 데이터 기반 특정 주제에 대한 리포팅 웹페이지 제작</li><li>big: 자료구조 공부 (상반기)</li><li>big: 디자인 패턴 공부 (하반기)</li><li>small: 구글 web fundamentals</li><li>small: 자바스크립트 (프레임워크/라이브러리)</li></ul></li><li><p><strong>단기목표</strong>: 2020년도 <strong>상반기</strong>에 하고 싶은 내용</p><ul><li>토이프로젝트: 특정 주제에 대한 리포팅 웹페이지 제작</li><li>big: 자료구조 공부 (파이썬)</li><li>small: 구글 web fundamentals <a href="https://developers.google.com/web/fundamentals" target="_blank" rel="noopener">➔</a></li></ul></li></ol><hr><a name="3-2"><h2 id="3-2-💁‍-2020-다짐"><a href="#3-2-💁‍-2020-다짐" class="headerlink" title="3.2 💁‍ 2020 다짐"></a>3.2 💁‍ 2020 다짐</h2><img src="/images/2019/46/07.jpg"><ul><li>개인적으로 2020년에는 외부활동은 적당히 하고 <strong>내공을 다지는 해</strong>로 컨셉을 잡자.</li><li>휴식을 잘 가져보자. 장기전으로 일하려면 제대로 된 휴식도 필수.. <ul><li>해외 두군데는 가보자. 겨울에 더운 나라 가기</li></ul></li><li>개발 책 말고 다른 분야 책 3권을 읽어보자. </li><li>필라테스 다시 시작하자!</li></ul></a></a></a></a></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;아, 2019년도도 어느새.. 너무나 빠르게 지나갔다. 요즘 참 시간이 빠르게 가는 것 같다. 모니터만 보다가 시간 다 가겠다고 농담으로 자주 얘기하는 요즘이다. 그래도 정신 똑띠 차리고 시간을 잘 써야 하니까.. 오늘도 어김없이! 연말정산을 해
      
    
    </summary>
    
      <category term="blog 🙆" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/"/>
    
      <category term="JoyStory" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/JoyStory/"/>
    
    
      <category term="Joy" scheme="http://feel5ny.github.io/tags/Joy/"/>
    
      <category term="blog" scheme="http://feel5ny.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS의 세부사항</title>
    <link href="http://feel5ny.github.io/2019/12/08/HTTP_014_02/"/>
    <id>http://feel5ny.github.io/2019/12/08/HTTP_014_02/</id>
    <published>2019-12-08T11:43:10.000Z</published>
    <updated>2019-12-08T13:10:15.599Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>최근 인증서 관련 이슈를 만난적이 있었는데,<br>이번 장을 통해서 조금이나마 이해가 될 수 있게 되었다 :) </p></blockquote><hr><ul><li>HTTPS는 HTTP의 가장 유명한 보안 버전이다.</li><li>HTTPS는 HTTP 프로토콜에 대칭, 비대칭 인증서 기반 암호 기법의 강력한 집합을 결합한 것이다.</li><li>HTTPS는 웹 기반 전자상거래의 고속 성장을 이끄는 주력이다.</li></ul><h1 id="HTTPS-세부사항"><a href="#HTTPS-세부사항" class="headerlink" title="HTTPS 세부사항"></a>HTTPS 세부사항</h1><ul><li>HTTPS는 그냥 보안 전송 계층을 통해 전송되는 HTTP이다.</li><li>HTTPS는 HTTP 메세지를 TCP로 보내기 전에<br>먼저 그것들을 <strong>암호화하는 보안계층</strong>으로 보낸다.</li><li>오늘날 HTTPS의 보안계층은 <strong>SSL과 TLS</strong>로 구현되었다.</li></ul><a name="scheme"><h2 id="1-HTTPS-스킴"><a href="#1-HTTPS-스킴" class="headerlink" title="1. HTTPS 스킴"></a>1. HTTPS 스킴</h2><ul><li><p>보안 HTTP는 선택적이다.</p></li><li><p>웹 서버로의 요청을 만들때, 웹서버에게 HTTP의 보안 프로토콜 버전을 수행한다고 말해줄 방법이 필요하다.</p></li><li><p>이것은 URL의 스킴을 통해 이루어진다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://feel5ny.github.io</span><br></pre></td></tr></table></figure></li><li><p>만약 URL이 http 스킴을 갖고 있다면<br>클라는 서버에 <strong>80</strong>번 포트로 연결하고<br>평범한 HTTP 명령을 전송한다. </p></li><li><p>만약 URL이 http<code>s</code> 스킴을 갖고 있다면<br>클라는 서버에 <strong>443</strong>번 포트로 연결하고<br>서버와 바이너리 포맷으로 된 몇몇 SSL 보안 매개변수를 교환하면서<br>핸드셰이크를 하고,<br>암호화된 HTTP 명령이 뒤를 잇는다.</p></li><li><p>SSL 트래픽은 <strong>바이너리 프로토콜</strong>이기 때문에 HTTP와는 완전히 다르다. </p><ul><li>그 트래픽은 다른 포트로 전달된다.(SSL은 보통 443포트)</li></ul></li></ul><a name="setup"><h2 id="2-보안-전송-셋업"><a href="#2-보안-전송-셋업" class="headerlink" title="2. 보안 전송 셋업"></a>2. 보안 전송 셋업</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>HTTP에서는 클라는 </p><ol><li>웹서버의 80번 포트로 TCP 커넥션을 열고, </li><li>요청메세지를 보내고, </li><li>응답메세지를 받고, </li><li>커넥션을 닫는다.</li></ol><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>HTTPS에서는 클라는</p><ol><li>웹서버의 443번 포트로 연결한다. TCP 연결이 되고나면, </li><li>클라와 서버는 암호법 매개변수와 교환 키를 협상하면서 SSL 계층을 초기화한다.</li><li>핸드셰이크가 완료되면 SSL 초기화는 완료되며 클라는 요청 메세지를 보안계층에 보낼 수 있다.<br>이 메세지는 TCP로 보내지기 전에 <strong>암호화</strong>된다. 암호화된 요청을 보낸다.</li><li>SSL을 통해 보내진 HTTP 요청 / TCP를 통해 보내진 암호화된 요청</li><li>SSL 닫힘을 통지한다.</li><li>TCP 커넥션이 닫힌다. </li></ol><img src="/images/2019/45/01.png" style="width:100%"><a name="handshake"><h2 id="3-SSL-핸드셰이크"><a href="#3-SSL-핸드셰이크" class="headerlink" title="3. SSL 핸드셰이크"></a>3. SSL 핸드셰이크</h2><ul><li>암호화된 HTTP 메세지를 보낼 수 있게 되기 전에<br>클라와 서버는 SSL 핸드셰이크를 할 필요가 있다.</li><li><strong>핸드셰이크에서 일어나는 일</strong><ol><li>프로토콜 버전 번호 교환</li><li>양쪽이 알고 있는 암호 선택</li><li>양쪽의 신원을 인증</li><li>채널을 암호화하기 위한 임시 세션 키 생성</li></ol></li><li>SSL 핸드셰이크를 단순화한 버전이다.</li><li>SSL이 어떻게 사용되는가에 따라 핸드셰이크는 보다 복잡해질 수 있다.</li></ul><img src="/images/2019/45/02.png"><p>실제로 좀더 자세히 보면..<br><img src="/images/2019/45/03.png"></p><blockquote><p><a href="https://run-it.tistory.com/29" target="_blank" rel="noopener">출처</a></p></blockquote><h3 id="3-1-예시로-알아보기"><a href="#3-1-예시로-알아보기" class="headerlink" title="3.1 예시로 알아보기"></a>3.1 예시로 알아보기</h3><p><a href="http://www.bing.com에" target="_blank" rel="noopener">www.bing.com에</a> 접속할 때 SSL 핸드쉐이크 과정을 와이어 샤크를 보면서 알아보자.</p><ol><li>(클 =&gt; 서버) Client Hello</li><li>(서버 =&gt; 클) Server Hello</li><li>(서버 =&gt; 클) Certificate</li><li>(서버 =&gt; 클) Certificate Status</li><li>(서버 =&gt; 클) Server Key Exchange</li><li>(서버 =&gt; 클) Server Hello Done</li><li>(클 =&gt; 서버) Client Key Exchange</li><li>(클 =&gt; 서버) Change Cipher Spec</li><li>(클 =&gt; 서버) Encrypted Handshake Message</li><li>(서버 =&gt; 클) Change Cipher Spec</li><li>(서버 =&gt; 클) Encrypted Handshake Message</li></ol><img src="/images/2019/45/04.png" style="width:100%"><hr><img src="/images/2019/45/05.png" style="width:100%"><hr><h4 id="1-클-gt-서버-Client-Hello"><a href="#1-클-gt-서버-Client-Hello" class="headerlink" title="1. (클 =&gt; 서버) Client Hello"></a>1. (클 =&gt; 서버) Client Hello</h4><img src="/images/2019/45/06.png"><ul><li>사용자가 bing에 접속하기 위해 bing 서버쪽에 통신을 요청</li><li>TLS 버전, </li><li>자신이 지원하는 cipher리스트, </li><li>클라이언트가 생성한 난수 정보를 보낸다.</li></ul><img src="/images/2019/45/07.png" style="width:100%"><h4 id="2-서버-gt-클-Server-Hello"><a href="#2-서버-gt-클-Server-Hello" class="headerlink" title="2. (서버 =&gt; 클) Server Hello"></a>2. (서버 =&gt; 클) Server Hello</h4><ul><li>서버는 자신의 SSL버전</li><li>자신이 만든 임의의 난수와</li><li>클라이언트의 cipher 리스트 중 하나의 선택하여 그 정보를 클라이언트에게 보낸다. </li></ul><img src="/images/2019/45/08.png" style="width:100%"><h4 id="3-서버-gt-클-Certificate"><a href="#3-서버-gt-클-Certificate" class="headerlink" title="3. (서버 =&gt; 클) Certificate"></a>3. (서버 =&gt; 클) Certificate</h4><ul><li>서버는 자신이 갖고있는 인증서정보를 전송한다.</li><li>첫번째는 서버의 인증서 이고<br>두번째는 CA 인증서이다.</li></ul><img src="/images/2019/45/11.png"><hr><img src="/images/2019/45/09.png" style="width:100%"><h4 id="4-서버-gt-클-Certificate-Status"><a href="#4-서버-gt-클-Certificate-Status" class="headerlink" title="4. (서버 =&gt; 클) Certificate Status"></a>4. (서버 =&gt; 클) Certificate Status</h4><ul><li>갖고있는 인증서의 유효성 정보를를 전송한다.</li><li>OCSP는 <code>온라인 인증서 상태 프로토콜</code>의 약자로, 인증서 유효성 확인을 제공하는 방법이다.</li></ul><img src="/images/2019/45/10.png" style="width:100%"><h4 id="5-서버-gt-클-Server-Key-Exchange"><a href="#5-서버-gt-클-Server-Key-Exchange" class="headerlink" title="5. (서버 =&gt; 클) Server Key Exchange"></a>5. (서버 =&gt; 클) Server Key Exchange</h4><ul><li>서버는 ECDHE 키 쌍을 만들어서 클라에게 public 키를 전송한다.</li><li>이 키는 클라의 public키를 이용해서 ECDHE shared secret을 만들기 위해 사용된다.<blockquote><p><strong>ECDHE</strong> : Elliptic Curve 및 Ephermeral 을 지원하는 디피 헬만 (Diffie Hellman) 방식 (PFS, Perfect Foward Secrecy  지원) <a href="https://rsec.kr/?p=455" target="_blank" rel="noopener">출처</a></p></blockquote></li></ul><img src="/images/2019/45/12.png" style="width:100%"><h4 id="6-서버-gt-클-Server-Hello-Done"><a href="#6-서버-gt-클-Server-Hello-Done" class="headerlink" title="6. (서버 =&gt; 클) Server Hello Done"></a>6. (서버 =&gt; 클) Server Hello Done</h4><ul><li>서버의 말이 끝남</li></ul><h4 id="7-클-gt-서버-Client-Key-Exchange"><a href="#7-클-gt-서버-Client-Key-Exchange" class="headerlink" title="7. (클 =&gt; 서버) Client Key Exchange"></a>7. (클 =&gt; 서버) Client Key Exchange</h4><ul><li>클라는<br>자신이 마든 난수와 + 서버가 만든 난수를 통해<br>= pre-master-secret을 생성한다.</li><li>서버의 공개키를 통해 암호화하여 서버로 전송한다. (아까 5번에서 받은 public key)</li><li>즉, 해당과정을 통해 실질적으로 암호화에 사용하는 <strong>대칭키</strong>가 생성된다.</li></ul><img src="/images/2019/45/13.png" style="width:100%"><h4 id="8-클-gt-서버-Change-Cipher-Spec"><a href="#8-클-gt-서버-Change-Cipher-Spec" class="headerlink" title="8. (클 =&gt; 서버) Change Cipher Spec"></a>8. (클 =&gt; 서버) Change Cipher Spec</h4><ul><li>클라이언트가 성공적으로 공유키를 생성했으며,<br><strong>이후 메시지는 암호화 하여 전송할 것을 알리는 메시지</strong>를 전송한다. </li></ul><img src="/images/2019/45/14.png"><h4 id="9-클-gt-서버-Encrypted-Handshake-Message-Finished"><a href="#9-클-gt-서버-Encrypted-Handshake-Message-Finished" class="headerlink" title="9. (클 =&gt; 서버) Encrypted Handshake Message(Finished)"></a>9. (클 =&gt; 서버) Encrypted Handshake Message(Finished)</h4><ul><li>클라이언트는 서버에게 핸드셰이크가 성공적으로 완료되었음을 알린다.</li></ul><img src="/images/2019/45/15.png"><h4 id="10-서버-gt-클-Change-Cipher-Spec"><a href="#10-서버-gt-클-Change-Cipher-Spec" class="headerlink" title="10. (서버 =&gt; 클) Change Cipher Spec"></a>10. (서버 =&gt; 클) Change Cipher Spec</h4><ul><li>서버도 성공적으로 공유키를 생성했음을 알린다.</li></ul><h4 id="11-서버-gt-클-Encrypted-Handshake-Message-Finished"><a href="#11-서버-gt-클-Encrypted-Handshake-Message-Finished" class="headerlink" title="11. (서버 =&gt; 클) Encrypted Handshake Message(Finished)"></a>11. (서버 =&gt; 클) Encrypted Handshake Message(Finished)</h4><ul><li>서버도 클라에언트에게 핸드셰이크가 성공적으로 완료되었음을 알린다.</li></ul><h4 id="12-어플리케이션-데이터"><a href="#12-어플리케이션-데이터" class="headerlink" title="12. 어플리케이션 데이터"></a>12. 어플리케이션 데이터</h4><ul><li>서로 상대방에게 전송할 데이터를 암호화하여 전송한다.</li></ul><a name="ca"><h2 id="4-서버-인증서"><a href="#4-서버-인증서" class="headerlink" title="4. 서버 인증서"></a>4. 서버 인증서</h2><ul><li>SSL 인증서는 클라이언트와 서버간의 통신을 제3자가 보증해주는 전자화된 문서다.</li><li>SSL은 서버 인증서를 클라로 나르고<br>다시 클라 인증서를 서버로 날라주는 상호 인증을 지원한다.<ul><li>오늘날 클라 인증서는 흔히 쓰이지 않는다.</li></ul></li><li>보안 HTTPS 트랜잭션은 항상 서버 인증서를 요구한다.</li><li>서버 인증서는 <code>X.509 v3</code>에서 파생되 인증서이다. <a href="https://feel5ny.github.io/2019/12/01/HTTP_014_01/#certs">디지털 인증서</a></li></ul><img src="/images/2019/45/16.png"><a name="ocsp"><h2 id="5-사이트-인증서-검사"><a href="#5-사이트-인증서-검사" class="headerlink" title="5. 사이트 인증서 검사"></a>5. 사이트 인증서 검사</h2><ul><li>SSL 자체는 사용자에게 웹 서버 인증서를 검증할 것을 요구하지 않지만,<br>최신 웹브라우저들 대부분은 인증서에 대해 간단하게 기본적인 검사를 하고<br>그 결과를 더 철저한 검사를 할 수 있는 방법과 함께 사용자에게 알려준다.</li><li>넷스케이프가 제안한 웹 서버 인증서 검사를 위한 한 알고리즘 수행 단계는 다음과 같다.<ol><li>날짜 검사</li><li>서명자 신뢰도 검사</li><li>서명 검사</li><li>사이트 신원 검사</li></ol></li></ul><h3 id="1-날짜-검사"><a href="#1-날짜-검사" class="headerlink" title="1. 날짜 검사"></a>1. 날짜 검사</h3><ul><li>브라우저는.<br>인증서가 여전히 유효함을 확인하기 위해<br>인증서의 시작 및 종료일을 검사한다.</li><li>만료되었거나 활성화되지 않았다면<br>인증서 검사는 실패. 브라우저는 에러를 보여준다.</li></ul><h3 id="2-서명자-신뢰도-검사"><a href="#2-서명자-신뢰도-검사" class="headerlink" title="2. 서명자 신뢰도 검사"></a>2. 서명자 신뢰도 검사</h3><ul><li>모든 인증서는 서버를 보증하는 어떤 인증기관에 의해 서명되어 있다.<br><code>CA</code> = Certificate Authority</li><li>여러가지 수준의 인증서가 있는데, 각각은 다른 수준의 배경 검증을 요구한다.<ul><li>전자상거래 서버 인증서를 발급받고자 한다면,<br>사업체로서의 법인에 대한 법적 증명을 제시해야 한다.</li></ul></li><li>누구나 인증서를 생성할 수 있지만 몇몇 CA는<br>인증서 지원자의 신원 및 사업의 선량함을 입증하는<br>알기쉬운 절차를 갖춘 잘 알려진 기관이다.</li><li>이러한 이유료, <strong>브라우저는 신뢰할 만한 서명 기관의 목록을 포함한 채로 배포</strong>된다.<blockquote><p>브라우저마다 다르게 셋팅되어있다. <a href="https://security.stackexchange.com/questions/49006/list-of-certificate-authorities-in-browsers-and-mobile-platforms" target="_blank" rel="noopener">출처</a></p><ul><li><a href="https://www.mozilla.org/en-US/about/governance/policies/security-group/certs/included/" target="_blank" rel="noopener">Firefox</a></li><li>Chrome: it uses the certificates included with the OS.</li><li><a href="https://certs.opera.com/" target="_blank" rel="noopener">Opera</a>: it install the most uses CA within installing the application, you can find the rest in the online root repository</li><li><a href="https://support.apple.com/kb/ht5012" target="_blank" rel="noopener">iOs</a></li></ul></blockquote></li><li>만약 브라우저가 알려져 있지 않은 인증기관으로부터 서명된 인증서를 받았다면<br>브라우저는 보통 경고를 보여준다.</li><li>브라우저는 신뢰할만한 CA가 간접적으로 서명한 인증서를 받아들이는 것을 선택할 수 있다<ul><li>신뢰할만한 CA가 ‘필오의 개발일지’를 위한 인증서에 서명을 하고<br>필요의 개발일지는 어떤 사이트 인증서에 서명을 한다면,<br>브라우저는 그 인증서를 올바른 CA 경로에서 파생된 것으로 보고 받아들일 수 있다.</li></ul></li></ul><h3 id="3-서명-검사"><a href="#3-서명-검사" class="headerlink" title="3. 서명 검사"></a>3. 서명 검사</h3><ul><li>한번 서명 기관이 믿을 만하다고 판단되면,<br>브라우저는 서명기관의 공개키를 서명에 적용하여,<br>그의 체크섬과 비교해봄으로써 인증서의 무결성을 검사한다.</li></ul><h3 id="4-사이트-신원-검사"><a href="#4-사이트-신원-검사" class="headerlink" title="4. 사이트 신원 검사"></a>4. 사이트 신원 검사</h3><ul><li><p>서버가 누군가 다른 이의 인증서를 복사하거나,<br>그들의 트래픽을 가로채는 것을 방지하기 위해, </p></li><li><p>대부분의 브라우저는<br><strong>인증서의 도메인 이름이</strong><br><strong>대화 중인 서버의 도메인 이름과 비교하여 맞는지</strong> 검사한다.</p></li><li><p>서버 인증서에는 보통 단일 도메인 이름이 들어있지만<br>몇몇 CA는 서버 클러스터나 서버 팜을 위해<br>서버 이름의 목록이나 서버 이름들에 대한 와일드카드 표현이 들어있는 인증서를 만든다.</p><blockquote><p><strong>서버 클러스터란?</strong> (<a href="https://allpartner.tistory.com/11" target="_blank" rel="noopener">IT솔루션 by 올파</a>)</p><ul><li>서버 클러스터란 <strong>각기 다른 서버(Server Enterprise or server Datacenter)들을 하나로 묶어서 하나의 시스템같이 동작하게 함으로써, 클라이언트들에게 고가용성의 서비스를 제공하는것을 말한다.</strong> </li><li>클러스터로 묶인 한시스템에 장애가 발생하면, 정보의 제공 포인트는 클러스터로 묶인 다른 정상적인 서버로 이동한다. </li><li>서버클러스터는 <strong>사용자로 하여금 서버 기반 정보를 지속적이고, 끊기지않게 제공받을수 있게 한다</strong></li></ul></blockquote><blockquote><p><strong>서버 팜이란?</strong></p><ul><li>서버 클러스터라고 불리기도 하는 서버팜은 <strong>컴퓨터 서버와 운영 시설을 한곳에 모아 놓은 곳</strong></li><li>허가받지 않은 외부에선 접근이 불가능</li><li>임의의 서버가 중단되더라도 다른 서버로 대체되어 원할한 서비스를 제공한다.</li></ul></blockquote><blockquote><p><strong>와일드 카드</strong>란?</p><ul><li>파일을 지정할 때, 구체적인 이름 대신에 여러 파일을 동시에 지정할 목적으로 사용하는 <strong>특수 기호</strong>. <code>＊&#39;,？&#39;</code> 따위.</li></ul></blockquote></li><li><p>만약 호스트명이 인증서의 신원과 맞지 않는다면,<br>사용자를 우선으로 생각하는 클라이언트는 반드시 이 사실을 사용자에게 알리거나 잘못된 인증서 에러와 함께 커넥션을 끊어야 한다.</p></li></ul><a name="-"><h2 id="6-가상-호스팅과-인증서"><a href="#6-가상-호스팅과-인증서" class="headerlink" title="6. 가상 호스팅과 인증서"></a>6. 가상 호스팅과 인증서</h2><blockquote><p>잘 모르겠다.</p></blockquote><ul><li>가상 호스트(하나의 서버에 여러 호스트명)로 운영되는 사이트의 보안 트래픽을 다루는 것은 까다로운 경우도 많다.</li><li>만약 사용자가 인증서의 이름과 정확히 맞지 않는 가상 호스트 명에 도착했다면 경고 상자가 나타날 것이다.</li></ul><hr><hr><a name="openssl"><h1 id="HTTPS-예시-feat-OpenSSL"><a href="#HTTPS-예시-feat-OpenSSL" class="headerlink" title="HTTPS 예시 (feat. OpenSSL)"></a>HTTPS 예시 (feat. <code>OpenSSL</code>)</h1><ul><li>SSL은 복잡한 바이너리 프로토콜이다.</li><li>가공되지 않은 SSL 트래픽을 직접보는 것은 어렵다.</li><li>몇가지 SSL 클라이언트와 서버 프로그래밍을 쉽게 만들어주는 상용 혹은 오픈 소스 라이브러리들이 존재한다.</li></ul><h2 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h2><ul><li>OpenSSL은 SSL과 TLS의 가장 인기 있는 오픈 소스 구현이다.</li><li><a href="http://www.openssl.org" target="_blank" rel="noopener">http://www.openssl.org</a> </li><li>SSLeay도 있다.</li></ul><h3 id="온라인-중개소의-홈페이지에-접속했을-때"><a href="#온라인-중개소의-홈페이지에-접속했을-때" class="headerlink" title="온라인 중개소의 홈페이지에 접속했을 때"></a>온라인 중개소의 홈페이지에 접속했을 때</h3><p>clients1.online.msdw.com 의 사이트라고 가정</p><ol><li><p>SSL 컨텍스트가 초기화 되었다.</p></li><li><p>clients1.online.msdw.com의 IP주소: 63.151.15.11</p></li><li><p>호스트 clients1.online.msdw.com, 포트 443으로 TCP 커넥션을 열었다.</p></li><li><p>SSL endpoint가 생성되었으며 핸드셰이크 완료</p></li><li><p>다음의 암호로 SSL 연결이 됨: DES-CBC3-MD5</p></li><li><p>서버 인증서를 받았다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">대상: /C=US/ST=Utah/L=Salt Lake City/O=Morgan Stanley/OU=Online/CN=clients1.online.msdw.com</span><br><span class="line">발급자: /C=US/O=RSA Data Security, Inc./OU=Secure Server Certification Authority</span><br></pre></td></tr></table></figure></li><li><p>암호화된 채널을 통해 HTTP 요청을 보냈다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.0</span><br><span class="line">Host: Clients1.online.msdw.com:443</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure></li><li><p>HTTP응답에서 615바이트를 가져왔다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Date: Sat, 09 Mar 2002 09:43:42 GMT</span><br><span class="line">Server: ...</span><br><span class="line">Location: ...</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: text/html; ...</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>모두 끝났으므로 커넥션을 닫고 정리한다.</p></li></ol><hr><hr><a name="httpsSSLtunnelingProtocol"><h1 id="프락시를-통한-보안-트래픽-터널링-HTTPS-SSL-터널링-프로토콜"><a href="#프락시를-통한-보안-트래픽-터널링-HTTPS-SSL-터널링-프로토콜" class="headerlink" title="프락시를 통한 보안 트래픽 터널링 (HTTPS SSL 터널링 프로토콜)"></a>프락시를 통한 보안 트래픽 터널링 (HTTPS SSL 터널링 프로토콜)</h1><ul><li><p>클라는 종종 웹 프락시 서버를 이용한다. </p></li><li><p>그러나 클라가 서버로 보낼 데이터를 서버의 공개키로 암호화하기 시작했다면, 프락시는 더 이상 HTTP 헤더를 읽을 수 없다.</p></li><li><p>만약 프락시가 HTTP 헤더를 읽을 수 없다면, 요청을 어디로 보내야 하는지 알 수 없게 된다.</p></li><li><p>해결 방법 중에 인기있는 방법은 <strong>HTTPS SSL 터널링 프로토콜</strong>이다.</p></li><li><p>클라는 먼저 프락시에게 자신이 연결하고자 하는 안전한 호스트와 포트를 말해준다.</p></li><li><p>클라는 이 내용을 프락시가 읽을 수 있도록 암호화가 시작되기 전의 평문으로 말해준다.</p></li><li><p>HTTP는 <a href="http://localhost:4000/2019/08/16/HTTP_003_02/#9" target="_blank" rel="noopener">CONNECT</a>라 불리는 새로운 확장 메서드를 이용해서 평문으로 된 endpoint 정보를 전송하기 위해 사용된다.</p><ul><li>CONNECT 메서드는 프락시에게 희망하는 호스트와 포트번호로 연결을 해달라고 말해주며<br>그것이 완료되면 클라와 서버 사이에서<br>데이터가 직접적으로 오갈 수 있게 해주는 터널을 만든다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CONNECT home.netscape.com:443 HTTP/1.0</span><br><span class="line">User-agent: Mozilla/1.1N</span><br><span class="line"></span><br><span class="line">&lt;SSL로 암호화된 데이터가 이 다음에 온다..&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>클라는 프락시로부터의 응답을 기다릴 것이다.</p><ul><li>프락시는 요청을 평가하여 그것이 유효하고,<br>사용자가 그러한 커넥션을 요청할 수 있도록 허가를 받앗는지 확인한다.</li><li>모든 것이 적법하다면 프락시는 목적지 서버로 연결하고<br>성공하면 <code>200 Connection Established</code></li></ul></li></ul><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ul><li><a href="https://run-it.tistory.com/29" target="_blank" rel="noopener">SSL 핸드셰이크1</a></li><li><a href="http://blog.daum.net/tlos6733/58" target="_blank" rel="noopener">인증서</a></li><li><a href="https://www.securesign.kr/guides/kb/24" target="_blank" rel="noopener">ocsp</a></li><li><a href="https://kthan.tistory.com/entry/TLS-%ED%95%B8%EB%93%9C%EC%89%90%EC%9D%B4%ED%81%AC-Handshake-%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9C-%EB%B6%84%EC%84%9D" target="_blank" rel="noopener">SSL 핸드셰이크2</a></li><li><a href="https://rsec.kr/?p=455" target="_blank" rel="noopener">ECDHE</a></li><li><a href="https://opentutorials.org/course/228/4894" target="_blank" rel="noopener">생활코딩 - HTTPS와 SSL 인증서</a></li></ul></a></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;최근 인증서 관련 이슈를 만난적이 있었는데,&lt;br&gt;이번 장을 통해서 조금이나마 이해가 될 수 있게 되었다 :) &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;HTTPS는 HTTP의 가장 유명한 보안 버
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="https" scheme="http://feel5ny.github.io/tags/https/"/>
    
      <category term="openSSL" scheme="http://feel5ny.github.io/tags/openSSL/"/>
    
      <category term="sslHandShake" scheme="http://feel5ny.github.io/tags/sslHandShake/"/>
    
      <category term="ca" scheme="http://feel5ny.github.io/tags/ca/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS 이해를 위한 디지털 암호학</title>
    <link href="http://feel5ny.github.io/2019/12/01/HTTP_014_01/"/>
    <id>http://feel5ny.github.io/2019/12/01/HTTP_014_01/</id>
    <published>2019-12-01T11:43:10.000Z</published>
    <updated>2019-12-08T12:50:31.074Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>최근 인증서 관련 이슈를 만난적이 있었는데,<br>이번 장을 통해서 조금이나마 이해가 될 수 있게 되었다 :) </p></blockquote><hr><a name="secure"><h1 id="HTTP를-안전하게-만들기"><a href="#HTTP를-안전하게-만들기" class="headerlink" title="HTTP를 안전하게 만들기"></a>HTTP를 안전하게 만들기</h1><img src="/images/2019/44/01.png"><ul><li>사람들은 웹 트랜잭션을 중요한 일에 사용한다. </li><li>강력한 보안이 없다면, 사람들은 온라인 쇼핑이나 인터넷뱅킹을 할 때 안심할 수 없을 것이다.</li><li>기본인증이나 다이제스트 인증은 대량구매, 은행 업무, 보안자료 접근에는 강력하지 않다.</li></ul><h2 id="HTTP와-디지털-암호화-기술을-결합해야한다"><a href="#HTTP와-디지털-암호화-기술을-결합해야한다" class="headerlink" title="HTTP와 디지털 암호화 기술을 결합해야한다."></a>HTTP와 디지털 암호화 기술을 결합해야한다.</h2><ul><li>HTTP 보안 버전은<ol><li>효율적이고</li><li>이식성이 좋아야 하고,</li><li>관리가 쉬워야 하며</li><li>현실세계의 변화에 대한 적응력이 좋아야 한다.</li><li>사회와 정부의 요구사항에도 맞아야한다.</li></ol></li></ul><p>다음을 제공해 줄 수 있는 HTTP 보안 기술이 필요하다.</p><ol><li><strong>서버인증</strong>: 클라는 자신이 위조된 서버가 아닌 <strong>진짜 서버</strong>와 소통하고 있음을 알 수 있어야 함.</li><li><strong>클라 인증</strong>: 서버는 자신이 가짜가 아닌 <strong>진짜 사용자</strong>와 소통하고 있음을 알 수 있어야 한다.</li><li><strong>무결성</strong>: 클라와 서버는 그들의 데이터가 <strong>위조되는 것으로부터 안전</strong>해야 한다.</li><li><strong>암호화</strong>: 클라와 서버는 <strong>도청에 대한 걱정 없이</strong> 서로 대화할 수 있어야 한다.</li><li><strong>효율</strong>: 알고리즘은 빨라야 한다.</li><li><strong>편재성</strong> Ubiquity: 프로토콜은 거의 <strong>모든 클라와 서버에서 지원</strong>되어야 한다.<blockquote><p>편재성은 자원을 뜻할때 주로 쓰이는 성질이다.<br>자원의 민족주의. <strong>도처에 존재하는 성질</strong>이라고 이해하면 됨</p></blockquote></li><li><strong>관리상 확장성</strong>: <strong>누구든, 어디서든</strong>, 즉각적인 보안 통신을 할 수 있어야 한다.</li><li><strong>적응성</strong>: 현재 알려진 최선의 보안방법을 지원해야 한다.</li><li><strong>사회적 생존성</strong>: 사회의 문화적, 정치적 요구를 만족시켜야 한다.</li></ol><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTP<code>S</code></h2><ul><li>HTTPS는 HTTP를 안전하게 만드는 방식 중에서 가장 인기 있는 것이다.</li><li><code>S</code>는 <strong>Over Secure Socket Layer</strong>의 약자이다.</li><li>HTTPS를 사용할 때,<br>모든 HTTP 요청과 응답 데이터는<br>네트워크로 보내지기 전에 암호화 된다.</li><li>HTTPS는 HTTP의 하부에 전송 레벨 암호 보안 계층에 의해 동작한다.</li><li>이 보안계층은<br>안전소켓계층, (Secure Sockets Layer, <strong>SSL</strong>)전송 계층 보안(Transport Layer Security, <strong>TLS</strong>)을 이용하여 구현된다.<ul><li>네스케이프에 의해서 SSL이 발명되었고, 이것이 점차 폭넓게 사용되다가<br>표준화 기구인 IETF의 관리로 변경되면서 <strong>TLS</strong>라는 이름으로 바뀌었다.<br>TLS 1.0은 SSL 3.0을 계승한다.<br>하지만 TLS라는 이름보다 SSL이라는 이름이 훨씬 많이 사용되고 있다.</li></ul></li><li>어려운 인코딩 및 디코딩 작업은 대부분 SSL 라이브러리 안에서 일어나기 때문에 보안 HTTP를 사용하기 위해, 웹 클라와 서버가 프로토콜을 처리하는 로직을 크게 변경할 필요는 없다.</li></ul><hr><hr><h1 id="디지털-암호학"><a href="#디지털-암호학" class="headerlink" title="디지털 암호학"></a>디지털 암호학</h1><ul><li>SSL과 HTTPS에서 이용되는 암호 인코딩 기법에 대해 잠깐 알아본다.</li></ul><ol><li><strong>암호</strong>: 텍스트를 아무나 읽지 못하도록 인코딩하는 알고리즘</li><li><strong>키</strong>: 암호의 동작을 변경하는 숫자로 된 매개변수</li><li><strong>대칭키 암호 체계</strong>: 인코딩과 디코딩에 같은 키를 사용하는 알고리즘</li><li><strong>비대칭키 암호 체계</strong>: 인코딩과 디코딩에 다른 키를 사용하는 알고리즘</li><li><strong>공개키 암호법</strong>: 비밀 메세지를 전달하는 수백만 대의 컴퓨터를 쉽게 만들 수 있는 시스템</li><li><strong>디지털 서명</strong>: 메세지가 위조 혹은 변조되지 않았음을 입증하는 체크섬</li><li><strong>디지털 인증서</strong>: 신뢰할 만한 조직에 의해 서명되고 검증된 신원 확인 정보</li></ol><hr><a name="cryptography"><h2 id="1-비밀코드의-기술과-과학"><a href="#1-비밀코드의-기술과-과학" class="headerlink" title="1. 비밀코드의 기술과 과학"></a>1. 비밀코드의 기술과 과학</h2><p>암호법 cryptography는 메세지 인코딩과 디코딩에 대한 과학이자 기술이다.</p><h3 id="비밀-메세지-도청-변조-방지-저자-증명"><a href="#비밀-메세지-도청-변조-방지-저자-증명" class="headerlink" title="비밀 메세지 / 도청, 변조 방지 / 저자 증명"></a>비밀 메세지 / 도청, 변조 방지 / 저자 증명</h3><ul><li>사람들은 암호법의 방법론을 <strong>비밀 메세지</strong>를 보내는데에 적용해 왔다.</li><li><strong>도청</strong>이나 메세지의 <strong>변조를 방지</strong>하기 위해 사용할 수 있다.</li><li>암호법은 누군가가 정말로 어떤 메세지나 트랜잭션의 저자임을 <strong>증명</strong>하는 데도 사용될 수 있다.</li></ul><hr><a name="cipher"><h2 id="2-암호-cipher"><a href="#2-암호-cipher" class="headerlink" title="2. 암호 cipher"></a>2. 암호 cipher</h2><ul><li>암호법은 암호라 불리는 비밀코드에 기반한다.</li><li>암호란,<br><strong>메세지를 인코딩하는 어떤 특정한 방법</strong>과 <strong>그 비밀 메세지를 디코딩하는 방법</strong>이다.</li><li><code>텍스트, 평문</code>: 인코딩 되기 전의 <strong>원본</strong> 메세지</li><li><code>암호문</code>: 암호가 적용되어 <strong>코딩</strong>된 메세지</li></ul><h3 id="2-1-암호-기계"><a href="#2-1-암호-기계" class="headerlink" title="2.1 암호 기계"></a>2.1 암호 기계</h3><ul><li>암호는 상대적으로 간단한 알고리즘으로 시작했는데,<br>사람이 직접 인코딩하고 디코딩해야 했기 때문이다.</li><li>기술이 진보하면서, 복잡한 암호로 메세지를 빠르고 정확하게 인코딩하고 디코딩하는<br>기계를 만들기 시작했다. </li><li>예_2차 세계대전의 에니그마 암호기계</li></ul><h3 id="2-2-키가-있는-암호"><a href="#2-2-키가-있는-암호" class="headerlink" title="2.2 키가 있는 암호"></a>2.2 키가 있는 암호</h3><ul><li>코드 알고리즘과 기계가 적의 손에 들어갈 수 있기 때문에,<br>대부분의 기계들에는 <strong>암호의 동작방식을 변경할 수 있는</strong><br>큰 숫자로 된 다른 값을 설정할 수 있는 다이얼이 달려있다.</li><li>올바른 다이얼 설정(키 값)이 없이는 디코더가 동작하지 않을 것이다.</li><li>이러한 <strong>암호 매개변수를 키</strong>라고 부른다. key</li><li>암호 키는 하나의 암호 기계를<br>여러 가상 암호 기계의 집합처럼 만들어준다.</li></ul><h3 id="2-3-디지털-암호"><a href="#2-3-디지털-암호" class="headerlink" title="2.3 디지털 암호"></a>2.3 디지털 암호</h3><ul><li>디지털 계산의 도래로, 두가지 발전이 있다<ol><li>복잡한 인코딩과 디코딩 알고리즘이 가능해졌다.</li><li>단일 암호 알고리즘으로 <ul><li>키의 값마다<br>서로 다른 수조 개의 <strong>가상 암호 알고리즘</strong>을 만들어낼 수 있게 되었다. </li><li>키가 길수록 인코딩의 많은 조합이 가능해지고,<br>무작위로 추측한 키에 의한 크래킹이 어려워진다.</li></ul></li></ol></li><li>평문메세지 <code>P</code>, 인코딩 함수 <code>E</code>, 디지털 인코딩 키 <code>e</code>가 주어지면 부호화된 암호문 <code>C</code>를 생성할 수 있다.</li><li>암호문 <code>C</code>를 디코더 함수 <code>D</code>와 디코딩 키 <code>d</code>를 사용해서 원래의 평문 <code>P</code>로 도로 디코딩할 수 있다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C = E(P,e)</span><br><span class="line">P = D(C,d)</span><br></pre></td></tr></table></figure></li></ul><hr><a name="symmetry"><h2 id="3-대칭키-암호법"><a href="#3-대칭키-암호법" class="headerlink" title="3. 대칭키 암호법"></a>3. 대칭키 암호법</h2><ul><li>많은 디지털 암호 알고리즘은 대칭키 암호라고 불림</li><li>인코딩을 할 때 사용하는 키가 디보딩을 할 때와 같기 때문 (e = d, k라 부르자)</li><li>대칭키 암호에서, 발송자와 수신자 모두 통신을 위해 비밀키 k를 똑같이 공유할 필요가 있다.<ul><li>발송자는 공유된 비밀 키로 메세지를 암호화하고 그 결과인 암호문을 수신자에게 발송하기 위해 사용한다.</li><li>수신자도 암호문을 키를 사용하여 원래의 평문으로 복원한다.</li></ul></li><li>잘 알려진 대칭키 암호 알고리즘<ul><li>DES(Data Encryption Standard), Triple-DES, RC2, RC4</li><li>DES는 취약하다는 결론 =&gt; 요즘은 AES를 사용한다.</li><li><strong><a href="https://ko.wikipedia.org/wiki/%EA%B3%A0%EA%B8%89_%EC%95%94%ED%98%B8%ED%99%94_%ED%91%9C%EC%A4%80" target="_blank" rel="noopener">AES</a></strong>, Advanced Encryption Standard: 고급 암호화 표준</li></ul></li></ul><h3 id="3-1-키-길이와-열거-공격-Enumeration-Attack"><a href="#3-1-키-길이와-열거-공격-Enumeration-Attack" class="headerlink" title="3.1. 키 길이와 열거 공격 Enumeration Attack"></a>3.1. 키 길이와 열거 공격 Enumeration Attack</h3><ul><li>인코딩 및 디코딩 알고리즘은 공개적으로 알려져 있으므로, 키만이 유일한 비밀이다.</li><li><strong>무차별로 모든 키 값을 대입해보는 공격</strong>을 열거 공격이라고 한다.</li><li>128비트 키를 사용한 대칭키 암호는 매우 강력한 것으로 간주된다. </li><li>미국 국가안보국에서는 긴 키를 사용하는 암호화 소프트웨어의 수출을 통제한다.<ul><li>깨뜨릴 수 없는 암호문을 적대적인 조직이 만들어 낼 가능성을 차단하기 위해</li></ul></li></ul><h3 id="3-2-공유키-발급하기"><a href="#3-2-공유키-발급하기" class="headerlink" title="3.2. 공유키 발급하기"></a>3.2. 공유키 발급하기</h3><ul><li>대칭키 암호의 단점 중 하나는 발송자와 수신자가 서로 대화하려면 둘 다 공유키를 가져야 한다는 것이다.</li><li>만약 누군가 쇼핑몰에서 private 대화를 다누려면 개인 비밀 키가 발급되어야 한다.<ul><li>관리해야하는 사람 입장에서는 모든 키를 관리해야하므로 복잡성이 올라간다.</li></ul></li></ul><h3 id="3-3-대칭키-만들어보기"><a href="#3-3-대칭키-만들어보기" class="headerlink" title="3.3. 대칭키 만들어보기"></a>3.3. 대칭키 만들어보기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &apos;this is the plain text&apos; &gt; plaintext.txt;</span><br><span class="line">openssl enc -e -des3 -salt -in plaintext.txt -out ciphertext.bin</span><br></pre></td></tr></table></figure><ol><li>‘this is the plain text’ 문자열이 들어간 plaintext.txt가 만들어진다</li><li>plaintext.txt 안의(<code>-in</code>) 내용들을 des3방식으로 암호화를 하고, ciphertext.bin이라는 파일로 산출할(<code>-out</code>) 것이다 라는 뜻.</li><li>비밀번호를 요구하는 input이 나온다. =&gt; 요게 <strong><code>대칭키</code>!</strong></li></ol><img src="/images/2019/44/04.png"><blockquote><p>이런식으로 암호화된다.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl enc -d -des3 -in ciphertext.bin -out plaintext2.txt;</span><br></pre></td></tr></table></figure><ol start="4"><li>ciphertext.bin 안의 내용을 des3 방식으로 복호화(디코딩)(<code>-d</code>) 하여서 plaintext2.txt 파일에 산출할 것이다 라는 뜻.</li></ol><hr><a name="public"><h2 id="4-공개키-암호법"><a href="#4-공개키-암호법" class="headerlink" title="4. 공개키 암호법"></a>4. 공개키 암호법</h2><ul><li>공개키 암호 방식은 2개의 비대칭 키를 사용한다.</li><li>하나는 호스트의 메세지를 인코딩하기 위한 것<br>다른 하나는 그 호스트의 메세지를 디코딩하기 위한 것이다.</li><li>인코딩 키는 모두를 위해 공개되어 있다.<br>하지만 호스트만이 개인 디코딩 키를 알고 있다.</li><li>키의 분리는, 메세지의 인코딩은 누구나 할 수 있도록 해주는 동시에<br>메세지를 디코딩하는 능력은 소유자에게만 부여한다. </li><li>표준화된 공개키 기술 묶음을 만드는 것의 중요성 때문에<br>거대한 공개 키 인프라 표준화 작업이 계속되고 있다.<br>Public-Key Infrastructure, PKI<ul><li>PKI란, 공개 키 암호 방식을 바탕으로 한 디지털 인증서를 활용하는 소프트웨어, 하드웨어, 사용자, 정책 및 제도 등을 총칭하여 일컫는다.</li></ul></li></ul><h3 id="4-1-RSA-Ribest-Shamir-Adelman"><a href="#4-1-RSA-Ribest-Shamir-Adelman" class="headerlink" title="4.1 RSA (Ribest Shamir Adelman)"></a>4.1 RSA (Ribest Shamir Adelman)</h3><ul><li>공개키 비대칭 암호의 과제는,<br>악당이 아래 내용을 알고 있다고 하더라도<br>비밀인 개인 키를 계산할 수 없다는 것을 확신시켜 주는 것이다.<ol><li>공개키</li><li>가로채서 얻은 암호문의 일부 - 네트워크를 스누핑해서</li><li>메세지와 그것을 암호화한 암호문 - 인코더에 임의의 텍스트를 넣고 실행</li></ol></li><li>이 모둔 요구를 만족하는 공개키 암호 체계중 유명한 하나는<br>RSA 알고리즘이다. <ul><li>= Ribest Shamir Adelman / 발명한 세 명의 이름 첫글자를 따온 이름</li></ul></li></ul><h3 id="4-2-혼성-암호-체계와-세션-키"><a href="#4-2-혼성-암호-체계와-세션-키" class="headerlink" title="4.2 혼성 암호 체계와 세션 키"></a>4.2 혼성 암호 체계와 세션 키</h3><ul><li>공개키 암호 방식의 알고리즘은 계산이 느린 경향이 있다.</li><li>실제로는 대칭과 비대칭 방식을 섞은 것이 쓰인다.</li><li>예<ul><li>공개키 암호를 사용하고</li><li>안전한 채널을 통해 임시의 무작위 대칭 키를 생성하고 교환하여</li><li>이후의 나머지 데이터를 암호화 할때는 빠른 대칭키를 사용하는 방식</li></ul></li></ul><hr><a name="signing"><h2 id="5-디지털-서명"><a href="#5-디지털-서명" class="headerlink" title="5. 디지털 서명"></a>5. 디지털 서명</h2><ul><li>암호 체계는<br>누가 메세지를 썻는지 알려주고<br>그 메세지가 위조되지 않았음을 증명하기 위해<br><strong>메세지에 서명</strong>을 하도록 하는 데에 이용될 수 있다.</li><li>디지털 서명 digital signing 이라 불리는 이 기법은<br>인터넷 보안 인증서에게 중요하다.</li></ul><h3 id="5-1-서명은-암호-체크섬이다"><a href="#5-1-서명은-암호-체크섬이다" class="headerlink" title="5.1 서명은 암호 체크섬이다."></a>5.1 서명은 암호 체크섬이다.</h3><ul><li>디지털 서명은 <strong>메세지에 붙어있는 특별한 암호 체크섬</strong>이다.</li><li>두가지 이점이 있다.<ol><li>서명은 메세지를 작성한 <strong>저자가 누군지</strong> 알려준다.<ul><li>저자는 저자의 극비 개인 키를 갖고 있기 때문에,<br>오직 저자만이 이 체크섬을 계산할 수 있다. </li><li>체크섬은 저자의 개인 서명처럼 동작한다.</li></ul></li><li>서명은 <strong>메세지 위조를 방지한다.</strong><ul><li>송신 중에 누군가 메세지를 수정했다면,<br>체크섬은 더 이상 그 메세지와 맞지 않게 될 것이다.</li><li>체크섬은 저자의 비밀 개인 키에 관련되어 있기 때문에<br>침입자는 그 위조된 메세지에 대한 올바른 체크섬을 날조해낼 수 없을 것이다.</li></ul></li></ol></li><li>디지털 서명은 보통 <strong>비대칭 공개키</strong>에 의해 생성된다.</li><li>개인 키는 오직 소유자만이 알고 있기 때문에<br>저자의 개인 키는 일종의 <strong>지문</strong>처럼 사용된다.</li></ul><h4 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h4><p>노드A가 노드B에게 메세지를 보내고, 그것을 서명하는 전체 플로우.</p><ol><li>노드 A는 가변 길이 메세지를 정제하여<br>고정된 길이의 digest로 만든다.</li><li>노드 A는 그 digest에 <strong>서명</strong> 함수를 적용한다.<br>(서명함수: <strong>사용자의 개인 키를 매개변수</strong>로 하는 함수)<ul><li>오직 그 사용자만이 개인 키를 알고 있기 때문에,<br><strong>올바른 서명 함수는 서명자가 소유자임을 보여준다.</strong></li><li>서명함수가 이미 개인 키를 입력으로 취했기 때문에 <strong>디코더 함수</strong>를 사용한다.</li></ul></li><li>한번 서명이 계산되면,<br>노드 A는 그것을 메세지의 끝에 덧붙이고,<br>메세지와 그에 대한 설명을 둘다 노드 B에 전송한다.</li><li>메세지를 받은 노드 B가,<br>만약 그 메세지를 쓴 것이 정말로 노드 A이며,<br>위조되지도 않았다는 것을 확인하길 원한다면,<br>노드 B는 서명을 검사할 수 있다.<ul><li>노드 B는 개인 키로 알아보기 어렵게 변형된 서명에<br><strong>공개키를 이용한 역함수를 적용한다.</strong></li><li>만약 풀어낸 요약이 노드 B가 갖고 있는 버전의 요약과 일치하지 않는다면, 메세지가 송신 중에 위조되었거나, 아니면 발송자가 노드 A의 개인 키를 갖고 있지 않은 것이다.</li></ul></li></ol><hr><a name="certs"><h2 id="6-디지털-인증서"><a href="#6-디지털-인증서" class="headerlink" title="6. 디지털 인증서"></a>6. 디지털 인증서</h2><ul><li>디지털 인증서는 신뢰할 수 있는 기관으로부터 보증 받은 사용자나 회사에 대한 정보를 담고 있다. (디지털 인증서는 흔히 certs라고 불린다.)</li><li>여권처럼 신뢰할 수 있는 형태의 신원증명은<ol><li>서명이 되어있고,</li><li>특별한 종이 위에</li><li>정부가 새긴 도장이 찍혀있다.</li></ol></li><li>이것들은 위조하기 어렵고, 본질적으로 더 높은 수준의 신뢰를 받게 된다.</li></ul><h3 id="6-1-인증서의-내부"><a href="#6-1-인증서의-내부" class="headerlink" title="6.1 인증서의 내부"></a>6.1 인증서의 내부</h3><ul><li>디지털 인증서에는 공식적으로 인증 기관에 의해 디지털 서명된 정보의 집합이 담겨있다.</li></ul><ol><li>대상자 이름 (사람, 서버, 조직 등)</li><li>유효 기간</li><li>인증서 발급자 (누가 이 인증서를 보증하는가)</li><li>인증서 발급자의 디지털 서명</li></ol><ul><li>디지털 인증서는<br>대상과 사용된 서명 알고리즘에 대한 서술적인 정보, 대상의 공개키도 담고 있다.</li><li>누구나 디지털 인증서를 만들 수 있지만,<br>(모두가 인증서의 정보를 보증하고<br>인증서의 개인 키로 서명할 수 있는,)<br><strong>널리 인정받는 서명 권한을 얻을 수 있는 것은 아니다.</strong></li></ul><img src="/images/2019/44/02.png"><h3 id="6-2-X-509-v3-인증서"><a href="#6-2-X-509-v3-인증서" class="headerlink" title="6.2 X.509 v3 인증서"></a>6.2 <code>X.509</code> v3 인증서</h3><ul><li>디지털 인증서에 대한 전 세계적인 단일 표준은 없다.</li><li>여러가지 미묘하게 다른 스타일의 디지털 인증서들이 존재한다.</li><li>오늘날 사용되는 대부분의 인증서가<br><strong><code>X.509</code>라 불리는 표준화된 서식</strong>에 그들의 정보를 저장하고 있다는 것이다.</li><li><strong>공인인증서 대부분은 <code>X.509</code> 인증서 표준을 기반으로 한다.</strong></li><li><code>X.509</code>기반 인증서에는<br>웹서버 인증서 / 클라 이메일 인증서 / 스프트웨어 코드사인 인증서 / 인증기관 인증서를 비롯한 몇가지 변종이 있다. </li><li><code>X.509</code> v3 인증서는<br>인증 정보를 파싱 가능한 필드에 넣어 구조화하는 표준화된 방법을 제공한다.</li></ul><hr><p><a href="https://ko.wikipedia.org/wiki/X.509" target="_blank" rel="noopener">X.509 위키피디아 설명</a></p><ul><li><strong>버전</strong>: 이 인증서가 따르는 <code>X.509</code> 인증서 버전의 번호 (보통은 v3)</li><li><strong>일련번호</strong>: 인증기관에 의해 생성된 고유한 정수</li><li><strong>서명 알고리즘 ID</strong>: 서명을 위해 사용된 암호 알고리즘<br>(예_RSA 암호화를 이용한 MD2 digest)</li><li><strong>인증서 발급자</strong>: 인증서를 발급하고 서명한 기관의 이름<br>(CA: certificate authority)</li><li><strong>유효기간</strong>: 인증서가 유효한 기간. 시작일과 종료일로 정의</li><li><strong>대상의 이름</strong>: 인증서에 기술된, 사람이나 조직과 같은 엔터티.</li><li><strong>대상의 공개 키 정보</strong>: 인증 대상의 공개키, 공개키에 사용된 알고리즘, 추가 매개변수</li><li><strong>발급자의 고유 ID</strong>: 발급자의 이름이 겹치는 경우를 대비한, 인증서 발급자에 대한 선택적인 고유한 식별자</li><li><strong>대상의 고유 ID</strong>: 대상의 이름이 겹치는 경우를 대비한, 인증 대상에 대한 선택적인 고유한 식별자</li><li><strong>확장</strong>: 각 확장 필드는 중요한 것인지 그렇지 않은지가 표시되어 있음<ul><li>기본제약 / 인증서 정책 / 키 사용</li></ul></li><li><strong>인증기관 서명</strong>: 인증기관의 디지털 서명, 명시된 서명 알고리즘을 사용한다.</li></ul><h3 id="6-3-서버-인증을-위해-인증서-사용하기"><a href="#6-3-서버-인증을-위해-인증서-사용하기" class="headerlink" title="6.3 서버 인증을 위해 인증서 사용하기"></a>6.3 서버 인증을 위해 인증서 사용하기</h3><ul><li>사용자가 HTTPS를 통한 안전한 웹 트랜잭션을 시작할 때,<br>최신 브라우저는 자동으로 접속한 서버에서 디지털 인증서를 가져온다</li><li>만약 서버가 인증서를 갖고 있지 않다면, 보안 커넥션은 실패한다.</li><li>서버 인증서는 다음을 포함한 많은 필드를 갖고 있다.</li></ul><ol><li>웹사이트의 이름과 호스트 명</li><li>웹 사이트의 공개키</li><li>서명 기관의 이름</li><li>서명 기관의 서명</li></ol><img src="https://i.imgur.com/KYgfDFo.png"><blockquote><p>출처 <a href="https://minwan1.github.io/2019/01/09/2019-01-14-https/" target="_blank" rel="noopener">Network-3:HTTPS란?</a></p></blockquote><ul><li>브라우저가 인증서를 받으면, 서명 기관을 검사한다.</li><li>만약 그 기관이 신뢰할만한 서명 기관이라면,<br>브라우저는 그것의 공개키를 이미 알고 있을 것이며<br><strong>(브라우저들은 여러 서명 기관의 인증서가 미리 설치된 채로 출하된다)</strong>, 브라우저는 그 서명을 검증할 수 있다.</li><li>만약 서명 기관이 모르는 곳이라면,<br>브라우저는 그 서명 기관을 신뢰해야 할지 확신할 수 없으므로,<br>대개 사용자가 서명 기관을 신뢰하는지 확인하기 위한<br>대화상자를 보여준다.</li></ul><img src="/images/2019/44/03.jpg"><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ul><li><a href="https://ko.wikipedia.org/wiki/%EA%B3%A0%EA%B8%89_%EC%95%94%ED%98%B8%ED%99%94_%ED%91%9C%EC%A4%80" target="_blank" rel="noopener">AES</a></li><li><a href="https://ko.wikipedia.org/wiki/%EA%B3%B5%EA%B0%9C_%ED%82%A4_%EA%B8%B0%EB%B0%98_%EA%B5%AC%EC%A1%B0" target="_blank" rel="noopener">PKI</a></li><li><a href="https://blogger.pe.kr/583" target="_blank" rel="noopener">RSA</a></li><li><a href="https://minwan1.github.io/2019/01/09/2019-01-14-https/" target="_blank" rel="noopener">Network-3:HTTPS란?</a></li><li><a href="https://opentutorials.org/course/228/4894" target="_blank" rel="noopener">생활코딩 - HTTPS와 SSL 인증서</a></li><li><a href="https://ko.wikipedia.org/wiki/%EC%95%94%ED%98%B8%ED%95%99#%EB%8C%80%EC%B9%AD%ED%82%A4_%EC%95%94%ED%98%B8_%EC%8B%9C%EC%8A%A4%ED%85%9C" target="_blank" rel="noopener">암호학</a></li></ul></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;최근 인증서 관련 이슈를 만난적이 있었는데,&lt;br&gt;이번 장을 통해서 조금이나마 이해가 될 수 있게 되었다 :) &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;a name=&quot;secure&quot;&gt;

&lt;h1 id=&quot;HTTP를-
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="https" scheme="http://feel5ny.github.io/tags/https/"/>
    
      <category term="cryptography" scheme="http://feel5ny.github.io/tags/cryptography/"/>
    
      <category term="X.509" scheme="http://feel5ny.github.io/tags/X-509/"/>
    
  </entry>
  
  <entry>
    <title>다이제스트 인증(2) - 실제 다이제스트 인증과 보안</title>
    <link href="http://feel5ny.github.io/2019/12/01/HTTP_013_02/"/>
    <id>http://feel5ny.github.io/2019/12/01/HTTP_013_02/</id>
    <published>2019-12-01T01:43:10.000Z</published>
    <updated>2019-12-01T10:39:31.289Z</updated>
    
    <content type="html"><![CDATA[<hr><blockquote><p>점점 번역이 이해하기 더 어려워질 정도로 직역형태다..</p></blockquote><hr><a name="real"><h1 id="1-실제-상황에-대한-고려"><a href="#1-실제-상황에-대한-고려" class="headerlink" title="1. 실제 상황에 대한 고려"></a>1. 실제 상황에 대한 고려</h1><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ol><li>다이제스트 인증 요구 <code>qop</code>: 가장 강력한 인증 매커니즘 선택하기</li><li>오류 처리: <code>400 Bad Request</code></li><li>보호 공간 realm: 일반적으로 원 서버에 의해 할당되는 문자열</li><li>URI 다시 쓰기: 프락시는 구문만 고쳐서 URI를 다시 쓰기도 한다</li><li>캐시: <code>must-revalidate</code>나 <code>public</code></li></ol><h2 id="1-1-다중-인증-요구-qop"><a href="#1-1-다중-인증-요구-qop" class="headerlink" title="1.1 다중 인증 요구 qop"></a>1.1 다중 인증 요구 <code>qop</code></h2><img src="/images/2019/43/01.png" style="width:100%"><ul><li>서버는 한 리소스에 대해 여러 인증을 요구할 수 있다.</li><li>보통은 WWW-Authenticate에 qop필드에 쉼표로 구분하여 인증방법을 보내준다.</li><li><strong>클라는 자신이 지원할 수 있는 가장 강력한 인증 메커니즘을 선택</strong>해야 한다.</li><li>다양한 인증 옵션을 제공할 때,<br>클라가 강력한 인증 메커니즘을 지원하지 못한다면, 사용자에게 보안에 대해 경고를 해야 한다.</li></ul><h2 id="1-2-오류-처리"><a href="#1-2-오류-처리" class="headerlink" title="1.2 오류 처리"></a>1.2 오류 처리</h2><ul><li>다이제스트 인증에서,<br>지시자나 그 값이 적절하지 않거나,<br>요구된 지시자가 빠져있는 경우<br><code>400 Bad Request</code></li><li><strong>로그를 남기자</strong><br>비밀번호가 반복적으로 실패할 경우,<br>공격자의 비밀번호 추측의 시도가 있을 수 있으므로 로그를 남기는게 좋다.</li><li>URI 지시자가 가리키는 리소스가 요청줄에 명시된 리소스와 같음을 확인해야한다.    (중간 프락시가 변조할 수도 있음)<ul><li>요청줄에 명시된 리소스는 domain필드에 같이 명시해준다.<img src="/images/2019/43/02.png" style="width:100%"></li></ul></li></ul><h2 id="1-3-보호-공간-realm"><a href="#1-3-보호-공간-realm" class="headerlink" title="1.3 보호 공간 realm"></a>1.3 보호 공간 realm</h2><img src="/images/2019/43/03.png" style="width:100%"><ul><li><p>영역 값은, 접근한 서버의 루트 URL과 결합하여, 보호 공간을 정의한다.</p></li><li><p>영역은 보호 영역의 집합으로 분할할 수 있도록 해준다. (보호 영역으로 따로 구분해둔다..)</p><blockquote><p>번역이해가 어려워서 나름 위 문장대로 이해함..<br>원문: 영역은 서버의 보호된 리소스들을 자신만의 인증제도와 인가 데이터베이스 어느 한쪽 혹은 양쪽 모두를 가진 보호 영역의 집합으로 분할 할 수 있도록 해준다.</p></blockquote></li><li><p>영역의 값은 일반적으로 원 서버에 의해 할당되는 문자열이다.<br>(인증 제도에 추가적인 의미를 더한다.)</p></li><li><p>보호공간은 어떤 자격이 자동으로 적용되는 영역을 결정한다.</p><ul><li>이전 요청이 인가되면,<br>같은 자격은 인증제도, 매개변수, 사용자 설정 중 한가지 이상에 의해 정해진 시간 동안 재사용 될 것이다.</li></ul></li><li><p>보호공간의 구체적인 계산은 인증 메커니즘에 달려있다.</p><ol><li><strong>기본 인증</strong><ul><li>클라는 요청 URI와 그 하위의 모든 경로는<br>같은 보호 공간에 있는 것으로 가정한다.</li><li>클라는 이 공간에서 서버로부터의 또 다른 인증 요구를 기다리지 않고, 미리 리소스에 대한 인가를 받을 수 있다.</li></ul></li><li><strong>다이제스트 인증</strong><ul><li><code>WWW-Authenticate: domain</code> 필드는<br>보호 공간을 보다 엄밀하게 정의한다.</li><li>domain 필드는 작은 따옴표로 묶인 URI의 공백으로 분리된 목록이다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">domain = &quot;&apos;/cart&apos; &apos;/main&apos;&quot;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>이 domain 목록의 모든 URI와<br>논리적으로 그 하위에 위치한 모든 URI는<br>같은 보호 공간에 있는 것으로 가정한다.</p></li><li><p>만약 domain 필드가 없거나 빈 값이라면,<br>인증을 요구하는 서버의 모든 URI는 그 보호 공간에 있는 것이다.</p></li></ul><h2 id="1-4-URI-다시-쓰기-feat-프락시"><a href="#1-4-URI-다시-쓰기-feat-프락시" class="headerlink" title="1.4 URI 다시 쓰기 (feat. 프락시)"></a>1.4 URI 다시 쓰기 (feat. 프락시)</h2><ul><li>프락시는<br>가리키는 리소스의 변경 없이<br><strong>구문만 고쳐서 URI를 다시 쓰기도 한다.</strong></li><li>예<ul><li>호스트 명은 정규화괴거나 IP주소로 대체될 수 있다.</li><li>문자들은 <code>%</code> escape 형식으로 대체될 수 있다.</li><li>특정 원서버로부터 가져오는 리소스에 영향을 주지 않는,<br>타입에 대한 추가 속성이<br>URI의 끝에 붙거나 중간에 삽입될 수 있다.</li></ul></li><li>프락시가<br>URI를 변경할 수 있는 동시에<br>다이제스트 인증은 URI 값의 무결성을 검사하므로<br>다이제스트 인증은 이러한 변경에 의해 실패할 수 있다.</li></ul><h2 id="1-5-캐시"><a href="#1-5-캐시" class="headerlink" title="1.5 캐시"></a>1.5 캐시</h2><ul><li>어떤 공유가 Authorization 헤더를 포함한 요청과 그에 대한 응답을 받은 경우,<br>두 <strong>Cache-Control 지시자</strong> <code>must-revalidate</code>나 <code>public</code> 중 하나가 응답에 존재하지 않는 한<br><strong>다른 요청에 대해 그 응답을 반환해서는 안된다.</strong></li><li>만약 원서버의 응답이 <code>must-revalidate</code> Cache-Control 지시자를 포함한 경우, <ul><li>캐시는 그 응답의 엔터티를 다음 요청에 대한 응답을 위해 활용할 것이다.</li><li>그러나 원 서버가 새 요청을 인증할 수 있도록,<br>우선 그 요청의 헤더를 이용해서 <strong>재검사를 수행해야한다.</strong></li></ul></li><li>만약 원서버의 응답이 <code>public</code> Cache-Control 지시자를 포함한 경우,<br>응답 엔터티는 그 다음에 오는 임의의 요청에 대한 응답으로 반환될 수 있다.</li></ul><hr><hr><a name="guard"><h1 id="2-보안에-대한-고려사항"><a href="#2-보안에-대한-고려사항" class="headerlink" title="2. 보안에 대한 고려사항"></a>2. 보안에 대한 고려사항</h1><h2 id="TL-DR-1"><a href="#TL-DR-1" class="headerlink" title="TL;DR"></a>TL;DR</h2><ol><li>헤더 부당 변경: <strong>양종단 암호화 / 디지털 서명</strong></li><li>재전송 공격: <strong>매 트랜잭션마다 유일한 난스값</strong></li><li>다중 인증 매커니즘: <strong>가장 강력한 인증 제도만을 유지하는 프락시 서버 사용</strong></li><li>사전 공격: <strong>복잡한 비밀번호사용 및 비밀번호 만료 정책</strong></li><li>악의적인 프락시와 중간 공격: <strong>SSL을 사용하는 것</strong></li><li>선택 평문 공격: <strong>선택적 c난스 사용 / 만료매커니즘 / 강력 비밀번호</strong></li><li>비밀번호 저장: -</li></ol><hr><ol><li><p><strong>헤더 부당 변경</strong></p><ul><li>헤더 부당 변경에 대해 항상 안전한 시스템을 제공하기 위해서<br><strong>양 종단 암호화</strong>나헤더에 대한 <strong>디지털 서명</strong>이 필요할 것이다.</li></ul></li><li><p><strong>재전송 공격</strong></p><ul><li>재전송 공격이란, 누군가 어떤 트랜잭션에서 엿들은 인증자격을<br>다른 트랜잭션을 위해 사용하는 것을 말한다.</li><li>GET 요청에 대한 이슈이긴 하지만<br>POST나 PUT 요청에 대한 재전송 공격에 대해서도 항상 잘 동작하는 예방책은 필수적으로 가지고 있어야 한다.</li><li>재전송 공격을 완전히 피할 수 있는 한 방법은<br><strong>매 트랜잭션마다 유일한 난스 값을 사용하는 것</strong>이다.<ul><li>이 구현에서는 매 트랜잭션마다 서버는 유일한 난스를 타임아웃 값과 함께 발급한다.</li><li>발급된 난스 값은 그때의 트랜잭션과 주어진 타임아웃 값의 기간 동안만 유효하다.</li></ul></li></ul></li><li><p><strong>다중 인증 메커니즘</strong></p><ul><li>서버가 다중 인증 제도를 지원할때, 선택지를 제공할 것이다.<br>클라에게 가장 강력한 인증 메커니즘을 선택해야 할 의무가 있는 것은 아니기 때문에,<br>결국 인증의 강도는 선택지 중 <strong>가장 약한 것과 같다고 보아야 한다.</strong></li><li>클라가 언제나 가능한 한 가장 강력한 인증제도를 선택하면 문제가 해결하면 되지만,<br>현실적으로 불가능하다면,<br><strong>가장 강력한 인증 제도만을 유지하는 프락시 서버를 사용하여</strong> 해결하는 것이다.<ul><li>그러나 이런 접근은 오직 모든 클라가 우리가 선택한 강력한 인증 제도를 지원할 수 있다고 알려진 경우에만 실현 가능하다.</li></ul></li></ul></li><li><p><strong>사전 공격 dictionary</strong></p><ul><li>사전공격은 <strong>전형적인 비밀번호 추측 공격</strong>이다.</li><li>악의적인 사용자는 트랜잭션을 엿들을 수 있고,<br>난스/응답 쌍에 대해 (흔히 구할 수 있는) 비밀번호 추측 프로그램을 사용할 수 있다.</li><li>크래킹하기 어렵도록 <strong>상대적으로 복잡한 비밀번호를 사용하는 것</strong>과 <strong>괜찮은 비밀번호 만료 정책</strong> 외에는 실질적으로 없다.</li></ul></li><li><p><strong>악의적인 프락시와 중간 공격</strong> Man in the Middle Attack</p><ul><li><p>리다이렉션 기술과 차단 프락시의 도입으로 사용자는 그의 요청이 프락시를 통과한다는 것조차 눈치 채지 못하고 한다.</p></li><li><p>만약 이들 프락시 중 하나가 악의적이거나 보안이 허술하다면,<br>클라는 중간자 공격에 취약한 상태가 될 가능성이 있다.</p></li><li><p>해결할 좋은 방법은 없지만, 가능한 해결책은,</p><ol><li>클라가 사용자에게 인증의 강도를 시각적으로 보여주는 것</li><li>클라가 언제나 가능한 한 <strong>가장 강력한 인증을 선택하도록</strong> 설정하는 것 </li></ol><p>등이 있다.</p></li><li><p>공격을 방어하는 제일 좋은 방법은 <strong>SSL을 사용하는 것</strong>이다.</p></li></ul></li><li><p><strong>선택 평문 공격</strong></p><ul><li>다이제스트 인증을 사용하는 클라는 응답을 생성하기 위해 서버가 제공한 난스를 사용한다.</li><li>그러나 악의적인 서버나 프락시가 있을 중간에 있을 경우<br>클라 응답 게산을 하기 위한 난스를 제공할 수 있다.<br><strong>= 선택적 평문 공격</strong></li></ul><ol><li><strong>미리 계산된 사전 공격</strong><ul><li>사전공격과 선택 평문 공격의 조합</li></ul><ol><li>공격서버는 미리 결정된 난스와 자주 쓰이는 비밀번호들로 응답의 집합을 생성하고, 사전을 만든다.</li><li>공격 서버/프락시는 트래픽을 차단하고<br>미리 결정된 난스를 클라로 전송하기 시작한다.</li><li>클라로부터 응답을 받을 때, 공격자는 대응되는 항목을 사전에서 찾는다.</li><li>대응되는 것이 있으면, 공격자는 특정 사용자의 비밀번호를 손에 넣은 것</li></ol></li><li><strong>자동화된 무차별 대입 공격</strong><ul><li>많은 컴퓨터를 동원하여 주어진 범위에서 가능한 모든 비밀번호를 열거한다.</li></ul></li></ol><ul><li>이런 공격으로 인한 위협을 방어하는 방법<ul><li>서버에서 제공된 난스 대신<br><strong>선택적 c난스 지시자를 사용</strong>하여 응답할 수 있도록 한다. </li><li><strong>만료</strong> 메커니즘이나<br><strong>강력한 비밀번호</strong>를 강제하는 정책이 있으면 더 높은 방어가 가능</li></ul></li></ul></li><li><p><strong>비밀번호 저장</strong></p><ul><li>다이제스트 인증 메커니즘은 사용자 응답을<br>서버 내부에 저장된 것과 비교한다.</li><li>비밀번호가 유출되는 문제를 완화하는 몇가지 방법<ol><li>비밀번호 파일이<br>평문으로 된 비밀번호를 포함하고 있다고 생각하고 안전하게 보호한다. (?)</li><li>영역 이름이 유일함을 보장하며, 비밀번호 파일이 유출되더라도,<br><strong>피해를 특정 영역으로 국소화</strong>한다.<ul><li>호스트와 도메인을 포함한 완전한 영역 이름을 이 요구를 만족한다.</li></ul></li></ol></li></ul></li></ol><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ul><li><a href="https://tools.ietf.org/html/rfc7235#section-2.2" target="_blank" rel="noopener">RFC7235-realm</a></li></ul></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;점점 번역이 이해하기 더 어려워질 정도로 직역형태다..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;a name=&quot;real&quot;&gt;

&lt;h1 id=&quot;1-실제-상황에-대한-고려&quot;&gt;&lt;a href=&quot;#1-실제-상황에-대한-고려
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="web" scheme="http://feel5ny.github.io/tags/web/"/>
    
      <category term="digest" scheme="http://feel5ny.github.io/tags/digest/"/>
    
      <category term="authorization" scheme="http://feel5ny.github.io/tags/authorization/"/>
    
  </entry>
  
  <entry>
    <title>다이제스트 인증 (1) - 다이제스트 인증과 특징</title>
    <link href="http://feel5ny.github.io/2019/11/24/HTTP_013_01/"/>
    <id>http://feel5ny.github.io/2019/11/24/HTTP_013_01/</id>
    <published>2019-11-24T14:43:10.000Z</published>
    <updated>2019-12-01T08:14:10.828Z</updated>
    
    <content type="html"><![CDATA[<ul><li>기본 인증은 편리하고 유연하지만, 전혀 안전하지 않다.</li><li>메세지를 위조하지 못하게 보호하려는 어떠한 시도도 하지 않는다.</li><li>다이제스트 인증은 기본 인증과 호환되는 더 안전한 대체재로서 개발되었다.</li><li>다이제스트 인증은 널리 쓰이지는 않지만, 그 개념은 보안 트랜잭션을 구현하고자 하는 이들에게 여전히 유용하다.</li></ul><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><img src="/images/2019/42/02.png" style="width:100%"><hr><p>자세히…….</p><img src="/images/2019/42/03.png" style="width:100%"><img src="/images/2019/42/04.png" style="width:100%"><img src="/images/2019/42/05.png" style="width:100%"><ul><li>다이제스트 인증은 그다지 사용되고 있지 않다.</li></ul><hr><hr><h1 id="기본-인증의-개선한-다이제스트-인증"><a href="#기본-인증의-개선한-다이제스트-인증" class="headerlink" title="기본 인증의 개선한 다이제스트 인증"></a>기본 인증의 개선한 다이제스트 인증</h1><ul><li>좌우명: <strong>비밀번호를 절대로 네트워크를 통해 평문으로 전송하지 않는다.</strong></li><li>인증 체결을 가로채서 재현하려는 악의적인 사람들을 차단한다.</li><li>구현하기에 따라서, 메세지 내용 위조를 막는것도 가능하다.</li><li>그 외 잘 알려진 형태의 공격을 막는다.</li></ul><img src="/images/2019/42/01.png" style="width:100%"><hr><ul><li>가장 안전한 프로토콜은 아니다.<ul><li>공개키 기반 메커니즘과 비교했을 때, 그다지 강력한 인증 매커니즘을 제공하진 않는다.</li><li>요청과 응답의 나머지 부분에 대해서는 다른 누군가가 엿보는 것이 가능하다.</li></ul></li><li>안전한 HTTP 트랜젝션을 위한 많은 요구사항을 만족하지 못한다.<br>그러한 요구사항들에는 전송계층 보안 (TLS)와 보안 HTTP(HTTPS)가 더 적합한 프로토콜이다.</li><li>다른 인터넷 서비스를 위해 제안된 많은 인기 있는 보안 체계들 보다 더 강력하다<blockquote><p>LDAP, CRAM-MD5</p></blockquote></li><li>언뜻 보면 복잡해서 보안 레벨이 높아보이지만 사실 Hash 알고리즘으로 <strong>MD5</strong>를 사용하는데,<br>이 MD5는 보안 레벨이 낮기 때문에 미정부 보안 인증 규격인 <a href="http://csrc.nist.gov/publications/fips/fips140-2/fips1402annexa.pdf" target="_blank" rel="noopener">FIPS인증</a> 에서 인증하고 있지 않다. <ul><li>FIPS 인증에서는 최소한 <strong>SHA-1,SHA1-244,SHA1-256</strong> 이상의 해쉬 알고리즘을 사용하도록 권장하고 있다.</li></ul></li></ul><blockquote><p>MD5 해쉬의 경우에는 특히나 Dictionary Attack에 취약한데,<br>Dictionary Attack이란, Hash된 값과 원래 값을 Dictionary (사전) 데이터 베이스로 유지해놓고, Hash 값으로 원본 메시지를 검색하는 방식<br>(출처: <a href="https://bcho.tistory.com/955" target="_blank" rel="noopener">조대협의 블로그</a>)</p></blockquote><hr><a name="digest"><h1 id="1-다이제스트-인증의-특징"><a href="#1-다이제스트-인증의-특징" class="headerlink" title="1. 다이제스트 인증의 특징"></a>1. 다이제스트 인증의 특징</h1><ul><li>좌우명: “절대로 비밀번호를 네트워크를 통해 보내지 않는다.”</li><li>비밀번호를 보내는 대신,<br>클라는 비밀번호를 비가역적으로 뒤섞은<br>지문 <code>fingerprint</code> 혹은 <strong>요약 <code>digest</code></strong> 을 보낸다.</li><li>클라 서버 둘다 비밀번호를 알고 있으므로,<br>서버는 클라가 보낸 요약이 비밀번호에 알맞게 대응하는지 검사할 수 있다.</li></ul><h2 id="1-1-단방향-요약"><a href="#1-1-단방향-요약" class="headerlink" title="1.1 단방향 요약"></a>1.1 단방향 요약</h2><ul><li>요약은 <strong>정보 본문의 압축</strong>이다. 여기서도 압축의 개념이다.</li><li>요약은 <strong>단방향 함수</strong>로 동작한다.</li><li>일반적으로 입력가능한 무한 가지의 모든 입력값들을<br>유한한 범위의 압축으로 변환한다.</li><li>인기있는 요약 함수 중 하나인 MD5는 임의의 바이트 배열을 원래 길이와 상관없이 128비트 요약으로 변환한다.<blockquote><p>MD5: 메세지 다이제스트 #5의 약어<br>SHA 보안 해시 알고리즘: 다른 다이제스트 함수</p></blockquote></li><li>요약함수는 보통 <strong>암호 체크섬 cryptographic checksums</strong>으로 불린다.<ul><li>단방향 해시함수이거나 지문함수이다.</li><li><a href="http://www.convertstring.com/ko/Hash/MD5" target="_blank" rel="noopener">MD5 해시 생성기</a></li></ul></li></ul><h2 id="1-2-재전송-방지를-위한-난스-사용-nonce"><a href="#1-2-재전송-방지를-위한-난스-사용-nonce" class="headerlink" title="1.2 재전송 방지를 위한 난스 사용 nonce"></a>1.2 재전송 방지를 위한 난스 사용 nonce</h2><ul><li>요약을 가로채서 서버로 몇번이고 재전송할 수 있기 때문에 안전하지 않다.</li><li>재전송 공격을 방지하기 위해 서버는 클라에게 난스라고 불리는<br>자주 바뀌는 (대략 1ms마다, 혹은 인증할 때마다) <strong>증표</strong>를 건네준다.</li><li>난스를 비밀번호에 섞으면<br><strong>난스가 바뀔 때마다 요약</strong>도 바뀌게 만들어준다.</li><li>저장된 비밀번호 요약은<br>특정 난스값에 대해서만 유효하고,<br>비밀번호 없이 공격자가 올바른 요약을 계산하는 것은 가능하지 않기 때문이다.</li><li>다이제스트 인증은 난스를 사용할 것을 요구한다. <ul><li>난스는 <code>WWW-Authenticate</code> 인증요구에 담겨서 서버에서 클라로 넘겨진다.</li></ul></li></ul><hr><hr><a name="handshake"><h1 id="2-다이제스트-인증-핸드셰이크"><a href="#2-다이제스트-인증-핸드셰이크" class="headerlink" title="2. 다이제스트 인증 핸드셰이크"></a>2. 다이제스트 인증 핸드셰이크</h1><ul><li>HTTP 다이제스트 인증 프로토콜은 기본 인증에서 사용하는 것과 비슷한 헤더를 사용하는,<br>강화된 버전의 인증이다.</li><li>다이제스트 인증의 3단계 핸드셰이크를 보자</li></ul><img src="/images/2019/42/02.png" style="width:100%"><ol><li>1단계<ul><li>서버는 난스값을 계산한다.</li></ul></li><li>2단계<ul><li>서버는 난스를 <code>WWW-Authenticate</code> 인증요구 메세지에 담아,<br>서버가 지원하는 알고리즘 목록과 함께 클라에 전송한다.</li></ul></li><li>3단계<ul><li>클라는 알고리즘을 선택하고, 비밀번호와 그 외 데이터에 대한 요약을 계산한다.</li></ul></li><li>4단계<ul><li>클라는 Authorization 메세지에 요약을 담아 서버에게 돌려준다.</li><li>만약 서버가 인증을 원한다면 난스를 보낼 수 있다.</li></ul></li><li>5단계<ul><li>서버는 요약, 선택한 알고리즘, 그 외 보조 데이터들을 받고, 클라가 했던 그대로 요약을 계산한다.</li><li>서버는 그 다음 자신이 계산한 요약과 네트워크로 전송되어 온 요약이 서로 같은지 확인한다.</li><li>만약 클라가 대칭적으로 서버에게 클라 난스를 갖고 인증을 요구했다면,<br>클라 요약이 만들어진다.</li><li>서버는 클라가 미리 다음번 요약을 올바르게 생성할 수 있도록 다음번 난스를 미리 계산해서 클라에게 넘겨줄 수도 있다.</li></ul></li></ol><hr><hr><a name="calc"><h1 id="3-요약-계산"><a href="#3-요약-계산" class="headerlink" title="3. 요약 계산"></a>3. 요약 계산</h1><ul><li><p>다이제스트 인증의 핵심은</p><ol><li>공개된 정보,</li><li>비밀 정보,</li><li>시한부 난스 </li></ol><p>값을 조합한 단방향 요약이다.</p></li><li><p>RFC7616 <del>2617</del></p></li></ul><h2 id="3-1-요약-알고리즘과-입력-데이터"><a href="#3-1-요약-알고리즘과-입력-데이터" class="headerlink" title="3.1 요약 알고리즘과 입력 데이터"></a>3.1 요약 알고리즘과 입력 데이터</h2><p>요약은 다음 3가지 요소로부터 계산된다.<br>A1, A2 두 조각의 데이터는 요약을 생성하기 위해 H와 KD에 의해 처리됨</p><ol><li>action: <strong>함수들</strong><ol><li>단방향 해시 함수 H(d)</li><li>요약 함수 KD(s,d) // s는 비밀, d는 data</li></ol></li><li>core: <strong>데이터</strong><ol><li>보안정보 데이터<ul><li>비밀번호 등 보안 정보를 담고 있는 데이터 덩어리 (<strong>A1</strong>이라 칭하자)</li></ul></li><li>요청메세지의 비밀 외의 속성 데이터 <ul><li>요청 메세지의 비밀이 아닌 속성을 담고 있는 데이터 덩어리 (<strong>A2</strong>이라 칭하자)</li></ul></li></ol></li></ol><h3 id="보안-관련-데이터-A1"><a href="#보안-관련-데이터-A1" class="headerlink" title="보안 관련 데이터 A1"></a>보안 관련 데이터 A1</h3><ul><li><p>A1 데이터에는<br>사용자 이름 / 비밀번호 / 보호 영역 / 난스가 포함된다.</p></li><li><p>“&lt;알고리즘&gt;”인 경우 (예 : “SHA-256”),<br>A1은 사용자 이름, 영역, 비밀번호를 콜론으로 연결한 것이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A1 = &lt;사용자&gt;:&lt;영역&gt;:&lt;비밀번호&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>&lt;알고리즘&gt; -sess</code>인 경우 (예 : “SHA-256-sess”),<br>A1은 서버의 인증 요청에 제공된 nonce 값과 다음 클라이언트 요청의 cnonce 값을 사용하여 계산됩니다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A1 = H( unq(username) &quot;:&quot; unq(realm) &quot;:&quot; passwd )</span><br><span class="line">     &quot;:&quot; unq(nonce-prime) &quot;:&quot; unq(cnonce-prime)</span><br></pre></td></tr></table></figure></li></ul><h3 id="메세지-관련-데이터-A2"><a href="#메세지-관련-데이터-A2" class="headerlink" title="메세지 관련 데이터 A2"></a>메세지 관련 데이터 A2</h3><ul><li><p>A2 데이터에는 메세지 자체의 정보를 나타냄<br>URL / 요청메서드 / 메세지 엔터티 본문</p></li><li><p>메서드, 리소스, 메세지의 위조를 방지하기 위해 사용됨</p></li><li><p>RFC7616 <del>2617</del>은 <strong>선택된 보호 수준 (quality of protection, qop)</strong>에 따른<br>A2의 두가지 사용법을 정의하고 있다.</p><ol><li><p>HTTP 요청 메서드와 URL만 포함하는 것이다.<br>이것은 기본값이기도한 qop=”auth”일 때 사용된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A2 = Method &quot;:&quot; request-uri</span><br></pre></td></tr></table></figure></li><li><p>메세지 무결성 검사를 제공하기 위해 메세지 엔터티 본문을 추가하는 것<br>qop=”auth-init”일 때 사용된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A2 = Method &quot;:&quot; request-uri &quot;:&quot; H(entity-body)</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="H와-KD-알고리즘"><a href="#H와-KD-알고리즘" class="headerlink" title="H와 KD 알고리즘"></a>H와 KD 알고리즘</h3><ul><li>다이제스트 인증은 여러가지 요약 알고리즘을 선택할 수 있도록 지원한다.</li><li>MD5와 MD5-sess, SHA-256 등이 있다. </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 개인적으로 빠른 인지를 위해 자바스크립트 문법 사용</span><br><span class="line">KD = (비밀, 데이터) =&gt; H(연결(비밀:데이터)) // 요약 함수</span><br><span class="line">H = (데이터) =&gt; MD5(데이터) // 해시함수</span><br></pre></td></tr></table></figure><h3 id="요약-알고리즘-전반"><a href="#요약-알고리즘-전반" class="headerlink" title="요약 알고리즘 전반"></a>요약 알고리즘 전반</h3><p>RFC7616 <del>2617</del>은 주어진 H, KD, A1, A2로 요약을 계산하는 방법에는,<br><strong>난스 횟수 집계(nc) 및 대칭 인증의 지원(qop)</strong>을 포함한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">response = &lt;&quot;&gt; &lt; KD ( H(A1), unq(nonce)</span><br><span class="line">                              &quot;:&quot; nc</span><br><span class="line">                              &quot;:&quot; unq(cnonce)</span><br><span class="line">                              &quot;:&quot; unq(qop)</span><br><span class="line">                              &quot;:&quot; H(A2)</span><br><span class="line">                      ) &lt;&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="3-2-다이제스트-인증-세션"><a href="#3-2-다이제스트-인증-세션" class="headerlink" title="3.2 다이제스트 인증 세션"></a>3.2 다이제스트 인증 세션</h2><ul><li>어떤 보호 공간을 위한 <code>WWW-Authenticate</code> 인증요구에 대한 클라 응답은,<br>그 보호 공간에 대해 <strong>인증 세션</strong>을 시작하게 한다.<ul><li>보호 공간은 접근 중인 서버의 루트(canonial root)와 영역의 결합으로 정의된다.</li><li>(?) 무슨말이지</li></ul></li><li><strong>인증세션</strong>은 클라가 보호공간의 다른 서버로부터 또 다른 <code>WWW-Authenticate</code> 인증요구를 받을 때까지 지속된다.<ul><li>클라는 아래 값들을 기억해야한다.<br>사용자 이름, 비밀번호, 난스, 난스 횟수, 인증세션과 관련된 알아보기 힘든 값들</li></ul></li><li>난스가 만료되면,<br>서버는 포함된 난스 값이 낡은 것일 수 있음을 감수하고,<br>오래된 Authorization 헤더 정보를 받아들이는 것을 택할 수 있다.<br>아니면 서버는 클라이언트가 다시 요청을 보내도록 새 난스 값과 함께 401 응답을 반환할 수도 있다.<ul><li>이때 응답 헤더의 <code>WWW-Authenticate</code>에 <code>stale=true</code>로 정의함으로써,<br>서버는 클라에게 사용자 이름과 비밀번호를 새로 입력하도록 창을 띄울 필요 없이<br>새 난스 값으로 요청을 다시 보내라고 말해줄 수 있다.</li></ul></li></ul><h2 id="3-3-사전-인가-preemptive"><a href="#3-3-사전-인가-preemptive" class="headerlink" title="3.3 사전 인가 preemptive"></a>3.3 사전 인가 preemptive</h2><ul><li>일반적인 인증에서는, 각 요청은 트랜잭션이 완료되기 전에<br>요청/인증 요구 사이클을 필요로 한다.</li><li>만약 클라가 다음 난스가 무엇이 될지 미리 알고 있어서,<br>서버가 물어보기 전에 올바른 Authorization 헤더를 생성할 수 있다면,<br>이 요청/인증요구 사이클은 생략할 수 있다.</li></ul><hr><ul><li><p>브라우저는 흔히 사용자 이름과 비밀번호 들에 대한 클라 측 데이터베이스를 관리한다.</p></li><li><p>사용자가 어떤 사이트에 한번 인증을 하면,<br>브라우저는 흔히 그 URL에 대한 다음번 요청 때 올바른 Authorization 헤더를 전송한다.</p></li><li><p>다이제스트 인증에서 사전 인가는 약간 더 복잡한데,<br>왜냐하면 난스 기술은 재전송 공격을 저지하기 위한 것이기 때문에다.</p></li><li><p>서버는 임의의 난스를 생성하기 때문에,<br>인증요구를 받기 전에는 클라가 무엇이 올바른 Authorization 헤더인지 알 방법이 없다.</p></li><li><p>다이제스트 인증은 여러 안전한 기능을 유지하면서 사전 인가를 할 수 있는 몇 가지 방법을 제안한다.</p></li><li><p>클라가 새 <code>WWW-Authenticate</code> 인증요구를 기다리지 않고 올바른 난스를 취득할 수 있는 방법이 몇가지 있다.</p></li></ul><ol><li>서버가 다음 난스를 <code>Authentication-Info</code> 성공 헤더에 담아서 미리 보낸다.</li><li>서버가 짧은 시간 동안 같은 난스를 재사용하는 것을 허용한다.</li><li>클라가 서버와 동기화되어 있고 예층 가능한 난스 생성 알고리즘을 사용한다.</li></ol><hr><h3 id="1-다음-난스-미리-생성하기"><a href="#1-다음-난스-미리-생성하기" class="headerlink" title="1. 다음 난스 미리 생성하기"></a>1. 다음 난스 미리 생성하기</h3><ul><li><p>서버는 <code>Authentication-Info</code> 성공헤더를 통해 다음 난스 값을 미리 제공할 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authentication-Info: nextnonce=&quot;&lt;난스 값&gt;&quot;</span><br></pre></td></tr></table></figure></li><li><p>주어진 다음 난스로 클라는 Authorization 헤더를 미리 만들어 둘 수 있다.</p></li></ul><h4 id="장-단점"><a href="#장-단점" class="headerlink" title="장/단점"></a>장/단점</h4><ul><li>장점: 트랜잭션 속도 향상</li><li>단점: <ul><li>다음요청 보내기 전에 반드시 다음 난스 값을 받아야하기 때문에<br>다중요청을 파이프라이능하는 능력은 실질적으로 쓸모없어진다.(?)</li><li>파이프라이닝은 회전지연 latency 회피를 위한 기반 기술이기 때문에 성능상 불이익은 더 커진다.</li></ul></li></ul><hr><h3 id="2-제한된-난스-재사용"><a href="#2-제한된-난스-재사용" class="headerlink" title="2. 제한된 난스 재사용"></a>2. 제한된 난스 재사용</h3><ul><li>난스를 제한적으로 재사용하는 것이다.</li><li>예) 서버는 한 난스를 5번만 사용가능하게한다.</li><li>예) 서버는 한 난스를 10초간 재사용하도록 허가한다.</li><li>클라는 난스를 미리 알 수 있으므로, 자유롭게 Authorization 헤더와 함께 요청을 발행하여 파이프라이닝 할 수 있다.</li><li>난스가 만료되면 서버는 서버에게 401 Unauthorized 인증요구를 보낼 것이다.<br>(<code>WWW-Authenticate</code>에 <code>stale=true</code>로 정의)</li></ul><h4 id="장-단점-1"><a href="#장-단점-1" class="headerlink" title="장/단점"></a>장/단점</h4><ul><li>단점: 공격자의 재전송 공격이 성공하기 쉬워지므로 보안성이 감소된다.</li></ul><hr><h3 id="3-동기화된-난스-생성"><a href="#3-동기화된-난스-생성" class="headerlink" title="3. 동기화된 난스 생성"></a>3. 동기화된 난스 생성</h3><ul><li>제 3자가 쉽게 예측할 수 없는 공유된 비밀키에 기반하면서<br>클라와 서버가 순차적으로 같은 난스를 생성할 수 있도록<br>시간적으로 동기화된 난스 생성 알고리즘을 사용하는 것도 가능하다.</li></ul><hr><hr><h2 id="3-4-nonce-어떻게-사용할까-선택"><a href="#3-4-nonce-어떻게-사용할까-선택" class="headerlink" title="3.4 nonce 어떻게 사용할까 선택."></a>3.4 nonce 어떻게 사용할까 선택.</h2><ul><li><p>난스의 내용은 불투명하고 구현 의존적이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// RFC 7616 기준</span><br><span class="line">BASE64(time-stamp H(time-stamp &quot;:&quot; ETag &quot;:&quot; secret-data))</span><br></pre></td></tr></table></figure></li><li><p>타임스탬프는 서버에서 생성된 시간 혹은 아무것이나 반복 불가능한 값이면 된다.</p></li><li><p>ETag는 요청된 엔터티에 대한 ETag 헤더값</p></li><li><p>비밀 데이터는 서버만 알고 있는 데이터</p></li><li><p>서버는 클라 인증 헤더를 받은 뒤,<br>위 공식에서 해시 부분을 재계산 해보고 클라 인증 헤더의 난스와 일치하지 않거나 타임스탬프가 오래되었다면, 요청을 거절한다.</p><ul><li>이 방법에서 서버는 난스의 유효 기간을 제한할 수 있다.</li></ul></li><li><p>재전송 공격을 방지하기 위해, 어떤 구현은 이전에 사용된 난스나 요약을 받아들이지 않도록 결정할 수 있다.</p></li><li><p>혹은 POST나 PUT 요청을 위해 일회성 난스나 요약을 사용하고<br>GET 요청을 위해 타임스탬프를 사용할 수도 있다.</p></li></ul><h2 id="3-5-상호-인증"><a href="#3-5-상호-인증" class="headerlink" title="3.5 상호 인증"></a>3.5 상호 인증</h2><ul><li>서버가 공유된 비밀 정보에 근거한 올바른 응답 요약을 생성할 수 있도록,<br>클라 난스(c난스) 값을 제공함으로써 가능해진다.</li><li>이후 서버는 이 요약을 Authentication-Info 헤더를 통해 클라에 전달한다.</li></ul><img src="/images/2019/42/05.png" style="width:100%"><hr><hr><a name="qop"><h1 id="4-보호-수준-향상-Quality-of-Protection"><a href="#4-보호-수준-향상-Quality-of-Protection" class="headerlink" title="4. 보호 수준 향상 Quality of Protection"></a>4. 보호 수준 향상 Quality of Protection</h1><ul><li>qop 필드는 클라와 서버가<br>어떤 보호 기법을<br>어느 정도 수준으로 사용할 것인지 협상할 수 있게 해준다.</li></ul><ol><li>서버는 우선 WWW-Authenticate 헤더에 qop 옵션을 수비표로 구분된 목록 형태로 내보낸다.</li><li>클라는 그 옵션들 중 지원할 수 있으면서 동시에 자신의 요구에도 맞는 것을 선택하고<br>Authorization 헤더의 qop 필드에 담아 돌려준다.</li></ol><ul><li>인증을 의미하는 auth 와<br>메세지 무결성 보호를 의미하는 auth-init이 있다.</li></ul><h2 id="메세지-무결성-보호-auth-init"><a href="#메세지-무결성-보호-auth-init" class="headerlink" title="메세지 무결성 보호 auth-init"></a>메세지 무결성 보호 auth-init</h2><ul><li>무결성 보호가 적용되었을 때 계산되는 <strong>H(엔터티 본문)</strong>은, 메세지 본문의 해시가 아닌 <strong>엔터티 본문의 해시</strong>이다.</li></ul><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ul><li><a href="https://bcho.tistory.com/955" target="_blank" rel="noopener">API 보안</a></li><li><a href="https://tools.ietf.org/html/rfc7616" target="_blank" rel="noopener">RFC7616</a></li><li><a href="https://bcho.tistory.com/955" target="_blank" rel="noopener">조대협의 블로그</a></li></ul></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;기본 인증은 편리하고 유연하지만, 전혀 안전하지 않다.&lt;/li&gt;
&lt;li&gt;메세지를 위조하지 못하게 보호하려는 어떠한 시도도 하지 않는다.&lt;/li&gt;
&lt;li&gt;다이제스트 인증은 기본 인증과 호환되는 더 안전한 대체재로서 개발되었다.&lt;/li&gt;

      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="web" scheme="http://feel5ny.github.io/tags/web/"/>
    
      <category term="digest" scheme="http://feel5ny.github.io/tags/digest/"/>
    
      <category term="authorization" scheme="http://feel5ny.github.io/tags/authorization/"/>
    
  </entry>
  
  <entry>
    <title>기본 인증</title>
    <link href="http://feel5ny.github.io/2019/11/23/HTTP_012_01/"/>
    <id>http://feel5ny.github.io/2019/11/23/HTTP_012_01/</id>
    <published>2019-11-23T11:23:55.000Z</published>
    <updated>2019-11-23T09:37:48.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><img src="/images/2019/41/01.png" style="width:100%"><hr><hr><a name="auth"><h1 id="인증-🔐"><a href="#인증-🔐" class="headerlink" title="인증 🔐"></a>인증 🔐</h1><ul><li>완벽한 인증이란 없다. 비밀번호는 유출될수있고, 신분증은 위조될 수 있다.</li><li>하지만 당신에 대한 여러 데이터는 당신이 누구인지 판단하는데 도움이 된다.</li></ul><h2 id="1-1-HTTP의-인증요구-응답-프레임워크"><a href="#1-1-HTTP의-인증요구-응답-프레임워크" class="headerlink" title="1.1 HTTP의 인증요구/응답 프레임워크"></a>1.1 HTTP의 인증요구/응답 프레임워크</h2><ul><li>HTTP는 사용자 인증을 하는 데 사용하는 자체 인증요구/응답 프레임워크를 제공한다.</li><li>웹앱이 HTTP 요청 메세지를 받으면,<br>서버는 요청을 처리하는 대신에,<br>현재 사용자가 누구인지를 알 수 있게 비밀번호 같이,<br>개인정보를 요구하는 <strong>인증요구</strong>로 응답할 수 있다.</li><li>사용자가 다시 요청을 보낼때는 인증정보를 첨부해야한다.</li><li>인증 정보가 맞지 않으면 서버는 클라에 다시 인증요구를 보내거나 에러를 낼 수 있다.</li></ul><h2 id="1-2-인증-프로토콜과-헤더"><a href="#1-2-인증-프로토콜과-헤더" class="headerlink" title="1.2 인증 프로토콜과 헤더"></a>1.2 인증 프로토콜과 헤더</h2><ul><li><p>HTTP는 필요에 따라 고쳐 쓸 수 있는 제어 헤더를 통해,<br>다른 인증 프로토콜에 맞추어 확장할 수 있는 프레임워크를 제공한다.</p></li><li><p>HTTP에는 </p><ol><li>기본인증</li><li>다이제스트 인증</li></ol><p>이라는 두가지 공식적인 인증 프로토콜이 있다.</p></li><li><p>미래에는, 사람들이 HTTP 인증요구/응답 프레임워크를 사용해 새로운 프로토콜을 고안해 낼 수 있을 것이다.</p><blockquote><p>현대에 HTTP의 인증요구/응답 프로토콜을 사용하는 인증 프로토콜로는 <strong>OAuth</strong>가 있다.<br>OAuth는 모바일 기기같은 다양한 어플리케이션에서 API 인증을 위해 사용하는 최신 인증 프로토콜이다. (<a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener">RFC6749</a>)</p></blockquote></li></ul><ol><li><strong>요청</strong> 단계 - 인증정보 없음</li><li><strong>인증 요구</strong> - <code>401</code>과 함께 요청 반려. <code>WWW-Authenticate</code> 헤더에 해당 영역을 설명해 놓는다.</li><li><strong>인증</strong> 단게 - <code>Authorization</code> 헤더를 함께 보냄</li><li><strong>성공</strong> 단계 - 성공</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WWW-Authenticate: Basic realm=&quot;Access to the staging site&quot;</span><br></pre></td></tr></table></figure><h2 id="1-3-보안영역"><a href="#1-3-보안영역" class="headerlink" title="1.3 보안영역"></a>1.3 보안영역</h2><ul><li>HTTP가 어떻게 각 리소스마다 다른 접근 조건을 다루는지 알아보자.</li><li>웹 서버는 기밀문서를 보안 영역 <code>realm</code> 그룹으로 나눈다.</li><li>보안 영역을 저마다 다른 사용자 권한을 요구한다.</li></ul><hr><hr><h1 id="1-기본-인증-👮‍♀️"><a href="#1-기본-인증-👮‍♀️" class="headerlink" title="1. 기본 인증 👮‍♀️"></a>1. 기본 인증 👮‍♀️</h1><ul><li>기본 인증은 가장 잘 알려진 HTTP 인증 규약이다.</li><li>거의 모든 주요 클라와 서버에 기본 인증이 구현되어 있다.</li><li>기본인증에서, 웹 서버는 클라의 요청을 거부하고 유효한 사용자 이름과 비밀번호를 요구할 수 있다.</li><li>서버는 401 상태코드와, 클라가 접근하려고 했던 보안 영역을 WWW-Authenticate에 기술해서 응답하여, 인증요구를 시작한다.</li></ul><a name="encoding"><h2 id="1-1-Base-64-사용자-이름-비밀번호-인코딩-🧞‍♂️"><a href="#1-1-Base-64-사용자-이름-비밀번호-인코딩-🧞‍♂️" class="headerlink" title="1.1 Base-64 사용자 이름/비밀번호 인코딩 🧞‍♂️"></a>1.1 Base-64 사용자 이름/비밀번호 인코딩 🧞‍♂️</h2><ul><li>HTTP 기본 인증은<br>사용자 이름과 비밀번호를 콜론<code>:</code>으로 이어서 합치고,<br>base-64 인코딩 메서드를 사용해 인코딩한다.</li></ul><h3 id="cf-1-Base-64-인코딩"><a href="#cf-1-Base-64-인코딩" class="headerlink" title="cf__1 Base-64 인코딩"></a>cf__1 Base-64 인코딩</h3><ul><li>base-64 인코딩은 8비트 바이트로 이루어져 있는 시퀀스를 6비트 덩어리의 시퀀스로 변환한다.<br>각 6비트 조각은 대부분 문자와 숫자로 이루어진 특별한 <strong>64개의 문자</strong> 중에서 선택된다.</li><li>base-64 인코딩은 바이너리, 텍스트, 국제 문자 데이터를 문자열로 받아서 전송할 수 있게,<br>그 문자열을 <strong>전송 가능한 문자인 알파벳으로 변환하기 위해</strong> 발명됐다.</li><li>base-64 인코딩은 국제 문자나 HTTP 헤더에서 사용할 수 없는 문자(큰따옴표, 콜론, 캐리지 리턴)을 포함한 사용자 이름이나 비밀번호를 보내야할 때 유용할 수 있다.</li></ul><hr><hr><a name="proxy"><h2 id="1-2-프락시-인증-🐝"><a href="#1-2-프락시-인증-🐝" class="headerlink" title="1.2 프락시 인증 🐝"></a>1.2 프락시 인증 🐝</h2><ul><li><p>중개 프락시 서버를 통해 인증할 수도 있다.</p></li><li><p>프락시 서버에서 접근 정책을 중앙 관리할 수 있는 장점이 있음</p></li><li><p>상태코드: <code>407</code></p></li><li><p>Proxy-Authenticate (like <code>WWW-Authenticate</code>)</p></li><li><p>Proxy-Authorization (like <code>Authorization</code>)</p></li></ul><hr><hr><a name="defection"><h2 id="1-3-기본-인증의-보안-결함-🤦‍♀️"><a href="#1-3-기본-인증의-보안-결함-🤦‍♀️" class="headerlink" title="1.3 기본 인증의 보안 결함 🤦‍♀️"></a>1.3 기본 인증의 보안 결함 🤦‍♀️</h2><ul><li>기본 인증은 악의적이지 않은 누군가가 의도치 않게 리소스에 접근하는 것을 막는데 사용하거나,<br>SSL 같은 암호 기술과 혼용한다.</li></ul><h3 id="1-누구나-디코딩할-수-있다"><a href="#1-누구나-디코딩할-수-있다" class="headerlink" title="1. 누구나 디코딩할 수 있다."></a>1. 누구나 디코딩할 수 있다.</h3><ul><li>기본인증은 쉽게 디코딩할 수 있는 형식으로 네트워크에 전송한다.</li><li>메모하기 어렵지 않은 일반 문자열로 보내진다.</li><li>base-64로 인코딩된 비밀번호는 사실상 비밀번호 그대로 보내는 것과 다름없다.</li><li>HTTP 트랜잭션을 SSL 암호화 채널을 통해 보내거나<br>보안이 더 강화된 다이제스트 인증 같은 프로토콜을 사용하는 것이 좃다.</li></ul><h3 id="2-재전송-공격을-예방하지-않는다"><a href="#2-재전송-공격을-예방하지-않는다" class="headerlink" title="2. 재전송 공격을 예방하지 않는다."></a>2. 재전송 공격을 예방하지 않는다.</h3><ul><li>복잡한 방식으로 인코딩 되어있더라도, 해당 인코딩 문자열을 캡쳐한 다음,<br>그대로 원 서버에 보내서 인증을 성공하고 서버에 접근할 수 있다.</li><li>기본인증은 재전송 공격을 예방하기 위한 어떤 일도 하지 않는다.</li></ul><h3 id="3-한번-뚫리면"><a href="#3-한번-뚫리면" class="headerlink" title="3. 한번 뚫리면.."></a>3. 한번 뚫리면..</h3><ul><li>사용자는 대부분의 사이트에 같은 아이디와 비밀번호를 사용한다.</li><li>한번 도용되면 중요한 사이트에서도 접근할 수 있다.</li></ul><h3 id="4-기본인증의-정상동작-보증-못함"><a href="#4-기본인증의-정상동작-보증-못함" class="headerlink" title="4. 기본인증의 정상동작 보증 못함"></a>4. 기본인증의 정상동작 보증 못함</h3><p>메세지의 인증헤더를 건드리지는 않지만,<br>그 외 다른 부분을 수정해서 트랜잭션의 본래 의도를 바꿔버리는<br>프락시나 중개자가 중간에 개입하는 경우,<br>기본 인증은 정상적인 동작을 보장하지 않는다.</p><h3 id="5-가짜-서버"><a href="#5-가짜-서버" class="headerlink" title="5. 가짜 서버"></a>5. 가짜 서버</h3><ul><li>기본인증은 가짜 서버의 위장에 취약하다.</li><li>가짜 서버에 연결되어 있지만, 사용자는 검증된 서버에 연결되어있다고 믿고, 개인정보를 노출할 수 있다.</li></ul><hr><p>기본인증은 다른 사람들이 보지 않기를 원하긴 하지만,<br>보더라도 치명적이지 않은 경우에는 여전히 유용하다.<br>기본 인증보다 더 복잡하고 강력한 보안 관련 속성인 <strong>다이제스트 인증</strong>을 다음 포스팅에서 알아보자.</p><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ul><li><a href="https://d2.naver.com/helloworld/24942" target="_blank" rel="noopener">Oauth와 춤을</a></li><li><a href="https://minwan1.github.io/2018/02/24/2018-02-24-OAuth/" target="_blank" rel="noopener">Oauth1 관련 글</a></li><li><a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener">RFC6749</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Authentication" target="_blank" rel="noopener">HTTP 인증</a></li></ul></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h2&gt;&lt;img src=&quot;/images/2019/41/01.png&quot; style=&quot;width:100%&quot;&gt;


&lt;hr&gt;

      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="web" scheme="http://feel5ny.github.io/tags/web/"/>
    
      <category term="authentication" scheme="http://feel5ny.github.io/tags/authentication/"/>
    
  </entry>
  
  <entry>
    <title>쿠키 🍪</title>
    <link href="http://feel5ny.github.io/2019/11/16/HTTP_011_02/"/>
    <id>http://feel5ny.github.io/2019/11/16/HTTP_011_02/</id>
    <published>2019-11-16T14:23:55.000Z</published>
    <updated>2019-11-17T15:07:31.417Z</updated>
    
    <content type="html"><![CDATA[<p>현대의 웹 사이트들은 <strong>개인화</strong>된 서비스를 제공하고 싶어 한다.<br>개인화를 하는 방법은 여러 가지가 있다.</p><ul><li>개별 인사 / 사용자 맞춤 추천 / 저장된 사용자 정보</li><li>세션 추적: 웹사이트는 각 사용자에게서 오는 HTTP 트랜잭션을 식별할 방법이 필요하다.</li></ul><ol><li>사용자 식별 관련 정보를 전달하는 <strong>HTTP 헤더</strong></li><li><strong>IP 주소</strong>로 사용자를 식별</li><li>사용자 <strong>로그인 인증</strong>을 통한 사용자 식별</li><li>URL에 식별자를 포함하는 <strong>뚱뚱한 URL</strong></li><li><strong>식별 정보를 지속해서 유지하는 쿠키</strong></li></ol><a name="cookie"><h1 id="쿠키-🍪"><a href="#쿠키-🍪" class="headerlink" title="쿠키 🍪"></a>쿠키 🍪</h1><ul><li>쿠기는 <strong>사용자를 식별하고 세션을 유지하는 방식</strong> 중 현재까지 가장 널리 사용하는 방식이다.</li><li>쿠키는 넷스케이프가 최초로 개발했지만, 지금은 모든 브라우저에서 지원한다.</li><li>쿠키는 캐시와 충돌할 수 있어서, 대부분의 캐시나 브라우저는 쿠키에 있는 내용물을 캐싱 하지 않는다.</li></ul><hr><a name="type"><h1 id="1-💁‍♀️-쿠키의-타입-type"><a href="#1-💁‍♀️-쿠키의-타입-type" class="headerlink" title="1. 💁‍♀️ 쿠키의 타입 type"></a>1. 💁‍♀️ 쿠키의 타입 type</h1><img src="https://img2.looper.com/img/gallery/the-incredibles-2-brad-bird-explains-how-jack-jack-inspired-the-sequel/intro-1529252113.jpg"><blockquote><p><a href="https://www.google.com/url?sa=i&source=images&cd=&cad=rja&uact=8&ved=2ahUKEwifgo7p9vDlAhVQw4sBHZCNBDYQjhx6BAgBEAI&url=https%3A%2F%2Fwww.looper.com%2F126230%2Fthe-incredibles-2-brad-bird-explains-how-jack-jack-inspired-the-sequel%2F&psig=AOvVaw33Pe3U4ZSGg6yF4jZ1HcvQ&ust=1574069087195058" target="_blank" rel="noopener">출처</a></p></blockquote><ul><li>세션 쿠키와 지속 쿠키의 차이점은 파기되는 <strong>시점</strong>뿐이다.</li><li>쿠키는 <code>Discard</code> 파라미터가 설정되어 있거나,<br><code>Expires</code>, <code>Max-Age</code>같은 파기되기까지의 남은 시간을 표현하는 파라미터가 없으면 세션 쿠키가 된다.</li></ul><h2 id="세션-쿠키-session-cookie"><a href="#세션-쿠키-session-cookie" class="headerlink" title="세션 쿠키 session cookie"></a>세션 쿠키 session cookie</h2><ul><li>사용자가 사이트를 탐색할 때,<br>관련한 설정과 선호 사항들을 저장하는 임시 쿠키다.</li><li>세션 쿠키는 사용자가 브라우저를 닫으면 삭제된다.</li></ul><h2 id="지속-쿠키-persistent-cookie"><a href="#지속-쿠키-persistent-cookie" class="headerlink" title="지속 쿠키 persistent cookie"></a>지속 쿠키 persistent cookie</h2><ul><li>삭제되지 않고 더 길게 유지될 수 있다.</li><li>지속 쿠키는 디스크에 저장되어, 브라우저를 닫거나 컴퓨터를 재시작하더라도 남아있다.</li><li>지속 쿠키는 사용자가 주기적으로 방문하는 사이트에 대한<br>설정 정보나 로그인 이름을 유지하려고 사용한다.</li></ul><h2 id="Secure-cookie"><a href="#Secure-cookie" class="headerlink" title="Secure cookie"></a>Secure cookie</h2><ul><li>암호화된 연결 HTTPS로만 전송할 수 있다.</li><li>Secure 플래그를 추가해서 생성하며,<br>HTTPS로 전송하기 때문에 쿠키를 열어보는 걸 방지할 수 있다. </li></ul><h2 id="Http-only-cookie"><a href="#Http-only-cookie" class="headerlink" title="Http-only cookie"></a>Http-only cookie</h2><ul><li>자바스크립트 같은 클라이언트 사이드 API를 통해 접속할 수 없는 쿠키이며, XSS 위협을 없애준다.</li><li>cross-site tracing(XST)와<br>cross-site request forgery(XSRF) 공격에 공격받기 쉽다.</li><li>HttpOnly 플래그를 쿠키에 추가하여 생성한다.</li></ul><h2 id="Same-site-cookie"><a href="#Same-site-cookie" class="headerlink" title="Same-site cookie"></a>Same-site cookie</h2><ul><li>구글 크롬 버전 51에서 새로 소개된 쿠키이다.</li><li>쿠키를 생성한 도메인과 같은 출처일 때만 쿠키를 전송한다.</li></ul><h2 id="third-party-cookie"><a href="#third-party-cookie" class="headerlink" title="third-party cookie"></a>third-party cookie</h2><ul><li>현재 방문하고 있는 사이트가 아닌 다른 사이트의 쿠키</li><li>광고와 같은 외부 웹사이트의 컨텐츠가 있을 때 생성되며<br>이 쿠키를 이용하여 사용자를 추적하고, 광고를 제공하는 데 사용한다.</li></ul><h2 id="좀비-cookie"><a href="#좀비-cookie" class="headerlink" title="좀비 cookie"></a>좀비 cookie</h2><ul><li>쿠키에 대한 좀 더 급진적인 해결책은<br>삭제 이후에 다시 생성되는 좀비 쿠키 혹은 “Evercookies”</li><li>의도적으로 영원히 제거하는 것이 어려운 쿠키이다.</li><li>그들은 쿠키가 존재 여부와 관계없이 그들 자신을 다시 만들어내기 위해 웹 스토리지 API, Flash 로컬 공유 객체 그리고 다른 기술들을 사용하고 있다.</li></ul><hr><a name="how"><h1 id="2-🧐-쿠키는-어떻게-동작하는가-HOW"><a href="#2-🧐-쿠키는-어떻게-동작하는가-HOW" class="headerlink" title="2. 🧐 쿠키는 어떻게 동작하는가 HOW"></a>2. 🧐 쿠키는 어떻게 동작하는가 HOW</h1><ul><li>쿠키는 서버가 사용자에게 붙이는 스티커와 같다.</li><li>사용자가 웹 사이트에 반문하면, 웹 사이트는 서버가 사용자에게 붙인 모든 스티커를 읽을 수 있다.</li></ul><ol><li>처음에 사용자가 웹사이트에 방문하면, 웹 서버는 사용자에 대해서 아무것도 모른다.</li><li>웹 서버는 사용자가 다시 돌아왔을 때, 해당 사용자를 식별하기 위한 유일한 값을 쿠키에 할당한다.<ul><li>쿠키는 임의의 <code>이름=값</code> 형태의 리스트를 가지고,<br>그 리스트는 <code>Set-Cookie</code> 혹은 <code>Set-Cookie2</code> 같은 HTTP응답 헤더에 기술되어 사용자에게 전달한다. <a href="https://feel5ny.github.io/2019/08/18/HTTP_003_04/#3">참고</a><blockquote><p><code>Set-Cookie2</code>은 더 이상 사용되지 않는다.</p></blockquote></li></ul></li><li>쿠키는 어떤 정보든 포함할 수 있지만,<br><strong>서버가 사용자 추적 용도</strong>로 생성한<br>유일한 <strong>단순 식별 번호</strong>만 포함하기도 한다.<ul><li>서버는 이 쿠키 값으로 DB에서 사용자의 정보를 찾는데 사용할 수 있다.</li><li>브라우저는 서버로 온 Set-Cookie 헤더에 있는 쿠키 콘텐츠를 <strong>브라우저 쿠키 DB</strong>에 저장한다.</li><li>사용자가 미래에 같은 사이트를 방문하면,<br>브라우저는 서버가 이 사용자에게 할당했던 쿠키를 Cookie요청 헤더에 기술해 전송한다.</li></ul></li></ol><img src="/images/2019/39/03.png" style="width:100%"><h3 id="그니까-쿠키는-어떻게-동작-정리"><a href="#그니까-쿠키는-어떻게-동작-정리" class="headerlink" title="그니까 쿠키는 어떻게 동작? 정리"></a>그니까 쿠키는 어떻게 동작? <strong>정리</strong></h3><ol><li>유저가 서버에 페이지를 요청한다.</li><li>서버에서 응답과 함께 Set-Cookie 헤더를 전송한다.</li><li>브라우저(User Agent)가 Set-Cookie 헤더에서 전달된 값을 갖고<br>쿠키를 생성해서 (브라우저에) 저장한다.</li><li>이렇게 생성된 쿠키는 클라가 서버에 요청할 때마다<br><strong>브라우저가 같이 전송해준다.</strong></li></ol><hr><a name="state"><h1 id="3-⏳쿠키-상태-관리"><a href="#3-⏳쿠키-상태-관리" class="headerlink" title="3. ⏳쿠키 상태 관리"></a>3. ⏳쿠키 상태 관리</h1><h2 id="3-1-클라이언트-측-상태"><a href="#3-1-클라이언트-측-상태" class="headerlink" title="3.1 클라이언트 측 상태"></a>3.1 클라이언트 측 상태</h2><ul><li>쿠키의 기본적인 발상은<br>브라우저가 서버 관련 정보를 저장하고,<br>사용자가 해당 서버에 접근할 때마다 그 정보를 함께 전송하게 하는 것이다.</li><li><strong>브라우저는 쿠키 정보를 저장할 책임</strong>이 있다.<br>= 클라이언트 측 상태<br>= HTTP 상태 관리체계 (HTTP State Management Mechnism)</li><li>각 브라우저는 각기 다른 방식으로 쿠키를 저장한다.</li></ul><h2 id="3-2-Domain-별-쿠키-상태-관리"><a href="#3-2-Domain-별-쿠키-상태-관리" class="headerlink" title="3.2 Domain 별 쿠키 상태 관리"></a>3.2 Domain 별 쿠키 상태 관리</h2><ul><li>브라우저는 수백수천 개의 쿠키를 가지고 있을 수 있지만,<br>브라우저가 쿠키 전부를 모든 사이트에 보내지는 않는다.</li><li>브라우저는 보통 각 사이트에 2개 혹은 3개의 쿠키만 보낸다.<ol><li>🔥 쿠키를 모두 전달하면 <strong>성능이 크게 저하된다.</strong><ul><li>쿠키를 모두 전달하면, 브라우저는 실제 콘텐츠의 바이트보다 더 많은 쿠키 바이트를 전달하게 될 것이다.</li></ul></li><li>🤷‍♂️ <strong>해당 도메인과 상관없는 쿠키를 보내면 무의미하다.</strong><ul><li>이 쿠키들은 대부분은 서버에 특화된 이름/값 쌍을 포함하고 있기 때문에,<br>대부분 사이트에서는 인식하지 않는 무의미한 값이다.</li><li>모든 사이트에 쿠키 전체를 전달하는 것은,<br>특정 사이트에서 제공한 정보를 신뢰하지 않는 사이트에서 가져갈 수 있어서,<br>잠재적인 <strong>개인 정보 문제</strong>를 일으킬 것이다.</li></ul></li></ol></li><li>보통 브라우저는 쿠키를 생성한 서버에게만 쿠키에 담긴 정보를 전달한다.</li><li>쿠키는 일종의 <strong>상태 정보</strong>라고 할 수 있으며<ol><li>서버가 생성하여 클라에 전달하고</li><li>클라는 그 쿠키를 유효한 사이트에만 다시 전달하고 관리한다.</li></ol></li></ul><blockquote><p>많은 <strong>웹 사이트는 광고를 관리하는 협력업체</strong>와 계약을 한다. (third-party 쿠키)</p><ul><li>이 광고들은 웹사이트 자체의 일부인 것처럼 제작되고, <strong>지속 쿠키</strong>를 만들어낸다.</li><li>같은 광고사에서 제공하는 서로 다른 웹사이트에 사용자가 방문하면,<br>브라우저는 앞서 만든 지속 쿠키를 다시 광고사 서버로 전송한다.</li><li>광고사는 이 기술에 <code>Referer</code>헤더를 접목하여,<br>사용자의 프로필과 웹사이트를 사용하는 습관에 대한 방대한 데이터를 구축할 수 있다.</li></ul></blockquote><h3 id="쿠키-Domain-속성"><a href="#쿠키-Domain-속성" class="headerlink" title="쿠키 Domain 속성"></a>쿠키 Domain 속성</h3><ul><li>서버는 쿠키를 생성할 때 Set-Cookie 응답 헤더에<br>Domain 속성을 시술해서, 어떤 사이트가 그 쿠키를 읽을 수 있는지 제어할 수 있다.<ul><li>도메인에 해당하는 사이트를 방문하면 Cookie 헤더가 항상 적용될 것이다.</li></ul></li></ul><img src="/images/2019/39/04.png" style="width:100%"><blockquote><p>아래 브라우저에 저장되어 있던 쿠키 내용을 해당 도메인과 같을 경우<br>  요청 헤더의 Cookie에 포함시킨다.</p></blockquote><img src="/images/2019/39/05.png" style="width:100%"><h3 id="쿠키-Path-속성"><a href="#쿠키-Path-속성" class="headerlink" title="쿠키 Path 속성"></a>쿠키 Path 속성</h3><ul><li>웹 사이트 일부에만 쿠키를 적용할 수 있다.</li><li><a href="https://www.google.com/" target="_blank" rel="noopener">https://www.google.com/</a> + <code>/search</code><br><code>/search</code> 여기에만 해당하는 쿠키!<img src="/images/2019/39/06.png" style="width:100%"></li></ul><hr><a name="detail"><h1 id="4-🧩-쿠키-구성요소"><a href="#4-🧩-쿠키-구성요소" class="headerlink" title="4. 🧩 쿠키 구성요소"></a>4. 🧩 쿠키 구성요소</h1><ul><li>현재 사용되는 쿠키 명세에는<br><strong>Version0</strong> 쿠키 (= 넷스케이프 쿠키)<br><strong>Version1</strong> 쿠키 (RFC 2965 =&gt; RFC 2965 =&gt; RFC 6265)</li><li>Version1 쿠키는 Version0 쿠키의 확장으로<br>널리 쓰이지는 않는다.</li><li>Version0과 Version1 쿠키 명세 모두 HTTP/1.1 명세 일부로 기술되어 있지는 않는다.</li></ul><h2 id="Version-0"><a href="#Version-0" class="headerlink" title="Version 0"></a>Version 0</h2><h3 id="1-Set-Cookie-헤더"><a href="#1-Set-Cookie-헤더" class="headerlink" title="1. Set-Cookie 헤더"></a>1. Set-Cookie 헤더</h3><ul><li>Set-Cookie 헤더는 쿠키의 이름과 값을 가져야 한다.</li><li>이는 쿠키 옵션 속성들에 <code>;</code>으로 이어 기술한다.</li></ul><ol><li><code>이름=값</code>: 필수 값</li><li><code>Expires</code>: 선택적인 속성. 쿠키의 생명주기를 가리키는 날짜 문자열<ul><li><strong>요일, DD-MM-YY HH:MM:SS GMT</strong></li><li>사용할 수 있는 타임존은 GMT</li><li>쿠키에 Expires를 명시하지 않으면 그 쿠키는 사용자의 세션이 끝날 때 파기될 것이다.</li></ul></li><li><code>Domain</code>: 선택적인 속성. 브라우저는 이 속성에 기술된 도메인을 사용하는 서버 호스트명으로만 쿠키를 전송한다.<ul><li>이는 서버가 해당 도메인에만 쿠키를 제한적으로 전달하게 한다.</li><li>도메인이 명시되어 있지 않으면, Set-Cookie 응답을 생성한 서버의 호스트 명을 기본값으로 사용한다.</li></ul></li><li><code>Path</code>: 선택적인 속성. 서버에 있는 특정 문서에만 쿠키를 할당할 수 있다.<ul><li><code>/foo</code>경로는 <code>/foobar</code>와 <code>/foo/bar.html</code>에 들어맞는다.</li><li><code>/</code>는 모든 것에 들어맞는다.</li><li>경로를 명시하지 않으면, Set-Cookie 응답을 전달하는 URL의 경로가 사용된다.</li></ul></li><li><code>Secure</code>: 선택적인 속성. 쿠키는 HTTP가 SSL 보안 연결을 사용할 때만 쿠키를 전송한다.</li><li><code>HttpOnly</code>: HttpOnly는 쿠키의 범위를 HTTP 요청으로 제한한다.<br>HttpOnly가 설정된 경우 클라이언트 사이드 API로는 쿠키에 접근하지 못한다.</li></ol><img src="/images/2019/39/07.png" style="width:100%"><h3 id="2-Cookie-헤더"><a href="#2-Cookie-헤더" class="headerlink" title="2. Cookie 헤더"></a>2. Cookie 헤더</h3><ul><li>클라가 서버에 요청을 보낼 때는, Domain, Path, Secure 필터들이 현재 요청하려고 하는 사이트에 들어맞으면서, 아직 파기되지 않은 쿠키들을 함께 보낸다.</li><li>Cookie 헤더에 이어 붙여서 보낸다.</li></ul><h2 id="Version-1"><a href="#Version-1" class="headerlink" title="Version 1"></a>Version 1</h2><ul><li><p>쿠키 버전 1은 <strong>RFC 2109</strong>를 뜻한다.</p></li><li><p>RFC 2109는 기존 넷스케이프 쿠키의 스펙을 체계적으로 정리하고 수정하려고 시도한 것</p></li><li><p>Version0 쿠키 속성은 Name, Value, Expires, Domain, Path, Securer가 있다.</p></li><li><p>Version1 쿠키 속성은 Name, Value, Comment, Domain, Max-Age, Path, Secure, Version이 있다.</p><ul><li>Comment: 서버가 쿠키의 용도를 기록해두기 위한 속성</li><li>Version: 쿠키가 어떤 명세서를 따르는지 버전을 나타낸다.</li></ul></li></ul><h3 id="RFC-6265와-RFC-2109-쿠키의-차이"><a href="#RFC-6265와-RFC-2109-쿠키의-차이" class="headerlink" title="RFC 6265와 RFC 2109 쿠키의 차이"></a>RFC 6265와 RFC 2109 쿠키의 차이</h3><ul><li>RFC 6265가 나오면서 RFC 2109, RFC 2965는 폐기</li><li>둘디 Set-Cookie 헤더를 사용합니다.</li><li>RFC 2109는 Name, Value, Comment, Domain, Max-Age, Path, Secure, Version</li><li>RFC 6265는 Name, Value, Expires, Domain, Max-Age, Path, Secure, HttpOnly<ul><li>Max-Age를 설정하면 자동으로 Expires가 정해진다.</li><li>HttpOnly: 비 HTTP 요청을 막는다.</li></ul></li><li>구현 고려 사항<ul><li>RFC 2109는 유저 에이전트가 최소 300개의 쿠키,<br>쿠키마다 적어도 4096바이트,<br>한 호스트나 도메인마다 최소  20개를 지원해야 한다.</li><li>RFC 6265는 유저 에이전트가 최소 3000개의 쿠키<br>쿠키마다 적어도 4096바이트,<br>도메인 당 최소 50개의 쿠키를 저장 가능해야 한다고 명시.</li></ul></li></ul><h3 id="Set-Cookie2-헤더"><a href="#Set-Cookie2-헤더" class="headerlink" title="Set-Cookie2 헤더"></a><del>Set-Cookie2 헤더</del></h3><h3 id="Cookie2-헤더"><a href="#Cookie2-헤더" class="headerlink" title="Cookie2 헤더"></a><del>Cookie2 헤더</del></h3><p>Set-Cookie2와 Cookie2 헤더는 더 이상 사용되지 않으므로 패스</p><hr><a name="when"><h1 id="5-👀-쿠키-목적별-사용"><a href="#5-👀-쿠키-목적별-사용" class="headerlink" title="5. 👀 쿠키 목적별 사용"></a>5. 👀 쿠키 목적별 사용</h1><ul><li>쿠키는 웹사이트에 수차례 트랜잭션을 만들어내는 사용자를 추적하는 데 사용한다.</li></ul><h2 id="5-1-쿠키와-세션-추적"><a href="#5-1-쿠키와-세션-추적" class="headerlink" title="5.1 쿠키와 세션 추적"></a>5.1 쿠키와 세션 추적</h2><p>Amazon.com의 예를 통해 살펴보자.</p><ol><li><p>브라우저가 Amazon.com의 루트 페이지를 처음 요청한다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.0</span><br><span class="line">Host: www.amazon.com</span><br></pre></td></tr></table></figure></li><li><p>서버는 클라를 전자상거래 소프트웨어 URL로 리다이렉트 시킨다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Location: http://www.amazon.com:80/exec/abidos/subst/home/redirect.html</span><br></pre></td></tr></table></figure></li><li><p>클라는 리다이렉트 URL로 요청 보낸다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /exec/abidos/subst/home/redirect.html HTTP/1.0 302 Found</span><br><span class="line">Host: http://www.amazon.com</span><br></pre></td></tr></table></figure></li><li><p>서버는 응답에<br>두 개의 세션 쿠키를 기술하고 (<code>Set-Cookie</code> = 요 쿠키 브라우저에 넣어두세요)<br>사용자를 다른 URL로 리다이렉트 시키며<br>클라는 다시 이 쿠키들을 첨부하여 요청을 보낸다.(<code>Cookie</code>)새로운 URL(<a href="http://www.amazon.com/exec/abidos/subst/home/redirect.html/002-1135265-8016838)은" target="_blank" rel="noopener">http://www.amazon.com/exec/abidos/subst/home/redirect.html/002-1135265-8016838)은</a> 자체에 상태 정보를 갖고 있으므로 = <strong>뚱뚱한 URL</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Date: Sun, 02 Dec 2001 03:20:47 GMT</span><br><span class="line">Set-Cookie: session-id=002-1135265-8016838; path=/; domain=.amazon.com; expires=Suday, 09-Dec-2001 08:00:00 GMT</span><br><span class="line">Set-Cookie: session-id-time=1007884800; path=/; domain=.amazon.com; expires=Suday, 09-Dec-2001 08:00:00 GMT</span><br></pre></td></tr></table></figure></li><li><p>클라는 새로운 URL을 요청을 요청받았던 두 개의 쿠키와 함께 보낸다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /exec/abidos/subst/home/redirect.html/002-1135265-8016838 HTTP/1.0</span><br><span class="line">Host: http://www.amazon.com</span><br><span class="line">Cookie: session-id=002-1135265-8016838; session-id-time=1007884800</span><br></pre></td></tr></table></figure></li><li><p>서버는 home.html 페이지로 리다이렉트 시키고, 쿠키 두 개를 더 첨부한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Date: Sun, 02 Dec 2001 03:45:40 GMT</span><br><span class="line">Set-Cookie: ubid-main=430-8248051-6231206; path=/; domain=.amazon.com; expires=Tuesday, 09-Dec-2001 08:00:00 GMT</span><br><span class="line">Set-Cookie: x-main=hQ...Bf; path=/; domain=.amazon.com; expires=Tuesday, 09-Dec-2001 08:00:00 GMT</span><br><span class="line">Location: http://www.amazon.com/exec/abidos/subst/home/home.html/002-1135265-8016838</span><br></pre></td></tr></table></figure></li><li><p>클라는 home.html 페이지를 가져오고, 총 4개의 쿠키를 전달한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /exec/abidos/subst/home/home.html/002-1135265-8016838 HTTP/1.0</span><br><span class="line">Host: http://www.amazon.com</span><br><span class="line">Cookie: session-id=002-1135265-8016838; session-id-time=1007884800; ubid-main=430-8248051-6231206; x-main=hQ...Bf</span><br></pre></td></tr></table></figure></li><li><p>서버는 콘텐츠를 보낸다.</p></li></ol><blockquote><p><strong>쿠팡</strong> 첫 화면 진입 시 진행되는<br>  광고 솔루션 <strong>크리테오</strong> 세션 추적 과정 중 일부<br>  <img src="/images/2019/39/08.png" style="width:100%"></p></blockquote><hr><a name="careful"><h1 id="6-👮‍-쿠키-사용-시-주의사항"><a href="#6-👮‍-쿠키-사용-시-주의사항" class="headerlink" title="6. 👮‍ 쿠키 사용 시 주의사항"></a>6. 👮‍ 쿠키 사용 시 주의사항</h1><h2 id="6-1-쿠키와-캐싱"><a href="#6-1-쿠키와-캐싱" class="headerlink" title="6.1 쿠키와 캐싱"></a>6.1 쿠키와 캐싱</h2><ul><li>이전 사용자의 쿠키가 다른 사용자에게 할당돼버리거나,<br>누군가의 개인 정보가 다른 이에게 노출되는 최악의 상황이 일어날 수도 있다.</li></ul><ol><li><p>캐시 되지 말아야 할 문서가 있다면 표시하라<br><code>Control: no-cache=&quot;Set-Cookie&quot;</code></p></li><li><p>Set-Cookie 해더를 캐시 하는 것에 유의하라</p><ul><li>같은 Set-Cookie 헤더를 여러 사용자에게 보내게 되면 사용자 추적에 실패할 것이기 때문</li><li>어떤 캐시는 응답을 저장하기 전에 Set-Cookie 헤더를 제거하기 때문에, 그 캐시 데이터를 받은 클라는 Set-Cookie 헤더 정보가 없는 데이터를 받게 되어 문제가 발생할 수 있다. <ul><li>캐시가 모든 요청마다 원 서버와 재검사시켜 클라로 가는 응답에 Set-Cookie 헤더 값을 기술하여 이 문제를 개선할 수 있다. (<a href="https://feel5ny.github.io/2019/10/05/HTTP_007-2/#control">참고</a>)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: must-revalidate, max-age=0</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Cookie 헤더를 가지고 있는 요청을 주의하라</p><ul><li>클라 요청에 Cookie 헤더가 함께 오면,<br>결과 콘텐츠가 개인 정보를 담고 있을 수도 있다는 힌트다.</li><li>개인 정보는 캐시 되지 않도록 표시되어 있어야 하지만, 그 표시를 하지 않는 서버도 있다.</li><li>보수적인 캐시는 Cookie 헤더가 포함된 요청에 응답으로 가는 문서는 캐시 하지 않을 것이다.</li></ul></li></ol><h2 id="6-2-쿠키-보안-그리고-개인-정보"><a href="#6-2-쿠키-보안-그리고-개인-정보" class="headerlink" title="6.2 쿠키, 보안 그리고 개인 정보"></a>6.2 쿠키, 보안 그리고 개인 정보</h2><ul><li>쿠키를 사용하지 않도록 비활성화 시킬 수 있고, 로그 분석 같은 다른 방법으로 대체하는 것도 가능하므로, 그 자체가 보안상으로 엄청나게 위험한 것은 아니다.</li><li>원격 DB에 개인 정보를 저장하고,<br>해당 데이터의 키값을 쿠키에 저장하는 방식을 표준으로 사용하면,<br>클라와 서버 사이에 예민한 데이터가 오가는 것을 줄일 수 있다.</li><li>쿠키에 대한 부정적인 여론이 많기는 하지만,<br>제공하는 개인 정보를 누가 받는지 명확히 알고, 사이트의 개인 정보 정책에만 유의한다면, 쿠키에 관련한 위험성보다<br>세션 조작이나 트랜잭션 상의 편리함이 더 크다.</li></ul><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ol><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies" target="_blank" rel="noopener">mdn 쿠키글</a></li><li><a href="https://meetup.toast.com/posts/172" target="_blank" rel="noopener">HTTP 쿠키와 톰캣 버전별 이슈</a></li><li><a href="https://tools.ietf.org/html/rfc6265" target="_blank" rel="noopener">RFC 6265</a></li></ol></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;현대의 웹 사이트들은 &lt;strong&gt;개인화&lt;/strong&gt;된 서비스를 제공하고 싶어 한다.&lt;br&gt;개인화를 하는 방법은 여러 가지가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개별 인사 / 사용자 맞춤 추천 / 저장된 사용자 정보&lt;/li&gt;
&lt;li&gt;세션 추적: 
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="web" scheme="http://feel5ny.github.io/tags/web/"/>
    
      <category term="cookie" scheme="http://feel5ny.github.io/tags/cookie/"/>
    
  </entry>
  
  <entry>
    <title>클라이언트 식별</title>
    <link href="http://feel5ny.github.io/2019/11/15/HTTP_011_01/"/>
    <id>http://feel5ny.github.io/2019/11/15/HTTP_011_01/</id>
    <published>2019-11-15T14:23:55.000Z</published>
    <updated>2019-11-17T12:44:00.111Z</updated>
    
    <content type="html"><![CDATA[<p>현대의 웹 사이트들은 <strong>개인화</strong>된 서비스를 제공하고 싶어한다.<br>개인화를 하는 방법은 여러 가지가 있다.</p><ul><li>개별 인사 / 사용자 맞춤 추천 / 저장된 사용자 정보</li><li>세션 추적: 웹사이트는 각 사용자에게서 오는 HTTP 트랜잭션을 식별할 방법이 필요하다.</li></ul><ol><li>사용자 식별 관련 정보를 전달하는 <strong>HTTP 헤더</strong></li><li><strong>IP 주소</strong>로 사용자를 식별</li><li>사용자 <strong>로그인 인증</strong>을 통한 사용자 식별</li><li>URL에 식별자를 포함하는 <strong>뚱뚱한 URL</strong></li><li>식별 정보를 지속해서 유지하는 <strong>쿠키</strong></li></ol><a name="header"><h2 id="1-HTTP-헤더"><a href="#1-HTTP-헤더" class="headerlink" title="1. HTTP 헤더"></a>1. HTTP 헤더</h2><ul><li><code>From</code> (요창): 사용자 이메일 주소</li><li><code>User-Agent</code> (요청): 사용자의 브라우저</li><li><code>Referer</code> (요청): 사용자가 현재 링크를 타고 온 근원 페이지</li></ul><h3 id="From"><a href="#From" class="headerlink" title="From"></a><code>From</code></h3><ul><li>사용자의 이메일 주소를 포함한다.</li><li>악의적인 서버가 이메일 주소를 모아서 스팸 메일을 발송하는 문제가 있어서 From 헤더를 보내는 브라우저는 많지 않다.</li><li>로봇이나 스파이더는 데이터를 수집하는 과정에서<br>본의 아니게 웹 사이트에 문제를 일으켰을 때, 해당 사이트의 웹 마스터가 항의 메일을 보낼 수 있도록 From 헤더에 이메일 주소를 기술한다.</li></ul><h3 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a><code>User-Agent</code></h3><ul><li>사용자가 쓰고 있는 브라우저의 이름과 버전 정보</li><li>운영체제에 대한 정보까지 포함하여 서버에게 알려준다.</li><li>특정 사용자를 식별하는 데는 큰 도움이 되지 않는다.</li></ul><img src="/images/2019/38/01.png"><h3 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a><code>Referer</code></h3><ul><li>사용자가 현재 페이지로 유입하게 한 웹페이지의 URL을 가리킨다.</li><li>사용자의 웹 사용 형태나 사용자이 취향을 더 잘 파악할 수 있다.(?)</li></ul><img src="/images/2019/38/02.png"><a name="ip"><h2 id="2-클라이언트-IP-주소"><a href="#2-클라이언트-IP-주소" class="headerlink" title="2. 클라이언트 IP 주소"></a>2. 클라이언트 IP 주소</h2><ul><li>초기 웹 선구자들은 사용자 식별에 클라이언트 IP 주소를 사용하려 했다.</li><li>주소가 좀처럼 바뀌지 않고, 웹 서버가 요청마다 클라의 IP를 알 수 있다면 문제없이 동작한다.</li><li>웹 서버는 HTTP 요청을 보내는 반대쪽 TCP 커넥션의 IP 주소를 알아낼 수 있다.</li><li>이 방식을 제대로 동작하지 않아서 사용하지 않는다.</li></ul><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><ul><li>IP 주소는 사용자가 아닌, 사용하는 컴퓨터를 가리킨다.<br>즉, <strong>여러 사용자가 같은 컴퓨터를 사용하면 식별할 수 없다.</strong></li><li>ISP(인터넷 서비스 제공자)는 사용자가 로그인하면 동적으로 IP 주소를 할당한다.<br>로그인 시간에 따라 사용자는 <strong>매번 다른 주소</strong>를 받으므로, 웹 서버는 사용자를 IP 주소로 식별할 수 없다.</li><li>보안을 강화하고, 부족한 주소를 관리하려고 많은 사용자가 <strong>네트워크 주소 변환 방화벽</strong>을 통해 인터넷을 사용한다. (Network Address Translation, NAT)<ul><li>이 NAT 장비들은 클라의 실제 IP 주소를 방화벽 뒤로 숨기고,<br>클라의 실제 IP 주소를 내부에서 사용하는 하나의 방화벽 IP 주소로 변환한다.</li></ul></li><li>HTTP 프락시와 게이트웨이는 원서버에 새로운 TCP 연결을 한다.<br>웹 서버는 클라 IP 주소 대신 <strong>프락시 서버 IP 주소</strong>를 본다.<ul><li>일부 프락시는 원본 IP 주소를 보존하려고 <code>Client-ip</code>나 <code>X-Forwarded-For</code>같은 확장 헤더를 추가하여 이 문제를 해결하려 했다.<blockquote><p><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/X-Forwarded-For" target="_blank" rel="noopener">X-Forwarded-For</a><br>HTTP 프록시나 로드 밸런서를 통해 웹 서버에 접속하는 클라이언트의 원 IP 주소를 식별하는 사실상의 표준 헤더다. </p></blockquote></li><li>모든 프락시가 이런 식으로 동작하진 않는다.</li></ul></li></ul><a name="auth"><h2 id="3-사용자-로그인-인증"><a href="#3-사용자-로그인-인증" class="headerlink" title="3. 사용자 로그인 인증"></a>3. 사용자 로그인 인증</h2><ul><li><p>웹 서버는 사용자 이름과 비밀번호로 인증할 것을 요구해서, 사용자에게 명시적으로 식별 요청을 할 수 있다.</p></li><li><p>웹 사이트 로그인이 더 쉽도록 <code>WWW-Authenticate</code>와 <code>Authorization</code>헤더를 사용해 웹 사이트에 사용자 이름이 전달하는 자체적인 체계를 가지고 있다.</p><blockquote><ol><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/WWW-Authenticate" target="_blank" rel="noopener">WWW-Authenticate</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Authorization" target="_blank" rel="noopener">Authorization</a><br>HTTP Authorization 요청 헤더는 서버의 사용자 에이전트임을 증명하는 자격을 포함하여, 보통 서버에서 401 Unauthorized 상태를 WWW-Authenticate 헤더로 알려준 이후에 나옵니다.</li></ol></blockquote></li><li><p>한번 로그인하면, 브라우저는 사이트로 보내는 모든 요청에 이 로그인 정보를 함께 보내므로, 웹서버느 그 로그인 정보는 항상 확인할 수 있다.</p></li><li><p>서버에서, 사용자가 사이트에 접근하기 전에 로그인을 시키고자 한다면 HTTP 401 Unauthorized 응답코드를 브라우저에 보낼 수 있다.</p><ol><li><a href="http://www.joy.com" target="_blank" rel="noopener">www.joy.com</a> 사이트로 요청</li><li>사용자의 식별 정보를 알지 못하므로 401 Unauthorized 코드를 내리고, <code>WWW-Authenticate</code>헤더를 반환하여 로그인하라고 요청한다.</li><li>로그인 후 <code>Authorization</code>헤더에 토큰을 포함하여 전송하여, 사용자 식별을 시도한다.</li><li>한번만 로그인하면, 브라우저는 요청마다 해당 사용자의 식별 토큰을 Authorization헤더에 담아서 서버로 전송해서, 한 세션이 진행되는 내내 그 사용자에 대한 식별을 유지한다.</li></ol></li></ul><a name="fat"><h2 id="4-뚱뚱한-URL"><a href="#4-뚱뚱한-URL" class="headerlink" title="4. 뚱뚱한 URL"></a>4. 뚱뚱한 URL</h2><ul><li>사용자의 URL마다 <strong>버전</strong>을 기술하여 사용자를 식별하고, 추적하였다.</li><li><strong>사용자의 상태 정보를 포함하고 있는 URL</strong>을 뚱뚱한 URL이라고 부른다.</li><li>웹 서버와 통신하는 독립적인 HTTP 트랜잭션을<br>하나의 ‘세션’ 혹은 ‘방문’으로 묶는 용도로<br>뚱뚱한 URL을 사용할 수 있다.</li><li>사용자가 웹사이트에 처음 방문하면 <ol><li>유일한 ID가 생성되고, </li><li>그 값은 서버가 인식할 수 있는 방식으로 URL에 추가되며, </li><li>서버는 클라를 이 뚱뚱한 URL로 리다이렉트 시킨다.</li></ol></li><li>서버가 뚱뚱한 URL을 포함한 요청을 받으면,<br>사용자 아이디와 관련된 추가적인 정보를 찾아서 밖으로 향하는 모든 하이퍼링크를 뚱뚱한 URL로 바꾼다.</li></ul><h3 id="단점-1"><a href="#단점-1" class="headerlink" title="단점"></a>단점</h3><p>사용자를 식별하는 데 사용할 수 있지만, 문제가 있다.</p><ol><li><strong>😵못생긴 URL</strong><br>뚱뚱한 URL은 새로운 사용자들에게 혼란을 준다.</li><li>🙅‍개인 정보때문에 <strong>공유하지 못하는 URL</strong><br>뚱뚱한 URL은 특정 사용자와 세션에 대한 상태 정보를 포함하기 때문에<br>외부 공유 시 개인 정보를 공유하게 된다.</li><li><strong>🔥부하</strong><ol><li><strong>📦캐시를 사용할 수 없음</strong><br>URL로 만든 것은, URL이 달라지기 때문에 기존 캐시에 접근할 수 없다.</li><li><strong>서버 부하 가중</strong><br>뚱뚱한 URL에 해당하는 HTML 페이지를 다시 그려야 한다.</li></ol></li><li><strong>🏃‍♀️이탈</strong><ol><li><strong>초기화</strong><br>사용자가 링크를 타고 다른 사이트로 이동하거나, 특정 URL을 요청해서<br>의도치 않게 뚱뚱한 URL 세션에서 이탈하기 쉽다.<br>이탈하게 되면 모든 진척사항들이 <strong>초기화</strong>되고 다시 처음부터 시작해야 될 것이다.</li><li><strong>세션 간 지속성의 부재</strong><br>북마킹하지 않는 이상, 로그아웃하면 모든 정보를 잃는다.</li></ol></li></ol><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ol><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/WWW-Authenticate" target="_blank" rel="noopener">WWW-Authenticate (:mdn)</a></li></ol></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;현대의 웹 사이트들은 &lt;strong&gt;개인화&lt;/strong&gt;된 서비스를 제공하고 싶어한다.&lt;br&gt;개인화를 하는 방법은 여러 가지가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;개별 인사 / 사용자 맞춤 추천 / 저장된 사용자 정보&lt;/li&gt;
&lt;li&gt;세션 추적: 웹
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="web" scheme="http://feel5ny.github.io/tags/web/"/>
    
      <category term="Identification" scheme="http://feel5ny.github.io/tags/Identification/"/>
    
  </entry>
  
  <entry>
    <title>코드스피츠85 2회-(2) 동시성 모델을 직접 구현하며 이해하기.</title>
    <link href="http://feel5ny.github.io/2019/11/11/JS_26_2/"/>
    <id>http://feel5ny.github.io/2019/11/11/JS_26_2/</id>
    <published>2019-11-11T11:20:19.000Z</published>
    <updated>2019-12-22T08:20:52.166Z</updated>
    
    <content type="html"><![CDATA[<p>코드스피츠 85에서는 <code>none blocking</code>에 대한 이야기와<br>자바스크립트를 짜는 근본적인 방법에 대한 고찰을 이야기해본다.</p><hr><p>🌕🌑🌑</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>setTimer에서부터 promise까지 동시성 모델을 기반으로 구현하며, 루프 제어권의 통제에 대하여 알아본다. </p><hr><a name="setTimer"><h2 id="1-setTimer를-구현해보기"><a href="#1-setTimer를-구현해보기" class="headerlink" title="1. setTimer를 구현해보기"></a>1. setTimer를 구현해보기</h2><h3 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h3><ol><li>Item<ul><li>실행될 시간과<br>실행할 시간을 갖고 있는 객체</li></ul></li><li>queue<ul><li>callback queue 역할을 하는 큐</li><li>객체 리스트 형태인 Set으로 생성</li></ul></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Item = <span class="keyword">class</span> &#123;</span><br><span class="line">  time: <span class="built_in">number</span>; <span class="comment">// 몇초 후에 실행할지</span></span><br><span class="line">  block: <span class="built_in">Function</span>; <span class="comment">// 몇초 후에 실행할 함수</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">block, time</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.block = block;</span><br><span class="line">    <span class="keyword">this</span>.time = time + performance.now();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Set;</span><br></pre></td></tr></table></figure><details>  <summary>cf__1. performace, Set, value</summary>  <ul>    <li>      <code>performance.now()</code>      <ul>        <li>브라우저가 실행되 이후에 지난 시간</li>        <li>date.now()보다 좋은 점은 나노초까지 볼 수 있다.</li>      </ul>    </li>    <li>      <code>Set</code>      <ul>        <li>배열에 담을 수 있는건 값만 담을 수 있다.</li>        <li>같은 객체가 중복으로 들어가지 않는다.</li>        <li>객체를 담는 리스트</li>      </ul>    </li>    <li>      <code>value</code>      <ul>        <li>불변</li>        <li>자체의 값으로 판단한다.</li>        <li>값으로 식별된다.</li>      </ul>    </li>  </ul></details><hr><h3 id="Core-Action"><a href="#Core-Action" class="headerlink" title="Core Action"></a>Core Action</h3><ol><li>callback 큐를 지속적으로 체크한다.<ul><li>큐에 호출시간보다 작으면 실행하지 않는다.</li><li>큐에 호출시간보다 크면<ol><li>실행하고</li><li>삭제한다.</li></ol></li></ul></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@params</span> time 현재시간</span><br><span class="line"><span class="keyword">const</span> checkQueue = <span class="function">(<span class="params">time: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  queue.forEach(<span class="function">(<span class="params">item: &#123;time: <span class="built_in">number</span>, block: <span class="built_in">Function</span>&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(item.time &gt; time) <span class="keyword">return</span>; <span class="comment">// 현재시간이 호출시간보다 작다면 실행하지 않음.</span></span><br><span class="line">    <span class="keyword">else</span> &#123; <span class="comment">// 현재시간이 호출시간보다 작다면 실행.</span></span><br><span class="line">      queue.delete(item); <span class="comment">// 실행할 예정이기때문에 삭제</span></span><br><span class="line">      item.block(); <span class="comment">// 실행</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  requestAnimationFrame(checkQueue);</span><br><span class="line">&#125;</span><br><span class="line">requestAnimationFrame(checkQueue);</span><br></pre></td></tr></table></figure><blockquote><p><strong>cf__2 <code>requestAnimationFrame</code></strong></p><ul><li>브라우저에게 수행하기를 원하는 애니메이션을 알리고, 다음 리페인트가 진행되기 전에 해당 애니메이션을 업데이트하는 함수를 호출하게 한다.</li><li>리페인트 이전에 실행할 콜백을 인자로 받는다. </li><li>엔진이 렌더링이 끝나면 직접 발생시키는 함수</li></ul></blockquote><hr><h4 id="트리거"><a href="#트리거" class="headerlink" title="트리거"></a>트리거</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timeout = <span class="function">(<span class="params">block: Funtion, time:<span class="built_in">number</span></span>) =&gt;</span></span><br><span class="line">   queue.add(<span class="keyword">new</span> Item(block, time))</span><br></pre></td></tr></table></figure><hr><h4 id="확인해보자"><a href="#확인해보자" class="headerlink" title="확인해보자."></a>확인해보자.</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timeout(_ =&gt; <span class="built_in">console</span>.log(<span class="string">"hello"</span>), <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><p><strong>방금 구현한 setTimer를 동시성 모델로 구현해보면?</strong><br><img src="/images/2019/37/01.jpg" style="width: 100%"></p><p><strong>좀더 큰 그림에서 보면?</strong><br><img src="/images/2019/37/02.jpg" style="width: 100%"></p><ul><li>동시성을 만들어내는 이벤트 루프 안에<br>작은 이벤트 루프를 만들어낸 것.</li></ul><hr><hr><a name="nbFor"><h2 id="2-Non-Blocking-For-구현해보기"><a href="#2-Non-Blocking-For-구현해보기" class="headerlink" title="2. Non Blocking For 구현해보기"></a>2. Non Blocking For 구현해보기</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> working = _ =&gt; &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) working();</span><br><span class="line"></span><br><span class="line"><span class="meta">@params</span> max 최대 루프수</span><br><span class="line"><span class="meta">@params</span> load 한번에 로드할 카운트</span><br><span class="line"><span class="meta">@params</span> block 실행할 함수</span><br><span class="line"><span class="keyword">const</span> nbFor = <span class="function">(<span class="params">max:<span class="built_in">number</span>, load: <span class="built_in">number</span>, block: <span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> f = <span class="function">(<span class="params">time:<span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> curr = load;</span><br><span class="line">    <span class="comment">// 한번에 로드할 카운트를 상태로 받기 위해 변수에 할당</span></span><br><span class="line">    <span class="keyword">while</span>(curr-- &amp;&amp; i &lt; max) &#123;</span><br><span class="line">      <span class="comment">// 1. 1회돌때마다 현재 상태를 하나씩 뺀다.</span></span><br><span class="line">      block();</span><br><span class="line">      <span class="comment">// 2. 실행</span></span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">    <span class="keyword">if</span>(i &lt; max<span class="number">-1</span>) requestAnimationFrame(f)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  requestAnimationFrame(f); <span class="comment">// --- (1)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>requestAnimationFrame</code>으로 내부함수 <code>f</code>가 실행</li><li>load기준으로 반복 카운트가 chunk된다.</li><li>while문이 한 셋트가(load 카운트가 종료) 끝나면, <code>requestAnimationFrame</code>으로 <code>f</code>함수를 다시 실행시킨다.<ul><li>하나의 프레임이 끝나면 제어권을 다시 엔진에게 돌려준다.</li></ul></li><li>다시</li><li>max까지 루프가 끝나면 더이상 f를 실행하지 않음. </li></ol><ul><li>하나의 프레임이 끝나면 제어권을 다시 엔진에게 돌려준다.</li><li>클로저 패턴이 존재, i가 상태를 물고 있음</li></ul><hr><hr><a name="generator"><h2 id="3-Generator-구현해보기"><a href="#3-Generator-구현해보기" class="headerlink" title="3. Generator 구현해보기"></a>3. Generator 구현해보기</h2><ul><li><a href="https://feel5ny.github.io/2019/02/03/JS_19/">제너레이터 글참고</a><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> infinity: Iterator = (<span class="function"><span class="keyword">function</span>*(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) <span class="keyword">yield</span> i++;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(infinity.next())</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.es2015.iterable.d.ts</span></span><br><span class="line"><span class="keyword">interface</span> IteratorResult&lt;T&gt; &#123;</span><br><span class="line">    done: <span class="built_in">boolean</span>;</span><br><span class="line">    value: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Iterator&lt;T&gt; &#123;</span><br><span class="line">    next(value?: <span class="built_in">any</span>): IteratorResult&lt;T&gt;;</span><br><span class="line">    <span class="keyword">return</span>?(value?: <span class="built_in">any</span>): IteratorResult&lt;T&gt;;</span><br><span class="line">    <span class="keyword">throw</span>?(e?: <span class="built_in">any</span>): IteratorResult&lt;T&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>제너레이터는 <strong>유사 iterable</strong>이다.<ul><li>제너레이터 자체는 iterable이 아니다.</li><li>iterable은 iterator라는 함수(<code>[Symbol.iterator]()</code>)를 호출하면 iterator 객체를 주는데,<br>generator를 호출하면 iterator가 반환된다.</li><li>generator는 <code>for...of</code>를 사용하지 못한다.<br>for…of는 iterable이 와야하기 때문에  </li></ul></li><li><code>yield</code>가 일어날 때마다 <code>next</code>로 다음 턴을 줄 수 있다.</li></ul><hr><h3 id="function"><a href="#function" class="headerlink" title="function*"></a><code>function*</code></h3><ul><li>내부적으로 <strong>suspend</strong> 구간을 생성한다.<ul><li>동기명령은 절대로 멈출 수 없다.<ul><li>generator는 멈출 수 있다.</li><li>generator는 중간에 끊을 수 있다.</li></ul></li></ul></li><li><strong>yield를 호출하면 suspend가 일어난다.</strong><ul><li>멈춘다.</li><li>다음번 next 호출시 내부적으로 다시 재개되어서 루프돈다.<ul><li>next 호출할때마다 <code>suspend</code>가 일어난 곳에서 <code>resume</code>이 일어난다.</li><li>멈추는 것: <code>suspend</code></li><li>다시 재개: <code>resume</code></li></ul></li></ul></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gene = <span class="function"><span class="keyword">function</span>*(<span class="params">max:<span class="built_in">number</span>, load:<span class="built_in">number</span>, block:<span class="built_in">Function</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>, curr = load;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; max) &#123;</span><br><span class="line">    <span class="keyword">if</span>(curr--)&#123;</span><br><span class="line">      block();</span><br><span class="line">      i++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      curr = load; <span class="comment">// curr을 초기화하고</span></span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">      <span class="keyword">yield</span>; <span class="comment">// 제어권을 밖에 둔다.</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>suspend로 멈춰서 제어권을 외부에 위임할 수 있다.</li><li><code>gene.next()</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nbFor = <span class="function">(<span class="params">max, load, block</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> iterator: Iterator = gene(max, load, block);</span><br><span class="line">  <span class="keyword">const</span> f = _ =&gt; iterator.next().done || timeout(f);</span><br><span class="line">  timeout(f); <span class="comment">// timeout을 쓰는 위치를 밖으로 옮겼다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>제어 시스템의 반제어권을 외부에 줌으로써</strong><br>내부에서 제어와 관련된 로직을 분리시킬수 있게 된다는게<br>제너레이터의 장점</p><hr><hr><a name="promise"><h2 id="4-Promise-구현해보기"><a href="#4-Promise-구현해보기" class="headerlink" title="4. Promise 구현해보기"></a>4. Promise 구현해보기</h2><ul><li>비동기 반제어</li></ul><ol><li>트리거를 걸었음</li><li>서버가 3초만에 데이터를 줬음</li><li>3초 안에는 제어할 권한이 없음</li><li>3초 이후에는 제어할 권한이 있음<ul><li>Promise에 바로 <code>then</code>을 사용하는 것은<br>반제어권이 이점을 활용하지 않고 <strong>콜백처럼 쓰는 형태</strong></li><li>내가 원할때 then을 호출할 수 있다.</li></ul></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gene2 = <span class="function"><span class="keyword">function</span>*(<span class="params">max, load, block</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(i &lt; max)&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> curr = load;</span><br><span class="line">      <span class="keyword">while</span>(curr-- &amp;&amp; i &lt; max) &#123;</span><br><span class="line">        block();</span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">      timeout(res, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>yield를 보낼때 Promise로 감싸서 보내고 있다.</li><li>제어권을 완전 양도했었지만<br>위 코드는 capsulizing해서 Promise안의 작업이 끝나면 then을 호출할 수 있게끔 반제어권을 주었음.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nbFor = <span class="function">(<span class="params">max, load, block</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> iterator:Iterator&lt;<span class="built_in">Promise</span>&gt; = gene2(max, load, block);</span><br><span class="line">  <span class="keyword">const</span> next = <span class="function">(<span class="params">&#123;value, done&#125;</span>) =&gt;</span> </span><br><span class="line">    dome || value.then(<span class="function"><span class="params">v</span> =&gt;</span> next(iterator.next()));</span><br><span class="line">  next(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>nbFor에서는 트리거 역할만하는 것이고, </li><li>제어는 Promise가 한다.</li><li>co함수, redux-saga, …</li></ul><hr><h2 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h2><ul><li><a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution?hl=ko" target="_blank" rel="noopener">requestAnimationFrame</a></li></ul></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;코드스피츠 85에서는 &lt;code&gt;none blocking&lt;/code&gt;에 대한 이야기와&lt;br&gt;자바스크립트를 짜는 근본적인 방법에 대한 고찰을 이야기해본다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;🌕🌑🌑&lt;/p&gt;
&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2019 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2019-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="codeSpitz" scheme="http://feel5ny.github.io/tags/codeSpitz/"/>
    
  </entry>
  
  <entry>
    <title>코드스피츠85 2회-(1) 자바스크립트의 동시성</title>
    <link href="http://feel5ny.github.io/2019/11/10/JS_26_1/"/>
    <id>http://feel5ny.github.io/2019/11/10/JS_26_1/</id>
    <published>2019-11-10T11:20:19.000Z</published>
    <updated>2019-11-10T16:03:58.780Z</updated>
    
    <content type="html"><![CDATA[<p>코드스피츠 85에서는 <code>none blocking</code>에 대한 이야기와<br>자바스크립트를 짜는 근본적인 방법에 대한 고찰을 이야기해본다.</p><hr><p>🌕🌑🌑</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><ul><li>자바스크립트의 동시성 모델에 대해서 알아본다. </li><li>동시성이라는 단어를 이해하기 전에 병렬 모델을 먼저 알아본다. </li><li>병렬모델과 동시성 모델의 차이점은 워커가 하나 이상 있냐의 차이이다. </li><li>동시성 모델은 브라우저의 이벤트 루프와 테스크 큐를 예시로 알아보았다. </li></ul><hr><a name="title"><h1 id="Concurrency-동시성"><a href="#Concurrency-동시성" class="headerlink" title="Concurrency 동시성"></a>Concurrency 동시성</h1><ul><li>동시에 한다는 뜻이 아니라 시간을 쪼개서 진행한다는 뜻.</li><li>ex. 이벤트 루프</li></ul><a name="parallelism"><h2 id="1-Parallelism-병행성-병렬성"><a href="#1-Parallelism-병행성-병렬성" class="headerlink" title="1. Parallelism 병행성,병렬성"></a>1. Parallelism 병행성,병렬성</h2><ul><li>진짜로 2개를 <strong>동시에</strong> 하는 것</li><li>병렬성을 이해해야 동시성을 이해하기 쉬워서 다뤄본다.</li></ul><h4 id="1-1-예시-프론트에서-발견할-수-있는-병렬-처리는"><a href="#1-1-예시-프론트에서-발견할-수-있는-병렬-처리는" class="headerlink" title="1.1 예시_프론트에서 발견할 수 있는 병렬 처리는?"></a>1.1 예시_프론트에서 발견할 수 있는 병렬 처리는?</h4><ul><li>네트워크에 작업을 요청하면 병행처리가 일어남.<ul><li>네트워크쪽 서버에도 프로세스가 진행되고 있음.</li><li>클라이언트도 다른 프로세스가 진행되고 있음.</li></ul></li></ul><h4 id="1-2-핵심은"><a href="#1-2-핵심은" class="headerlink" title="1.2 핵심은"></a>1.2 핵심은</h4><ul><li>테스크에 할당되는 각각의 워커가 별도로 존재해서,<br>자기만의 속도와 자기만의 스케쥴에 따라서 일을 처리한다.</li></ul><h4 id="1-3-메모리의-개념과-함께-생각해보자"><a href="#1-3-메모리의-개념과-함께-생각해보자" class="headerlink" title="1.3 메모리의 개념과 함께 생각해보자"></a>1.3 메모리의 개념과 함께 생각해보자</h4><p>각각의 테스크가 <strong>같은 메모리</strong>를 바라볼 경우 문제가 생긴다.<br>즉, 동시성은 <strong>같이 쓰는 메모리를 어떻게 할지가 가장 어렵다.</strong></p><img src="/images/2019/36/01.png"><ol><li><strong>Blocking</strong>으로 해결한다.<ul><li>A가 선점하고 있는동안 <code>Blocking</code>을 걸어서 다른 워커가 접근하지 못하도록한다. </li><li>접근 못하는 워커는 메모리 접근을 위해 2가지 방법을 할 수 있다.<ol><li>강제로 제어권을 뺏오는 방법</li><li>대기 한다.</li></ol></li><li><strong>언어에 따라</strong> 할 수 있는 방법이 다르다.<ul><li>ex. 자바: 오브젝트에 대기라는 방법은 사용하도록 wait라는 개념만 있다.</li></ul></li></ul></li><li><strong>자바스크립트</strong>에서 동시성은..<ul><li>자바스크립트 창조자는 ES2018까지 병행성 자체를 막아버렸다.</li><li>ES2018 이후, <code>shared memory</code>와 <code>atomic</code>이라는 개념으로 병행성 가능해짐.</li></ul></li><li>프로그래밍 패러다임 중<ul><li>함수형 프로그래밍은 ‘공유를 하지마’로 해결한다.</li><li>객체지향 프로그래밍에서는 공유하는 메모리를 인정한다.</li></ul></li></ol><hr><a name="concurrency"><h2 id="2-Concurrency"><a href="#2-Concurrency" class="headerlink" title="2. Concurrency"></a>2. Concurrency</h2><p>동시성에서 우리가 일을 시킬 수 있는 워커는 하나다.</p><img src="/images/2019/36/03.png"><ol><li>A에서 일을 조금 하고, </li><li>A에 마킹을하고</li><li>B에 가서 작업을 한다.</li></ol><ul><li>메모리를 동시에 쓰는 일이 없다.</li><li>우리가 보통 작업했던 자바스크립트는 한번에 메모리 블럭을 하나만 접근하기 때문에<br>여태까지 메모리에 대한 synchronized 문제를 어떻게 해결할지를 경험하지 않았다.</li><li>자바스크립트는 병행성을 갖고 있지 않고, 동시성만 갖고 있다.</li></ul><ul><li>병행성과 동시성의 차이는<br><strong>우리가 컨트롤 할 수 있는 워커가 몇 개 인가</strong>에 차이가 있다.</li></ul><h3 id="2-1-현실세계의-동시성"><a href="#2-1-현실세계의-동시성" class="headerlink" title="2.1 현실세계의 동시성"></a>2.1 현실세계의 동시성</h3><ul><li>사람이 컨트롤하기에 동시성도 충분히 <strong>어렵다.</strong></li><li>동시성에 대해서도 관심을 가지고 프로그래밍하지 않으면 <strong>복잡성이 올라간다.</strong></li><li>동시성을 지원하는 다양한 <strong>자바스크립트의 메서드</strong>를 알아본다.</li></ul><h3 id="2-2-자바스크립트의-동시성"><a href="#2-2-자바스크립트의-동시성" class="headerlink" title="2.2 자바스크립트의 동시성"></a>2.2 자바스크립트의 동시성</h3><p>자바스크립트 엔진을 <strong>동시성 모델</strong>로 표현해보자.</p><img src="/images/2019/36/02.jpg" style="width:100%"><ol><li>engine work: 브라우저 엔진은 초기 작업을 진행한다.<ul><li>렌더링을 포함한 다양한 엔진이 수행해야하는 일들을 한다.</li><li>멀티스레드로 풀어서 초기 작업을 진행한다.</li><li>engine이 일하는 내용이 우리의 자바스크립트 코드나 메모리에 영향을 미치기때문에 싱글스레드 안에 들어오려고 동시성 패키지안에 들어와있는 것 뿐.</li><li>크롬은 백그라운드 thread에서 수많은 일을 함</li></ul></li><li>queue를 체크한다. (ex. 이벤트 루프)<ul><li>자바스크립트 명령어를 적재해 놓은 것이 있냐 없냐를 체크한다.</li><li>queue는 callback queue(테스크 큐)를 바라본다. </li><li>브라우저에 로딩한 스크립트, 이벤트 리스너, ajax에 걸어놓은 완료 리스너도 다 콜백 큐에 들어간다.</li></ul></li><li>콜백을 실행한다.<ul><li>콜백 큐를 검사해서, 큐에 이번에 실행할 명령이 있는지 확인해서 꺼내서 실행하고 실행한 콜백큐를 제거한다.</li><li>실행 이후에는 다시 렌더링을 진행한다. </li><li>계속 반복</li><li>큐에 실행할 일이 걸리면 실행하게 된다.</li><li>실행이 끝나면 다시 렌더링한다. <blockquote><ul><li>모든 비동기 API들은 작업이 완료되면 콜백 함수를 태스크 큐에 추가한다.</li><li>이벤트 루프는 ‘현재 실행중인 태스크가 없을 때’(주로 호출 스택이 비워졌을 때) 태스크 큐의 첫 번째 태스크를 꺼내와 실행한다.</li></ul></blockquote></li></ul></li></ol><ul><li>각각의 스탭은 병행적으로 일어나지 않고,<br>하나의 토큰이 계속 1, 2, 3 과정을 돌면서 실행한다.</li><li>특정 단계에 시간 지연이 있을 경우 다음 단계에 영향을 준다.<ul><li>즉, 우리의 코드가 느리게 되면, 렌더링도 느려지고 큐 체크도 느려진다.</li></ul></li></ul><h4 id="이벤트-루프와-테스크-큐의-관계"><a href="#이벤트-루프와-테스크-큐의-관계" class="headerlink" title="이벤트 루프와 테스크 큐의 관계"></a>이벤트 루프와 테스크 큐의 관계</h4><ul><li>멀티스레드에서 생산자 &lt;-&gt; 소비자 패턴 (Producer-Consumer패턴)</li><li>하나의 소비자가 메모리(생산자)에서 읽기만 한다<ul><li>즉, 메모리 동시성 문제는 일어나지 않는다.</li><li>한명만 소비하는 패턴 = <strong>파이프 패턴</strong></li></ul></li></ul><h4 id="브라우저가-갖고-있는-다른-thread"><a href="#브라우저가-갖고-있는-다른-thread" class="headerlink" title="브라우저가 갖고 있는 다른 thread"></a>브라우저가 갖고 있는 다른 thread</h4><ol><li><strong>network</strong>: ajax 요청때 사용</li><li><strong>timer</strong><ul><li><code>setTimeout</code>, <code>setInterval</code></li><li>현재의 크롬은 타이머를 처리하는 별도 스레드를 갖고있다.</li></ul></li><li><strong>message</strong><ul><li><code>window.postmessage</code> , <code>localstrage</code>-<code>sessionstorage</code> 간의 메세지 등등</li><li>브라우저 통신 메세지</li></ul></li><li>dom event</li></ol><ul><li><p>멀티 스레드 문제도 synchronized문제가 생기기때문에<br>콜백 큐처럼 guard를 두어서 guard가 처리하게끔 설계함.</p><img src="/images/2019/36/04.jpg" style="width:100%"></li></ul><hr><hr><h2 id="참고자료"><a href="#참고자료" class="headerlink" title="참고자료"></a>참고자료</h2><ul><li><a href="https://meetup.toast.com/posts/89" target="_blank" rel="noopener">이벤트 루프</a></li></ul></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;코드스피츠 85에서는 &lt;code&gt;none blocking&lt;/code&gt;에 대한 이야기와&lt;br&gt;자바스크립트를 짜는 근본적인 방법에 대한 고찰을 이야기해본다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;🌕🌑🌑&lt;/p&gt;
&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2019 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2019-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="codeSpitz" scheme="http://feel5ny.github.io/tags/codeSpitz/"/>
    
      <category term="concurrency" scheme="http://feel5ny.github.io/tags/concurrency/"/>
    
      <category term="Parallelism" scheme="http://feel5ny.github.io/tags/Parallelism/"/>
    
  </entry>
  
  <entry>
    <title>코드스피츠85 1회-(2) Runtime때 일어나는 일들</title>
    <link href="http://feel5ny.github.io/2019/11/01/JS_25_2/"/>
    <id>http://feel5ny.github.io/2019/11/01/JS_25_2/</id>
    <published>2019-11-01T11:20:19.000Z</published>
    <updated>2019-11-11T13:06:12.447Z</updated>
    
    <content type="html"><![CDATA[<p>코드스피츠 85에서는 <code>none blocking</code>에 대한 이야기와<br>자바스크립트를 짜는 근본적인 방법에 대한 고찰을 이야기해본다.</p><hr><p>🌕🌑🌑</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><img src="/images/2019/35/02.jpg"><ul><li><a href="https://feel5ny.github.io/2019/01/22/JS_17/">작년 글</a></li></ul><hr><a name="program"><h1 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h1><h2 id="Program-amp-Timing"><a href="#Program-amp-Timing" class="headerlink" title="Program &amp; Timing"></a>Program &amp; Timing</h2><img src="/images/2019/35/01.png" style="width:100%"><ol><li>Language code</li><li>Machine language로 트랜스파일한다.<ul><li>여기서 machine이란.. 자기 언어가 실행되는 환경</li></ul></li><li>File로 내린다. (Load)</li><li>메모리에 적재되어 있는 File을 실행한다. (Run)</li><li>실행이 끝나고나면 종료된다. (Terminate)</li></ol><a name="runtime"><h1 id="1-Runtime"><a href="#1-Runtime" class="headerlink" title="1. Runtime"></a>1. Runtime</h1><h2 id="1-1-Runtime-Execution"><a href="#1-1-Runtime-Execution" class="headerlink" title="1.1 Runtime Execution"></a>1.1 Runtime Execution</h2><ol><li><p><code>Loading</code>: 적재되는 중</p><ul><li>파일을 실행하면 메모리에 적재된다.</li><li>파일은<br><strong>명령</strong>과 <strong>값</strong>으로 분리되어서 메모리에 적재된다.</li></ul></li><li><p><code>instruction</code> - fetching &amp; decoding</p><ul><li>여기서부터는 OS가 하는 일</li><li><code>instruction</code>: CPU에서 해석할 수 있는 명령체계로 우리의 코드를 바꿔놓는 것</li></ul><p>메모리의 첫번째 명령을 실행한다.</p><ul><li>instruction을 로딩할 때 fetching이라는 과정을 통해<br>실제로는 제어유닛의 디코더로 로드하고,<br>디코딩을 통해서 cpu가 원하는 명령어로 바꾼다.</li><li>연산유닛에서 값이 필요한 연산일 경우 메모리에 있는 값을 로드해야하는데,<br>이때 데이터 유닛에 값을 로드해온다.</li><li>데이터 유닛에서 받은 값을 연산유닛으로 다시 보내준다.</li></ul></li><li><p><code>execution</code></p><ul><li>명령을 처리한다.</li><li>결과를 정리하여 반환해야한다는 명령이 있을 경우<br>다시 메모리의 값에 결과값을 보내준다</li></ul></li></ol><h3 id="폰-노이만-머신"><a href="#폰-노이만-머신" class="headerlink" title="폰 노이만 머신"></a>폰 노이만 머신</h3><ul><li>첫번째 명령이 끝나면 두번째 명령이 실행되고<br>이렇게 메모리에 적재된 명령이 순차적으로 처리되어 없어지게된다.<br>모든 명령이 끝나면 <code>terminate</code>가 일어난다.</li><li>폰 노이만 머신은 내장 메모리 순차처리 방식으로서,<br>데이터 메모리와 프로그램 메모리가 구분되어 있지 않고<br>하나의 버스를 가지고 있는 구조를 말한다. </li><li><a href="https://ko.wikipedia.org/wiki/%ED%8F%B0_%EB%85%B8%EC%9D%B4%EB%A7%8C_%EA%B5%AC%EC%A1%B0" target="_blank" rel="noopener">위키</a>, <a href="https://www.slideshare.net/sunnykwak90/ss-43131241" target="_blank" rel="noopener">참고</a></li></ul><h3 id="결국-런타임이란"><a href="#결국-런타임이란" class="headerlink" title="결국 런타임이란!"></a>결국 런타임이란!</h3><ul><li>이 과정이 반복되고 모든 명령어를 소비하면 실행이 끝난다.</li><li><strong>런타임</strong>이란<br>로딩 이후에 instruction fetching - instruction decoding - execution 계속반복되어서<br>terminate가 일어나는 그 사이</li><li><strong>동기명령</strong> <code>sync flow</code><br>순차적으로 실행되는 동안 아무것도 못하고 구경하는 행위</li><li>메모리에 sync flow를 태워서 flow대로 흐르는 것</li></ul><h2 id="1-2-Runtime-Details"><a href="#1-2-Runtime-Details" class="headerlink" title="1.2 Runtime Details"></a>1.2 Runtime Details</h2><ol><li>essential definition loading<ul><li>우리의 코드가 실행되기 위해서는<br>우리가 정의한 클래스, 함수 인터페이스가 다 떠있어야함</li><li>실행코드에 앞서, 핵심적인 정의사항들이 올라감.</li></ul></li><li>vtable mapping (<strong>v</strong>ariables table)<ul><li>현대의 있는 컴파일러들은 우리가 정의한 메모리공간을 사용할때 가상 메모리 공간을 사용한다.</li><li>컴파일러가 나의 변수를 가상으로 매핑해서 컴파일 했음<br>진짜 메모리와 컴파일러가 만든 가상의 변수와 매핑을 해줘야한다.</li><li>내가 정의한 모든 변수를 실제 메모리에 매핑해주는 과정이 필요하다.</li></ul></li><li>run</li><li>runtime definition loading</li><li>run</li></ol><p>4번과 5번은 반복</p><hr><h3 id="자바스크립트의-런타임"><a href="#자바스크립트의-런타임" class="headerlink" title="자바스크립트의 런타임"></a>자바스크립트의 런타임</h3><p>자바스크립트의 런타임은 브라우저 로드에서부터 런타임으로 친다.</p><ol><li>browser load</li><li>browser parsing</li><li>run</li></ol><ul><li>기초적인 정의를 로딩한다.</li><li>우리가 정의한 확장된 정의를 로딩한다. (상대적으로 여기까지를 declare time)</li><li>실행한다. (상대적으로 여기서부터를 runtime으로 )</li></ul><hr><hr><h1 id="2-State-Control"><a href="#2-State-Control" class="headerlink" title="2. State Control"></a>2. State Control</h1><ul><li>메모리 관리의 어려운 점을 이야기하는 것도 있다.</li><li>값이라는 것은 계속 변하기 때문에 <strong>상태</strong>라고 부른다.</li></ul><h2 id="Directive-Reference-직접참조"><a href="#Directive-Reference-직접참조" class="headerlink" title="Directive Reference 직접참조"></a>Directive Reference 직접참조</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = &apos;TEST&apos;</span><br><span class="line">a주소 = 00, a크기 = 4</span><br><span class="line">b = &amp;a // b에 a의 주소값을 할당</span><br><span class="line">c = &amp;b // c에 b의 주소값(a의 주소값)을 할당.</span><br><span class="line">a = b &amp; b =c (a=c) // 결국 a와 c도 같은 상황</span><br><span class="line">d = &apos;ABC&apos;</span><br><span class="line">b = &amp;d // b에 d의 주소를 재할당</span><br><span class="line">b = d &amp; b != c (a=c)</span><br></pre></td></tr></table></figure><ul><li>마지막은 b와 d는 같고<br>b는 d의 주소값을 갖고 있기때문에<br>b는 c와 같은 상태가 아니다.<br>하지만 a와 c는 아직 같은 상태</li><li>b와 d는 같다는것이 바로 인지되지만,<br>b에 다른 값을 넣었을 때 변하는 b와 c가 같지 않다 라는 사실을 바로 이해하고 인지할 수 있을까? <ul><li><strong>추적을 못한다. 🙅</strong></li><li>c를 사용하는 동네는 다 망가짐</li></ul></li><li>전파, 여파.. <ul><li><strong>직접 참조를 쓸때는 내 참조변수가 외부에 공유됐으면 변수의 값을 바꾸면 안된다.</strong></li><li>협소하게 움직일 수 밖에 없고, 개발에 제약이 생긴다.</li><li>이를 해결하기 위해 간점참조를 사용한다.</li></ul></li></ul><h2 id="Indirective-Reference-간접참조"><a href="#Indirective-Reference-간접참조" class="headerlink" title="Indirective Reference 간접참조"></a>Indirective Reference 간접참조</h2><ul><li><p><strong>중간에 쿠션</strong>을 두는 개념</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = &quot;TEST&quot;</span><br><span class="line">a주소 = 00, a크기 = 4</span><br><span class="line">b = &#123; target: &amp;a &#125;</span><br><span class="line">c = &amp;b</span><br><span class="line">d = &apos;ABC&apos;</span><br><span class="line">b.target = &amp;d // b를 직접 바꾸지 않기 때문에 더이상 싱크가 깨지는 문제가 일어나지 않는다.</span><br></pre></td></tr></table></figure></li><li><p><code>.</code>: 쿠션을 친다.</p><ul><li>런타임에 계산된다.</li><li>비용이 든다.<ul><li><strong>연산</strong>비용과 <strong>안정성</strong>을 바꿨다고 보면 된다.</li><li>사람이 인지하고 있는 멘탈모델과 컨텍스트가 깨지지 않는다.</li></ul></li></ul></li><li><p>이 원리를 사용하여 linked list, 디자인패턴, 객체지향의 추상클래스도 만든다.</p></li></ul><h3 id="사실-자료구조는-아래-2가지-원리에서-시작된다"><a href="#사실-자료구조는-아래-2가지-원리에서-시작된다" class="headerlink" title="사실 자료구조는 아래 2가지 원리에서 시작된다"></a>사실 자료구조는 아래 2가지 원리에서 시작된다</h3><ol><li>메모리를 통으로 쓰는 배열과</li><li>linked list형식을 빌린.. <ul><li>참조포인터를 이용하여 쿠션을 치는</li></ul></li></ol><hr><hr><h1 id="3-Flow-Control"><a href="#3-Flow-Control" class="headerlink" title="3. Flow Control"></a>3. Flow Control</h1><ul><li>명령 관리의 어려운 점을 이야기하는 것도 있다.</li><li>state 관리 + 명령진행에 대한 어려움<ul><li>2가지 모두 챙겨야하기때문에 상태관리보다 더 어렵다. </li></ul></li></ul><h2 id="Sync-flow-Control"><a href="#Sync-flow-Control" class="headerlink" title="Sync flow Control"></a>Sync flow Control</h2><p><a href="https://feel5ny.github.io/2019/02/03/JS_18_1/">자세한건 여기!</a></p><ul><li><strong>sync flow</strong>: 메모리에 적재된 명령이 순차적으로 실행됨</li><li><strong>sync flow control</strong>: goto를 통해 명령의 위치를 이동함<ul><li><code>goto</code>라는 명령어를 통해서 sync flow의 작동을 제어할 수 있다.</li><li>메모리의 state에 따라서 분기를 한다.<ul><li>sync flow control 핵심은 해당 시점의 메모리의 값 (분기칠때의 상태에 의존된다)</li><li>condition control =&gt; 여기서 condition은 메모리의 상태값<blockquote><p>cf__1 <strong>의존성 역전 / 제어 역전</strong></p><ul><li>의존성 역전: 추상적인 것에 의존하겠어.</li><li>제어 역전: 추상적인 행동을 할 것이라고 전제하여 제어문을 짜는 것.</li></ul></blockquote></li></ul></li></ul></li><li><strong>sub flow</strong> (== <strong>sub routine</strong>: 반복적으로 사용할 수 있는 sync flow)<br>: 함수 등을 통해 별도의 명령set을 여러번 실행함</li></ul><h2 id="Blocking"><a href="#Blocking" class="headerlink" title="Blocking"></a>Blocking</h2><ul><li>Sync flow가 실행되는 동안 다른 일을 할 수 없는 현상</li><li>우리가 짠 모든 코드가 blocking 코드.</li><li>때문에 우리가 할 수 있는건 blocking 줄이기</li></ul><h4 id="Blocking-줄이기"><a href="#Blocking-줄이기" class="headerlink" title="Blocking 줄이기"></a>Blocking 줄이기</h4><ul><li>sync flow를 짧게 하기</li><li>다른 thread에 sync flow를 떠넘기기<ul><li>현대브라우저는 병행적 프로그래밍을 요구한다.</li></ul></li><li><strong>이벤트 루프</strong>: 동기화 명령 사이사이에 이벤트 루프가 작동해서, 다른 thread 작업을 기다리게된다. </li></ul><h4 id="그럼-Non-Blocking이란"><a href="#그럼-Non-Blocking이란" class="headerlink" title="그럼 Non Blocking이란?"></a>그럼 Non Blocking이란?</h4><p>Sync Flow가 납득할 만한 <strong>시간</strong> 내에 종료되는 것</p><ul><li>우리의 코드는 보다 더 none blocking으로 향하는 길</li><li><strong>빠른 thread로 빼내어서 main thread를 얼만큰 줄이느냐가 none blocking의 주제</strong></li></ul><hr><hr><h1 id="4-Async"><a href="#4-Async" class="headerlink" title="4. Async"></a>4. Async</h1><h2 id="Sync-amp-Async"><a href="#Sync-amp-Async" class="headerlink" title="Sync &amp; Async"></a>Sync &amp; Async</h2><ul><li>앞에서 말한 sync flow와는 다른 개념이다. </li><li><strong>Sync</strong>: 서브루틴이 즉시 값을 반환하는 것</li><li><strong>Async</strong>: <strong>서브루틴이 <code>다른 수단</code>으로 값을 반환하는 것</strong><ul><li>우리가 원하는 값을 즉시 리턴하지 않는 모든 함수가 async 함수</li><li>다른수단이란?<ul><li><code>Promise</code></li><li><code>callback function</code></li><li><code>iterations</code></li></ul></li></ul></li></ul><h2 id="Async-단점"><a href="#Async-단점" class="headerlink" title="Async 단점"></a>Async 단점</h2><ul><li>호출결과가 즉시 반환되지 않으므로,<br>현재의 sync flow가 종료됨<br>그 결과 현재의 어휘공간(컨텍스트) 내의 상태를<br>결과시점에 사용할 수 없음</li><li>요청 시의 상태를 별도로 결과시점에 전달할 <strong>부가장치</strong> 필요</li></ul><p>sync 라는 순차적으로만 짤 수 있다는 식으로 처음부터 배웠기 때문에<br>우리는 async가 어색한 것이다.</p><h2 id="Sync의-장점-Async의-장점"><a href="#Sync의-장점-Async의-장점" class="headerlink" title="Sync의 장점 + Async의 장점"></a>Sync의 장점 + Async의 장점</h2><ul><li>sync 로직으로 async를 사용할 수 있게 함</li><li>하지만 sync flow가 어긋나므로,<br>이전 sync flow의 상태를 기억하여 이어줄 장치 필요<ul><li>상태를 기억하고 이어주는 장치: <code>Continuation</code> (컨텍스트라고 생각해되 된다.)</li><li>이를 활용하는 프로그래밍 스타일: <strong>C</strong>ontinuation <strong>P</strong>assing <strong>S</strong>tyle</li><li>Generator, Async, Asynchrous Iterators</li></ul></li></ul></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;코드스피츠 85에서는 &lt;code&gt;none blocking&lt;/code&gt;에 대한 이야기와&lt;br&gt;자바스크립트를 짜는 근본적인 방법에 대한 고찰을 이야기해본다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;🌕🌑🌑&lt;/p&gt;
&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2019 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2019-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="codeSpitz" scheme="http://feel5ny.github.io/tags/codeSpitz/"/>
    
  </entry>
  
  <entry>
    <title>코드스피츠85 1회-(1) JavaScript Now</title>
    <link href="http://feel5ny.github.io/2019/10/27/JS_25_1/"/>
    <id>http://feel5ny.github.io/2019/10/27/JS_25_1/</id>
    <published>2019-10-27T11:20:19.000Z</published>
    <updated>2019-11-04T11:30:49.192Z</updated>
    
    <content type="html"><![CDATA[<p>코드스피츠 85에서는 <code>none blocking</code>에 대한 이야기와<br>자바스크립트를 짜는 근본적인 방법에 대한 고찰을 이야기해본다.</p><hr><p>🌕🌑🌑</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h2><p>오늘날의 자바스크립트 동향과 ECMAScript에 대해서 알아본다. ECMAScript가 버전업이 될때의 과정과, ES6 이후(~ES10)에 표준이 된 스펙들 중 일부를 알아본다. 또한 proposal에 올라온 목록과 체택되진 않았지만 이미 몇몇 브라우저에 적용된 개념들에 대해서 알아본다.</p><hr><a name="pipeline"><h1 id="JavaScript-PipeLine"><a href="#JavaScript-PipeLine" class="headerlink" title="JavaScript PipeLine"></a>JavaScript PipeLine</h1><p>자바스크립트의 ECMAScript를 알아보기전에 우리는 프론트 개발자로써 어느 과정까지 건드리고 있는지를 알아보고, ECMAScript에 조금 더 집중할 수 있는 상황에 대해서 알아본다.</p><img src="/images/2019/34/01.png" style="width:100%"><ol><li><strong>Code</strong><ul><li>코드를 작성한다.</li><li>ES3.1 ~ 5, 6 ~ / TypeScript / Kotlin / Dart / CoffeeScript / …</li></ul></li><li><strong>Transpiler</strong><ul><li>컴파일러와는 다르다. <a href="https://feel5ny.github.io/2017/11/08/Typescript_01/">글 참조</a></li><li>트랜스파일러라는 것을 이용해서 코드를 자바스크립트로 번역한다.</li></ul><hr><ol><li>(1단계) <strong>언어마다</strong> 컴파일러가 있다.<ul><li>(타입스크립트) tsc / (코들린) kotlinc / …</li></ul></li><li>(2단계) 원하는 형태의 자바스크립트로 바꾸거나, 원하는 <strong>버전</strong>의 자바스크립트로 바꿔줌<ul><li>babel</li></ul></li></ol></li><li><strong>Packaging</strong> : 최적화 과정. (webpack)</li><li><strong>CI</strong> : 테스트..등등의 여러 job</li><li><strong>Deploy</strong> : 최종 deploy</li></ol><p>호환성이라던지, 브라우저에서 어떻게 실행할지는<br>트랜스파일러나 패키징이 알아서 책임지게 하고,<br><strong>개발자가 코드에 집중할 수 있는 환경이 만들어졌다고도 할 수 있다.</strong></p><hr><h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><ul><li><p>ECMA스크립트는 차기버전을 정하는 순서가 그 해의 상반기에 정해진다.<br>내년 상반기에 확정될 ES11에 대한 draft작업이 되고 있음 (2019년 10월기준)</p></li><li><p>2019가 재정되자마자 공식문서 레포에는 다음버전의 레포가 떠진다.</p></li><li><p>현재 표준은 당연히 ES10이다</p></li><li><p><strong>이번 강의에서는 ES11을 배울 것이다.</strong></p></li><li><p>알고 있는 자바스크립트는 옛날 기준의 자바스크립트이다.</p></li><li><p>자바스크립트는 1년 기준으로 변한다.</p><ul><li>최신버전의 언어는 그 전에 비해 작성법부터 달라진다.</li><li>새로운 버전의 자바스크립트로 자바스크립트를 새로 배운다고 생각해도 된다.<blockquote><p>지금 알고 있는 지식은 IE11때까지의 지식이구나 라고 알고 있어도 된다.</p></blockquote></li></ul></li></ul><hr><h1 id="ECMAScript-Standard"><a href="#ECMAScript-Standard" class="headerlink" title="ECMAScript Standard"></a>ECMAScript Standard</h1><p>자바스크립트라는 언어를 따라가기 위해 표준에 대해 알아보고 이해한다.</p><ul><li>유럽 표준의원회에서 지정하고 있다.</li><li>자바스크립트를 한번 배우면 계속 쓴다는 생각을 버려야한다.</li><li>변화를 어떻게 따라잡을까. <ul><li>이 언어가 어떤 식으로 변화를 일으키는지 이해해야지만 같이 찾아보고 따라잡을 수 있다.</li></ul></li></ul><blockquote><p>C#이후에 업데이트가 가장 많이 일어나는 언어이다.</p></blockquote><ol><li>매년 상반기 새로운 버전을 출시함 <ul><li>버전과 연도가 1차이<br>ES6 = ES2015</li><li>현재는 ES11 (ES2020)이 최종 조정중 (2019년 10월기준)</li></ul></li><li>ES6 이후 급격한 언어의 변화를 지양하고 <strong>점진적인 버전업</strong>을 진행<ul><li>새롭게 반영될 내용은 Stage0 ~ 3까지 단계별 승격을 통해 정식 반영시 Stage4가 됨</li><li>공개적으로 스펙을 원하는 사람이 발제를 하면 stage0이라는 최초의 proposal로 보고, 위원회가 회의를 거쳐서 승격을 시켜줌.</li><li>현재 제안 중이 내용의 상태 <a href="https://github.com/tc39/proposals" target="_blank" rel="noopener">확인</a></li><li>대부분은 사장된다.</li></ul></li><li>실제로는..<ul><li>tc39위원회에서 회의를 통해 결정되며, 위원회는 다양한 업계와 관계자로 구성됨</li><li>stage0이던 1이던 tc39에 프로포절을 제안하기 위해서는<br><strong>챔피온</strong>이라는 사람을 끼고 발제를 하게 되어있다.</li><li>실제 각 제안의 담당자(<strong>챔피온</strong>)가 구글관련 개발자인 경우가 많음</li><li>Stage4기준 보다 구글이 원하는 순서대로 크롬에 빨리 반영되는 경우가 많음<ul><li><a href="https://developers.google.com/web/updates/capabilities" target="_blank" rel="noopener">크롬 업데이트</a></li><li>많은 스펙들은 회사의 사정에 따라 움직이고 있다.<ul><li>예) 꼬리물기 최적화를 제안한 애플직원의 프로포절은 반영되지 않았지만, 사파리에는 반영되었다.</li><li><code>CSS</code>나 <code>W3C</code>도 비슷한 사정</li></ul></li></ul></li></ul></li></ol><blockquote><p>최신판을 쓰기 위해서는 크롬을 사용해야하고,<br>  크롬에서만 반영된 스펙을 안볼 수 없다.</p></blockquote><a name="es6"><h1 id="1-ECMAScript-6"><a href="#1-ECMAScript-6" class="headerlink" title="1. ECMAScript 6"></a>1. ECMAScript 6</h1><p>ES<code>5</code>이후에 중요한 부분</p><ul><li><strong>Class</strong>, Object Literal, getter, setter …</li><li>Arrow (순수하게 함수만 지향, 가벼운 객체를 만들 수 있다.)</li><li><strong>Iterator</strong>, <strong>Generator(코루틴 시스템)</strong>, <strong>For of</strong></li><li>const, let (순차적인 컨텍스트를 생성해줌)</li><li>destructuring, rest, spread </li><li>Template String</li><li>내장객체: (클래스 라이브러리)<br>Symbol, Promise, Map, Set, WeakMap, WeakSet, Proxy, Reflect</li></ul><h3 id="cf-1-클래스는-설탕문법이다"><a href="#cf-1-클래스는-설탕문법이다" class="headerlink" title="cf__1) 클래스는 설탕문법이다?"></a>cf__1) 클래스는 설탕문법이다?</h3><ul><li>ES6의 클래스는 절대로 ES5를 흉내낼 수 없다.</li><li>단적인 증거가, ES<code>5</code>에서 함수를 상속받거나 배열을 상속받는 클래스를 만들 수 없다.</li><li>근본적으로 생성하는 방식서에부터 사용하는 방식까지 ES6이전과 이후가 다르다.</li></ul><blockquote><p><a href="https://gomugom.github.io/is-class-only-a-syntactic-sugar/" target="_blank" rel="noopener">참고: ES6 Class는 단지 prototype 상속의 문법설탕일 뿐인가?</a></p></blockquote><h1 id="ECMAScript-7-10-Stage3-11"><a href="#ECMAScript-7-10-Stage3-11" class="headerlink" title="ECMAScript 7 ~ 10, Stage3(11)"></a>ECMAScript 7 ~ 10, Stage3(11)</h1><a name="es7"><h2 id="2-ECMAScript-7"><a href="#2-ECMAScript-7" class="headerlink" title="2. ECMAScript 7"></a>2. ECMAScript 7</h2><ul><li>중첩된 rest해체: rest안에 rest로 해체가 가능한 것.</li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">참고:변수에 배열의 나머지를 할당하기</a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, ...[b, ...c]] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment">// a=1, b=2, c=[3,4]</span></span><br></pre></td></tr></table></figure></li></ul><a name="es8"><h2 id="3-ECMAScript-8"><a href="#3-ECMAScript-8" class="headerlink" title="3. ECMAScript 8"></a>3. ECMAScript 8</h2><ul><li><strong>async/await</strong></li><li><strong>shared memory</strong></li><li><strong>atomics</strong></li></ul><blockquote><p><a href="https://d2.naver.com/helloworld/7495331" target="_blank" rel="noopener">참고: SharedArrayBuffer 객체와 Atomics 객체를 사용한 메모리 공유</a></p></blockquote><p>shared memory와 atomics를 알아보기 전에 알아야할 웹 워커 개념</p><h4 id="cf-2-web-worker와-main-thread"><a href="#cf-2-web-worker와-main-thread" class="headerlink" title="cf__2) web worker와 main thread"></a>cf__2) web worker와 main thread</h4><ul><li><p>웹 워커는 스크립트 실행을 메인 쓰레드가 아니라 백그라운드 쓰레드에서 실행할 수 있도록 해주는 기술</p></li><li><p>무거운 작업을 분리된 쓰레드에서 처리할 수 있다.</p></li><li><p>메인 쓰레드(일반적으로 UI 쓰레드)는 멈춤, 속도저하 없이 동작할 수 있게 된다.</p></li><li><p>Worker는 Worker() 생성자를 통해 생성된다.</p></li><li><p>JavaScript 파일에 포함된 코드를 워커스레드에서 실행한다.</p></li><li><p>Worker는 현재 Window와 분리된 DuplicatedWorkerGlobalScope 라는 별도의 Global context에서 동작한다.</p></li><li><p>몇가지 제한사항</p><ul><li>DOM을 직접 다룰 수 없다.</li><li>Window의 기본 메서드와 속성을 사용할 수 없다.</li></ul></li><li><p>웹 워커 종류</p><ol><li><p>Dedicated Worker</p><ul><li><strong>Message System</strong>을 통해 Worker와 메인 스레드 간에 데이터를 교환할 수 있다.<br><code>Worker.postMessage()</code> 메세지 전송<br><code>Worker.onmessage</code> 응답</li></ul></li><li><p>Shared worker <a href="https://developer.mozilla.org/ko/docs/Web/API/SharedWorker" target="_blank" rel="noopener">참고</a></p><ul><li>Shared Worker는 Dedicated worker보다 좀더 복잡성을 가지고 있다.</li><li>윈도우 창이나 iframe, 워커등의 다른 브라우징 컨텍스트에서도 접근이 가능한 특정 종류의 워커를 의미한다. 기존의 다른 종류의 워커들과 다른 전역 스코프를 갖는 인터페이스를 구현합니다. (SharedWorkerGlobalScope)</li><li>Shared Worker는 웹 어플리케이션 사이의 Proxy Server와 브라우저로서 역할을 하며 (만약 가능하다면)통신을 구축한다.</li></ul></li><li><p>Chrome Worker </p><ul><li>Chrome Worker는 Firefox에서만 사용가능한 worker유형</li></ul></li><li><p>Audio Workers</p><ul><li>직접적인 오디오 처리를 web worker에서 처리할 수 있도록 해준다.</li></ul></li></ol></li></ul><blockquote><p><a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javaScript-execution?hl=ko#%EB%B3%B5%EC%9E%A1%EC%84%B1_%EA%B0%90%EC%86%8C_%EB%98%90%EB%8A%94_web_workers_%EC%82%AC%EC%9A%A9" target="_blank" rel="noopener">참고1: 복잡성 감소 또는 Web Workers 사용</a><br><a href="https://developer.mozilla.org/ko/docs/Web/API/Web_Workers_API" target="_blank" rel="noopener">참고2: Web Workers API</a></p></blockquote><h4 id="shared-memory와-atomics"><a href="#shared-memory와-atomics" class="headerlink" title="shared memory와 atomics"></a>shared memory와 atomics</h4><ul><li><p>웹 어셈블리어에서 적극적으로 사용 중.</p></li><li><p>웹 워커는 멀티 스레드 패턴이 아닌 워커 스레드 패턴</p><ul><li>컨텍스트를 하나만 가지기 때문에 동기화 문제가 일어나지 않는 패턴이다.</li><li>밖의 쓰레드는 언제나 별도의 작업을 한 이후에 싱크로 문제되지 않는 새 객체를 전달해야한다.</li><li>새 객체로 공유하기 때문에 동기화 문제가 일어나지 않는다. </li></ul></li><li><p>웹워커가 만들어졌을 때는 스레드를 여러개 지원하지만<br>싱글 스레드라는 컨텍스트를 깨먹지 않도록 설계되었다.</p></li><li><p>문제점은 느리다. </p><ul><li>예를들어 큰 용량의 이미지 처리를 위해서 이미지를 복제하여 넘길 때 넘기는 것 부터가 부하이다.</li><li>복제를 하지 않고 워커스레드에 넘길까.</li><li>메인스레드에 있는 값을 share하여 해결한다. : sharedMemory</li></ul></li><li><p>당연하게도 <strong>동시성 문제</strong>가 생긴다.</p><ul><li>같은 shared memory를 보는 스레들들에서 지울수도, 수정하려고하고, 읽으려고 ..</li><li>이 문제를 해결하기 위해 atomics는 lock을 걸어준다.</li><li>자바의 lock 기능에 비해서는 <strong>저수준의 기능</strong>이다.</li></ul></li></ul><a name="es9"><h2 id="4-ECMAScript-9"><a href="#4-ECMAScript-9" class="headerlink" title="4. ECMAScript 9"></a>4. ECMAScript 9</h2><ul><li>object 해체 </li><li><strong>asynchronous iterators</strong><ul><li>generator의 장점과 async/await의 장점을 합쳐서<br>비동기적인 코루틴을 만들 수 있는 구조를 제공한다.</li><li>현대의 크롬 브라우저는 이 기능을 사용하기 위한 성능 최적화를 이미 구현해 두었다.</li></ul></li></ul><a name="es10"><h2 id="5-ECMAScript-10"><a href="#5-ECMAScript-10" class="headerlink" title="5. ECMAScript 10"></a>5. ECMAScript 10</h2><ul><li><p>Optional catch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125; <span class="keyword">catch</span>(err)&#123;</span><br><span class="line">  <span class="comment">// 새로운 어휘공간으로 되어서 err를 사용할 수 있도록했지만</span></span><br><span class="line">  <span class="comment">// 불필요한 컨텍스트</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="comment">// err 인자 없이 사용가능</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><a name="es11"><h2 id="6-Stage3-ECMAScript-11"><a href="#6-Stage3-ECMAScript-11" class="headerlink" title="6. Stage3 (ECMAScript 11)"></a>6. Stage3 (ECMAScript 11)</h2><p>아래 것은 크롬이 이미 구현</p><ul><li>BigInt</li><li>globalThis</li><li><strong>top level await</strong></li><li>class field</li><li>private field (<code>#</code>을 붙여서 사용한다.)</li><li>private method (<code>#</code>을 붙여서 사용한다.)</li></ul><hr><ul><li>Optional chaining <code>?.</code><ul><li>null로 통일 가능. 안전한 기능</li></ul></li><li>nullish coalescing <code>??</code><ul><li>앞의 값이 null일때 ??쓰면 뒤의 값을 사용</li></ul></li><li>WeakReference</li></ul><p>자바스크립트는 현대 나온 언어 중에 가장 어렵다. 현대 모든 언어 중에 제일 장점이라고 불리는 것을 연마다 넣고 있다. 언어에서 어려운 개념을 다 넣고 있다.. 광범위한 언어적 지식을 요구하고 있다.</p><hr><hr><p><strong>참고자료</strong></p><ol><li><a href="https://gomugom.github.io/is-class-only-a-syntactic-sugar/" target="_blank" rel="noopener">ES6 Class는 단지 prototype 상속의 문법설탕일 뿐인가?</a></li><li><a href="https://d2.naver.com/helloworld/7495331" target="_blank" rel="noopener">SharedArrayBuffer 객체와 Atomics 객체를 사용한 메모리 공유</a></li><li><a href="https://github.com/tc39/proposals" target="_blank" rel="noopener">ECMAScript 발제 레포</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="noopener">변수에 배열의 나머지를 할당하기</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/API/SharedWorker" target="_blank" rel="noopener">SharedWorker</a></li><li><a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javaScript-execution?hl=ko#%EB%B3%B5%EC%9E%A1%EC%84%B1_%EA%B0%90%EC%86%8C_%EB%98%90%EB%8A%94_web_workers_%EC%82%AC%EC%9A%A9" target="_blank" rel="noopener">복잡성 감소 또는 Web Workers 사용</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/API/Web_Workers_API" target="_blank" rel="noopener">Web Workers API</a></li></ol></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;코드스피츠 85에서는 &lt;code&gt;none blocking&lt;/code&gt;에 대한 이야기와&lt;br&gt;자바스크립트를 짜는 근본적인 방법에 대한 고찰을 이야기해본다.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;🌕🌑🌑&lt;/p&gt;
&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2019 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2019-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="codeSpitz" scheme="http://feel5ny.github.io/tags/codeSpitz/"/>
    
  </entry>
  
  <entry>
    <title>WIP_웹 로봇</title>
    <link href="http://feel5ny.github.io/2019/10/21/HTTP_009/"/>
    <id>http://feel5ny.github.io/2019/10/21/HTTP_009/</id>
    <published>2019-10-21T14:23:55.000Z</published>
    <updated>2019-11-02T06:03:30.975Z</updated>
    
    <content type="html"><![CDATA[<p>웹 로봇(스스로 움직이는 사용자 에이전트)에 대해서 알아본다.<br>웹 로봇은 사람과의 상호작용 없이 연속된 웹 트랜잭션들을 자동으로 수행하는 소프트웨어 프로그램이다.</p><ul><li>방식에 따라 <strong>크롤러, 스파이더, 웜, 봇</strong> 등 각양각색의 이름으로 불린다.</li></ul><blockquote><p>주식 그래프 봇 (매분 HTTP GET 요청을 보내 얻은 데이터로 그래프 생성)<br>웹 통계조사 로봇 (통계 정보를 수집)<br>검색엔진 로봇 (모든 문서를 수집)<br>가격 비교 로봇 (상품 가격 DB를 만들기 위해 온라인 쇼핑몰 웹페이지 수집)</p></blockquote><a name="crawl"><h1 id="1-크롤러와-크롤링"><a href="#1-크롤러와-크롤링" class="headerlink" title="1. 크롤러와 크롤링"></a>1. 크롤러와 크롤링</h1><ul><li>웹 크롤러는<ol><li>먼저 웹페이지를 한 개 가져오고,</li><li>그 다음 그 페이지가 가리키는 모든 웹페이지를 가져오고,</li><li>다시 그 페이지를 가리키는 모든 웹페이지들을 가져온다.</li></ol></li><li>이런 <strong>재귀적으로</strong> 반복하는 방식으로 웹을 순회하는 로봇이다.</li><li><strong>크롤러 (스파이더)</strong>: 웹 링크를 재귀적으로 따라가는 로봇<ul><li>HTML 하이퍼링크로 만들어진 웹을 따라 <strong>기어다니기(crawl)</strong> 때문이다.</li></ul></li><li><strong>인터넷 검색엔진</strong>은 웹을 돌아다니면서 만나는 모든 문서를 끌어오기 위해 크롤러를 사용한다.</li></ul><p>그렇다면 크롤러들은 어떻게 동작할까?</p><h2 id="1-1-시작은-‘루트-집합’에서-🏃"><a href="#1-1-시작은-‘루트-집합’에서-🏃" class="headerlink" title="1.1 시작은 ‘루트 집합’에서 🏃"></a>1.1 시작은 ‘루트 집합’에서 🏃</h2><ul><li>출발지점을 주어야한다.</li><li><strong>루트 집합 (root set)</strong>: 크롤러가 방문을 시작하는 URL들의 초기 집합</li><li>루트 집합을 고를때,<br>모든 링크를 크롤링하면서 관심있는 웹페이지들을 <strong>많이 가져올 수 있도록</strong>,URL들을 선택해야한다</li></ul><img src="/images/2019/33/02.png"><ul><li>S,T,U는 아직 누구도 찾아내지 못한 것들일 것이다. 혹은 정말 오래되었거나</li><li>오직 A,G,S가 루트집합에 있기만 하면 모든 페이지에 도달할 수 있다.</li></ul><ol><li><strong>좋은 루트 집합</strong><ul><li>크고 인기 있는 웹사이트 (like 유투브)</li><li>새로 생성된 페이지들의 목록</li><li>자주 링크되지 않는 잘 알려져 있지 않은 페이지들의 목록</li></ul></li></ol><ol start="2"><li>페이지들을 <strong>추가하는 기능</strong>을 제공<ul><li><strong>대규모 크롤러 제품</strong>들은 (인터넷 검색엔진에서 쓰이는 것과 같은)<br>루트 집합에 새 페이지나 사용자들에게 잘 알려져 있지 않은 페이지들을 <strong>추가하는 기능</strong>을 제공한다.</li><li>이 루트집합은 시간이 지남에 따라 성장하며</li><li>새로운 크롤링을 위한 seed 목록이 된다.</li></ul></li></ol><h2 id="1-2-링크-추출과-상대-링크를-절대링크로"><a href="#1-2-링크-추출과-상대-링크를-절대링크로" class="headerlink" title="1.2 링크 추출과 상대 링크를 절대링크로"></a>1.2 링크 추출과 상대 링크를 절대링크로</h2><ul><li>크롤러는 <ol><li>검색한 각 페이지 안에 들어있는 URL 링크들을 파싱해서</li><li>크롤링할 페이지들의 목록에 추가해야한다.</li></ol></li><li>크롤러가 크롤링을 진행하면서 탐색해야 할 새 링크를 발견함에 따라 =&gt; 이 목록은 보통 급속히 확장된다.</li><li>상대 링크를 발견할 경우 절대 링크로 변활할 필요가 있다.</li></ul><h2 id="1-3-순환-피하기"><a href="#1-3-순환-피하기" class="headerlink" title="1.3 순환 피하기"></a>1.3 순환 피하기</h2><ul><li>로봇이 웹을 크롤링할때, 루프나 순환에 빠지지 않도록 조심해야한다.</li><li>로봇들은 순환을 피하기 위해 반드시 그들이 어디를 방문했는지 알아야 한다.</li></ul><img src="/images/2019/33/03.png"><h3 id="1-3-1-순환이-해로운-이유"><a href="#1-3-1-순환이-해로운-이유" class="headerlink" title="1.3.1 순환이 해로운 이유"></a>1.3.1 순환이 해로운 이유</h3><p>순한은 크롤러에게 해롭다.</p><ol><li>같은 페이지들을 반복해서 가져오는데 모든 <strong>시간을 허비</strong>하게 만들 수 있다.<ul><li>네트워크 대역폭을 다 차지하고 때문에<br><strong>그 어떤 페이지도 가져올 수 없게 되어버릴 수 있다.</strong></li></ul></li><li>웹 서버에 부담이 된다. <ul><li>크롤러의 네트워크 접근 속도가 빠르다면,<br>웹사이트를 압박하여 어떤 <strong>실제 사용자도 사이트에 접근할 수 없도록 막아버리게 될 수도 있다.</strong></li></ul></li><li>루프 자체가 문제가 되지 않더라도, 크롤러는 많은 수의 <strong>중복된 페이지들을 가져오게 된다.</strong><ul><li>dups</li><li>크롤러의 어플리케이션은 자신을 쓸모없게 만드는 중복된 콘텐츠로 넘쳐나게 될 것이다.</li></ul></li></ol><h3 id="1-3-2-빵순환을-피하기-위해-방문을-기록-부스러기의-흔적-Breadscrumb"><a href="#1-3-2-빵순환을-피하기-위해-방문을-기록-부스러기의-흔적-Breadscrumb" class="headerlink" title="1.3.2 빵순환을 피하기 위해 방문을 기록 (부스러기의 흔적 Breadscrumb)"></a>1.3.2 빵순환을 피하기 위해 방문을 기록 (부스러기의 흔적 Breadscrumb)</h3><ul><li>방문한 곳을 지속적으로 추적하는 것은 쉽지 않다.</li><li>URL이 상당히 많기 때문에, 어떤 URL을 방문했는지 빠르게 판단하기 위해서는<br>복잡한 자료 구조를 사용할 필요가 있다.<ul><li>자료구조는 속도와 메모리 사용 면에서 효과적이어야 한다.</li><li>검색 트리나 해시 테이블을 필요로 할 것이다.</li></ul></li></ul><p>트리와 해시테이블 / 느슨한 존재 비트맵 / 체크포인트 / 파티셔닝</p><ol><li><p>트리와 해시테이블</p><ul><li>방문한 URL을 추적하기 위해 검색 트리나 해시 테이블을 사용했을 수도 있다.</li></ul></li><li><p>느슨한 존재 비트맵 Lossy presence bit maps</p><blockquote><p>모르겠다.<br>url을 숫자형태의 비트로 만들어서 저장하고, 같은 존재비트가 있으면 이미 크롤링되었다고 간주하는 듯</p></blockquote><ul><li>느슨한 자료구조</li><li>각 URL은 해시 함수에 의해 고정된 크기의 숫자로 변환되고,<br>배열 안에 대응하는 존재 비트를 갖는다. presence bit</li><li>URL이 크롤링 되었을 때, 해당하는 존재 비트가 만들어진다.<br>존재비트가 이미 존재한다면 크롤러는 그 URL을 이미 크롤링 되었다고 간주한다.</li></ul></li><li><p>체크포인트 checkpoint</p><ul><li>로봇 프로그램이 갑작스럽게 중단될 경우를 대비해,<br>방문한 URL의 목록이 디스크에 저장되었는지 확인한다.</li></ul></li><li><p>파티셔닝 Partitioning</p><ul><li>웹이 성장하면서 한대의 컴퓨터에서 하나의 로봇이 크롤링을 완수하는 것이 불가능</li><li>로봇들이 서로 도와 웹을 크롤링한다.</li><li>개별 로봇들은 URL들을 이리저리 넘겨주거나,<br>오동작하는 동료를 도와주거나,<br>그 외의 이유로 그들의 활동을 조정하기 위해 커뮤니케이션을 한다.</li></ul></li></ol><h2 id="1-4-URL-정규화"><a href="#1-4-URL-정규화" class="headerlink" title="1.4 URL 정규화"></a>1.4 URL 정규화</h2><h3 id="별칭-alias-과-로봇-순환"><a href="#별칭-alias-과-로봇-순환" class="headerlink" title="별칭(alias)과 로봇 순환"></a>별칭(alias)과 로봇 순환</h3><ul><li>올바른 자료 구조를 갖추었더라도, URL이 별칭을 가질 수 있는 이상<br>어떤 페이지를 이전에 방문했었는지 말해주는 게 쉽지 않을 때도 있다.</li><li>한 URL이 또 다른 URL에 대한 별칭이라면,<br>그 둘이 서로 달라 보이더라도 사실은 같은 리소스를 가리키고 있다.</li></ul><p><strong>같은 문서를 가리키는 다른URL들</strong></p><ol><li>기본 포트가 80번일 때<ul><li><a href="http://www.foo.com/bar.html" target="_blank" rel="noopener">http://www.foo.com/bar.html</a></li><li><a href="http://www.foo.com:80/bar.html" target="_blank" rel="noopener">http://www.foo.com:80/bar.html</a></li></ul></li><li>이스케이프 문자가 원래 문자와 같을때<ul><li><a href="http://www.foo.com/~fred" target="_blank" rel="noopener">http://www.foo.com/~fred</a></li><li><a href="http://www.foo.com/%7fred" target="_blank" rel="noopener">http://www.foo.com/%7fred</a></li></ul></li><li>태그에 따라 페이지가 바뀌지 않을 때<ul><li><a href="http://www.foo.com/x.html#early" target="_blank" rel="noopener">http://www.foo.com/x.html#early</a></li><li><a href="http://www.foo.com/x.html#middle" target="_blank" rel="noopener">http://www.foo.com/x.html#middle</a></li></ul></li><li>서버가 대소문자를 구분하지 않을 때<ul><li><a href="http://www.foo.com/readme.htm" target="_blank" rel="noopener">http://www.foo.com/readme.htm</a></li><li><a href="http://www.foo.com/README.HTM" target="_blank" rel="noopener">http://www.foo.com/README.HTM</a></li></ul></li><li>기본 페이지가 index.html일 때<ul><li><a href="http://www.foo.com/" target="_blank" rel="noopener">http://www.foo.com/</a></li><li><a href="http://www.foo.com/index.html" target="_blank" rel="noopener">http://www.foo.com/index.html</a></li></ul></li><li>도메인과 ip 주소<ul><li><a href="http://www.foo.com/index.html" target="_blank" rel="noopener">http://www.foo.com/index.html</a></li><li><a href="http://209.231.87.45/index.html" target="_blank" rel="noopener">http://209.231.87.45/index.html</a></li></ul></li></ol><h3 id="URL-정규화를-통해-alias-회피"><a href="#URL-정규화를-통해-alias-회피" class="headerlink" title="URL 정규화를 통해 alias 회피"></a>URL 정규화를 통해 alias 회피</h3><ul><li>웹 로봇은 URL들을 표준 형식으로 정규화 함으로써<br>다른 URL과 같은 리소스를 가리키고 있음이 확실한 것들을 미리 제거하려 시도한다.</li></ul><p>WIP..</p><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;웹 로봇(스스로 움직이는 사용자 에이전트)에 대해서 알아본다.&lt;br&gt;웹 로봇은 사람과의 상호작용 없이 연속된 웹 트랜잭션들을 자동으로 수행하는 소프트웨어 프로그램이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;방식에 따라 &lt;strong&gt;크롤러, 스파이더, 웜, 봇
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="robot" scheme="http://feel5ny.github.io/tags/robot/"/>
    
      <category term="web" scheme="http://feel5ny.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>캐시의 원리와 제어방법</title>
    <link href="http://feel5ny.github.io/2019/10/05/HTTP_007-2/"/>
    <id>http://feel5ny.github.io/2019/10/05/HTTP_007-2/</id>
    <published>2019-10-05T14:23:55.000Z</published>
    <updated>2019-10-05T17:43:53.213Z</updated>
    
    <content type="html"><![CDATA[<p><strong>캐시의 원리와 제어방법</strong>을 알아본다.<br>클라가 요청 메시지를 받은 이후의 처리단계를 기준으로 캐시는 어떤 원리로 사본을 관리하는지, 단계별로 어떤 제어가 가능한지를 알아보려고 한다.</p><a name="cacheflow"><h1 id="7-캐시-처리-단계"><a href="#7-캐시-처리-단계" class="headerlink" title="7. 캐시 처리 단계"></a>7. 캐시 처리 단계</h1><p>처리단계는 7단계로 이루어져 있다.</p><h2 id="단계1-요청받기"><a href="#단계1-요청받기" class="headerlink" title="단계1: 요청받기"></a>단계1: 요청받기</h2><p>네트워크 커넥션에서의 활동을 감지하고,<br>들어오는 데이터를 읽어들인다.</p><h2 id="단계2-파싱"><a href="#단계2-파싱" class="headerlink" title="단계2: 파싱"></a>단계2: 파싱</h2><p>요청 메세지를 여러 부분으로 파싱하여<br>헤더 부분을 조작하기 쉬운 자료 구조에 담는다.</p><blockquote><p>캐싱 소프트웨어가 헤더 필드를 처리하고 조작하기 쉽게 만들어 준다.</p></blockquote><h2 id="단계3-검색"><a href="#단계3-검색" class="headerlink" title="단계3: 검색"></a>단계3: 검색</h2><p>URL을 알아내고 그에 해당하는 <strong>로컬 사본이 있는지 검사</strong>한다.</p><ul><li><p>메모리에 저장되어있을 수도 있고,<br>디스크나<br>근처 다른 컴퓨터에 있을 수 있다.</p></li><li><p>문서를 로컬에서 가져올 수 없다면, 상황이나 설정에 따라서<br><strong>원서버나 부모프락시</strong>에서 가져오거나<br>혹은 <strong>실패를 반환한다.</strong></p></li><li><p>캐시 된 객체는 서버 응답 본문과 원서버 응답 헤더를 포함하므로<br>캐시 적중 동안 올바른 서버 헤더가 반환될 수 있다.</p></li><li><p>객체가 얼마나 오랫동안 캐시에 머무르고 있었는지 알려주는 기록이나<br>얼마나 자주 사용되었는지 등에 대한<br>몇몇 메타데이터를 포함한다.</p></li></ul><h2 id="단계4-신선도-검사"><a href="#단계4-신선도-검사" class="headerlink" title="단계4: 신선도 검사"></a>단계4: 신선도 검사</h2><p>HTTP는 캐시가 일정 기간 동안 서버 문서의 사본을 보유할 수 있도록 해준다.</p><ul><li>이 기간 동안 문서는 <strong>신선</strong>한 것으로 간주되고,<br>캐시는 서버와의 접촉 없이 이 문서를 제공할 수 있다.</li><li>너무 오래 갖고 있었다면 그 객체는 <strong>신선하지 않은 것</strong>으로 간주<br>캐시는 그 문서를 제공하기 전에 문서에 어떤 변경이 있었는지 검사하기 위해 서버와 재검사를 해야 한다. (<code>304 Not Modified</code>)</li></ul><p>신선도 검사 알고리즘은 <a href="#algorithm">아래</a>에.</p><h2 id="단계5-응답-생성"><a href="#단계5-응답-생성" class="headerlink" title="단계5: 응답 생성"></a>단계5: 응답 생성</h2><p>캐시 된 응답을 원서버에서 온 것처럼 보이게 하고 싶기 때문에<br>캐시는 <strong>캐시 된 서버 응답 헤더를 토대로 응답 헤더를 생성한다.</strong></p><ul><li>이 기저 헤더들은 캐시에 의해 수정되고 늘어난다.</li></ul><p>캐시는 클라에 맞게 이 헤더를 조정해야 하는 책임이 있다.</p><ul><li>캐시는 캐시 신선도 정보를 삽입하며<br>(<code>Cache-Control</code>, <code>Age</code>, <code>Expires</code> 헤더)</li><li>요청이 프락시 캐시를 거쳐갔을 경우 <code>Via</code> 헤더를 포함시킨다.</li><li><strong>Date 헤더</strong>는 그 객체가 원서버에서 최초로 생겨난 일시이기 때문에 조정해서는 <strong>안된다.</strong></li></ul><h2 id="단계6-전송"><a href="#단계6-전송" class="headerlink" title="단계6: 전송"></a>단계6: 전송</h2><h2 id="단계7-로깅"><a href="#단계7-로깅" class="headerlink" title="단계7: 로깅"></a>단계7: 로깅</h2><p>대부분의 캐시는 로그 파일과 <strong>캐시 사용 통계</strong>를 유지한다.</p><ul><li>각 캐시 트랜잭션이 완료된 후, 캐시는 통계 <strong>캐시 적중과 부적중 횟수</strong>에 대한 통계를 갱신한다.</li><li>로그 파일에 요청 종류, URL 무엇이 일어났는지 알려주는 항목을 추가한다.</li></ul><h3 id="캐시-로그-포맷"><a href="#캐시-로그-포맷" class="headerlink" title="캐시 로그 포맷"></a>캐시 로그 포맷</h3><ul><li>스퀴드 로그 포맷 Squid log format <a href="https://minimonk.net/8809" target="_blank" rel="noopener">참고</a></li><li>넷스케이프 확장 공용 로그 포맷 Netscape extended common log format</li></ul><p>많은 캐시 제품이 커스텀 로그 파일을 허용한다.</p><h2 id="전체-Flow"><a href="#전체-Flow" class="headerlink" title="전체 Flow"></a>전체 Flow</h2><img src="/images/2019/31/flowchart.jpg" style="width:100%"><hr><hr><a name="freshObject"><h1 id="8-사본을-신선하게-유지하기"><a href="#8-사본을-신선하게-유지하기" class="headerlink" title="8. 사본을 신선하게 유지하기"></a>8. 사본을 신선하게 유지하기</h1><p>HTTP는 어떤 캐시가 사본을 갖고 있는지 서버가 기억하지 않더라도,<br>캐시 된 사본이 서버와 충분히 일치하도록 유지할 수 있게 해주는 매커니즘을 갖고 있다.<br>매커니즘은 <strong>문서 만료</strong>와 <strong>서버 재검사</strong>라고 부른다.</p><h2 id="8-1-문서만료"><a href="#8-1-문서만료" class="headerlink" title="8.1 문서만료"></a>8.1 문서만료</h2><p>HTTP는 <code>Cache-Control</code>과 <code>Expires</code>라는 헤더들을 이용하여<br>원서버가 <strong>각 문서에 유효기간을 붙일 수 있게 해준다.</strong></p><ul><li>이 헤더들은 콘텐츠가 얼마나 오랫동안 신선한 상태로 보일 수 있는지 좌우한다.</li></ul><img src="/images/2019/31/01.png" style="width:100%"><ul><li><p>캐시 문서가 만료되기 전에,<br>캐시는 필요하다면 서버와의 접촉 없이 사본을 제공할 수 있다.</p></li><li><p>캐시 된 문서가 만료되면,<br>캐시는 반드시 서버와 문서에 변경된 것이 있는지 검사해야 하며, (변경이 없으면 <code>304 Not Modified</code>)</p><p>만약 그렇다면 신선한 사본을 얻어와야 한다. (새 유효기간과 함께)</p></li></ul><h3 id="유효기간과-나이"><a href="#유효기간과-나이" class="headerlink" title="유효기간과 나이"></a>유효기간과 나이</h3><p><code>Expires</code>와 <code>Cache-Control:max-age</code> 헤더는 기본적으로 같은 일을 하지만,<br>절대 시간은 컴퓨터의 시계가 올바르게 맞추어져 있을 것을 요구한다.</p><h4 id="Cache-Control-max-age"><a href="#Cache-Control-max-age" class="headerlink" title="Cache-Control:max-age"></a>Cache-Control:max-age</h4><ul><li><strong>max-age</strong> 값은 문서의 최대 나이를 정의한다.</li><li>최대 나이는<br>문서가 처음 생성된 이후부터,<br>제공하기엔 더 이상 신선하지 않다고 간주될 때까지<br>경과한 시간의 합법적인 최댓값(초단위)이다.</li><li>현재시간과 expires 시간의 남은 시간을 나이로 측정한다.</li></ul><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p>절대 유효기간을 명시한다.<br>만약 유효기간이 경과했다면, 그 문서는 더 이상 신선하지 않다.</p><h2 id="8-2-서버-재검사-reValidation"><a href="#8-2-서버-재검사-reValidation" class="headerlink" title="8.2 서버 재검사 reValidation"></a>8.2 서버 재검사 reValidation</h2><ul><li><p>캐시 된 문서가 만료되었다는 것은,<br>그 문서가 원서버에 현재 존재하는 것과 실제로 다르다는 것을 의미하지는 않으며,<br><strong>이제 검사할 시간이 되었음</strong>을 뜻한다.</p></li><li><p>캐시가 원서버에게 문서가 변경되었는지의 여부를 묻는 것</p></li><li><p>콘텐츠가 변경되었다면: </p><ol><li>캐시는 그 문서의 새로운 사본을 가져와 </li><li>새로 저장한 뒤 </li><li>클라에게도 보낸다.</li></ol></li><li><p>콘텐츠가 변경되지 않았다면:</p><ol><li>캐시는 새 만료일을 포함한 새 헤더들만 가져와서</li><li>캐시 안의 헤더들을 갱신한다.</li></ol></li></ul><p>캐시는 문서의 신선도를 매 요청마다 검증할 필요가 없다.</p><ul><li>문서가 만료되었을 때, 한 번만 서버와 재검사하면 된다.</li><li>신선하지 않은 콘텐츠는 제공하지 않으면서도,<br>서버의 트래픽을 절약하고 사용자 응답 시간을 개선한다.</li></ul><p>HTTP 프로토콜은 캐시가 다음 중 하나를 반환할 것을 요구한다.</p><ul><li>충분히 신선한 캐시 된 사본</li><li>원서버와 재검사되었기 때문에, 충분히 신선하다고 확신할 수 있는 캐시 된 사본</li><li>에러메시지 (재검사헤야 하는 원서버가 죽을 경우)</li><li>경고 메세지가 부착된 캐시 된 사본(부정확시)</li></ul><h3 id="조건부-메서드와-재검사"><a href="#조건부-메서드와-재검사" class="headerlink" title="조건부 메서드와 재검사"></a>조건부 메서드와 재검사</h3><p>HTTP의 조건부 메서드는 재검사를 효율적으로 만들어준다.<br>HTTP는 캐시가 서버에게 <strong>조건부 GET</strong>이라는 요청을 보낼 수 있도록 해준다.</p><ul><li>이 요청은 서버가 갖고 있는 문서가 캐시가 갖고 있는 것과 다를 경우에만<br>객체 본문을 보내달라고 하는 것이다.</li><li>신선도 검사와 객체를 받아오는 것은 하나의 조건부 GET으로 결합된다.</li><li>조건부 GET은 GET 요청 메세지에 특별한 <strong>조건부 헤더</strong>를 추가함으로써 시작된다.</li><li>웹 서버는 <strong>조건이 참인 경우에만 객체를 반환한다.</strong></li><li>HTTP는 캐시 재검사 시 가장 유용한 2가지 조건부 요청 헤더를 정의한다.<ul><li>If-Modified-Since</li><li>If-None-Match</li></ul></li></ul><img src="/images/2019/31/04.png" style="width:100%"><h4 id="1-If-Modified-Since-날짜-재검사"><a href="#1-If-Modified-Since-날짜-재검사" class="headerlink" title="1. If-Modified-Since: 날짜 재검사"></a>1. <code>If-Modified-Since</code>: 날짜 재검사</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT</span><br></pre></td></tr></table></figure><ul><li><p>줄여서 IMS 요청으로 불린다.</p></li><li><p>서버에게 리소스가 특정 날짜 이후로 변경된 경우에만 요청한 본문을 보내달라고 한다.</p></li><li><p>만약 문서가 주어진 날짜 이후에 변경되지 않았다면, 조건은(If-Modified-Since) 거짓이고<br>서버는 <code>304 Not Modified</code> 응답메세지를 클라에게 돌려준다.</p></li><li><p>효율을 위해 본문은 보내지 않는다.</p></li><li><p>응답 헤더들을 포함하지만, 원래 돌려줘야 할 것에서 갱신이 필요한 것만을 보내준다. (보통 새 만료 날짜만 보내준다.)</p></li></ul><p><strong>If-Modified-Since 헤더는 Last-Modified 헤더와 함께 동작한다.</strong></p><ul><li><p>원서버는 제공하는 문서에 최근 변경 일시를 붙인다.</p><blockquote><p>마지막 배포 시간이 Last-Modified로 내려온다.</p></blockquote></li><li><p>캐시가 캐시 된 문서를 재검사하려고 할때,<br>캐시 된 사본이 마지막으로 수정된 날짜가 담긴 If-Modified-Since헤더를 포함한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If-Modified-Since: &lt;캐시 된 마지막 수정일&gt;</span><br></pre></td></tr></table></figure></li><li><p>몇몇 웹서버는 If-Modified-Since를 실제 날짜 비교로 구현하지 않는다.</p></li><li><p>대신 IMS 날짜와 최근 변경일 간의 문자열 비교를 수행한다.</p><ul><li>정확히 이 날짜에 마지막 변경이 일어난 것이 아니라면 이라는 의미로 동작한다.</li></ul></li><li><p>GET 또는 HEAD에서만 사용 가능하다.</p></li><li><p>일반적인 사용예) ETag가 없는 캐시 된 엔티티로 업데이트한다.</p></li><li><p>If-None-Match와 함께 사용 시 <strong>무시된다</strong>.</p></li></ul><h4 id="2-If-None-Match-엔터티-태그-재검사"><a href="#2-If-None-Match-엔터티-태그-재검사" class="headerlink" title="2. If-None-Match: 엔터티 태그 재검사"></a>2. <code>If-None-Match</code>: 엔터티 태그 재검사</h4><p>서버는 무서에 대한 일련번호와 같이 동작하는 특별한 태그를 제공할 수 있다.(ETag)<br>캐시 된 태그가 서버에 있는 문서의 태그와 다를 때만 요청을 처리한다.</p><p>최근 변경일시 재검사가 행해지기 어려운 상황이 있다.</p><ol><li>일정 시간 간격으로 다시 쓰여지지만, 같은 데이터를 포함한다. (내용변화가 없음)</li><li>어떤 문서들의 변경은 다시 읽어들이기엔 사소한 것 (철자나 주석)</li><li>어떤 서버들은 그들이 갖고 있는 페이지에 대한 최근 변경 일시를 정확하게 판별할 수 없다.</li><li>1초보다 작은 간격으로 갱신되는 문서를 제공하는 서버들에게는,<br>변경일에 대한 1초의 정밀도는 충분하지 않을 수 있다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">조건부 요청</span><br><span class="line">GET /index.html HTTP/1.0</span><br><span class="line">If-None-Match: &quot;v2.6&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">응답</span><br><span class="line">HTTP/1.0 304 Not Modified</span><br><span class="line">Date: Wed, 03 Jul 2002, 19:18:23 GMT</span><br><span class="line">ETag: &quot;v2.6&quot;</span><br><span class="line">Expires: Fri, 05 Jul 2002, 05:00:00 GMT</span><br></pre></td></tr></table></figure><ul><li>만약 서버의 엔터티 태그가 변경되었다면(v3.0)<br>서버는 200 OK 응답으로 새 콘텐츠를 새 ETag와 함께 반환했을 것이다.</li></ul><img src="/images/2019/31/02.png" style="width:100%"><h3 id="약한-검사기와-강한-검사기"><a href="#약한-검사기와-강한-검사기" class="headerlink" title="약한 검사기와 강한 검사기"></a>약한 검사기와 강한 검사기</h3><ul><li>캐시는 캐시 된 버전이 서버가 갖고 있는 것에 대해 최신인지 확인하기 위해 엔터티 태그를 사용한다.</li><li>엔터티 태그와 최근 변경일시는 둘 다 캐시 검사기다.</li><li>서버는 때때로 모든 캐시 된 사본을 무효화시키지 않고,<br>문서를 살짝 고칠 수 있도록 허용하고 싶은 경우가 있다.</li><li>HTTP/1.1은 콘텐츠가 조금 변경되었더라도, <strong>그 정도면 같은 것</strong>이라고 서버가 주장할 수 있도록 해주는 <strong>약한 검사기</strong>를 지원한다.</li></ul><p>강한 검사기는 콘텐츠가 바뀔 때마다 바뀐다.<br>약한 검사기는 어느 정도 콘텐츠 변경을 허용하지만, 콘텐츠의 중요한 의미가 변경되면 함께 변경된다.</p><ul><li>서버는 <code>W/</code> 접두사로 약한 검사기를 구분한다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ETag: W/&quot;v2.6&quot;</span><br><span class="line">If-None-Match: W/&quot;v2.6&quot;</span><br></pre></td></tr></table></figure><img src="/images/2019/31/03.png" style="width:100%"><h3 id="언제-엔터티-태그를-사용하고-언제-Last-Modified-일시를-사용하는가"><a href="#언제-엔터티-태그를-사용하고-언제-Last-Modified-일시를-사용하는가" class="headerlink" title="언제 엔터티 태그를 사용하고 언제 Last-Modified 일시를 사용하는가"></a>언제 엔터티 태그를 사용하고 언제 Last-Modified 일시를 사용하는가</h3><ul><li>HTTP/1.1 클라는 만약 서버가 엔터티 태그를 반환했다면,<br>반드시 엔터티 태그 검사기를 사용해야 한다.</li><li>Last-Modified 값만을 반환했다면<br>클라는 If-Modified-Since 검사를 사용할 수 있다.</li><li>만약 HTTP/1.1 캐시나 서버가 If-Modified-Since와 엔터티 태그, 조건부 헤더를 모두 받았다면,<br>요청의 모든 조건부 헤더 필드의 조건에 부합해야 200을 반환해야 한다.</li></ul><hr><hr><a name="control"><h1 id="9-캐시-제어"><a href="#9-캐시-제어" class="headerlink" title="9. 캐시 제어"></a>9. 캐시 제어</h1><p>아래는 HTTP는 문서가 얼마나 오랫동안 캐시될 수 있게 할 것인지,<br>서버가 설정할 수 있는 여러 가지 방법이다.</p><ol><li><code>Cache-control: no-cache</code></li><li><code>Cache-control: no-store</code></li><li><code>Cache-control: must-revalidate</code></li><li><code>Cache-Control: max-age=&lt;seconds&gt;</code></li><li><code>Cache-control: s-maxage=&lt;seconds&gt;</code></li><li><code>Expires</code> 날짜 헤더를 응답에 첨부할 수 있다.</li><li>아무 만료 정보도 주지 않고,<br>캐시가 스스로 체험적인(휴리스틱 heuristic) 방법으로 결정하게 할 수 있다.</li></ol><h2 id="9-1-no-cahce와-no-store-응답-헤더"><a href="#9-1-no-cahce와-no-store-응답-헤더" class="headerlink" title="9.1 no-cahce와 no-store 응답 헤더"></a>9.1 no-cahce와 no-store 응답 헤더</h2><p>캐시가 검증되지 않은 캐시 된 객체로 응답하는 것을 막는다.</p><ol><li><code>Cache-control: no-store</code>: 캐시가 그 응답의 사본을 만드는 것을 금지한다.</li><li><code>Cache-control: no-cache</code>: 로컬 캐시 저장소에 저장될 수 있다. 다만, 먼저 서버와 재검사를 하지 않고서는 캐시에서 클라로 제공될 수 없을 뿐이다.<blockquote><p>Do Not Serve From Cache Without Revalidation (재검사 없이 캐시에서 제공하지 마라)</p></blockquote></li><li><code>Pragma: no-cache</code>: HTTP/1.0+ 하위 호환성을 위해 HTTP/1.1에 포함되어있다. 웬만하면 <code>Cache-control: no-store</code></li></ol><h2 id="9-2-Max-Age-응답-헤더"><a href="#9-2-Max-Age-응답-헤더" class="headerlink" title="9.2 Max-Age 응답 헤더"></a>9.2 Max-Age 응답 헤더</h2><ul><li><code>max-age</code> 신선하다고 간주되었던 문서가 서버로부터 온 이후로 흐른 시간</li><li>초로 나타낸다.</li><li><code>s-maxage</code> 헤더는 공유된 캐시에만 적용된다.</li><li>서버는 maximum aging(최대 나이먹음)을 0으로 설정함으로써,<br>캐시가 매 접근마다 문서를 캐시하거나 리프레시 하지 않도록 요청할 수 있다.</li></ul><h2 id="9-3-Expires-응답헤더"><a href="#9-3-Expires-응답헤더" class="headerlink" title="9.3 Expires 응답헤더"></a>9.3 Expires 응답헤더</h2><ul><li>더 이상 사용하지 않기를 권하는 Expires 헤더는 실제 만료 날짜를 명시한다.</li><li>HTTP 설계자들은 많은 서버가 동기화되어있지 않거나<br>부정확한 시계를 갖고 있기 때문에,<br>만료를 절대 시각 대신 경과된 시간으로 표현하는 것이 낫다고 판단했다.</li><li>신선도 수명의 근삿값은 만료일과 생성일의 초 단위 시간차를 계산하여 얻을 수 있다. </li></ul><h2 id="9-4-Must-Revalidate-응답-헤더"><a href="#9-4-Must-Revalidate-응답-헤더" class="headerlink" title="9.4 Must-Revalidate 응답 헤더"></a>9.4 Must-Revalidate 응답 헤더</h2><ul><li>캐시는 성능을 개선하기 위해 신선하지 않은(만료된) 객체를 제공하도록 설정될 수 있다.</li><li>만약 캐시가 만료 정보를 엄격하게 따르길 원한다면 must-revalidate 응답 헤더</li><li>캐시가 이 객체의 신선하지 않은 사본을<br><strong>원서버와의 최초의 재검사 없이는 제공해서는 안됨을 의미한다.</strong></li><li>만약 캐시가 must-revalidate 신선도 검사를 시도했을 때 원서버가 사용할 수 없는 상태라면<br>캐시는 반드시 <code>504 Gateway Timeout error</code>를 반환해야 한다.</li></ul><h2 id="9-5-휴리스틱-만료"><a href="#9-5-휴리스틱-만료" class="headerlink" title="9.5 휴리스틱 만료"></a>9.5 휴리스틱 만료</h2><ul><li>만약 응답이 Cache-control:max-age 헤더나 expires 헤더들을 포함하지 않고 있다면<br>캐시는 경험적인 방법으로 heuristic 최대 나이를 게산할 것이다.</li><li>계산 결과, 얻은 최대 나이 값이 24시간보다 크다면,<br>Heuristic Expiration 경고(경고13) 헤더가 응답 헤더에 추가되어야 한다.<ul><li>이 경고 정보를 사용자가 볼 수 있게 해주는 브라우저는 없다.</li></ul></li></ul><h3 id="LM-last-modified-인자-알고리즘-휴리스틱-만료-알고리즘"><a href="#LM-last-modified-인자-알고리즘-휴리스틱-만료-알고리즘" class="headerlink" title="LM(last-modified) 인자 알고리즘 (휴리스틱 만료 알고리즘)"></a>LM(last-modified) 인자 알고리즘 (휴리스틱 만료 알고리즘)</h3><ul><li>문서가 최근 변경일시를 포함하고 있다면 사용할 수 있다.</li><li>LM 인자 알고리즘은 최근 변경일시를 문서가 얼마나 자주 바뀌는지에 대한 추정에 사용한다.</li></ul><ol><li>캐시 된 문서가 마지막으로 변경된 것이 엄청 예전이라면,<br>=&gt; 안정적인 문서일 것이다<br>=&gt; 갑자기 바뀔 일을 크지 않을 것이고<br>=&gt; 캐시에 더 오래 보관하고 있어도 안전하다.</li><li>캐시 된 문서가 최근 변경되었다면<br>=&gt; 자주 변경될 것이고,<br>=&gt; 서버와 재검사하기 전까지 짧은 기간 동안만 캐시해야 한다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$마지막_수정이후로_경과한_시간 = max(0, $서버의_Date - $서버의_Last_Modified)</span><br><span class="line">$서버_신선도_한계 = int($마지막_수정_이후로_경과한_시간 * $lm_인자)</span><br></pre></td></tr></table></figure><ul><li>일반적으로 사람들은 휴리스틱 신선도 유지 기간에 상한을 설정하여<br>지나치게 커지는 것을 막는다.</li><li>보통 1주일로 하지만, 보수적인 사이트는 <strong>하루</strong>도 설정한다.</li><li>캐시는 일반적으로 신선도에 대한 아무런 단서가 없는 문서에 대해 기본 신선도 유 지기간을 설정한다.<br>보통 한 시간이나 하루로.</li><li>더 보수적인 캐시는 보통 이 휴리스틱 문서들에 대해 0의 신선도 수명을 설정하여<br>캐시가 클라에게 데이터를 제공할 때마다 아직 신선한지 검사하도록 강제한다.</li></ul><h2 id="9-6-클라-신선도-제약"><a href="#9-6-클라-신선도-제약" class="headerlink" title="9.6 클라 신선도 제약"></a>9.6 클라 신선도 제약</h2><ul><li>웹브라우저는 브라우저나 프락시 캐시의 신선하지 않은 콘텐츠를 강제로 갱신시켜주는 리프레시나 리로드 버튼을 갖고 있다.</li><li>리프레시 버튼은 Cache-control 요청 헤더가 추가된 GET 요청을 발생시켜서,<br>강제로 재검사하거나 서버로부터 콘텐츠를 무조건 가져온다.</li></ul><p>클라는 Cache-control 요청 헤더를 사용하여 만료 제약을 엄격하게 하거나, 느슨하게 할 수 있다.</p><ul><li>성능, 신뢰성, 비용 개선을 위한 절충안으로 신선도 요구 사항을 느슨하게 하고자 할 수 있다.</li></ul><ol><li><code>Cache-Control: max-stale[=&lt;seconds&gt;]</code>: 클라이언트가 캐시의 만료 시간을 초과한 응답을 받아들일지를 나타낸다. 초가 지정되면, 클라는 만료시간이 그 매개변수 값만큼 지난 문서도 받아들인다.</li><li><code>Cache-Control: min-fresh=&lt;seconds&gt;</code>: 클라는 지금으로부터 s초 후까지 신선한 문서만을 받아들인다.</li><li><code>Cache-Control: max-age=&lt;seconds&gt;</code>: s초보다 오랫동안 캐시 된 문서를 반환할 수 없다.</li><li><code>Cache-control: no-cache</code>: 캐시 된 리소스는 재검사하기 전에는 받아들이지 않을 것이다.</li><li><code>Cache-control: no-store</code>: 저장소에서 문서의 흔적을 빨리 삭제해야 한다. 문서에는 민감한 정보가 포함되어 있기 때문</li><li><code>Cache-control: only-if-cached</code>: 클라는 캐시에 들어있는 사본만을 원한다.</li></ol><hr><hr><a name="algorithm"><h1 id="10-자세한-알고리즘"><a href="#10-자세한-알고리즘" class="headerlink" title="10. 자세한 알고리즘"></a>10. 자세한 알고리즘</h1><h3 id="나이와-신선도-수명"><a href="#나이와-신선도-수명" class="headerlink" title="나이와 신선도 수명"></a>나이와 신선도 수명</h3><ul><li><p>캐시 된 사본의 나이가 신선도 수명보다 작으면 사본은 제공해주기에 충분히 신선한 것이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$충분히_신선한가 = $나이 &lt; $신선도_수명</span><br></pre></td></tr></table></figure></li><li><p>문서의 나이: 서버가 문서를 보낸 후(혹은 서버가 마지막으로 재검사한 후) 그 문서가 나이를 먹은 시간의 총합이다.</p></li><li><p>캐시는 문서 응답이 어떻게 왔는지 모르기 때문에, 문서가 완전히 새롭다고 가정하지 못한다.</p></li><li><p><code>Age</code> 헤더를 통해 명시적으로든<br>서버가 생성한 Date 헤더를 통해 계산하든 간에<br>문서의 나이를 판별해야 한다.</p></li></ul><h2 id="10-1-나이-계산"><a href="#10-1-나이-계산" class="headerlink" title="10.1 나이 계산"></a>10.1 나이 계산</h2><ul><li>응답의 나이는 응답이 서버에서 생성되었을 때부터 지금까지의 총 시간이다.</li><li>응답이 인터넷상의 라우터들과 게이트웨이들 사이를 떠돌아다닌 시간과<br>응답이 캐시에 머물렀던 시간을 포함한다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$겉보기_나이 = max(0, $응답을_받은_시각 - $Date_헤더값) </span><br><span class="line">$보정된_겉보이_나이 = max($겉보기_나이, $Age_헤더값)</span><br><span class="line">$응답_지연_추정값 = $응답을_받은_시각 - $요청을_보낸_시각;</span><br><span class="line"></span><br><span class="line">$문서가_우리의_캐시에_도착했을_때의_나이 = $보정된_겉보기_나이 + $응답_지연_추정값;</span><br><span class="line">$사본이_우리의_캐시에_머무른_시간 = $현재_시각 - $응답을_받은_시각;</span><br><span class="line"></span><br><span class="line">$나이 = $문서가_우리의_캐시에_도착했을_때의_나이 + $사본이_우리의_캐시에_머무른_시간;</span><br></pre></td></tr></table></figure><h3 id="1-겉보기-나이는-Date-헤더에-기반한다"><a href="#1-겉보기-나이는-Date-헤더에-기반한다" class="headerlink" title="1. 겉보기 나이는 Date 헤더에 기반한다."></a>1. 겉보기 나이는 Date 헤더에 기반한다.</h3><ul><li><p>모든 컴퓨터가 똑같이 정확한 시계를 갖고 있다면,<br>캐시 된 문서의 나이는 단순히<br>현재 시간에서 서버가 문서를 보낸 시간(Date 헤더)을 뺀 겉보기 나이가 될 것이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$겉보기_나이 = $응답을_받은_시각 - $Date_헤더값</span><br></pre></td></tr></table></figure></li><li><p>모든 컴퓨터는 똑같이 정확한 시계를 갖고 있지 않다.</p><blockquote><p><strong>클록 스큐 clock skew</strong>: 두 컴퓨터의 시계 설정 차이로 인한 문제<br>클록 스큐 때문에 겉보기 나이는 종종 부정확하며 때로는 음수가 되기도 한다.</p></blockquote></li><li><p>겉보기 나이가 음수가 될 경우 0으로 만들어야 한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$겉보기_나이 = max(0, $응답을_받은_시각 - $Date_헤더값)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-점층적-나이-계산-Age-헤더"><a href="#2-점층적-나이-계산-Age-헤더" class="headerlink" title="2. 점층적 나이 계산 (Age 헤더)"></a>2. 점층적 나이 계산 (Age 헤더)</h3><ul><li>문서가 프락시나 캐시를 통과할 때마다<br>그 장치들이 Age헤더에 상대적인 나이를 누적해서 더하도록 한다.</li><li>이 방법은 서버 같의 시간 비교나, 종단 간의 시간 비교를 필요로 하지 않는다.</li></ul><p>Age 헤더 값은 문서가 프락시들을 통과하면서 점점 늘어난다.</p><ul><li>HTTP/1.1을 이해하는 어플리케이션은 문서가 각 어플리케이션에 머무른 시간과 네트워크 사이를 이동한 시간만큼 Age 헤더의 값을 늘려야 한다.</li><li>각 중간 어플리케이션은 자신의 내부 시계를 이용해서 쉽게 문서의 체류 시간을 계산할 수 있다.</li><li>비-HTTP/1.1 장치는 Age 헤더를 인식하지 못한다.</li></ul><p>상대 나이값은 가장 큰 것(보수적)이 선택된다.</p><ul><li>다른 서버에서 넘어온 Date 값이나 나이계산값은 실제보다 작게 계산된 값일 수 있기 때문이다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$겉보기_나이 = max(0, $응답을_받은_시각 - $Date_헤더값) </span><br><span class="line">$보정된_겉보이_나이 = max($겉보기_나이, $Age_헤더값)</span><br><span class="line">$문서가_우리의_캐시에_도착했을_때의_나이 = $보정된_겉보기_나이</span><br></pre></td></tr></table></figure><h3 id="3-네트워크-지연에-대한-보상"><a href="#3-네트워크-지연에-대한-보상" class="headerlink" title="3. 네트워크 지연에 대한 보상"></a>3. 네트워크 지연에 대한 보상</h3><ul><li>느린 네트워크나 과부하가 걸린 서버에서 =&gt; 문서가 네트워크나 서버의 교통 혼잡에 긴 시간 동안 갇혀있었던 경우 상대 나이 계산은 문서의 나이에 대한 상당히 모자란 추정이 될 수 있다. </li><li>Date헤더는 문서가 캐시로 옮겨가는 도중에 <strong>얼마나 시간을 소비했는지</strong> 말해주지 않는다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$겉보기_나이 = max(0, $응답을_받은_시각 - $Date_헤더값) </span><br><span class="line">$보정된_겉보이_나이 = max($겉보기_나이, $Age_헤더값)</span><br><span class="line">$응답_지연_추정값 = $응답을_받은_시각 - $요청을_보낸_시각;</span><br><span class="line">$문서가_우리의_캐시에_도착했을_때의_나이 = $보정된_겉보기_나이 + $응답_지연_추정값;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-캐시에-저장되면-나이를-더-먹는다"><a href="#4-캐시에-저장되면-나이를-더-먹는다" class="headerlink" title="4. 캐시에 저장되면, 나이를 더 먹는다."></a>4. 캐시에 저장되면, 나이를 더 먹는다.</h3><ul><li>문서에 대한 요청이 캐시에 도착했을 때,<br>우리는 그 문서의 현재 나이를 계산하기 위해 그 문서가 캐시에 얼마나 오랫동안 머물렀는지 알 필요가 있다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$나이 = $문서가_우리의_캐시에_도착했을_때의_나이 + $사본이_우리의_캐시에_머무른_시간;</span><br></pre></td></tr></table></figure><img src="/images/2019/31/05.jpg" style="width:100%"><h2 id="10-2-신선도-수명-계산"><a href="#10-2-신선도-수명-계산" class="headerlink" title="10.2 신선도 수명 계산"></a>10.2 신선도 수명 계산</h2><ul><li>신선도 수명은 서버와 클라의 제약조건에 의존한다.<ul><li>서버는 문서가 얼마나 자주 변경되어 발행되는지에 대한 정보를 갖고 있을 수도 있다.</li><li>클라는 속도가<br>더 빠르다면 약간 신선하지 못한 콘텐츠도 받아들이려 할 수도 있고<br>가능한 가장 최신의 콘텐츠를 요구할 수도 있다.</li></ul></li></ul><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">sub</span> 서버_신선도_한계 </span>&#123;</span><br><span class="line">  <span class="keyword">local</span>($휴리스틱, $서버<span class="number">_</span>신선도<span class="number">_</span>한계, $마지막으로<span class="number">_</span>변경된<span class="number">_</span>시각)</span><br><span class="line">  </span><br><span class="line">  $휴리스틱 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ($Max_Age_값이<span class="number">_</span>설정되었나) &#123; $서버<span class="number">_</span>신선도<span class="number">_</span>한계 = $Max_Age_값 &#125;</span><br><span class="line">  <span class="keyword">elsif</span> ($Expires_값이설정되었나) &#123; $서버<span class="number">_</span>신선도<span class="number">_</span>한계 = $Expires_값 - $Date_값 &#125; </span><br><span class="line">  <span class="keyword">elsif</span> ($Last_Modified_값이<span class="number">_</span>설정되었나) &#123;</span><br><span class="line">    $마지막으로<span class="number">_</span>변경된<span class="number">_</span>시각 = max(<span class="number">0</span>, $Date_값 - $Last_Modified_값)</span><br><span class="line">    $서버<span class="number">_</span>신선도<span class="number">_</span>한계 = <span class="keyword">int</span>($마지막으로<span class="number">_</span>변경된<span class="number">_</span>시각 * $lm_인자);</span><br><span class="line">    $휴리스틱 = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    $서버<span class="number">_</span>신선도<span class="number">_</span>한계 = $캐시<span class="number">_</span>최소<span class="number">_</span>수명<span class="number">_</span>기본값;</span><br><span class="line">    $휴리스틱 = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($휴리스틱) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($서버<span class="number">_</span>신선도<span class="number">_</span>한계 &gt; $캐시<span class="number">_</span>최대<span class="number">_</span>수명<span class="number">_</span>기본값) $서버<span class="number">_</span>신선도<span class="number">_</span>한계 = $캐시<span class="number">_</span>최대<span class="number">_</span>수명<span class="number">_</span>기본값</span><br><span class="line">    <span class="keyword">if</span> ($서버<span class="number">_</span>신선도<span class="number">_</span>한계 &lt; $캐시<span class="number">_</span>최소<span class="number">_</span>수명<span class="number">_</span>기본값) $서버<span class="number">_</span>신선도<span class="number">_</span>한계 = $캐시<span class="number">_</span>최소<span class="number">_</span>수명<span class="number">_</span>기본값</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> $서버<span class="number">_</span>신선도<span class="number">_</span>한계</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">sub</span> 클라이언트가_수정한_신선도_한계 </span>&#123;</span><br><span class="line">  $나이<span class="number">_</span>한계 = 서버<span class="number">_</span>신선도<span class="number">_</span>한계()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ($Max_Stale_값이<span class="number">_</span>설정되었나) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($Max_Stale_값 == $INT_MAX) &#123; $나이<span class="number">_</span>한계 = $INT_MAX &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123; $나이<span class="number">_</span>한계 = 서버<span class="number">_</span>신선도<span class="number">_</span>한계() + $Max_Stale_값 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ($Min_Fresh_값이<span class="number">_</span>설정되었나) &#123;</span><br><span class="line">    $나이<span class="number">_</span>한계 = min($나이<span class="number">_</span>한계, 서버<span class="number">_</span>신선도<span class="number">_</span>한계() - $Min_Fresh_값)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ($Max_Age_값이<span class="number">_</span>설정되었나) &#123; $나이<span class="number">_</span>한계 = min($나이<span class="number">_</span>한계, $Max_Age_값) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>전체 과정은 <strong>문서의 나이</strong>와 <strong>신선도 한계</strong>라는 두 가지 변수가 관련되어 있다. </p><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;캐시의 원리와 제어방법&lt;/strong&gt;을 알아본다.&lt;br&gt;클라가 요청 메시지를 받은 이후의 처리단계를 기준으로 캐시는 어떤 원리로 사본을 관리하는지, 단계별로 어떤 제어가 가능한지를 알아보려고 한다.&lt;/p&gt;
&lt;a name=&quot;cach
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="cache" scheme="http://feel5ny.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>캐시의 개념과 장점</title>
    <link href="http://feel5ny.github.io/2019/09/30/HTTP_007-1/"/>
    <id>http://feel5ny.github.io/2019/09/30/HTTP_007-1/</id>
    <published>2019-09-30T14:23:55.000Z</published>
    <updated>2019-10-05T04:12:08.183Z</updated>
    
    <content type="html"><![CDATA[<p>캐시는 <strong>자주 쓰이는 문서의 사본을 자동으로 보관하는 HTTP 장치</strong>다.<br>웹 요청이 캐시에 도착했을 때, 캐시된 로컬 사본이 존재한다면,<br>그 문서는 원서버가 아니라 캐시로부터 제공된다.</p><ul><li>불필요한 데이터 전송을 줄여서, <strong>네트워크 요금으로 인한 비용을 줄여준다.</strong></li><li>캐시는 <strong>네트워크 병목을 줄여준다.</strong> 대역폭을 늘리지 않고도 페이지를 빨리 불러올 수 있게 된다.</li><li>캐시는 <strong>원서버에 대한 요청을 줄여준다.</strong> 서버는 부하를 줄일 수 있으며 더 빨리 응답할 수 있게 된다.</li><li>캐시는 <strong>거리로 인한 지연을 줄여준다.</strong> 페이지를 먼 곳에서 불러올수록 시간이 많이 거린다.</li></ul><hr><a name="unUseful"><a name="unUseful"><h1 id="1-불필요한-데이터-전송"><a href="#1-불필요한-데이터-전송" class="headerlink" title="1. 불필요한 데이터 전송"></a>1. 불필요한 데이터 전송</h1><ul><li>캐시를 이용하면, 첫번째 서버 응답은 캐시에 보관된다.</li><li>캐시된 사본이 뒤이은 요청들에 대한 응답으로 사용될 수 있기 때문에, 원서버가 중복해서 트래픽을 주고받는 낭비가 줄어들게된다.</li></ul><hr><a name="bottleneck"><h1 id="2-대역폭-병목"><a href="#2-대역폭-병목" class="headerlink" title="2. 대역폭 병목"></a>2. 대역폭 병목</h1><ul><li>많은 네트워크가 원격 서버보다 로컬 네트워크 클라에 더 넓은 대역폭을 제공한다.</li><li>클라들이 서버에 접근할 때의 속도는, 그 경로에 있는 가장 느린 네트워크의 속도와 같다.</li><li>만약 클라가 빠른 LAN에 있는 캐시로부터 사본을 가져온다면, 성능을 개선할 수 있을 것이다.</li></ul><hr><a name="crowds"><h1 id="3-갑작스런-요청-쇄도"><a href="#3-갑작스런-요청-쇄도" class="headerlink" title="3. 갑작스런 요청 쇄도"></a>3. 갑작스런 요청 쇄도</h1><ul><li>갑작스런 요청 쇄도에 대처하기 위해 특히 중요하다.</li><li>트래픽 급증은 네트워크와 웹서버의 심각한 장애를 야기시킨다.</li></ul><blockquote><p>음?</p></blockquote><hr><a name="delay"><h1 id="4-거리로-인한-지연"><a href="#4-거리로-인한-지연" class="headerlink" title="4. 거리로 인한 지연"></a>4. 거리로 인한 지연</h1><ul><li>대역폭이 문제가 되지 않더라도, 거리가 문제될 수 있다.</li><li>기계실 근처에 캐시를 설치하여 문서가 전송되느 거리를 수천 킬로미터에 수십미터로 줄일 수 있다.</li></ul><blockquote><p>보스턴과 샌프란시스코 사이의 거리는 약 4,400km이다. 어떤 웹페이자가 20개의 작은 이미지를 포함하고 있는데, 모두가 샌프란시스코에 있는 한 서버에 들어있다고 가정해보자.<br>보스턴에 있는 클라가 서버로 동시에 4개의 커넥션을 열고, 그 커넥션을 유지한다면, 다운 받을 때의 빛의 속도로 인한 지연은 거의 1/4초가 된다.(<strong>240밀리초</strong>) 만약 서버가 보스턴에서 더 멀리 10,800km 떨어진 도쿄라면 <strong>600밀리초</strong>로 커진다.</p></blockquote><hr><a name="hit&miss"><h1 id="5-적중과-부적중"><a href="#5-적중과-부적중" class="headerlink" title="5. 적중과 부적중"></a>5. 적중과 부적중</h1><ul><li>캐시가 모든 문서의 사본을 저장하지는 않는다.</li><li>캐시 요청이 도착했을때,<br>사본이 있다면: 요청이 처리될 수 있다. <strong>캐시 적중 <code>cache hit</code></strong><br>사본이 없다면: 원서버로 전달되기만 한다. <strong>캐시 부적중 <code>cache miss</code></strong></li></ul><h2 id="5-1-재검사-Revalidation-신선도-검사"><a href="#5-1-재검사-Revalidation-신선도-검사" class="headerlink" title="5.1 재검사 Revalidation (신선도 검사)"></a>5.1 재검사 Revalidation (신선도 검사)</h2><ul><li><p>원서버 콘텐츠는 변경될 수 있기 때문에,<br><strong>캐시는 반드시 그들이 갖고 있는 사본이 여전히 최신인지 서버를 통해 점검해야한다.!!</strong></p></li><li><p>이러한 <strong>신선도 검사</strong>를 <strong>HTTP 재검사</strong>라 부른다.</p></li><li><p>HTTP는 서버로부터 전체 객체를 가져오지 않고도, 콘텐츠가 여전히 신선한지 빠르게 검사할 수 있는 특별한 요청을 정의했다.</p></li><li><p>대부분의 캐시는 클라가 사본을 요청하였으며,<br><strong>그 사본이 검사를 할 필요가 있을 정도로 충분히 오래된 경우에만 재검사를 한다.</strong></p></li><li><p>콘텐츠가 변경되지 않았다면, 서버는 아주 작은 <code>304 Not Modified</code> 응답을 보낸다.</p></li></ul><h3 id="재검사-적중-느린-적중"><a href="#재검사-적중-느린-적중" class="headerlink" title="재검사 적중 (느린 적중)"></a>재검사 적중 (느린 적중)</h3><ul><li>사본이 유효함을 알게된 캐시는 즉각 사본이 신선하다고 임시로 다시 표시한 뒤,<br>사본을 클라에게 제공한다.</li><li>순수 캐시 적중보다 느리다. 원 서버와 검사를 할 필요가 있기 때문이다.</li><li>캐시 부적중보다는 빠르다. 서버로부터 객체 데이터를 받아올 필요가 없기 때문이다.</li></ul><h3 id="If-Modified-Since-헤더"><a href="#If-Modified-Since-헤더" class="headerlink" title="If-Modified-Since 헤더"></a><code>If-Modified-Since</code> 헤더</h3><ul><li>서버에게 보내는 GET 요청에 이 헤더를 추가하면,<br>캐시된 시간 이후에 변경된 경우에만 사본을 보내달라는 의미가 된다.</li></ul><img src="/images/2019/30/01.png">> 오늘은 9월 30일이다. 27일에 캐시되어있던 파일이며, 해당 시간 이후의 사본의 신선도를 확인한다.<p><code>If-Modified-Since</code> 요청이 서버에 도착했을 때 일어날 수 있는 3가지 상황</p><ol><li>서버 콘텐츠가 변경되지 않을 경우</li><li>서버 콘텐츠가 변경된 경우</li><li>객체가 삭제된 경우</li></ol><hr><ol><li><strong>재검사 적중</strong>: 만약 서버객체가 변경되지 않았다면, 서버는 클라에게 작은 HTTP 304 Not Modified 응답을 보낸다.</li></ol><img src="/images/2019/30/02.png"><ol start="2"><li><strong>재검사 부적중</strong>: 만약 서버 객체가 캐시된 사본과 다르다면, 서버는 콘텐츠 전체와 함께 평범한 HTTP 200 OK 응답을 클라에게 보낸다.</li><li><strong>객체 삭제</strong>: 404 Not Found 응답을 돌려보내며, 캐시는 사본을 삭제한다.</li></ol><hr><p>문서적중률과 바이트 단위 적중률은 둘다 캐시 성능에 대한 유용한 지표다.</p><ul><li><strong>문서 적중률</strong>은 얼마나 많은 웹 트랜잭션을 외부로 내보내지 않았는지 보여준다.<ul><li>트랜잭션은 고정된 소요 시간을 포함하게 되는데, 시간이 길 수도 있기 때문에,<br>문서 적중률을 개선하면 전체 대기시간이 줄어든다.</li></ul></li><li><strong>바이트 단위 적중률</strong>은 얼마나 많은 바이트가 인터넷으로 나가지 않았는지 보여준다.<ul><li>바이트 단위 적중률의 개선은 대역폭 절약을 최적화한다.</li></ul></li></ul><h2 id="5-2-적중률-문서-적중률"><a href="#5-2-적중률-문서-적중률" class="headerlink" title="5.2 적중률 (문서 적중률)"></a>5.2 적중률 (문서 적중률)</h2><p>캐시가 요청을 처리하는 비율을 <strong>캐시 적중률</strong> 혹은 <strong>문서 적중률</strong>이라고 부르기도 한다.</p><ul><li>적중률은 0 ~ 1 값으로 되어 있다. 흔히 퍼센트로 표현된다.</li><li>캐시 부적중: 0%<br>캐시 적중: 100%</li><li>캐시 관리자는 캐시 적중률이 100%에 근접하게 되는 것을 좋아할 것이다.</li></ul><p>실제 적중률은</p><ul><li>캐시가 얼마나 큰지<br>캐시 사용자들의 관심사가 얼마나 비슷한지<br>캐시된 데이터가 얼마나 자주 변경되거나 개인화되는지<br>캐시가 어떻게 설정되어 있는지에 달려있다.</li><li>적중률은 예측하기 어려운 것으로, 악명이 높지만 오늘날 적중률 40%면 웹 캐시로 괜찮은 편이다.</li></ul><h2 id="5-3-바이트-적중률"><a href="#5-3-바이트-적중률" class="headerlink" title="5.3 바이트 적중률"></a>5.3 바이트 적중률</h2><ul><li>바이트 단위 적중률은 캐시를 통해 제공된 모든 바이트의 비율을 표현한다.</li><li>몇몇 큰 객체는 덜 접근되지만, 그 크기 때문에 전체 트래픽에는 더 크게 기여한다.</li><li>어떤사람은 이러한 이유로 바이트 단위 적중률 측정값을 더 선호한다.<ul><li>특히 트래픽의 모든 바이트에 요금을 매기려는 사람들</li></ul></li><li>이 측정값은 트래픽이 절감된 정도를 포착해낸다.</li><li>바이트 단위 적중률 100%는 모든 바이트가 캐시에서 왔으며,<br>어떤 트래픽도 인터넷으로 나가지 않았음을 의미한다.</li></ul><hr><h2 id="5-4-적중과-부적중의-구별"><a href="#5-4-적중과-부적중의-구별" class="headerlink" title="5.4 적중과 부적중의 구별"></a>5.4 적중과 부적중의 구별</h2><ul><li>HTTP는 클라에게 응답이 캐시적중이었는지, 원서버 접근인지 말해줄 수 있는 방법을 제공하지 않는다</li><li>두가지 경우 모도 200 OK가 될 것이다.</li><li>어떤 상용 프락시 캐시는<br>캐시에 무슨일이 일어났는지 설명하기 위해 Via 헤더에 추가 정보를 붙인다.</li></ul><p>클라가 응답이 캐시에서 왔는지 알아내는 한가지 방법은 Date 헤더를 이용하는 것이다.</p><ul><li>응답의 Date 헤더값을 현재 시각과 비교하여, 응답의 생성일이 더 오래되었다면, 클라는 응답이 캐시된 것임을 알아낼 수 있다.</li><li>클라가 캐시된 응답을 감지하는 또다른 방법은, 응답이 얼마나 오래되었는지 말해주는 Age 헤더를 이용하는 것이다.<img src="/images/2019/30/03.png"></li></ul><hr><a name="topology"><h1 id="6-캐시-토폴로지"><a href="#6-캐시-토폴로지" class="headerlink" title="6. 캐시 토폴로지"></a>6. 캐시 토폴로지</h1><ul><li>캐시는 한명의 사용자에게만 할당 될 수도 있고<br>수천명의 사용자들 간에 공유될 수도 있다.</li></ul><blockquote><p><strong>토폴로지</strong>(영어: topology, 문화어: 망구성방식)는 컴퓨터 네트워크의 요소들(링크, 노드 등)을 물리적으로 연결해 놓은 것, 또는 그 연결 방식을 말한다. 로컬 영역 네트워크(LAN)은 물리적 토폴로지와 논리적 토폴로지 둘 다 보여 줄 수 있는 네트워크의 한 예이다. <a href="https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC_%ED%86%A0%ED%8F%B4%EB%A1%9C%EC%A7%80" target="_blank" rel="noopener">출처</a></p><ul><li>토폴로지 종류 <ul><li>버스 토폴로지</li><li>스타 토폴로지</li><li>링 토폴로지</li><li>트리 토폴로지</li></ul></li></ul></blockquote><h2 id="6-1-개인-전용-캐시"><a href="#6-1-개인-전용-캐시" class="headerlink" title="6.1 개인 전용 캐시"></a>6.1 개인 전용 캐시</h2><ul><li>개인 전용 캐시는 작고 저렴할 수 있다.</li><li>웹 브라우저는 개인 전용 캐시를 내장하고 있다.</li><li>브라우저는 자주 쓰이는 문서를 개인용 컴퓨터의 디스크와 메모리에 캐시해 놓고<br>사용자가 캐시 사이즈의 설정을 수정할 수 있도록 허용한다.</li></ul><h2 id="6-2-공용-프락시-캐시"><a href="#6-2-공용-프락시-캐시" class="headerlink" title="6.2 공용 프락시 캐시"></a>6.2 공용 프락시 캐시</h2><ul><li><p>공용 캐시는 <strong>캐시 프락시 서버</strong> 혹은 <strong>더 흔한 프락시 캐시</strong>라고 불리는 특별한 종류의 공유된 프락시 서버다.</p></li><li><p>프락시 캐시는 로컬 캐시에서 문서를 제공하거나, 혹은 사용자 입장에서 서버에 접근한다.</p></li><li><p>공용캐시에는 여러 사용자가 접근하기 때문에, 불필요한 트래픽을 줄일 수 있는 더 많은 기회가 있다.</p></li><li><p>각 개인 전용 캐시는 같은 문서를 네트워크를 거쳐 여러번 가져온다.</p></li><li><p>공용 캐시에서, 캐시는 자주 찾는 객체를 단 한번만 가져와<br>모든 요청에 대해 공유된 사본을 제공함으로써 네트워크 트래픽을 줄인다.</p></li><li><p>수동 프락시를 지정하거나, 프락시 자동설정 파일을 설정함으로써, 브라우저가 프락시 캐시를 사용하도록 설정할 수 있다.</p><ul><li>인터셉트 프락시를 사용함으로써 브라우저의 설정 없이 HTTP 요청이 캐시를 통하도록 강제할 수 있다.</li></ul></li></ul><h2 id="6-3-프락시-캐시-계층들"><a href="#6-3-프락시-캐시-계층들" class="headerlink" title="6.3 프락시 캐시 계층들"></a>6.3 프락시 캐시 계층들</h2><ul><li>작은 캐시에서 캐시 부적중이 발생했을 때,<br><strong>더 큰 부모 캐시가 그 걸러 남겨진 트래픽을 처리하도록 하는 계층을 만드는 방식</strong>이 합리적이 경우가 많다.</li><li>클라 주위에는 작고 저렴한 캐시를 사용하고,<br>계층 상단에는 많은 사용자들에 의해 공유되는 문서를 유지하기 위해 <strong>더 크고 강력한 캐시</strong>를 사용하자는 것이다.</li><li>캐시 계층이 깊다면 프락시 연쇄가 길어지므로, 각 중간 프락시는 현저한 성능 저하가 발생할 것이다.</li></ul><h2 id="6-4-캐시망-콘텐츠-라우팅-피어링"><a href="#6-4-캐시망-콘텐츠-라우팅-피어링" class="headerlink" title="6.4 캐시망, 콘텐츠 라우팅, 피어링"></a>6.4 캐시망, 콘텐츠 라우팅, 피어링</h2><blockquote><p>잘 모르겠다.</p></blockquote><h3 id="캐시망"><a href="#캐시망" class="headerlink" title="캐시망"></a>캐시망</h3><p>캐시망의 프락시 캐시는<br>어떤 부모 캐시와 대화할 것인지,<br>아니면 요청이 캐시를 완전히 우회해서 원 서버로 바로 가도록 할 것인지에 대한<br>캐시 커뮤니케이션 결정을 동적으로 내린다.</p><h3 id="콘텐츠-라우팅"><a href="#콘텐츠-라우팅" class="headerlink" title="콘텐츠 라우팅"></a>콘텐츠 라우팅</h3><p>캐시망 안에서의 콘텐츠 라우팅을 위해 설계된 캐시들은<br>다음에 나열된 일들을 모두 할 수 있을 것이다.</p><ul><li>URL에 근거하여, 부모 캐시와 원서버 중 하나를 동적으로 선택한다.</li><li>URL에 근거하여, 특정 부모 캐시를 동적으로 선택한다.</li><li>부모 캐시에게 가기 전에, 캐시된 사본을 로컬에서 찾아본다.</li><li>다른 캐시들이 그들의 캐시된 콘텐츠에 부분으로 접근할 수 있도록 허용하되,<br>그들의 캐시를 통한 Internet transit은 허용하지 않는다.</li></ul><h3 id="형제-캐시"><a href="#형제-캐시" class="headerlink" title="형제 캐시"></a>형제 캐시</h3><ul><li>선택적인 피어링을 지원하는 캐시는 형제 캐시라고 불린다.</li><li>HTTP는 형재 캐시를 지원하지 않기 때문에, 사람들은 인터넷 캐시 프로토콜(ICP)이나<br>하이퍼텍스트 캐시 프로토콜 HTCP같은 프로토콜을 이용해 HTTP를 확장했다.</li></ul><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ol><li><a href="https://ko.wikipedia.org/wiki/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC_%ED%86%A0%ED%8F%B4%EB%A1%9C%EC%A7%80" target="_blank" rel="noopener">네트워크 토폴리지</a></li></ol></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;캐시는 &lt;strong&gt;자주 쓰이는 문서의 사본을 자동으로 보관하는 HTTP 장치&lt;/strong&gt;다.&lt;br&gt;웹 요청이 캐시에 도착했을 때, 캐시된 로컬 사본이 존재한다면,&lt;br&gt;그 문서는 원서버가 아니라 캐시로부터 제공된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="cache" scheme="http://feel5ny.github.io/tags/cache/"/>
    
  </entry>
  
  <entry>
    <title>웹에서 앱으로 이동하기 (feat.딥링크)</title>
    <link href="http://feel5ny.github.io/2019/09/22/Communication_001/"/>
    <id>http://feel5ny.github.io/2019/09/22/Communication_001/</id>
    <published>2019-09-22T14:23:55.000Z</published>
    <updated>2019-09-26T15:43:04.535Z</updated>
    
    <content type="html"><![CDATA[<p>하나의 서비스가 웹이나 앱, 두 가지 플랫폼에서 운영 중일 경우, 서로가 서로의 플랫폼으로 고객을 이동시킬 수 있다. 앱에서는 웹링크를 사용하여 웹으로 이동시키거나, 인앱브라우저로 웹화면을 띄우곤 하는데, <strong>웹화면에서 앱으로의 이동은 어떨까.</strong><br>웹에서 앱의 특정 화면으로 이동시키기 위해선, 앱이 현재 디바이스에 인스톨이 되어있는지, 어떤 페이지로 이동하고 싶어하는지 등의 정보를 알아야한다. 이를 도와주는 개념이 딥링크다.<br>마케터는 웹에서 앱 유입을 여러 측면으로써 효율 확인하길 원하며, 보통 앱 유입 성과측정을 위해서 branch, TUNE, Appsflyer같은 솔루선을 사용한다. 웹개발자는 웹서비스에 해당 솔류션에서 만들어주는 링크를 삽입하곤한다.</p><img src="/images/2019/29/1.jpeg"><a name="deeplink"><h1 id="‘딥링크’의-개념"><a href="#‘딥링크’의-개념" class="headerlink" title="‘딥링크’의 개념"></a>‘딥링크’의 개념</h1><p>딥링크는 단순한 개념이다.<br>특정 콘텐츠에 <strong>직접 도달하는</strong> 모든 링크를 뜻하는데, 형태는 스킴(scheme)과 호스트(host)로 구성된 URL(Uniform Resource Locator)이며, 웹환경에서도 쉽게 적용할 수 있다.</p><blockquote><p>url의 자세한 설명은 <a href="https://feel5ny.github.io/2019/08/09/HTTP_002/#1">여기</a></p></blockquote><p>현재 url 또한 url하나로 블로그 글에 직접 도달할 수 있기 때문에 딥링크라고 말할 수 있다. (<code>https://feel5ny.github.io/2019/09/22/Communication_001/</code>) 앱에서도 특정 콘텐츠를 직접 도달할 수 있도록, 여러가지 딥링크 형태들을 활용한다. (url 스킴, 유니버설 링크..)</p><img src="/images/2019/29/2.png"><blockquote><p>굿닥은 원링크 사용</p></blockquote><img src="/images/2019/29/4.png" style="width:100%"><blockquote><p>제플린의 공유 url</p></blockquote><p>앱의 특정 콘텐츠를 <strong>공유</strong>하고 싶을 경우에도 딥링크를 사용할 수 있다. </p><a name="direct"><h1 id="1-딥링크"><a href="#1-딥링크" class="headerlink" title="1. 딥링크"></a>1. 딥링크</h1><p>딥링크를 사용할 경우,</p><ul><li>앱이 설치된 유저는 앱 내 특정 페이지로 이동한다.</li><li>앱 미설치 유저는<br>URL schemes방식의 딥링크 사용시에는 동작하지 않고<br>Universal Link나 App Link 사용시 ios, and에 맞는 앱스토어로 이동한다.</li></ul><a name="1-1"><h2 id="1-1-딥링크의-종류"><a href="#1-1-딥링크의-종류" class="headerlink" title="1-1 딥링크의 종류"></a>1-1 딥링크의 종류</h2><h3 id="URL-schemes"><a href="#URL-schemes" class="headerlink" title="URL schemes"></a>URL schemes</h3><ul><li>딥링크의 가장 초기 형태이다. url 스킴을 앱에 정의하는 방식으로 사용한다. <code>goodoc://</code></li></ul><p><strong>단점</strong></p><ul><li>스킴을 제약없이 설정이 가능하기 때문에, 고유한 딥링크를 점유할 수 없다.<ul><li>즉, <strong>여러 앱에서 같은 이름의 스킴을 사용할 경우, 하이재킹(hijacking)</strong>될 수도 있다.</li><li>이러한 이유로 몇몇 브라우저에서는 URL schemes에 대해 경고메세지를 띄우거나 동작을 막곤한다.</li></ul></li><li>URL schemes만으로 <strong>앱 설치 유무를 알 수 없다.</strong><ul><li>앱이 설치되어있지 않을 경우에 대해 공식적인 지원이 없기 때문에<br>앱 미설치 유저는 딥링크가 동작하지 않는다.</li></ul></li></ul><h3 id="Universal-Link-웹-링크-형태"><a href="#Universal-Link-웹-링크-형태" class="headerlink" title="Universal Link (웹 링크 형태)"></a>Universal Link (웹 링크 형태)</h3><ul><li>URL schemes가 가진 문제점을 해결하기 위해 2015년 하반기에 iOS와 Android 플랫폼은 각각 새로운 딥링크를 개발하여 발표했다. </li><li>iOS는 Universal Link<br>Android는 App Link</li><li>개념적으로는 비슷한 형태의 딥링크이다.</li></ul><img src="/images/2019/29/5-1.gif"><blockquote><p>앱이 설치되어있을 경우<br><a href="https://branch.io/ko/what-is-deep-linking/" target="_blank" rel="noopener">이미지 출처: branch</a></p></blockquote><img src="/images/2019/29/5.gif"><blockquote><p>앱이 미설치 일 경우 대체 url로 이동된다.<br><a href="https://branch.io/ko/what-is-deep-linking/" target="_blank" rel="noopener">이미지 출처: branch</a></p></blockquote><ul><li>표준 웹 링크 (<a href="http://mydomain.com" target="_blank" rel="noopener">http://mydomain.com</a>) 이다.</li><li>HTTPS가 적용된 도메인을 딥링크로 사용한다. 보안문제를 해결하였다.</li><li>특정 도메인이 딥링크로 사용되는 것이기 때문에, 고유성을 보장한다.</li><li>대체 url(fallback url)을 공식 지원하기 때문에, 앱 미설치자의 OS에서 해당 link를 대체url로 판단하여서 웹사이트로 떨어트린다.</li></ul><p><strong>웹서버에서 Universal link(ios) 처리하는 흐름</strong></p><ol><li>기본적으로 유니버셜 링크는 웹 URL 형식이므로,<br>해당 도메인에 연결되어있는 웹 서버에 1차적으로 요청이 들어간다.</li><li>해당 서비스가 1. 유니버셜 링크를 지원한다는 설정이 되어있고,<br>요청을 보낸 단말기에 2. 특정 앱이 설치되어 있다면<br>웹사이트 대신 앱을 실행하라는 응답을 보낼 수 있다.</li></ol><p><strong>단점</strong></p><ul><li>사용자의 트리거에 의해서만 작동한다. 스크립트로 클릭을 유발할 경우에는 앱이 설치되어있음에도 대체URL로 작동한다.</li><li>특정 앱에서는 동작하지 않도록 막고 있기도 하다. (핀터레스트, 페이스북 메신저, 텔레그램 ..)</li><li>단점들때문에 URL 스킴과 복합적으로 사용하기도 한다.</li></ul><a name="1-2"><h2 id="1-2-딥링크의-문제점"><a href="#1-2-딥링크의-문제점" class="headerlink" title="1-2 딥링크의 문제점"></a>1-2 딥링크의 문제점</h2><ul><li>앱 미설치자의 경우, 앱스트어로 이동시 사용자를 추적할 수 없는 경우가 있다.</li><li>마켓을 이동하는 과정에서 <strong>딥링크가 유실</strong>되어 설치 후에 어떤 딥링크를 통해 앱을 설치했는지 알 수 없다.</li></ul><p>이를 해결하기 위해 디퍼드 딥링크를 사용한다.</p><a name="1-3"><h2 id="1-3-방식-디퍼드-딥링크"><a href="#1-3-방식-디퍼드-딥링크" class="headerlink" title="1-3 (방식) 디퍼드 딥링크"></a>1-3 (방식) 디퍼드 딥링크</h2><ul><li>새로 앱을 설치한 사용자(NRU, Newly Registered User)를 집계할 수 있다. (마케터의 광고 효율성을 측정할 수 있다.)</li><li>사용자가 원하는 콘텐츠를 설치와 동시에 보여줄 수 있다. </li><li>앱 내 콘텐츠를 목적으로 설치한 사용자의 동선을 줄일 수 있다.</li></ul><p>이런 장점을 지닌 디퍼드 딥링크는 각각의 OS 별로 구현하는 방식이 다르다.<br><a href="https://engineering.linecorp.com/ko/blog/how-to-use-deeplink-in-trackit/" target="_blank" rel="noopener">참고</a></p><a name="dynamic"><h1 id="2-어트리뷰션-튤에서-만들어주는-링크"><a href="#2-어트리뷰션-튤에서-만들어주는-링크" class="headerlink" title="2. 어트리뷰션 튤에서 만들어주는 링크"></a>2. 어트리뷰션 튤에서 만들어주는 링크</h1><p>모바일 앱 마케팅을 하는 곳이라면 어트리뷰션 툴 사용은 필수이다. 앱 설치 또는 구매와 같은 인앱이벤트에 대한 원인이 되는 광고 클릭을 찾는 것이 바로 어트리뷰션 툴의 목적이라고 할 수 있다.</p><blockquote><p>어트리뷰션(Attribution): 어떤 행동에 대한 원인을 찾는 과정</p></blockquote><img src="/images/2019/29/6.jpg" style="width:100%"><ul><li>파이어베이스에서는 dynamic Link<br><strong>Appsflyer</strong>에서는 one Link<br>라는 명칭으로 불린다.</li><li>하나의 URL로 각각의 OS에 맞게 자동으로 앱 내 특정페이지로 이동할 수 있게 해준다.</li><li>어트리뷰션 툴을 사용하면 어트리뷰션 툴에서 수집한 광고 클릭 데이터와 SDK를 통한 앱 설치 데이터가 연결되어 성과를 낸 광고를 특정할 수 있게 된다.<br>즉, 광고의 성과를 분석할 수 있게 되는 것.</li></ul><img src="/images/2019/29/3.jpeg"><hr><hr><p><strong>참고자료</strong></p><ol><li><a href="https://branch.io/ko/what-is-deep-linking/" target="_blank" rel="noopener">branch의 딥링크 설명글</a></li><li><a href="https://engineering.linecorp.com/ko/blog/how-to-use-deeplink-in-trackit/" target="_blank" rel="noopener">LINE-TRACKIT에서 딥링크를 사용하는 방법</a></li><li><a href="https://blog.naver.com/PostView.nhn?blogId=wcjpower&logNo=220899970761&parentCategoryNo=&categoryNo=23&viewDate=&isShowPopularPosts=true&from=search" target="_blank" rel="noopener">다이렉트/디퍼드/다이나믹 딥링크 설명글</a></li><li><a href="http://blog.ab180.co/deeplinkga-mweojyo/" target="_blank" rel="noopener">ab180의 딥링크 설명글</a></li><li><a href="http://www.wisetracker.co.kr/%EB%B9%84%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%9C%A0%EB%8B%88%EB%B2%84%EC%85%9C-%EB%A7%81%ED%81%AC-%ED%95%B5%EC%8B%AC-%EA%B0%9C%EB%85%90/" target="_blank" rel="noopener">univasal link</a></li><li><a href="http://blog.ab180.co/why-mobile-attribution-tool/" target="_blank" rel="noopener">어트리뷰션 툴 ab180</a></li></ol></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;하나의 서비스가 웹이나 앱, 두 가지 플랫폼에서 운영 중일 경우, 서로가 서로의 플랫폼으로 고객을 이동시킬 수 있다. 앱에서는 웹링크를 사용하여 웹으로 이동시키거나, 인앱브라우저로 웹화면을 띄우곤 하는데, &lt;strong&gt;웹화면에서 앱으로의 이동은
      
    
    </summary>
    
      <category term="03_Communication" scheme="http://feel5ny.github.io/categories/03-Communication/"/>
    
      <category term="Marketing" scheme="http://feel5ny.github.io/categories/03-Communication/Marketing/"/>
    
    
      <category term="maketing" scheme="http://feel5ny.github.io/tags/maketing/"/>
    
      <category term="app" scheme="http://feel5ny.github.io/tags/app/"/>
    
      <category term="link" scheme="http://feel5ny.github.io/tags/link/"/>
    
      <category term="url" scheme="http://feel5ny.github.io/tags/url/"/>
    
  </entry>
  
  <entry>
    <title>프록시</title>
    <link href="http://feel5ny.github.io/2019/09/22/HTTP_006/"/>
    <id>http://feel5ny.github.io/2019/09/22/HTTP_006/</id>
    <published>2019-09-22T07:23:55.000Z</published>
    <updated>2019-09-30T13:36:16.124Z</updated>
    
    <content type="html"><![CDATA[<hr><a name="proxy"><h1 id="1-프록시란"><a href="#1-프록시란" class="headerlink" title="1. 프록시란?"></a>1. 프록시란?</h1><ul><li>웹 프록시 서버는 클라의 입장에서 트랜젝션을 수행하는 중개인이다.</li><li>http 프록시 서버는 웹 서버이기도 하고, 웹 클라이기도 하다.</li></ul><h2 id="1-1-개인-프록시와-공유-프록시"><a href="#1-1-개인-프록시와-공유-프록시" class="headerlink" title="1.1 개인 프록시와 공유 프록시"></a>1.1 개인 프록시와 공유 프록시</h2><h3 id="개인-프록시"><a href="#개인-프록시" class="headerlink" title="개인 프록시"></a>개인 프록시</h3><ul><li>하나의 클라만을 위한 프록시</li><li>어떤 브라우저 보조 제품들은 몇몇 ISP 서비스와 마찬가지로 브라우저의 기능을 확장하거나 성능을 개선하거나, 무료 ISP 서비스를 위한 공고들을 운영하기 위해 작은 프록시를 사용자의 컴퓨터에서 직접 실행한다.<blockquote><p>ISP: Internet Service Provider (KT, SKT, LG+)</p></blockquote></li></ul><h3 id="공유-프록시"><a href="#공유-프록시" class="headerlink" title="공유 프록시"></a>공유 프록시</h3><ul><li>여러 클라가 함께 사용하는 프록시</li><li>대부부의 프록시는 공유 프록시다.</li></ul><h2 id="1-2-Proxy-vs-Gateway"><a href="#1-2-Proxy-vs-Gateway" class="headerlink" title="1.2 Proxy vs Gateway"></a>1.2 Proxy vs Gateway</h2><ul><li><strong>프록시</strong>: 같은 프로토콜을 사용하는 둘 이상의 앱을 연결</li><li><strong>게이트웨이</strong>: 서로 다른 프로토콜을 사용하는 둘 이상을 연결<br>프로토콜 변환기처럼 동작한다.<ul><li>ex) HTTP/POP 게이트웨이: 이메일 서버와의 통신</li></ul></li></ul><hr><a name="why"><h1 id="2-왜-사용할까"><a href="#2-왜-사용할까" class="headerlink" title="2. 왜 사용할까?"></a>2. 왜 사용할까?</h1><ul><li>보안을 개선하고</li><li>성능을 높여주며</li><li>비용을 절약한다.</li><li>부가적인 가치를 주는 여러 유용한 웹서비스를 구현하기 위해 트래픽을 감시하고 수정한다.</li></ul><h2 id="2-1-주-사용-케이스"><a href="#2-1-주-사용-케이스" class="headerlink" title="2.1 주 사용 케이스"></a>2.1 주 사용 케이스</h2><ol><li><strong>어린이 필터</strong>: 성인 콘텐츠 차단용 <strong>필터링 프락시</strong></li><li><strong>문서 접근 제어자</strong>: 웹 리소스에 대한 단일한 접근 제어 전략을 구현하고 감사추적을 하기 위해.</li><li><strong>보안 방화벽</strong>: 조직 안에 들어오거나 나가는 응용 레벨 프로토콜의 흐름을 네트워크의 한 지점에서 통제한다.</li><li><strong>웹 캐시</strong>: 인기 있는 문서의 로컬 사본을 관리하고, 해당 문서에 대한 요청이 오면 빠르게 제공하여, 느리고 비싼 인터넷 커뮤니케이션을 줄인다.</li><li><strong>대리 프락시</strong>(Surrogate)<ul><li>웹 서버인 것처럼 위장한다.</li><li>공용 콘텐츠에 대한 느린 웹 서버의 성능을 개선하기 위해 사용될 수 있다.<blockquote><p>서버 가속기라고 불린다.</p></blockquote></li><li>콘텐츠 라우팅 기능과 결합되어, 주문형 복제 콘텐츠의 분산 네트워크를 만들기 위해 사용될 수 있다.</li></ul></li><li><strong>콘텐츠 라우터</strong><ul><li>인터넷 트래픽 조건과 콘텐츠의 종류에 따라, 요청을 특정 웹 서버로 유도하는 콘텐츠 라우터로 동작할 수 있다.</li><li>사용자들에게 제공할 여러 서비스를 구현하는데 사용할 수 있다.<blockquote><p>사용자가 필터링 서비스에 가입했다면, HTTP 요청이 필터링 프락시를 통과하도록 할 수 있다.</p></blockquote></li></ul></li><li><strong>트랜스 코드</strong><ul><li>콘텐츠를 클라에게 보내기 전에, 본문 포맷을 수정할 수 있다.<blockquote><p><strong>트랜스 코딩</strong>: 데이터의 표현방식을 변환하는 것 </p></blockquote></li><li>사례: gif 이미지 =&gt; jpg / 이미지의 크기 줄이기 / 텍스트 파일 압축 / 외국어 문서로 변환하기 / …</li></ul></li><li><strong>익명화 프락시</strong> Anonymizer<ul><li>HTTP 메세지에서 신원을 식별할 수 있는 특성들을 제거 =&gt; 개인 정보보호와 익명성 보장에 기여한다.<ul><li>User-Agent 헤더에서 OS종류 / From헤더 / Referer헤더(출처) / Cookie(프로필과 신원정보) 등을 <strong>제거</strong>한다.</li></ul></li></ul></li></ol><hr><a name="where"><h1 id="3-어디에-둘까"><a href="#3-어디에-둘까" class="headerlink" title="3. 어디에 둘까?"></a>3. 어디에 둘까?</h1><ul><li>어떻게 프락시가 네트워크에 배치되는가</li><li>어떻게 프락시의 연쇄가 계층을 이루는가</li></ul><h2 id="3-1-프락시-서버-배치"><a href="#3-1-프락시-서버-배치" class="headerlink" title="3.1 프락시 서버 배치"></a>3.1 프락시 서버 배치</h2><ol><li><strong>출구 프락시</strong> Egress<ul><li>로컬 네트워크와 더 큰 인터넷 사이를 오가는 트래픽을 제어하기 위해 프락시를 로컬 네트워크의 출구에 박아 넣을 수 있다.</li><li>해킹 방지 방화벽 제공을 위해 / 인터넷 트래픽 성능 개선 / 필터링 출구 프락시</li></ul></li><li>접근(입구) 프락시<ul><li>고객으로부터의 모든 요청을 종합적으로 처리하기 위해 ISP 접근 지점에 위치</li></ul></li><li>대리 프락시 (=리버스 프락시)<ul><li>네트워크의 가장 끝에 있는 웹서버들의 바로 앞에 위치, 웹 서버로 향하는 모든 요청을 처리하고, 필요할 때만 웹 서버에게 자원을 요청할 수 있다.</li><li>보안 기능을 추가</li><li>성능 개선용: 빠른 웹서버 캐시를 느린 웹 서버 앞에 놓는다.</li></ul></li><li>네트워크 교환 프락시<ul><li>캐시를 이용해 인터넷 교차로의 혼잡을 완화하고, 트래픽 흐름을 감시하기 위해,<br><strong>충분한 처리 능력을 갖춘 프락시가 네트워크 사이의 인터넷 피어링 교환 지점들에 놓일 수 있다.</strong></li></ul></li></ol><h2 id="3-2-프락시-계층"><a href="#3-2-프락시-계층" class="headerlink" title="3.2 프락시 계층"></a>3.2 프락시 계층</h2><ul><li>부모관계: 인바운드 프락시 방향 쪽의 프락시를 부모, 아웃바운드 프록시 방향 쪽을 자식으로 본다.</li></ul><h3 id="3-2-1-프락시-계층-콘텐츠-라우팅"><a href="#3-2-1-프락시-계층-콘텐츠-라우팅" class="headerlink" title="3.2.1 프락시 계층 콘텐츠 라우팅"></a>3.2.1 프락시 계층 콘텐츠 라우팅</h3><ul><li>프록시 서버는 여러 가지 판단 근거에 의해 메세지를 다양하고 유동적인 프록시 서버와 원 서버들의 집합에게 보낼 수 있다.</li></ul><p><strong>동적 부모 선택의 몇 가지 사례</strong></p><ol><li><strong>부하 균형</strong>: 자식 프록시는 부하를 분산하기 위해 현재 부모들의 작업량 수준에 근거하여 부모 프록시를 고른다.</li><li><strong>지리적 인접성에 근거한 라우팅</strong>: 자식 프록시는 원 서버의 지역을 담당하는 부모를 선택할 수 있다.</li><li><strong>프로토콜/타입 라우팅</strong>: URI에 근거하여 다른 부모나 원서버로 라우팅 할 수 있다.</li><li><strong>유료 서비스 가입자를 위한 라우팅</strong>: 사용자가 빠른 서비스를 위해 추가금을 지불했다면, 성능 개선을 위한 압축 엔진으로 라우팅 될 수 있다.</li></ol><h3 id="3-2-2-어떻게-프록시가-트래픽을-처리하는가"><a href="#3-2-2-어떻게-프록시가-트래픽을-처리하는가" class="headerlink" title="3.2.2 어떻게 프록시가 트래픽을 처리하는가"></a>3.2.2 어떻게 프록시가 트래픽을 처리하는가</h3><ul><li>어떻게 HTTP 트래픽이 프록시로 향하는 길을 찾아내는지 알아보자.</li></ul><p><strong>클라 트래픽이 프록시로 가도록 만드는 방법 4가지</strong></p><ol><li>클라이언트를 수정한다.</li><li>네트워크를 수정한다.: 클라가 컨트롤할 수 없다면, 네트워크 인프라를 가로채서 웹 트래픽을 프록시로 가도록 조장하는 방법.<blockquote><p><strong>인터셉트 프록시</strong> (= transparent proxy): HTTP 트래픽을 지켜보고 가로채어 클라 모르게 트래픽을 프록시로 보내는 <strong>스위칭 장치</strong>와, 라우팅 장치가 필요.</p></blockquote></li><li>DNS namespace를 수정한다.<ul><li>대리 프록시는 웹 서버의 이름과 IP주소를 자신이 직접 허용한다. </li><li>DNS 이른 테이블을 수동으로 편집하거나,<br>사용할 적절한 프록시나 서버를 계산해주는 특별한 동적 DNS 서버를 이용해서 조정 가능하다.</li></ul></li><li>웹 서버를 수정한다.<ul><li>HTTP 리다이렉션 명령을 클라에게 돌려줌으로써, 클라의 요청을 프록시로 리다이렉트 하도록 설정할 수 있다.</li><li>리다이렉트를 받는 즉시, 클라는 프록시와의 트랜잭션을 시작한다.</li></ul></li></ol><hr><a name="how"><h1 id="4-클라에서-프록시-설정-방법"><a href="#4-클라에서-프록시-설정-방법" class="headerlink" title="4. 클라에서 프록시 설정 방법"></a>4. 클라에서 프록시 설정 방법</h1><h2 id="4-1-수동"><a href="#4-1-수동" class="headerlink" title="4.1 수동"></a>4.1 수동</h2><ul><li>단 하나의 프록시 서버만 지정가능하다.</li><li>장애시 대체 작동에 대한 지원이 없다.</li><li>관리 문제를 야기한다.</li></ul><h2 id="4-2-클라-프록시-설정"><a href="#4-2-클라-프록시-설정" class="headerlink" title="4.2 클라 프록시 설정"></a>4.2 클라 프록시 설정</h2><h3 id="PAC-파일"><a href="#PAC-파일" class="headerlink" title="PAC 파일"></a>PAC 파일</h3><ul><li>프록시 자동 설정 파일은 프록시 설정에 대한 보다 동적인 해결책이다.</li><li>문서에 접근할 때마다, 자바스크립트 함수가 적절한 프록시 서버를 선택한다.</li></ul><p>자바스크립트 PAC 파일의 URI를 브라우저에 설정해야 한다.</p><ul><li>브라우저는 URI로부터 PAC파일을 가져와서 매 접근마다 적절한 프록시 서버를 계산하기 위해 실행한다.</li><li>확장자: <code>.pac</code></li><li>MIME타입: <code>application/x-ns-proxy-autoconfig</code></li><li><code>FindProxyForURL(url, host)</code> 함수를 정의해야 한다.<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FindProxyForURL(url, host): <span class="string">"DIRECT"</span> | <span class="string">`PROXY <span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span> | <span class="string">`SOCKS <span class="subst">$&#123;host&#125;</span>:<span class="subst">$&#123;port&#125;</span>`</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindProxyForURL</span>(<span class="params">url, host</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(url.substring(<span class="number">0</span>,<span class="number">5</span>) == <span class="string">'http:'</span>) <span class="keyword">return</span> <span class="string">"PROXY http-proxy.mydomain.com:8080"</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(url.substring(<span class="number">0</span>,<span class="number">4</span>) == <span class="string">'ftp:'</span>) <span class="keyword">return</span> <span class="string">"PROXY ftp-proxy.mydomain.com:8080"</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="string">"DIRECT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling/Proxy_Auto-Configuration_%28PAC%29_file" target="_blank" rel="noopener">MDN <strong>PAC 파일</strong> 참고자료</a></p><h3 id="WPAD-파일"><a href="#WPAD-파일" class="headerlink" title="WPAD 파일"></a>WPAD 파일</h3><p>웹 프록시 자동 발견 프로토콜 Web Proxy Auto-Discovery Protocol<br><img src="/images/2019/28/01.png" style="width:100%"></p><ul><li>브라우저에게 알맞은 PAC 파일을 자동으로 찾아주는 알고리즘이다.</li><li>WPAD 프로토콜이 구현된 클라가 하게 될 일은<ol><li>PAC URI를 찾기 위해 WPAD를 사용한다.</li><li>주어진 URI에서 PAC파일을 가져온다.</li><li>프록시 서버를 알아내기 위해 PAC파일을 실행한다.</li><li>알아낸 프록시 서버를 이용해서 요청을 처리한다.</li></ol></li><li>WPAD는 성공할 때까지 각 기법을 하나씩 시도해본다. (20장에서 자세히..)<ol><li>동적 호스트 발견 규약 <a href="https://jwprogramming.tistory.com/35" target="_blank" rel="noopener">DHCP</a> (Dynamic Host Configuration Protocol)</li><li>서비스 위치 규약 [SLP]</li><li>DNS 잘 알려진 호스트 명</li><li>DNS SRV 레코드</li><li>DNS TXT 레코드 안의 서비스 URI</li></ol></li></ul><hr><a name="attributes"><h1 id="5-프록시-요청의-특이사항-6가지"><a href="#5-프록시-요청의-특이사항-6가지" class="headerlink" title="5. 프록시 요청의 특이사항 6가지"></a>5. 프록시 요청의 특이사항 6가지</h1><ol><li>프록시 URI는 서버 URI와 다르다.</li><li>가상 호스팅에서 일어나는 같은 문제</li><li>인터셉트 프록시는 부분 URI를 받는다</li><li>프록시는 프록시 요청과 서버 요청을 모두 다룰 수 있다.</li><li>전송 중 URI 변경</li><li>인터셉트 프록시를 이용한 URI 분석</li></ol><h2 id="5-1-프록시-URI는-서버-URI와-다르다"><a href="#5-1-프록시-URI는-서버-URI와-다르다" class="headerlink" title="5.1 프록시 URI는 서버 URI와 다르다."></a>5.1 프록시 URI는 서버 URI와 다르다.</h2><ul><li><p>웹 서버와 웹 프록시 메세지의 문법은 간다.</p></li><li><p>요청 URI가 달라진다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">클라 =&gt; 서버</span><br><span class="line">GET /index.html HTTP/1.0</span><br><span class="line">User-Agent: SuperBrowserv1.3</span><br><span class="line"></span><br><span class="line">클라 =&gt; 프록시</span><br><span class="line">GET http://www.mary.com/index.html HTTP/1.0</span><br><span class="line">User-Agent: SuperBrowserv1.3</span><br></pre></td></tr></table></figure></li><li><p>애초에 단일 서버 기준으로 메세지 설계가 되었었다. </p></li><li><p>프록시가 부상하면서 부분 URI는 문제가 되었고, 프록시 기반 게이트웨이는 URI 스킴을 알 필요가 있었기 때문에 부분URI가 아닌 전체 URI를 보낸다. </p></li></ul><h2 id="5-2-가상-호스팅에서-일어나는-같은-문제"><a href="#5-2-가상-호스팅에서-일어나는-같은-문제" class="headerlink" title="5.2 가상 호스팅에서 일어나는 같은 문제"></a>5.2 가상 호스팅에서 일어나는 같은 문제</h2><ul><li>명시적인 프록시는 요청 메세지가 완전한 URI를 갖도록 함</li><li>가상 호스팅 웹 서버는 Host 헤더를 요구한다.</li></ul><h2 id="5-3-인터셉트-프록시는-부분-URI를-받는다"><a href="#5-3-인터셉트-프록시는-부분-URI를-받는다" class="headerlink" title="5.3 인터셉트 프록시는 부분 URI를 받는다"></a>5.3 인터셉트 프록시는 부분 URI를 받는다</h2><ul><li>클라는 자신이 프록시와 대화하고 있음을 항상 알고 있지 않다.</li><li>몇몇 프록시는 클라에게는 보이지 않을 수 있다. (대리 프록시, 인터셉트 프록시)</li><li>때문에 보통 완전 URI를 보내지만, 위의 프록시들에게는 부분URI를 보내게된다.</li></ul><h2 id="5-4-프록시는-프록시-요청과-서버-요청을-모두-다룰-수-있다"><a href="#5-4-프록시는-프록시-요청과-서버-요청을-모두-다룰-수-있다" class="headerlink" title="5.4 프록시는 프록시 요청과 서버 요청을 모두 다룰 수 있다."></a>5.4 프록시는 프록시 요청과 서버 요청을 모두 다룰 수 있다.</h2><ul><li>다목적 프록시 서버는 요청 메세지에 완전URI와 부분URI를 모두 지원해야한다.</li><li>프록시<br>=&gt; 프록시로 요청시, 완전 URI<br>=&gt; 웹서버로 요청시, Host 헤더</li></ul><h2 id="5-5-전송-중-URI-변경"><a href="#5-5-전송-중-URI-변경" class="headerlink" title="5.5 전송 중 URI 변경"></a>5.5 전송 중 URI 변경</h2><p>프록시 서버는 요청 URI의 변경에 엄격해서는 안된다.<br>사이드 이펙트를 일으킬 수 있다.</p><hr><a name="track"><h1 id="6-메세지-추적"><a href="#6-메세지-추적" class="headerlink" title="6. 메세지 추적"></a>6. 메세지 추적</h1><ul><li>오늘날 웹 요청의 상당수가 프락시를 지나간다.<br>= 동시에 성능상의 이유로 세계 곳곳에 흩어져 있는 대리 캐시 저장고에 콘텐츠를 복제해두는 방식이 흔해지고있다.</li><li>프락시는 여러 벤더에 의해 개발된다.</li><li>프락시가 점점 흔해지면서, 프락시를 넘나드는 메세지의 흐름을 추적하고 문제점을 찾아내는 것도 필요한 일이 되었다.</li></ul><h2 id="6-1-Via-헤더"><a href="#6-1-Via-헤더" class="headerlink" title="6.1 Via 헤더"></a>6.1 <code>Via</code> 헤더</h2><ul><li>http헤더 필드의 <code>Via</code>는 메세지가 지나는 각 중간 노드(Proxy or GateWay)의 정보를 나열한다.</li><li>노드를 지날때마다, 중간노드는 Via 목록의 끝에 반드시 추가되어야 한다.</li><li>Via헤더 필드는 메세지의 전달을 추적하고, 메세지 루프를 진단하고, 요청을 보내고, 그에 대한 응답을 돌려주는 과정에 관여하는 모든 메세지 발송자들의 프로토콜을 다루는 능력을 알아보기 위해 사용된다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Via: 1.1 proxy-62.irenes-isp.net, 1.0 cache.joes-hardware.com</span><br></pre></td></tr></table></figure><ol><li>HTTP 1.1 프로토콜로 구현, proxy-62.irenes-isp.net로 불림</li><li>HTTP 1.0 프로토콜로 구현, cache.joes-hardware.com로 불림</li></ol><ul><li>네트워크 라우팅 루프를 탐지하기 위해 Via 헤더를 사용할 수 있다.</li></ul><h3 id="Via-문법"><a href="#Via-문법" class="headerlink" title="Via 문법"></a>Via 문법</h3><ul><li>쉽표로 구분되는 경유지<code>waypoint</code> 목록</li><li>각 경유지는 개별 프락시 서버나<br>게이트웨이 홉을 나타낸다.<ul><li>중간노드의 프로토콜과 주소에 대한 정보를 담고 있다.</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Via: ([ protocol-name &quot;/ ] protocol-version ( host [ &quot;:&quot; port] ) [ comment ]), (...)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Via: 1.1 62e18ccb7bd6.cloudfront.net (CloudFront)</span><br><span class="line"></span><br><span class="line">protocol-name: HTTP</span><br><span class="line">protocol-version: 1.1</span><br><span class="line">host: 62e18ccb7bd6.cloudfront.net</span><br><span class="line">comment: (CloudFront)</span><br></pre></td></tr></table></figure><ul><li><strong>프로토콜 이름</strong>: 중개자가 받은 프로토콜 / 프로토콜이 HTTP라면 이름이 없어도 된다.</li><li><strong>프로토콜 버전</strong>: 수신한 메세지의 버전. 버전포맷은 프로토콜에 달려있다.</li><li><strong>노드 이름</strong>: 중개자의 호스트와 포트번호(포트번호가 없으면 사용하는 프로토콜의 기본 포트라고 간주), 보안을위해 가명으로 대체 가능하다.</li><li><strong>노드 코멘트</strong>: 중개자 노드를 서술하는 선택적인 코멘트. 벤더나 버전 정보를 포함한다. 프락시 서버에서 일어난 진단정보를 포함하기도 한다.</li></ul><h3 id="Via-요청과-응답-경로"><a href="#Via-요청과-응답-경로" class="headerlink" title="Via 요청과 응답 경로"></a>Via 요청과 응답 경로</h3><ul><li>요청메세지가 프락시 A,B,C를 지나간다면,<br>응답메세지는 프락시 C,B,A를 지나간다.</li><li>응답 <code>Via</code> 헤더는 거의 요청 Via 헤더와 반대다.</li></ul><h3 id="Via와-게이트웨이"><a href="#Via와-게이트웨이" class="headerlink" title="Via와 게이트웨이"></a>Via와 게이트웨이</h3><ul><li>몇몇 프락시 서버에게 비 HTTP 프로토콜을 사용할 수 있는 게이트웨이 기능을 제공한다.</li><li>Via 헤더는 이러한 프로토콜 변환을 기록하므로 HTTP 어플리케이션은 프락시 연쇄에서 프로토콜 능력과 변환이 있었는지 알아챌 수 있다.</li></ul><h3 id="Server헤더와-Via헤더"><a href="#Server헤더와-Via헤더" class="headerlink" title="Server헤더와 Via헤더"></a>Server헤더와 Via헤더</h3><ul><li>Server 응답 헤더 필드는 <strong>원서버</strong>에 의해 사용되는 소프트웨어를 알려준다.</li><li>응답 메세지가 프락시를 통과할 때, 프락시는 Server 헤더를 수정해서는 안된다.</li><li>Server 헤더는 원 서버를 위해 존재한다.<br>대신 프락시는 Via 항목을 추가해야 한다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server: nginx/1.10.3 (Ubuntu)</span><br></pre></td></tr></table></figure><h3 id="Via가-개인정보-보호와-보안에-미치는-영향"><a href="#Via가-개인정보-보호와-보안에-미치는-영향" class="headerlink" title="Via가 개인정보 보호와 보안에 미치는 영향"></a>Via가 개인정보 보호와 보안에 미치는 영향</h3><ul><li>보안을 위한다면, Via 노드 이름을 가명으로 교체해야한다.</li><li>아주 강력한 보안을 위해 프락시는 정렬된 일련의 Via 경유지 항목들을 하나로 합칠 수 있다.<ul><li>여러 경유지들이 모두 같은 조직의 통제하에 있고,<br>호스트가 이미 가명으로 교체되지 ㅇ낳은 이상,<br>그들에 대한 항목들을 합쳐서는 안된다.</li><li>수신된 프로토콜 값이 서로 다른 항목들도 합쳐서는 안된다.</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Via 1.0 foo, 1.1 devirus.company.com, 1.1 access-logger.company.com</span><br><span class="line"></span><br><span class="line">아래처럼 합칠 수 있다.</span><br><span class="line"></span><br><span class="line">Via: 1.0 foo, 1.1 concealed-stuff</span><br></pre></td></tr></table></figure><h2 id="6-2-TRACE-메서드"><a href="#6-2-TRACE-메서드" class="headerlink" title="6.2 TRACE 메서드"></a>6.2 <code>TRACE</code> 메서드</h2><ul><li>프락시가 점점 복잡해지고, 더 많은 벤더가 프락시 제품을 배치하면서, <strong>상호운용성</strong> 문제가 증가한다.</li><li>프락시 네트워크를 진단하기 위해, HTTP/1.1의 TRACE메서드는<br>요청 메세지를 프락시의 연쇄를 따라가면서 관찰/추적할 수 있도록 해준다.<ul><li>프락시 흐름을 디버깅하는데 매우 유용하다. (널리 구현되지 않았다)</li></ul></li><li>TRACE 요청이 목적지 서버에 도착했을 때,<br>서버는 전체 요청 메세지를 HTTP 응답 메세지의 본문에 포함시켜 송신자에게 그대로 돌려보낸다. <ul><li>Content-Type은 message/http</li></ul></li></ul><h3 id="Max-Forwards"><a href="#Max-Forwards" class="headerlink" title="Max-Forwards"></a>Max-Forwards</h3><ul><li>모든 프락시와 게이트웨이는 Max-Forwards를 지원해야 한다.</li><li>TRACE와 OPTIONS 요청의 프락시 홉 갯수를 제한하기 위해 Max-Forwards를 사용한다.</li><li>전달되는 메세지가 무한루프에 빠지지 않는지<br>프락시 연쇄를 테스트하거나, 연쇄 중간의 특정 프락시 서버들의 효과를 체크할 때 유용하다.</li><li>Max-Forwards요청 헤더 필드는 이 요청 메세지가 몇번 더 다음 홉으로 전달될 수 있는지 말해주는 정수 하나를 담고 있다.</li><li>만약 0이라면, TRACE메서드를 더이상 전달하지 말고, 반드시 클라에게 돌려줘야한다.</li><li>0보다 크다면, 다음으로 전달될때 1을 감소하고 갱신해야한다.</li></ul><hr><a name="authentication"><h1 id="7-프락시-인증"><a href="#7-프락시-인증" class="headerlink" title="7. 프락시 인증"></a>7. 프락시 인증</h1><ul><li>접근 제어장치로써 제공될 수 있다.</li><li>HTTP는 사용자가 유효한 접근 권한 자격을 프락시에 제출하지 않는 한,<br>콘텐츠에 대한 요청을 차단하는 프락시 인증이라는 매커니즘을 정의하고 있다.</li><li>제한된 콘텐츠에 대한 요청이 프락시 서버에 도착했을 때,<br><code>407 Proxy Authorization Required</code> 상태코드를 <code>Proxy-Authenticate</code> 헤더 필드와 함께 반환할 수 있다.</li></ul><ol><li>클라는 <code>407</code> 응답을 받게되면, 사용자에게 요구되는 자격을 수집한다.</li><li>자격을 획득하면: <code>Proxy-Authenticate</code> 헤더 필드에 자격을 담아서 다시 보낸다.</li><li>자격이 유효하면: 프락시는 원요청을 통과시킨다.<br>자격이 유효하지 않으면: <code>407</code> 응답을 보낸다.</li></ol><ul><li>프락시 인증은 인증해야하는 프락시가 연쇄상 있을 경우 잘 동작하지 않는다.</li></ul><hr><a name="mutual"><h1 id="8-프락시-상호운용성"><a href="#8-프락시-상호운용성" class="headerlink" title="8. 프락시 상호운용성"></a>8. 프락시 상호운용성</h1><ul><li>클라, 서버, 프락시는 여러 벤더에 의해 만들어진다.</li><li>프락시 서버는 서로 다른 클라, 서버 사이를 중개해야한다.</li></ul><h2 id="8-1-지원하지-않는-헤더와-메서드-다루기"><a href="#8-1-지원하지-않는-헤더와-메서드-다루기" class="headerlink" title="8.1 지원하지 않는 헤더와 메서드 다루기"></a>8.1 지원하지 않는 헤더와 메서드 다루기</h2><ul><li>프락시는 이해할 수 없는 헤더 필드는 반드시 그대로 전달해야한다.</li><li>같은 이름의 헤더 필드가 여러개 있는 경우,<br>그들의 상대적인 순서도 반드시 유지해야한다.</li><li>이해할 수 없는 메서드는 반드시 그대로 전달해야한다.</li></ul><h2 id="8-2-OPTIONS-어떤-기능을-지원하는지-알아보기"><a href="#8-2-OPTIONS-어떤-기능을-지원하는지-알아보기" class="headerlink" title="8.2 OPTIONS: 어떤 기능을 지원하는지 알아보기"></a>8.2 OPTIONS: 어떤 기능을 지원하는지 알아보기</h2><ul><li><code>OPTIONS</code> 메서드는 서버나 웹 서버의 특정 리소스가<br><strong>어떤 기능을 지원하는지(메서드 등)</strong> 클라(혹은 프락시)가 알아볼 수 있게 해준다.</li><li>성공한다면, 200 OK 응답으로 반환한다.<br>(서버에서 지원하거나, 지정한 리소스에 대한 가능한 선택적인 기능들을 서술하느 ㄴ여러 헤더를 포함하여) </li><li>HTTP/1.1이 명시한 헤더는, 서버에 의해 어떤 메서드가 지원되는지 서술하는 Allow 헤더 하나뿐이다.</li></ul><h2 id="8-3-Allow-헤더"><a href="#8-3-Allow-헤더" class="headerlink" title="8.3 Allow 헤더"></a>8.3 Allow 헤더</h2><ul><li><p>요청 URI에 의해 식별되는 자원에 대해 지원되는 메서드들이나 서버가 지원하는 모든 메서드를 열거한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Allow: GET, HEAD, PUT</span><br></pre></td></tr></table></figure></li><li><p>서버는 클라가 원하는 모든 메서드를 지원해야할 의무는 없다.</p></li><li><p>요청에 대한 응답에는 실제로 지원하는 메서드들을 열거하는 Allow 헤더를 포함시켜야한다.</p></li><li><p>프락시는 Allow 필드를 수정할 수 없다.</p></li></ul><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Proxy_servers_and_tunneling/Proxy_Auto-Configuration_%28PAC%29_file" target="_blank" rel="noopener">MDN <strong>PAC 파일</strong> 참고자료</a></li><li><a href="https://jwprogramming.tistory.com/35" target="_blank" rel="noopener">DHCP (Dynamic Host Configuration Protocol)</a></li></ol></a></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;a name=&quot;proxy&quot;&gt;

&lt;h1 id=&quot;1-프록시란&quot;&gt;&lt;a href=&quot;#1-프록시란&quot; class=&quot;headerlink&quot; title=&quot;1. 프록시란?&quot;&gt;&lt;/a&gt;1. 프록시란?&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;웹 프록시 서버는 클라의 입장에서 트랜
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="proxy" scheme="http://feel5ny.github.io/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>한글은 노토산스, 영문/숫자는 다른 폰트로 해주세요...👀 (feat. unicode)</title>
    <link href="http://feel5ny.github.io/2019/09/08/CSS_02/"/>
    <id>http://feel5ny.github.io/2019/09/08/CSS_02/</id>
    <published>2019-09-08T13:23:55.000Z</published>
    <updated>2019-09-08T15:26:15.670Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://fonts.google.com/specimen/Noto+Sans+KR" target="_blank" rel="noopener">노토 산스</a>를 사용하다보면 영문과 숫자가 너무 날씬하다는 느낌을 받곤 했다.<br>개인적인 취향으로 <strong>1</strong> 숫자 아랫부분에 있는 serif를 별로 좋아하지 않는다.</p><img src="/images/2019/27/01.jpg"><p>그밖에도 <strong>숫자에 볼륨감이 없어서</strong> 한글의 깔끔함에 비해서 영문과 숫자에 아쉬움들이 있곤했다. 글자간 커링도 작고, 카운터(속공간)도 작은 듯하고.. </p><img src="/images/2019/27/02.jpg"><p>그래도 점점 노토산스를 자주 애용하고 보다보니, 그냥 저냥 적응하고 있었는데, 회사 프로젝트에서 요 노토산스에 대해서 디자인 요청이 왔다. </p><blockquote><p>한글은 노토산스로, 영문과 숫자, 특수문자는 오픈산스로 적용해주세요! (여기서 특수문자는 키보드서 shift와 함께 사용가능한 특수문자들)</p></blockquote><p>듣던 중에 반가운 소리였다.(😘) 노토산스에 대해 개인적인 취향?을 해소해주는 디자인 요청이었기 때문에.<br>그나저나 이걸 어떻게 적용할지는 고민이었다. 일일이 적용하는건 절대 말이 안된다고 생각했고, 다른 방법이 있을거라고 생각해보며 이리저리 서칭을 해보았다.<br>이 포스팅에서는 <strong>어떤 원리로 font가 분리되어서 적용되는지</strong>에 대해서 설명하려고 한다.</p><hr><ol><li>글자 적용시 필요한 css의 <code>@font-face</code>에 대해서 알아보며, 크게는 <code>@font-face</code>를 포함하고 있는 at-rule의 개념과 css문의 개념을 가볍게 살펴본다. 바로 방법을 알고싶은 분들은 해당 단락은 넘어가도된다.</li><li><code>@font-face</code>에서 제공해주는 <code>unicode range</code>에 대해서 살펴본다.</li><li>실제 <code>@font-face</code>에서 적용하는 방법을 알아본다.</li></ol><hr><a name="at-rule"><h1 id="1-CSS문-CSS-statement-과-규칙-At-rule-그리고-font-face"><a href="#1-CSS문-CSS-statement-과-규칙-At-rule-그리고-font-face" class="headerlink" title="1. CSS문(CSS statement)과 @규칙 (At-rule), 그리고 @font-face"></a>1. CSS문(CSS statement)과 @규칙 (At-rule), 그리고 <code>@font-face</code></h1><p>우리가 보통 사용하는 규칙집합(선택자-선언 블록 쌍)은 큰 규칙집합 목록만으로 구성된 스타일 시트의 주요 구성 블록이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">  font-size: 10px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>하지만 위 규칙집합들 이외에도 웹 개발자가 스타일 시트에서 전하고 싶은 다른 정보가 있을 수 있다.</li><li>문자 집합, import하려는 다른 외부 스타일 시트, font-face 또는 그밖의 다른 정보들과 같은.</li><li>위 정보들을 css에 담기 위해서는 특정 종류의 statement을 사용해야 한다.</li></ul><h2 id="1-1-CSS문-CSS-statement"><a href="#1-1-CSS문-CSS-statement" class="headerlink" title="1.1 CSS문 (CSS statement)"></a>1.1 CSS문 (CSS statement)</h2><p><strong>statement</strong>(문)은 비공백 문자로 시작하여 첫 번째 닫는 중괄호 또는 세미콜론 (문자열 외에, 이스케이프되지 않고 다른 <code>{}</code>, <code>()</code> 및 <code>[]</code> 쌍에 포함되지 않는) 으로 끝나는 구성 블록이다.</p><img src="/images/2019/27/03.png"><p>다음과 같은 다른 종류의 문이 있다</p><h3 id="1-1-1-규칙집합-Rulesets"><a href="#1-1-1-규칙집합-Rulesets" class="headerlink" title="1.1.1 규칙집합 Rulesets"></a>1.1.1 <strong>규칙집합</strong> Rulesets</h3><ul><li>위 그림 것처럼, CSS 선언의 컬렉션과<br>선택자에 의해 기술된 조건을 연결짓는 규칙집합 (또는 규칙).</li><li>우리가 흔히 사용하는.</li></ul><h3 id="1-1-2-At-Rule"><a href="#1-1-2-At-Rule" class="headerlink" title="1.1.2 At-Rule"></a>1.1.2 <strong>At-Rule</strong></h3><p><code>@</code> (<code>U+0040 COMMERCIAL AT</code>)로 시작한 다음<br>statement의 마지막, 즉 블록 다음에는 세미콜론(<code>;</code>)이 오며,<br>또는 다음 블록의 끝까지 계속 식별자가 뒤따른다.</p><ol><li><p>식별자에 의해 정의된 각 유형의 <strong>at-rule</strong>은, 자체 내부 구문 및 의미(semantics)가 있을 수 있다. </p><ul><li><strong>메타 데이터</strong> 정보(<code>@charset</code> 또는 <code>@import</code> 같은), </li><li><strong>조건부</strong> 정보(<code>@media</code> 또는 <code>@document</code> 같은) </li><li>또는 <strong>설명</strong> 정보(<code>@font-face</code> 같은)를 전달하는 데 사용된다.</li></ul></li><li><p>중첩 문(nested statements)</p><ul><li>이들은 <strong>at-rule</strong>, 조건부 그룹 규칙의 <strong>특정 부분집합</strong>에서 사용될 수 있는 문이다. </li><li>이러한 문은 오직 특정 조건이 일치되면 적용한다.<ul><li>at-rule의 <code>@media</code>는 브라우저가 돌아가는 장치가 표현된 조건과 일치하는 경우에만 적용된다.<ul><li>미디어 쿼리에 정의된 조건과 연결합니다.</li></ul></li><li>at-rule의 <code>@document</code>는 현재 페이지가 일부 조건과 일치하는 경우에만 적용된다. (아직 실험)<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">document</span> url(<span class="string">"https://www.example.com/"</span>) &#123;</span><br><span class="line">  <span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><h2 id="1-2-font-face"><a href="#1-2-font-face" class="headerlink" title="1.2 @font-face"></a>1.2 <code>@font-face</code></h2><ul><li>at-rule의 <code>@font-face</code> CSS는 텍스트를 표시할 <strong>사용자 정의 글꼴을 지정한다.</strong></li><li>이 글꼴은 원격 서버 또는 사용자 자신의 컴퓨터에 로컬로 설치된 글꼴에서 로드할 수 있다. <ul><li>사용자의 컴퓨터에서 찾을 글꼴 이름을 지정하고<br>사용자 에이전트가 일치 항목을 찾으면 로컬 글꼴이 사용된다. </li><li>그렇지 않으면 <code>url()</code> 함수를 사용하여 지정한 글꼴 리소스를 다운로드하여 사용한다.</li></ul></li><li><code>@font-face</code>는 폰트 제작자들이 자신의 글꼴을 제공할 수 있게 함으로써 “웹 세이프” 글꼴 (즉, 보편적화된 흔한 웹 글꼴)에 국한되지 않고 콘텐츠를 디자인할 수 있게 한다. </li><li>찾고 사용할 로컬로 설치된 글꼴의 이름을 지정할 수 있기 때문에<br>인터넷 연결에 의존하지 않고 글꼴을 기본 이상의 사용자 지정할 수 있다.</li><li><code>url()</code>과 <code>local()</code>을 함께 사용하는 것이 일반적이어서,<br>사용자가 설치한 폰트의 사본이 사용 가능한 경우 사용되어,<br>사용자의 기기에서 찾을 수 없는 경우 폰트의 사본을 다운로드하는 것으로 되돌아간다.</li></ul><a name="unicode-range"><h1 id="2-font-face의-속성중-unicode-range-사용하기"><a href="#2-font-face의-속성중-unicode-range-사용하기" class="headerlink" title="2. @font-face의 속성중 unicode-range 사용하기"></a>2. <code>@font-face</code>의 속성중 <code>unicode-range</code> 사용하기</h1><p>우리는 <strong>css에 정의된 글꼴정보가 글자에 적용될 시점에, 특정 문자는 필터하면서 적용되길</strong> 바라고 있다. </p><ul><li><strong>글자에 글꼴의 정의</strong>하는 부분은 css의 @font-face 블락 내부에서 선언되어야할 것이고, </li><li><strong>특정 문자를 필터</strong>하기 위해서는 범위를 지정하는 부분이 필요하 것이다.</li></ul><h2 id="2-1-unicode-range-속성"><a href="#2-1-unicode-range-속성" class="headerlink" title="2.1 unicode-range 속성"></a>2.1 <code>unicode-range</code> 속성</h2><p><code>@font-face</code>의 속성 중에는 <code>unicode-range</code>라는 속성이 존재한다.<br>해당 속성은 글꼴에서 사용될 유니 코드 코드 포인트의 범위를 지정할 수 있다. 우리는 <code>unicode-range</code>를 사용하여 숫자와 영문, 특수문자의 범위를 알아내고, 해당 범위에 폰트를 지정할 것이다.</p><h2 id="2-2-unicode와-범위"><a href="#2-2-unicode와-범위" class="headerlink" title="2.2 unicode와 범위"></a>2.2 <code>unicode</code>와 범위</h2><h3 id="유니코드"><a href="#유니코드" class="headerlink" title="유니코드"></a>유니코드</h3><ul><li>유니코드(Unicode)는 전 세계의 모든 문자를 컴퓨터에서 일관되게 표현하고 다룰 수 있도록 설계된 산업 표준이며, 유니코드 협회(Unicode Consortium)가 제정한다.</li><li>유니코드의 목적은 현존하는 문자 인코딩 방법들을 모두 유니코드로 교체하려는 것이다. 기존의 인코딩들은 그 규모나 범위 면에서 한정되어 있고, 다국어 환경에서는 서로 호환되지 않는 문제점이 있었다.</li></ul><h3 id="문자별-범위"><a href="#문자별-범위" class="headerlink" title="문자별 범위"></a>문자별 범위</h3><ul><li>유니코드에는 30가지 이상의 목차가 있다. <a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters" target="_blank" rel="noopener">목차</a></li><li>우리는 <strong>숫자</strong>와 <strong>영문</strong>, 키보드로 입력가능한 <strong>특수문자</strong>에만 적용할 에정이므로, <strong><a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters#Basic_Latin" target="_blank" rel="noopener">Basic Latin</a></strong>만 확인하면된다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 특수문자 범위: U+0020-002F, U+003A-0040, U+005B-0060, U+007B-007E</span><br><span class="line">2. 영문 범위: U+0041-005A(대문자), U+0061-007A(소문자)</span><br><span class="line">3. 숫자 범위: U+0030-0039</span><br><span class="line"></span><br><span class="line">전체 U+0020-007E</span><br></pre></td></tr></table></figure><hr><a name="font-face"><h1 id="3-실제-font-face에서-적용하는-방법"><a href="#3-실제-font-face에서-적용하는-방법" class="headerlink" title="3. 실제 @font-face에서 적용하는 방법"></a>3. 실제 @font-face에서 적용하는 방법</h1><ul><li>실제 css의 <code>font-family</code>에 사용할 때에는 다르게 적용하고 싶은 문자마다 css를 적용하는 것이 아니다.</li><li>우리는 <strong>noto-sans</strong>를 전체 적용했지만, 특정 문자만 <strong>open-sans</strong>를 사용하고 싶은 상황이기 때문에, <code>font-family</code>에 따로 <strong>Open-sans</strong> 명시 없이 그대로 <strong>Noto-sans</strong>가 명시된 상태에서 내부적으로 적용시점에만 따로 적용되게 하면 된다.</li><li>이를 위해서는 같은 이름의 <code>font-family</code>를 갖는 두개의 <code>@font-face</code>가 필요하다. <ul><li>하나의 <code>@font-face</code>에는 <code>unicode-range</code>없이 전체 적용할 <strong>noto-sans</strong>를 연결하고</li><li>다른 <code>@font-face</code>에는 <code>unicode-range</code>를 정의하고 해당 범위에만 적용할 <strong>open-sans</strong>를 연결한다.</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"NotoSansKR"</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"../fonts/notoSansKR/NotoSans-Bold.woff"</span>) <span class="built_in">format</span>(<span class="string">"woff"</span>);</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">"NotoSansKR"</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">"../fonts/openSans/OpenSans-SemiBold.woff"</span>) <span class="built_in">format</span>(<span class="string">"woff"</span>);</span><br><span class="line">  <span class="attribute">unicode-range</span>: U+<span class="number">0020</span>-<span class="number">007</span>E;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe src="https://codesandbox.io/embed/cssfont-faceunicode-range-12k1k?fontsize=14" title="css_@font-face_unicode-range" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><hr><hr><p><strong>참고자료</strong></p><ol><li><a href="https://developer.mozilla.org/ko/docs/Web/CSS/At-rule" target="_blank" rel="noopener">at-rule mdn</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face" target="_blank" rel="noopener">font-face mdn</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Syntax#CSS_statements" target="_blank" rel="noopener">css statement mdn</a></li><li><a href="https://en.wikipedia.org/wiki/List_of_Unicode_characters" target="_blank" rel="noopener">유니코드 목차</a></li></ol></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://fonts.google.com/specimen/Noto+Sans+KR&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;노토 산스&lt;/a&gt;를 사용하다보면 영문과 숫자가 너무 날씬하다는 느낌을 받곤 했다.&lt;br&gt;
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="CSS" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/CSS/"/>
    
    
      <category term="css" scheme="http://feel5ny.github.io/tags/css/"/>
    
      <category term="unicode" scheme="http://feel5ny.github.io/tags/unicode/"/>
    
      <category term="font" scheme="http://feel5ny.github.io/tags/font/"/>
    
  </entry>
  
  <entry>
    <title>웹 서버</title>
    <link href="http://feel5ny.github.io/2019/09/07/HTTP_005/"/>
    <id>http://feel5ny.github.io/2019/09/07/HTTP_005/</id>
    <published>2019-09-07T07:23:55.000Z</published>
    <updated>2019-09-08T07:39:21.048Z</updated>
    
    <content type="html"><![CDATA[<ul><li>HTTP 통신을 진단해주는 간단한 웹 서버를 node.js로 작성해본다.</li><li>어떻게 웹 서버가 HTTP 트랜젝션을 처리하는지 단계별로 설명해본다.</li></ul><hr><a name="web"><h1 id="웹-서버가-하는-일"><a href="#웹-서버가-하는-일" class="headerlink" title="웹 서버가 하는 일"></a>웹 서버가 하는 일</h1><ul><li>웹 서버는 HTTP 및 그와 관련된 TCP 처리를 구현한 것이다.</li><li>웹 서버는 자신이 제공하는 리소스를 관리하고, 웹 서버를 설정, 통제, 확장하기 위한 관리 기능을 제공한다.</li><li>웹 서버는 TCP 커넥션 관리에 대한 책임을 운영체제와 나눠 갖는다.</li></ul><ol><li><p>운영체제는</p><ul><li>컴퓨터 시스템의 하드웨어를 관리하고 TCP/IP 네트워크 지원</li><li>웹 리소스를 유지하기 위한 파일 시스템</li><li>현재 연산 활동을 제어하기 위한 프로세스 관리를 제공한다.</li></ul></li><li><p>웹 서버는</p><ul><li>다목적 소프트웨어 웹 서버를 표준 컴퓨터 시스템에 설치하고 실행할 수 있다.</li><li>몇몇 공유기들은 웹브라우저로 접근 가능한 관리 기능을 제공한다.</li></ul></li></ol><p>node.js로 간단 웹서버를 구현해 보았다.</p><div id="badge-container-feel5ny-httpStudy-37558bf54d1222ef6413274b392c7318c0c60bd5" class="hexo-github" style="width: 100%"></div><script src="/hexo-github/badge.js"></script><script type="text/javascript">  loadStyle("/hexo-github/style.css");  loadStyle("/hexo-github/octicons/octicons.css");  new Badge("#badge-container-feel5ny-httpStudy-37558bf54d1222ef6413274b392c7318c0c60bd5", "feel5ny", "httpStudy", "37558bf54d1222ef6413274b392c7318c0c60bd5", false);</script><p>공통적으로는 아래 그림에서 하는 일을 한다.</p><img src="/images/2019/26/01.jpg" style="width:100%"><ol><li>커넥션을 맺는다.<ul><li>클라의 접속을 받아들이거나, 원치 않는 클라라면 닫는다.</li></ul></li><li>요청을 받는다.<ul><li>HTTP 요청 메세지를 네트워크로부터 읽어 들인다.</li></ul></li><li>요청을 처리한다.<ul><li>요청 메세지를 해석하고 행동을 취한다.</li></ul></li><li>리소스에 접근한다.<ul><li>메세지에서 지정한 리소스에 접근한다.</li></ul></li><li>응답을 만든다.<ul><li>올바른 헤더를 포함한 HTTP 응답 메세지를 생성한다.</li></ul></li><li>응답을 보낸다.<ul><li>응답을 클라에게 돌려준다.</li></ul></li><li>트랜잭션을 로그로 남긴다.<ul><li>로그파일에 트랜잭션 완료에 대한 기록을 남긴다.</li></ul></li></ol><a name="1"><h1 id="1-클라이언트-커넥션-수락"><a href="#1-클라이언트-커넥션-수락" class="headerlink" title="1. 클라이언트 커넥션 수락"></a>1. 클라이언트 커넥션 수락</h1><ul><li>클라가 이미 서버에 대해 열려있는 지속적 커넥션을 갖고 있다면, 해당 커넥션을 사용할 수 있다.</li><li>그렇지 않다면, 새로운 커넥션을 열 필요가 있다.</li></ul><h2 id="1-1-새-커넥션-다루기"><a href="#1-1-새-커넥션-다루기" class="headerlink" title="1.1 새 커넥션 다루기"></a>1.1 새 커넥션 다루기</h2><ul><li>클라가 웹 서버에 TCP 커넥션을 요청하면, 웹 서버는 그 커넥션을 맺고 TCP 커넥션에서 IP 주소를 추출하여 커넥션 맞은편에 어떤 클라가 있는지 확인한다.</li><li>새 커넥션이 맺어지고 받아들여지면, 서버는 새 커넥션을 커넥션 목록에 추가하고, 커넥션에서 오가는 데이터를 지켜보기 위한 준비를 한다.</li><li>웹 서버는 어떤 커넥션이든 마음대로 거절하거나 즉시 닫을 수 있다.</li><li>어떤 웹서버들은 클라의 IP 주소나 호스트명이 인가되지 않았거나, 악의적이라고 알려진 것인 경우 커넥션을 닫는다.</li></ul><h2 id="1-2-클라이언트-호스트명-식별"><a href="#1-2-클라이언트-호스트명-식별" class="headerlink" title="1.2 클라이언트 호스트명 식별"></a>1.2 클라이언트 호스트명 식별</h2><ul><li><strong>역방향 DNS(reverse DNS)</strong>를 사용해서 클라의 IP 주소를 클라의 호스트 명으로 변환하도록 설정되어 있다.</li><li>웹서버는 <strong>클라이언트 호스트 명</strong>을 구체적인 접근 제어와 로깅을 위해 사용할 수 있다.</li><li>호스트명 룩업(hostname lookup)은 꽤 시간이 많이 걸릴 수 있어, 웹 트랜잭션을 느려지게 할 수 있다.</li><li>많은 대용량 웹 서버는 호스트명 분석(hostname resolution)을 꺼두거나, 특정 콘텐츠에 대해서만 켜놓는다.</li></ul><h2 id="1-3-ident를-통해-클라이언트-사용자-알아내기"><a href="#1-3-ident를-통해-클라이언트-사용자-알아내기" class="headerlink" title="1.3 ident를 통해 클라이언트 사용자 알아내기"></a>1.3 ident를 통해 클라이언트 사용자 알아내기</h2><ul><li>몇몇 웹서버는 또한 <strong>IETF ident 프로토콜</strong>을 지원한다.<ul><li>IETF: 국제 인터넷 표준화 기구</li><li>Internet Engineering Task Force</li></ul></li><li>ident 프로토콜은 서버에게 어떤 사용자 이름이 HTTP 커넥션을 초기화했는지 찾아낼 수 있게 해준다.</li><li>이 정보는 특히 웹서버 로깅에서 유용하기 때문에, 널리 쓰이는 일반 로그포맷(Common Log Format)의 두 번째 필드는 각 HTTP 요청의 ident 사용자 이름을 담고 있다.</li></ul><p><a href="https://en.wikipedia.org/wiki/Ident_protocol" target="_blank" rel="noopener">ident protocol - wiki</a></p><p>아래는 어떻게 ident 프로토콜이 동작하는지 보여준다.</p><img src="/images/2019/26/02.png" style="width:100%"><ul><li>만약 클라가 ident 프로토콜을 지원한다면, 클라는 ident 결과를 위해 TCP port 113번을 listen한다.</li></ul><p><strong>공공 인터넷</strong>에서는 다음과 같은 이유로 잘 동작하지 않는다.</p><ul><li>많은 클라 PC는 identd 신원확인 프로토콜 데몬 소프트웨어를 실행하지 않는다.</li><li>ident 프로토콜은 HTTP 트랜잭션을 유의미하게 <strong>지연</strong>시킨다.</li><li><strong>방화벽</strong>이 ident 트래픽이 들어오는 것을 막는 경우가 많다.</li><li>ident 프로토콜은 <strong>안전하지 않고 조작하기 쉽다.</strong></li><li>ident 프로토콜은 <strong>가상 IP 주소를 잘 지원하지 않는다.</strong></li><li>클라 사용자 이름의 노출로 인한 프라이버시 침해의 우려가 있다.</li></ul><hr><a name="2"><h1 id="2-요청-메세지-수신"><a href="#2-요청-메세지-수신" class="headerlink" title="2. 요청 메세지 수신"></a>2. 요청 메세지 수신</h1><ul><li>커넥션 데이터가 도착하면,<br>웹서버는 네트워크 커넥션에서 그 데이터를 읽어 들이고,<br>파싱하여 요청 메세지를 구성한다.</li></ul><img src="/images/2019/26/03.png"><p>요청 메세지를 파싱할 때, 웹서버는 다음과 같은 일을 한다.</p><ul><li>요청줄을 파싱하여 요청 <strong>메서드</strong>, 지정된 리소스의 식별자(<strong>URI</strong>), <strong>버전 번호</strong>를 찾는다.<br>각 값은 스페이스 한 개로 분리되어 있으며, 요청줄은 캐리지 리턴 줄바꿈(<strong><code>CRLF</code></strong>) 문자열로 끝난다. (<a href="https://feel5ny.github.io/2019/08/15/HTTP_003_01/#1">참고</a>)</li><li>메세지 헤더들을 읽는다. 각 메세지 헤더는 <code>CRLF</code>로 끝난다.</li><li>헤더의 끝을 의미하는 <code>CRLF</code>로 끝나는 빈 줄을 찾아낸다.</li><li>요청 <strong>본문</strong>이 있다면, 읽어 들인다. (길이는 <code>Content-Length</code> 헤더로 정의한다.)</li></ul><h2 id="2-1-메세지의-내부-표현"><a href="#2-1-메세지의-내부-표현" class="headerlink" title="2.1 메세지의 내부 표현"></a>2.1 메세지의 내부 표현</h2><ul><li>몇몇 웹서버는 요청 메세지를 쉽게 다룰 수 있도록 내부의 <strong>자료구조에 저장</strong>한다.</li><li>자료구조는 요청 메세지의 각 조각에 대한 포인터와 길이를 담을 수 있을 것이고,<br>헤더는 속도가 빠른 <strong>룩업 테이블</strong>에 저장되어 각 필드에 신속하게 접근할 수 있을 것이다.</li></ul><img src="/images/2019/26/04.png"><h2 id="2-2-커넥션-입력-출력-처리-아키텍처"><a href="#2-2-커넥션-입력-출력-처리-아키텍처" class="headerlink" title="2.2 커넥션 입력/출력 처리 아키텍처"></a>2.2 커넥션 입력/출력 처리 아키텍처</h2><ul><li>고성능 웹서버는 수천 개의 커넥션을 동시에 열 수 있도록 지원한다.</li><li>어떤 커넥션들로부터는 요청이 느리게, 혹은 드물게 흘러 들어오고,<br>또 어떤 것들은 나중에 일어날 활동을 위해 대기하고 있는데 비해,<br>일부 커넥션들은 웹 서버로 급속히 요청을 보내고 있을 것이다.</li><li>웹 서버들은 항상 새 요청을 주시하고 있다. 요청은 언제라도 도착할 수 있기 때문이다.</li></ul><p>웹 서버는 아키텍처의 차이에 따라 요청을 처리하는 방식도 달라진다.</p><img src="/images/2019/26/05.png"><h3 id="2-2-1-단일-스레드-웹서버"><a href="#2-2-1-단일-스레드-웹서버" class="headerlink" title="2.2.1 단일 스레드 웹서버"></a>2.2.1 단일 스레드 웹서버</h3><ul><li>단일 스레드 웹서버는 한 번에 하나씩 요청을 처리한다.</li><li>트랜젝션이 완료되면, 다음 커넥션이 처리된다.</li><li>처리 도중에 모든 다른 커넥션은 무시된다.<ul><li>성능 문제를 만들어내므로, 로드가 적은 서버나 진단도구에서만 적당하다.</li></ul></li></ul><h3 id="2-2-2-멀티스레드와-멀티스레드-웹서버"><a href="#2-2-2-멀티스레드와-멀티스레드-웹서버" class="headerlink" title="2.2.2 멀티스레드와 멀티스레드 웹서버"></a>2.2.2 멀티스레드와 멀티스레드 웹서버</h3><ul><li><strong>여러 요청을 동시에 처리하기 위해</strong> 여러 개의 프로세스 혹은 고효율 스레드를 할당한다.<blockquote><p>프로세스란 어떤 프로그램의 자신만의 변수 집합을 갖는 하나의 독립된 제어 흐름이다.<br>  스레드는 프로세스의 더 빠르고 더 효율적인 버전이다.<br>  스레드와 프로세스 모두 하나의 프로그램이 여러 작업을 동시에 할 수 있게 해준다.</p></blockquote></li><li>몇몇 서버는 매 커넥션마다 스레드/프로세스 하나를 할당하지만,<br>서버가 수만 개의 동시 커넥션을 처리할 때 그로 인해 만들어진 수많은 프로세스나 스레드는 <strong>너무 많은 메모리나 시스템 리소스를 소비</strong>한다.</li><li>많은 멀티스레드 웹 서비스가 스레드/프로세스의 최대 개수를 <strong>제한</strong>을 건다.</li></ul><h3 id="2-2-3-다중-I-O"><a href="#2-2-3-다중-I-O" class="headerlink" title="2.2.3 다중 I/O"></a>2.2.3 다중 I/O</h3><ul><li>대량의 커넥션을 지원하기 위해, 많은 웹 서버는 다중 아키텍처를 채택했다.</li><li>다중 아키텍처에서는 모든 커넥션은 동시에 그 활동을 감시당한다.<ul><li>커넥션의 상태가 바뀌면 (예: 데이터를 사용할 수 있게 되거나, 에러가 발생),<br>그 커넥션에 대해 작은 양의 처리가 수행된다.</li><li>그 처리가 완료되면, 커넥션은 다음번 상태 변경을 위해 열린 커넥션 목록으로 돌아간다.</li></ul></li><li>스레드와 프로세스는 유휴 상태의 커넥션에 매여 기다리느라 리소스를 낭비하지 않는다.</li></ul><h3 id="2-2-4-다중-멀티스레드-웹서버"><a href="#2-2-4-다중-멀티스레드-웹서버" class="headerlink" title="2.2.4 다중 멀티스레드 웹서버"></a>2.2.4 다중 멀티스레드 웹서버</h3><ul><li>몇몇 시스템은 자신의 컴퓨터 플랫폼에 올라와 있는 CPU 여러 개의 이점을 살리기 위해 멀티스레딩과 다중화(multiplexing)를 결합한다.</li><li>여러 개의 스레드(보통 하나의 물리적 프로세스)는 각각 열려있는 커넥션(혹은 열려있는 커넥션의 부분집합)을 감시하고, 각 커넥션에 대해 조금씩 작업을 수행한다.</li></ul><hr><a name="3"><h1 id="3-요청-처리"><a href="#3-요청-처리" class="headerlink" title="3. 요청 처리"></a>3. 요청 처리</h1><p>-</p><hr><a name="4"><h1 id="4-리소스의-매핑과-접근"><a href="#4-리소스의-매핑과-접근" class="headerlink" title="4. 리소스의 매핑과 접근"></a>4. 리소스의 매핑과 접근</h1><ul><li>웹서버는 리소스 서버다.</li><li>그들은 HTML 페이지나 JPEG 이미지 같은 미리 만들어진 콘텐츠를 제공하며,<br>서버 위에서 동작하는 리소스 생성 어플리케이션을 통해, 만들어진 동적 콘텐츠도 제공한다.</li><li>웹서버가 클라에 콘텐츠를 전달하려면, 그 전에 요청 메세지의 URI에 대응하는 알맞은 콘텐츠나 콘텐츠 생성기를 웹서버에서 찾아서 그 콘텐츠의 원천을 식별해야 한다.</li></ul><h2 id="4-1-Docroot"><a href="#4-1-Docroot" class="headerlink" title="4.1 Docroot"></a>4.1 Docroot</h2><ul><li>가장 단순한 형태는 요청 URI를 웹서버의 파일 시스템 안에 있는 파일 이름으로 사용하는 것이다.</li><li>일반적으로 웹서버 파일시스템의 <strong>특별한 폴더</strong>를 웹 콘텐츠를 위해 예약해둔다.</li><li>이 폴더는 문서 루트 혹은 <code>docroot</code>로 불린다.</li><li>웹서버는 요청 메세지에서 URI를 가져와서 <strong>문서 루트 뒤에 붙인다.</strong></li></ul><p>httpd.conf 설정 파일에 docroot 경로를 설정해두면 요청 헤더의 URI를 문서 루트 뒤에 붙인다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /specials/joy.gif HTTP/1.0</span><br><span class="line">HOST: feel5ny.github.io</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DocumentRoot /usr/local/httpd/files</span><br></pre></td></tr></table></figure><p><code>/usr/local/httpd/files</code> + <code>/specials/joy.gif</code></p><ul><li>서버는 docroot 이외의 부분이 노출되는 일이 생기지 않도록 주의해야 한다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://feel5ny.github.io/.../</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-1-1-가상-호스팅-된-docroot"><a href="#4-1-1-가상-호스팅-된-docroot" class="headerlink" title="4.1.1 가상 호스팅 된 docroot"></a>4.1.1 가상 호스팅 된 docroot</h3><ul><li>가상 호스팅 웹서버는 각 사이트에 그들만의 분리된 문서 루트를 주는 방법으로, 한 웹서버에서 여러 개의 웹사이트를 호스팅한다.</li><li>가상 호스팅 웹서버는 <strong>URI나 Host 헤더에서 얻은 IP 주소나 호스트 명</strong>을 이용해 올바른 문서 루트를 식별한다.</li></ul><img src="/images/2019/26/06.png"><h3 id="4-1-2-사용자-홈-디렉터리-docroots"><a href="#4-1-2-사용자-홈-디렉터리-docroots" class="headerlink" title="4.1.2 사용자 홈 디렉터리 docroots"></a>4.1.2 사용자 홈 디렉터리 docroots</h3><ul><li>사용자들이 한대의 웹서버에서 각자의 개인 웹사이트를 만들 수 있도록 해주는 것이다.</li><li>보통 <code>/</code>과 물결표<code>~</code> 다음에 사용자 이름이 오는 것으로 시작하는 URI는 그 사용자의 개인 문서 루트를 가리킨다.</li><li>개인 <code>docroot</code>는 주로 사용자 홈 디렉터리 안에 있는 public_html로 불리는 디렉터리지만, 설정에 따라 다르다.</li></ul><img src="/images/2019/26/07.png"><h2 id="4-2-디렉터리-목록"><a href="#4-2-디렉터리-목록" class="headerlink" title="4.2 디렉터리 목록"></a>4.2 디렉터리 목록</h2><ul><li>웹서버는 경로가 파일이 아닌, 디렉터리를 가리키는, <strong>디렉터리 URL에 대한 요청을 받을 수 있다.</strong></li><li>대부분의 웹서버는 클라가 디렉터리 URL을 요청했을 때,<br>다음과 같이 몇가지 다른 행동을 취하도록 설정할 수 있다.<ul><li>에러를 반환한다.</li><li>디렉터리 대신 특별한 ‘색인파일’을 반환한다.</li><li>디렉터리를 탐색해서 그 내용을 담은 HTML 페이지를 반환한다.</li></ul></li><li>대부분의 웹서버는 요청한 URL에 대응되는 디렉터리 안에서 <code>index.html</code> 혹은 <code>index.htm</code>으로 이름 붙은 파일을 찾아 반환한다.</li><li>사용자가 디렉터리 URI를 요청했을 때, 기본 색인 파일이 없고 디렉터리 색인 기능이 꺼져있지 않다면, 많은 웹서버는 자동으로 그 디렉터리의 파일들을 크기, 변경일 및 그 파일에 대한 링크와 함께 열거한 HTML 파일을 반환한다.</li></ul><h2 id="4-3-동적-콘텐츠-리소스-매핑"><a href="#4-3-동적-콘텐츠-리소스-매핑" class="headerlink" title="4.3 동적 콘텐츠 리소스 매핑"></a>4.3 동적 콘텐츠 리소스 매핑</h2><ul><li>웹서버는 URI를 동적 리소스에 매핑할 수도 있다.</li><li>요청에 맞게 콘텐츠를 생성하는 프로그램에 URI를 매핑하는 것이다.<ul><li>웹서버들 중에서 <strong>어플리케이션 서버</strong>라고 불리는 것들은 웹서버를 복잡한 백엔드 어플리케이션과 연결하는 일을 한다.</li></ul></li><li>어플리케이션 서버는 그에 대한 동적 콘텐츠 생성 프로그램이 어디에 있는지, 그리고 어떻게 그 프로그램을 실행하는지 알려줄 수 있어야 한다.</li><li>대부분의 웹서버는 동적 리소스를 식별하고 매핑할 수 있는 기본적인 매커니즘을 갖고 있다.</li><li>URI의 경로명이 실행 가능한 프로그램이 위치한 디렉터리로 매핑되도록 설정하는 기능을 제공하는 웹서버도 있다.</li><li>서버가 실행 가능한 경로명을 포함한 URI로 요청을 받으면, 그 경로에 대응하는 디렉터리에서 프로그램을 찾아 실행하려 시도한다.</li></ul><img src="/images/2019/26/08.png"><h2 id="4-4-서버사이드-인클루드-Server-Side-Includes-SSI"><a href="#4-4-서버사이드-인클루드-Server-Side-Includes-SSI" class="headerlink" title="4.4 서버사이드 인클루드 Server-Side Includes, SSI"></a>4.4 서버사이드 인클루드 Server-Side Includes, SSI</h2><ul><li>만약 어떤 리소스가 서버사이드 인클루드를 포함하고 있는 것으로 설정되어 있다면, 서버는 그 리소스의 콘텐츠를 클라에게 보내기 전에 처리한다.</li><li>서버는 콘텐츠에 변수 이름이나 내장된 스크립트가 될 수 있는 어떤 특별한 패턴이 있는지 검사를 받는다.</li><li>특별한 패턴은 변수 값이나 실행 가능한 스크립트의 출력 값으로 치환된다. 이것은 동적 콘텐츠를 만드는 쉬운 방법이다.</li></ul><h2 id="4-5-접근-제어"><a href="#4-5-접근-제어" class="headerlink" title="4.5 접근 제어"></a>4.5 접근 제어</h2><ul><li>각각의 리소스에 접근제어를 할당할 수 있다.</li><li>웹서버는 클라의 IP 주소에 근거하여 접근을 제어할 수 있고, 접근하기 위한 비밀번호를 물어볼 수도 있다.<ul><li>HTTP 인증에서 자세히 다룬다.</li></ul></li></ul><hr><a name="5"><h1 id="5-응답-만들기"><a href="#5-응답-만들기" class="headerlink" title="5. 응답 만들기"></a>5. 응답 만들기</h1><ul><li>응답메세지는 응답상태코드, 응답헤더, 응답본문을 포함한다.</li></ul><h2 id="5-1-응답-엔터티"><a href="#5-1-응답-엔터티" class="headerlink" title="5.1 응답 엔터티"></a>5.1 응답 엔터티</h2><p>본문이 있다면, 응답 메세지는 주로 다음을 포함한다.</p><ol><li>응답 본문의 MIME 타입을 서술하는 Content-Type 헤더</li><li>응답 본문의 길이를 서술하는 Content-Length 헤더</li><li>실제 응답 본문의 내용</li></ol><h2 id="5-2-MIME-타입-결정하기"><a href="#5-2-MIME-타입-결정하기" class="headerlink" title="5.2 MIME 타입 결정하기"></a>5.2 MIME 타입 결정하기</h2><p>웹 서버에게는 응답 본문의 MIME타입을 결정해야하는 책임이 있다.<br>MIME타입과 리소스를 연결하는 여러 가지 방법이다.</p><h3 id="5-2-1-mime-types"><a href="#5-2-1-mime-types" class="headerlink" title="5.2.1 mime.types"></a>5.2.1 mime.types</h3><ul><li>파일 이름의 확장자를 사용할 수 있다.</li><li>웹서버는 각 리소스의 MIME 타입을 계산하기 위해 <strong>확장자별 MIME타입</strong>이 담겨있는 파일을 탐색한다.<ul><li>확장자에 따라 mime타입을 결정한다.<br><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types" target="_blank" rel="noopener">확장자별 mime타입 - mdn</a></li></ul></li></ul><img src="/images/2019/26/09.png" style="width:100%"><h3 id="5-2-2-매직-타이핑-Magic-typing"><a href="#5-2-2-매직-타이핑-Magic-typing" class="headerlink" title="5.2.2 매직 타이핑 Magic typing"></a>5.2.2 매직 타이핑 Magic typing</h3><ul><li>아파치 웹 서버는 각 파일의 MIME타입을 알아내기 위해 파일의 내용을 검사해서 알려진 패턴에 대한 테이블 (<strong>매직 파일</strong>이라 불린다)에 해당하는 패턴이 있는지 찾아볼 수 있다.</li><li>느리긴 하지만, 파일이 표준 확장자 없이 이름 지어진 경우에는 편리하다.</li></ul><blockquote><p><strong>매직 넘버.</strong> 다른 종류의 파일의 문법은 구조 상 보여지는 타입을 결정하는 데 도움을 줍니다. 예를 들어, 각 GIF 파일들은 47 49 46 38 16진수 값 [GIF89]로 시작되며 PNG 파일의 경우 89 50 4E 47 [.PNG]로 시작됩니다. 파일의 모든 타입들이 이런 매직 넘버를 가지고 있는 것은 아니므로 100% 신뢰할 만한 시스템은 아니기도 합니다.<br><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener">출처</a></p></blockquote><h3 id="5-2-3-유형-명시-Explicit-typing"><a href="#5-2-3-유형-명시-Explicit-typing" class="headerlink" title="5.2.3 유형 명시 Explicit typing"></a>5.2.3 유형 명시 Explicit typing</h3><ul><li>특정 파일이나 디렉터리 안의 파일들이 파일 확장자나 내용에 상관없이<br><strong>어떤 MIME 타입을 갖도록 웹 서버를 설정</strong>할 수 있다.</li></ul><h3 id="5-2-4-유형-협상-Type-negotiation"><a href="#5-2-4-유형-협상-Type-negotiation" class="headerlink" title="5.2.4 유형 협상 Type negotiation"></a>5.2.4 유형 협상 Type negotiation</h3><ul><li>어떤 웹 서버는 <strong>한 리소스가 여러 종류의 문서 형식에 속하도록 설정할 수 있다.</strong></li><li>이때 웹 서버가 사용자와의 협상 과정을 통해 사용하기 가장 좋은 형식(그리고 대응하는 MIME타입)을 판별할 것인지의 여부도 설정할 수 있다.</li><li>웹서버는 특정 파일이 특정 MIME타입을 갖게끔 설정할 수도 있다.</li></ul><p><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Content_negotiation" target="_blank" rel="noopener">관련내용</a></p><h2 id="5-3-리다이렉션"><a href="#5-3-리다이렉션" class="headerlink" title="5.3 리다이렉션"></a>5.3 리다이렉션</h2><ul><li>웹 서버는 종종 성공 메세지 대신 리다이렉션 응답을 반환한다.</li><li>웹 서버는 요청을 수행하기 위해, 브라우저가 다른 곳으로 가도록 리다이렉트할 수 있다.</li><li>Location 응답헤더는 콘텐츠의 새로운 혹은 선호하는 위치에 대한 URI를 포함한다.</li><li><a href="https://feel5ny.github.io/2019/08/17/HTTP_003_03/#3">30x 상태코드 정리본</a></li></ul><ol><li>영구히 리소스가 옮겨진 경우 - <code>301</code></li><li>임시로 리소스가 옮겨진 경우 - <code>303</code>, <code>307</code></li><li>URL 증강 - <code>303</code>, <code>307</code></li><li>부하 균형 - <code>303</code>, <code>307</code></li><li>친밀한 다른 서버가 있을 때 - <code>303</code>, <code>307</code></li><li>디렉터리 이름 정규화</li></ol><h3 id="5-3-1-영구히-리소스가-옮겨진-경우"><a href="#5-3-1-영구히-리소스가-옮겨진-경우" class="headerlink" title="5.3.1 영구히 리소스가 옮겨진 경우"></a>5.3.1 영구히 리소스가 옮겨진 경우</h3><ul><li>리소스는 새 URL이 부여되어 새로운 위치로 옮겨졌거나 이름이 바뀌었을 수 있다.</li><li>웹 서버는 클라에게 리소스의 이름이 바뀌었으므로, 클라는 북마크를 갱신하거나 할 수 있다고 말해줄 수 있다. </li><li><code>301 Moved Permanetly</code> 상태코드는 이런 종류의 리다이렉트를 위해 사용된다.</li></ul><h3 id="5-3-2-임시로-리소스가-옮겨진-경우"><a href="#5-3-2-임시로-리소스가-옮겨진-경우" class="headerlink" title="5.3.2 임시로 리소스가 옮겨진 경우"></a>5.3.2 임시로 리소스가 옮겨진 경우</h3><ul><li>리소스가 임시로 옮겨지거나, 이름이 변경된 경우, 서버는 클라를 새 위치로 리다이렉트 하길 원할 것이다. </li><li>이름 변경이 임시적이기 때문에, 서버는 클라가 나중에는 원래 URL로 찾아오고 북마크도 갱신하지 않기를 원한다.</li><li><code>303 See Other</code>과 <code>307 Temporary Redirect</code> 상태코드는 이런 종류의 리다이렉트를 위해 사용된다.</li></ul><h3 id="5-3-3-URL-증강"><a href="#5-3-3-URL-증강" class="headerlink" title="5.3.3 URL 증강"></a>5.3.3 URL 증강</h3><ul><li>서버는 종종 <strong>문맥 정보(Context)</strong>를 포함시키기 위해 재 작성된 URL로 리다이렉트한다.</li><li>요청이 도착했을 때, 서버는 상태 정보를 내포한 새 URL을 생성하고 사용자를 이 새 URL로 리다이렉트한다.<blockquote><p>상태 정보가 추가된 URL은 흔히 <strong>뚱뚱한 URL</strong>이라고도 부른다.</p></blockquote></li><li>클라는 리다이렉트를 따라가서, 상태 정보가 추가된 완전한 URL을 포함한 요청을 다시 보낸다.</li><li><code>303 See Other</code>과 <code>307 Temporary Redirect</code> 상태코드를 사용한다.</li></ul><h3 id="5-3-4-부하-균형"><a href="#5-3-4-부하-균형" class="headerlink" title="5.3.4 부하 균형"></a>5.3.4 부하 균형</h3><ul><li>과부하된 서버가 요청을 받으면,<br>서버는 클라를 <strong>좀 덜 부하가 걸린 서버로 리다이렉트할 수 있다.</strong></li><li><code>303 See Other</code>과 <code>307 Temporary Redirect</code> 상태코드를 사용한다.</li></ul><h3 id="5-3-5-친밀한-다른-서버가-있을-때"><a href="#5-3-5-친밀한-다른-서버가-있을-때" class="headerlink" title="5.3.5 친밀한 다른 서버가 있을 때"></a>5.3.5 친밀한 다른 서버가 있을 때</h3><ul><li>웹 서버는 어떤 사용자에 대한 정보를 가질 수 있다.</li><li>서버는 클라를 그 클라에 대한 정보를 갖고 있는 다른 서버로 리다이렉트할 수 있다.</li><li><code>303 See Other</code>과 <code>307 Temporary Redirect</code> 상태코드를 사용한다.</li></ul><h3 id="5-3-6-디렉터리-이름-정규화"><a href="#5-3-6-디렉터리-이름-정규화" class="headerlink" title="5.3.6 디렉터리 이름 정규화"></a>5.3.6 디렉터리 이름 정규화</h3><ul><li>클라가 <strong>디렉터리</strong> 이름에 대한 URI를 요청하는데 끝에 빗금(<code>/</code>)을 빠뜨렸다면,<br>대부분의 웹 서버는 상대경로가 정상적으로 동작할 수 있도록<br><strong>클라를 슬래시를 추가한 URI로 리다이렉트한다.</strong></li></ul><hr><a name="6"><h1 id="6-응답-보내기"><a href="#6-응답-보내기" class="headerlink" title="6. 응답 보내기"></a>6. 응답 보내기</h1><ul><li>서버는 여러 클라에 대한 많은 커넥션을 가질 수 있다. 그들 중 일부는 아무것도 안 하고 있는 상태이고, 일부는 서버로 데이터를 보내고 있으며, 또 다른 일부는 클라로 돌려줄 응답 데이터를 실어 나르고 있을 것이다.</li><li>서버는 커넥션 상태를 추적해야 하며,<br>지속적인 커넥션은 특별히 주의해서 다룰 필요가 있다.</li><li>비지속 커넥션이라면, 서버는 모든 메세지를 전송했을 때 자신 쪽 커넥션을 닫을 것이다.</li><li>지속적인 커넥션이라면,<br>서버가 <code>Content-Length</code> 헤더를 바르게 계산하기 위해 특별히 주의를 필요로 하는 경우,<br>클라가 응답이 언제 끝나는지 알 수 없는 경우, 커넥션은 열린 상태를 유지할 것이다.</li></ul><hr><a name="7"><h1 id="7-로깅"><a href="#7-로깅" class="headerlink" title="7. 로깅"></a>7. 로깅</h1><ul><li>트랜잭션이 완료되었을 때, 웹서버는 트랜잭션이 어떻게 수행되었는지에 대한 <strong>로그를 로그파일에 기록한다.</strong></li><li>대부분의 웹서버는 로깅에 대한 여러 가지 설정 양식을 제공한다.</li><li>자세한건 책의 21장..</li></ul><hr><hr><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ol><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Content_negotiation" target="_blank" rel="noopener">컨텐츠 협상</a></li><li><a href="https://en.wikipedia.org/wiki/Ident_protocol" target="_blank" rel="noopener">ident protocol - wiki</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types" target="_blank" rel="noopener">확장자별 mime타입 - mdn</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener">매직넘버 - mdn</a></li></ol></a></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;HTTP 통신을 진단해주는 간단한 웹 서버를 node.js로 작성해본다.&lt;/li&gt;
&lt;li&gt;어떻게 웹 서버가 HTTP 트랜젝션을 처리하는지 단계별로 설명해본다.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;a name=&quot;web&quot;&gt;


&lt;h1 id=&quot;웹
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="웹서버" scheme="http://feel5ny.github.io/tags/%EC%9B%B9%EC%84%9C%EB%B2%84/"/>
    
  </entry>
  
  <entry>
    <title>커넥션 관리 - TCP 커넥션의 종류</title>
    <link href="http://feel5ny.github.io/2019/09/04/HTTP_004_02/"/>
    <id>http://feel5ny.github.io/2019/09/04/HTTP_004_02/</id>
    <published>2019-09-04T07:23:55.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<ol><li>병렬 커넥션, keep-alive 커넥션, 커넥션 파이프라인을 활용한 HTTP의 최적화</li><li>커넥션 관리를 위해 따라야 할 규칙들</li></ol><a name="1"><h1 id="1-병렬-커넥션-parallel"><a href="#1-병렬-커넥션-parallel" class="headerlink" title="1. 병렬 커넥션 parallel"></a>1. 병렬 커넥션 parallel</h1><ul><li>HTTP는 클라가 여러 개의 커넥션을 맺음으로써 여러 개의 HTTP 트랜잭션을 병렬로 처리할 수 있게 한다.</li></ul><img src="/images/2019/25/1.png" style="width:100%"><h2 id="1-1-병렬-커넥션은-페이지를-더-빠르게-내려받는다"><a href="#1-1-병렬-커넥션은-페이지를-더-빠르게-내려받는다" class="headerlink" title="1.1 병렬 커넥션은 페이지를 더 빠르게 내려받는다."></a>1.1 병렬 커넥션은 페이지를 더 빠르게 내려받는다.</h2><ul><li>하나의 커넥션으로 객체들을 로드할 때의 대역폭 제한과<br>대기시간을 줄일 수 있다면<br>더 빠르게 로드할 수 있을 것이다.</li></ul><img src="/images/2019/25/2.png" style="width:100%"><ul><li>위 그림은 병렬 커넥션 방식을 개략적으로 보여준다.</li><li>html을 머저 내려받고, 남은 3개의 트랜잭션이<br>각각 별도의 커넥션에서 <strong>동시</strong>에 처리된다.</li><li>이미지들을 병렬로 내려받아 커넥션 지연이 <strong>겹쳐짐으로써</strong> 총 지연시간이 줄어든다.</li></ul><h2 id="1-2-병렬-커넥션이-항상-더-빠르지는-않다"><a href="#1-2-병렬-커넥션이-항상-더-빠르지는-않다" class="headerlink" title="1.2 병렬 커넥션이 항상 더 빠르지는 않다."></a>1.2 병렬 커넥션이 항상 더 빠르지는 않다.</h2><ul><li>클라의 네트워크 대역폭이 좁을 때는 대부분 시간을 데이터 전송하는 데만 쓸 것이다.</li><li>다수의 커넥션은 메모리를 많이 소모하고, 자체적인 성능 문제를 발생시킨다.</li><li>브라우저는 실제로 병렬 커넥션을 사용하긴 하지만, 적은 수(대부분 4개, 최신 브라우저는 6~8개)의 병렬 커넥션만을 허용한다.</li><li>서버는 특정 클라로부터 과도한 수의 커넥션이 맺어졌을 경우, 그것을 임의로 끊어버릴 수 있다.</li></ul><h2 id="1-3-병렬-커넥션은-더-빠르게-느껴질-수-있다"><a href="#1-3-병렬-커넥션은-더-빠르게-느껴질-수-있다" class="headerlink" title="1.3 병렬 커넥션은 더 빠르게 느껴질 수 있다."></a>1.3 병렬 커넥션은 더 빠르게 느껴질 수 있다.</h2><ul><li>병렬 커넥션이 실제로 페이지를 더 빠르게 내려받는 것은 아니지만, 화면에 여러 개의 객체가 동시에 보이면서 내려받고 있는 상황을 볼 수 있기 때문에 사용자는 더 빠르게 내려받고 있는 것처럼 느낄 수 있다.</li><li>사실 사람들은 페이지의 총 다운로드 시간이 더 걸린다 하더라도, 화면 전체에서 여러 작업이 일어나는 것으 ㄹ눈으로 확인할 수 있으면 그것을 더 빠르다고 여긴다.</li></ul><hr><a name="2"><h1 id="2-지속-커넥션-persistent"><a href="#2-지속-커넥션-persistent" class="headerlink" title="2. 지속 커넥션 persistent"></a>2. 지속 커넥션 persistent</h1><p>웹 클라는 보통 같은 사이트에 여러 개의 커넥션을 맺는다. 즉 같은 서버에 계속 요청</p><ul><li>사이트 지역성이라 부른다. <strong>site locality</strong></li></ul><p>처리가 완료된 후에도 계속 연결된 상태로 있는 TCP 커넥션을 <strong>지속 커넥션</strong>이라고 부른다.</p><ul><li>HTTP/1.1을 지원하는 기기는 처리가 완료된 후에도<br>TCP 커넥션을 유지하여 앞으로 있을 HTTP 요청에 <strong>재사용</strong> 할 수 있다.</li><li>커넥션을 맺기 위한 준비 작업에 따르는 시간을 절약할 수 있다.</li><li>TCP의 느린 시작으로 인한 지연을 피할 수 있다.</li></ul><h2 id="2-1-지속-커넥션-vs-병렬-커넥션"><a href="#2-1-지속-커넥션-vs-병렬-커넥션" class="headerlink" title="2.1 지속 커넥션 vs 병렬 커넥션"></a>2.1 지속 커넥션 vs 병렬 커넥션</h2><p><strong>병렬 커넥션의 단점</strong></p><ol><li>각 트랜잭션마다 새로운 커넥션을 맺고 끊기 때문에 시간과 대역폭이 소요된다.</li><li>새로운 커넥션은 TCP의 느린 시작 때문에 성능이 떨어진다.</li><li>실제로 연결할 수 있는 병렬 커넥션의 수에는 제한이 있다.</li></ol><p><strong>지속 커넥션의 장점</strong></p><ol><li>커넥션을 맺기 이한 사전 작업 지연을 줄여줌</li><li>튜닝된 커넥션을 유지</li><li>커넥션의 수를 줄여준다.</li></ol><p><strong>지속 커넥션의 단점</strong></p><ol><li>계속 연결된 상태로 있는 수많은 커넥션이 쌓이게 될 것이다.</li></ol><p><strong>지속 커넥션 + 병렬 커넥션은 가장 효과적</strong></p><ol><li>HTTP/1.0+ 에는 keep-alive 커넥션이 있고,<br>HTTP/1.1에는 지속 커넥션이 있다.</li></ol><hr><a name="2-2"><h2 id="2-2-HTTP-1-0-의-Keep-Alive-커넥션"><a href="#2-2-HTTP-1-0-의-Keep-Alive-커넥션" class="headerlink" title="2.2 HTTP/1.0+의 Keep-Alive 커넥션"></a>2.2 HTTP/1.0+의 Keep-Alive 커넥션</h2><ul><li>초기의 지속 커넥션은 상호 운용과 관련된 설계에 문제가 있었지만,<br>아직 많은 클라와 서버는 이 초기 keep-alive 커넥션을 사용하고 있다.<ul><li>설계상의 문제는 HTTP/1.1에서 수정되었다.</li></ul></li></ul><h3 id="2-2-1-Keep-Alive-동작"><a href="#2-2-1-Keep-Alive-동작" class="headerlink" title="2.2.1 Keep-Alive 동작"></a>2.2.1 Keep-Alive 동작</h3><ul><li><p>HTTP/1.1에서는 keep-alive는 사용하지 않기로 결정</p></li><li><p>아직 keep-alive 핸드셰이크가 널리 사용되고 있음.</p></li><li><p>HTTP/1.0 keep-alive 커넥션을 구현한 클라는 커넥션을 유지하기 위해서 요청에<br><code>Connection: Keep-Alive</code> 헤더를 포함시킨다.</p></li><li><p>이 요청을 받은 서버는 그다음 요청도 이 커넥션을 통해 받고자 한다면, 응답 메세지에 같은 헤더를 포함시켜 응답한다.</p></li><li><p>응답에 <code>Connection: Keep-Alive</code>가 없으면, 클라는 서버가 keep-alive를 지원하지 않으며,<br>응답 메세지가 전송되고 나면 서버 커넥션을 끊을 것이라고 추정한다.</p></li></ul><h3 id="2-2-2-Keep-Alive-옵션-헤더"><a href="#2-2-2-Keep-Alive-옵션-헤더" class="headerlink" title="2.2.2 Keep-Alive 옵션 (헤더)"></a>2.2.2 Keep-Alive 옵션 (헤더)</h3><ul><li>keep-alive 헤더는 커넥션을 유지하기를 바라는 요청일 뿐이다.</li><li>클라나 서버가 keep-alive 요청을 받았다고 해서 무조건 그것을 따를 필요는 없다.</li><li><code>Connection: Keep-Alive</code>가 있을 때만 사용 가능하다.</li><li>HTTP/2에서는 무시된다.</li></ul><p>keep-alive의 동작은 <code>Keep-Alive</code> 헤더의 옵션들로 제어 가능하다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Keep-Alive: timeout=5, max=1000</span><br><span class="line">5초 동안 1000개의 커넥션을 유지하라는 내용</span><br></pre></td></tr></table></figure><ol><li><strong>timeout</strong><ul><li>커넥션이 얼마간 유지될 것인지를 의미한다.</li><li>이대로 동작한다는 보장은 없다.</li></ul></li><li><strong>max</strong><ul><li>커넥션이 몇 개의 HTTP 트렌젝션을 처리할 때까지 유지될 것인지를 의미한다.</li><li>이대로 동작한다는 보장은 없다.</li></ul></li></ol><p><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Keep-Alive" target="_blank" rel="noopener">mdn 참고</a></p><h3 id="2-2-3-Keep-Alive-커넥션-제한과-규칙"><a href="#2-2-3-Keep-Alive-커넥션-제한과-규칙" class="headerlink" title="2.2.3 Keep-Alive 커넥션 제한과 규칙"></a>2.2.3 Keep-Alive 커넥션 제한과 규칙</h3><ul><li>HTTP/1.0과 HTTP/2.0에서는 사용되지 않는다.</li></ul><p><strong><code>Connection: Keep-Alive</code></strong></p><ul><li><code>Connection: Keep-Alive</code>가 있을 때만 사용 가능하다.</li><li><code>Connection: Keep-Alive</code>가 없을 경우 서버는 요청을 처리한 후 커넥션을 끊을 것이다.</li><li>클라는 <code>Connection: Keep-Alive</code>가 없을 경우 서버가 응답 후에 커넥션을 끊을 것임을 알 수 있다.</li></ul><p><strong>Content-Length과 커넥션</strong></p><ul><li>커넥션이 끊어지기 전에 엔터티 본문의 길이를 알 수 있어야 커넥션을 유지할 수 있다.<ul><li>엔터티 본문이 정확한 Content-Length 값과 함께 멀티파트 미디어 형식을 가지거나,</li><li>청크 전송 인코딩 chunked transfer encoding으로 인코드 되어야 함을 뜻한다.</li></ul></li><li>keep-alive 커넥션에서 잘못된 Content-Length 값을 보내는 것은 좋지 않다.<ul><li>트랜잭션이 끝나는 시점에 기존 메세지의 끝과 새로운 메세지의 시작점을 정확히 알 수 없기 때문이다.</li></ul></li></ul><p><strong>Connection 헤더</strong></p><ul><li>프락시와 게이트웨이는 Connection 헤더의 규칙을 철저히 지켜야 한다. (명시된 헤더는 다 제거되기 때문)</li><li>keep-alive 커넥션은 connection 헤더를 인식하지 못하는 프락시 서버와 맺어지면 안 된다.</li><li>HTTP/1.0 을 따르는 기기로부터 받는 모든 Connection 헤더 필드는 무시해야 한다.<br>오래된 프락시 서버로부터 실수로 전달될 수 있기 때문.</li></ul><h3 id="2-2-4-Keep-Alive와-dumb-멍충한-프락시"><a href="#2-2-4-Keep-Alive와-dumb-멍충한-프락시" class="headerlink" title="2.2.4 Keep-Alive와 dumb(멍충한) 프락시"></a>2.2.4 Keep-Alive와 dumb(멍충한) 프락시</h3><img src="/images/2019/25/3.png" style="width:100%"><p><strong>Connection 헤더의 무조건 전달</strong></p><ol><li>웹 클라는 프락시에 <code>Connection: Keep-Alive</code> 헤더와 함께 메세지를 보내고, 커넥션을 유지하기를 요청한다.<br>클라는 커넥션을 유지하자는 요청이 받아들여졌는지 확인하기 위해 응답을 기다린다.</li><li>멍청한 프락시는 <code>Connection</code> 헤더를 이해하지 못해서 다음 서버에 메세지를 그대로 전달한다.<br><code>Connection</code>헤더는 홉별 헤더다.(hop-by-hop): 오직 한 개의 전송 링크에만 적용되며, 다음 서버로 전달되어서는 안 된다.</li><li><code>Connection: Keep-Alive</code>를 받은 웹 서버는 커넥션을 유지하자고 요청하는 것으로 잘못 판단하게 된다.<br>클라가 아닌 프락시와 커넥션을 유지하는 것에 동의하고 <code>Connection: Keep-Alive</code> 헤더를 포함하여 응답한다.<br>하지만 프락시는 <code>Connection</code>를 모른다.</li><li>프락시는 <code>Connection: Keep-Alive</code> 헤더를 포함하고 있는 응답메세지를 클라에게 전달한다.<br>클라는 이 헤더를 통해 프락시가 커넥션을 유지하는 것에 동의했다고 추정한다.<br>클라와 서버는 커넥션을 유지한다고 생각하지만, 정작 프락시는 모름.</li><li><code>Connection</code>를 모르는 프락시는 모든 데이터를 클라에게 전달하고 서버가 커넥션을 끊기를 기다린다.<br>하지만 서버는 커넥션을 유지하고, 프락시는 끊어지기 전까지 기다린다.</li><li>클라는 유지되고 있다고 생각되는 커넥션으로 다음 요청을 보내는데, 프락시는 예상치 못한 요청이 들어온 거라 프락시로부터 무시되고,<br>브라우저는 아무런 응답 없이 로드 중이라는 표시만 나온다.</li><li>브라우저는 자신이나 서버가 타임아웃이 나서 커넥션이 끊길 때까지 기다린다.</li></ol><p><strong>프락시와 홉별 헤더</strong><br>위의 잘못된 통신을 피하려면</p><ul><li>프락시는 Connection 헤더와 Connection 헤더에 명시된 헤더들은 절대 전달하면 안 된다.</li><li>프락시는 <strong>Connection 헤더</strong>, <strong>Keep-Alive 헤더</strong>도 전달하면 안 된다.</li><li><strong>홉별 헤더</strong>들 역시 전달하거나 캐시하면 안 된다.<ul><li>Proxy-Authenticate, Proxy-Connection, Transfer-Encoding, Upgrade</li></ul></li></ul><h3 id="2-2-5-Proxy-Connection-살펴보기"><a href="#2-2-5-Proxy-Connection-살펴보기" class="headerlink" title="2.2.5 Proxy-Connection 살펴보기"></a><del>2.2.5 Proxy-Connection 살펴보기</del></h3><ul><li>Proxy-Connection은 비표준 헤더이다.</li><li>프록시가 종종 여러 계층으로 배치되어 있기 때문에 2.6와 같은 문제를 야기한다.<ul><li>클라는 요청 시 Proxy-Connection 헤더 필드를 보내지 않도록 권장한다.</li></ul></li></ul><ol><li>Connection 헤더를 모르는 프락시에게 Connection 대신에 Proxy-Connection 확장 헤더를 프락시에게 전달한다.</li><li>웹 서버는 Proxy-Connection를 무시한다.</li><li>영리한 프락시라면, 의미 없는 Proxy-Connection헤더를 Connection 헤더로 바꿈으로써 원하던 효과를 얻게 된다.</li></ol><p><a href="https://tools.ietf.org/html/rfc7230#appendix-A.1.2" target="_blank" rel="noopener">RFC 7230</a><br><a href="https://stackoverflow.com/questions/15460819/what-is-the-difference-between-connection-and-proxy-connection-in-http-header" target="_blank" rel="noopener">Proxy-Connection vs Connection header</a></p><hr><a name="2-3"><h2 id="2-3-HTTP-1-1의-지속-커넥션"><a href="#2-3-HTTP-1-1의-지속-커넥션" class="headerlink" title="2.3 HTTP/1.1의 지속 커넥션"></a>2.3 HTTP/1.1의 지속 커넥션</h2><ul><li>설계가 더 개선된 지속 커넥션을 지원한다.</li><li>default로 활성화되어있다.</li><li>HTTP/1.1 어플리케이션은 트랜잭션이 끝난 다음 커넥션을 끊으려면 <code>Connection:close</code> 헤더를 명시해야 한다.</li><li>HTTP/1.1 클라는 응답에 <code>Connection:close</code> 헤더가 없으면 응답 후에도 커넥션을 계속 유지하는 것으로 추정한다.<ul><li>클라와 서버는 언제든지 커넥션을 끊을 수 있다.</li><li><code>Connection:close</code>를 보내지 않는 것이 서버가 커넥션을 영원히 유지하겠다는 것은 아니다.</li></ul></li></ul><h3 id="2-3-1-지속-커넥션의-제한과-규칙"><a href="#2-3-1-지속-커넥션의-제한과-규칙" class="headerlink" title="2.3.1 지속 커넥션의 제한과 규칙"></a>2.3.1 지속 커넥션의 제한과 규칙</h3><ul><li>클라가 요청에 <code>Connection:close</code>헤더를 포함해 보내면,<br>클라는 그 커넥션으로 추가적인 요청을 보낼 수 없다.</li><li>클라가 해당 커넥션으로 추가적인 요청을 보내지 않을 것이라면, 마지막 요청에 <code>Connection:close</code> 헤더를 보내야 한다..</li><li>커넥션이 끊어지기 전에 엔터티 본문의 길이를 알 수 있어야 커넥션을 유지할 수 있다.<ul><li>엔터티 본문이 정확한 Content-Length 값을 가지거나,</li><li>청크 전송 인코딩 chunked transfer encoding으로 인코드 되어야 함을 뜻한다.</li></ul></li><li>Connection 헤더의 값과 상관없이 언제든지 커넥션을 끊을 수 있다.</li></ul><hr><a name="3"><h1 id="3-파이프라인-커넥션-pipelined"><a href="#3-파이프라인-커넥션-pipelined" class="headerlink" title="3. 파이프라인 커넥션 pipelined"></a>3. 파이프라인 커넥션 pipelined</h1><ul><li>HTTP/1.1은 지속 커넥션을 통해서 요청을 파이프라이팅할 수 있다.<ul><li>keep-alive 커넥션의 성능을 더 높여준다.</li></ul></li><li>여러 개의 요청은 응답이 도착하기 전까지 큐에 쌓인다.</li><li>대기 시간이 긴 네트워크 상황에서 네트워크 상의 왕복으로 인한 시간을 줄여서 성능을 높여준다.</li></ul><img src="/images/2019/25/4.png" style="width:100%"><h2 id="3-1-파이프라인의-제약사항"><a href="#3-1-파이프라인의-제약사항" class="headerlink" title="3.1 파이프라인의 제약사항"></a>3.1 파이프라인의 제약사항</h2><ul><li>HTTP 클라는 커넥션이 지속 커넥션인지 확인하기 전까지 파이프라인을 이어서는 안 된다.</li><li>응답은 요청 순서와 같게 와야 한다. 순서 없이 오면 순서에 맞게 정렬시킬 방법이 없다.</li><li>HTTP 클라는 POST 요청같이(비멱등) 반복해서 보낼 경우, 문제가 생기는 요청은 파이프라인을 통해 보내면 안 된다.<ul><li>에러가 발생하면 파이프라인을 통한 요청 중에 어떤 것들이 서버에서 처리되었는지 클라는 알 방법이 없다.</li></ul></li></ul><hr><a name="4"><h1 id="4-커넥션-끊기에-대한-미스터리"><a href="#4-커넥션-끊기에-대한-미스터리" class="headerlink" title="4. 커넥션 끊기에 대한 미스터리"></a>4. 커넥션 끊기에 대한 미스터리</h1><h2 id="4-1-마음대로-커넥션-끊기"><a href="#4-1-마음대로-커넥션-끊기" class="headerlink" title="4.1 마음대로 커넥션 끊기"></a>4.1 마음대로 커넥션 끊기</h2><ul><li>보통 커넥션은 메세지를 다 보낸 다음 끊지만,<br>에러가 있는 상황에서는 헤더의 중간이나, 다른 엉뚱한 곳에서 끊길 수 있다.</li></ul><h2 id="4-2-Content-Length와-Truncation-끊기"><a href="#4-2-Content-Length와-Truncation-끊기" class="headerlink" title="4.2 Content-Length와 Truncation(끊기)"></a>4.2 Content-Length와 Truncation(끊기)</h2><ul><li>각 HTTP 응답은 본문의 정확한 크기 값을 가지는 Content-Length 헤더를 가지고 있어야 한다.</li><li>클라나 프락시가 커넥션이 끊어졌다는 HTTP 응답을 받은 후,<br>실제 전달된 엔터티의 길이와 Content-Length의 값이 일치하지 않거나<br>Content-Length 자체가 존재하지 않으면, 수신자는 데이터의 정확한 길이를 서버에게 물어봐야 한다.</li></ul><h2 id="4-3-커넥션-끊기의-허용-재시도"><a href="#4-3-커넥션-끊기의-허용-재시도" class="headerlink" title="4.3 커넥션 끊기의 허용, 재시도"></a>4.3 커넥션 끊기의 허용, 재시도</h2><ul><li>커넥션은 에러가 없더라도 언제든 끊을 수 있다.</li><li>클라가 트랜잭션을 수행 중에 전송 커넥션이 끊기게 되면, 클라는 그 트랜잭션을 재시도 하더라도, 문제가 없다면(멱등성) 커넥션을 다시 맺고 한 번 더 전송을 시도해야 한다. <ul><li>이건 파이프라인 커넥션에서는 어렵다.</li><li>클라는 여러 요청을 큐에 쌓아 놓을 수 있지만,<br>서버는 아직 처리되지 않고 스케줄이 조정되어야 하는 요청들을 남겨둔 채로 커넥션을 끊어버릴 수도 있다.</li></ul></li></ul><h2 id="4-4-우아한-커넥션-끊기"><a href="#4-4-우아한-커넥션-끊기" class="headerlink" title="4.4 우아한 커넥션 끊기"></a>4.4 우아한 커넥션 끊기</h2><ul><li>TCP 커넥션은 그림처럼 양방향이다.</li><li>TCP 커넥션의 양쪽에는 데이터를 읽거나 쓰기 위한 입력 큐와 출력 큐가 있다.</li></ul><h3 id="전체-끊기와-절반-끊기"><a href="#전체-끊기와-절반-끊기" class="headerlink" title="전체 끊기와 절반 끊기"></a>전체 끊기와 절반 끊기</h3><ul><li>전체 끊기: <code>close()</code>를 호출하면 TCP 커넥션의 입력 채널과 출력 채널의 커넥션을 모두 끊는다.</li><li>절반 끊기: <code>shutdonw()</code>을 호출하면 입력 채널이나 출력 채널 중에 하나만을 개별적으로 끊는다.</li></ul><img src="/images/2019/25/5.png"><h3 id="TCP-끊기와-리셋-에러"><a href="#TCP-끊기와-리셋-에러" class="headerlink" title="TCP 끊기와 리셋 에러"></a>TCP 끊기와 리셋 에러</h3><blockquote><p>잘 모르겠다.</p></blockquote><ul><li>보통은 커넥션의 출력 채널을 끊는 것이 안전하다.<ul><li>커넥션의 반대편에 있는 기기는 모든 데이터를 버퍼로부터 읽고 나서, 데이터 전송이 끝남과 동시에 당신이 커넥션을 끊었다는 것을 알게 될 것이다.</li></ul></li><li>클라에서 더는 데이터를 보내지 않을 것임을 확신할 수 없는 이상, 커넥션의 입력 채널을 끊는 것은 위험하다.</li><li>서버의 운영체제는 TCP ‘connection reset by peer’ 메세지를 클라에게 보낼 것이다.<ul><li>대부분의 운영체제는 이것을 심각한 에러로 취급하여 버퍼에 저장된, 아직 읽히지 않은 데이터를 모두 삭제한다.</li><li>파이프라인 커넥션에서는 이러한 상황은 더 악화된다.</li></ul></li></ul><img src="/images/2019/25/6.png"><h3 id="우아하게-커넥션-끊기"><a href="#우아하게-커넥션-끊기" class="headerlink" title="우아하게 커넥션 끊기"></a>우아하게 커넥션 끊기</h3><ul><li>우아하게 커넥션 끊기를 구현하는 것은 어플리케이션 자신의 출력 채널을 먼저 끊고, 다른 쪽에 있는 기기의 출력 채널이 끊기는 것을 기다리는 것이다.</li><li>양쪽에서 더는 데이터를 전송하지 않을 것이라고 알려주면 커넥션은 리셋의 위험 없이 온전히 종료된다.</li><li>상대방이 절반 끊기를 구현했다는 보장도 없어서, 출력 채널에 절반 끊기를 하고 난 후에도 데이터나 스트림의 끝을 식별하기 위해 입력 채널에 대해 상태 검사를 주기적으로 해야 한다.</li></ul><hr><hr><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ul><li><a href="https://fetch.spec.whatwg.org/#connections" target="_blank" rel="noopener">fetch 공식문서</a></li><li><a href="https://javaScript.info/fetch-api" target="_blank" rel="noopener">fetch api</a></li><li><a href="https://xhr.spec.whatwg.org/" target="_blank" rel="noopener">XMLhttprequest 공식문서</a></li><li><a href="https://tools.ietf.org/html/rfc7230#appendix-A.1.2" target="_blank" rel="noopener">keep alive관련 RFC문서</a></li></ul></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;병렬 커넥션, keep-alive 커넥션, 커넥션 파이프라인을 활용한 HTTP의 최적화&lt;/li&gt;
&lt;li&gt;커넥션 관리를 위해 따라야 할 규칙들&lt;/li&gt;
&lt;/ol&gt;
&lt;a name=&quot;1&quot;&gt;

&lt;h1 id=&quot;1-병렬-커넥션-parallel&quot;&gt;
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="TCP/IP" scheme="http://feel5ny.github.io/tags/TCP-IP/"/>
    
      <category term="connection" scheme="http://feel5ny.github.io/tags/connection/"/>
    
  </entry>
  
  <entry>
    <title>커넥션 관리 - TCP 커넥션과 성능</title>
    <link href="http://feel5ny.github.io/2019/08/26/HTTP_004_01/"/>
    <id>http://feel5ny.github.io/2019/08/26/HTTP_004_01/</id>
    <published>2019-08-25T16:23:55.000Z</published>
    <updated>2019-09-05T14:58:28.667Z</updated>
    
    <content type="html"><![CDATA[<ol><li>HTTP는 어떻게 TCP 커넥션을 사용하는가</li><li>TCP 커넥션의 지연, 병목, 막힘</li><li>병렬 커넥션, keep-alive 커넥션, 커넥션 파이프라인을 활용한 HTTP의 최적화</li><li>커넥션 관리를 위해 따라야 할 규칙들</li></ol><a name="1"><h1 id="1-TCP-커넥션"><a href="#1-TCP-커넥션" class="headerlink" title="1. TCP 커넥션"></a>1. TCP 커넥션</h1><ul><li>전 세계 모든 HTTP 통신은, 지구상의 컴퓨터와 네트워크 장비에서 널리 쓰이고 있는, 패킷 교환 네트워크 프로토콜들이 계층화된 집합인 TCP/IP를 통해 이루어진다.</li></ul><p>웹 브라우저가 TCP 커넥션을 통해서 웹 서버에 요청을 보낸다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://feel5ny.github.io/index.html</span><br></pre></td></tr></table></figure><ol><li>브라우저가 <code>feel5ny.github.io</code> 라는 호스트 명을 추출한다.</li><li>브라우저가 이 호스트 명에 대한 IP 주소를 찾는다.</li><li>브라우저가 포트 번호 80을 얻는다.</li><li>브라우저가 <code>185.199.111.153</code>의 80포트로 TCP 커넥션을 생성한다.</li><li>브라우저가 바로 HTTP GET 요청 메세지를 보낸다.</li><li>브라우저가 서버에서 온 HTTP 응답 메세지를 읽는다.</li><li>브라우저가 커넥션을 끊는다.</li></ol><h2 id="1-1-신뢰할-수-있는-데이터-전송-통로인-TCP"><a href="#1-1-신뢰할-수-있는-데이터-전송-통로인-TCP" class="headerlink" title="1.1 신뢰할 수 있는 데이터 전송 통로인 TCP"></a>1.1 신뢰할 수 있는 데이터 전송 통로인 TCP</h2><ul><li>HTTP 커넥션은 몇몇 사용 규칙을 제외하고는 TCP 커넥션에 불과하다.</li><li>TCP 커넥션의 한쪽에 있는 바이트들은 반대쪽으로 순서에 맞게 정확히 전달된다.</li></ul><h2 id="1-2-TCP-스트림은-세그먼트로-나뉘어-IP-패킷을-통해-전송된다"><a href="#1-2-TCP-스트림은-세그먼트로-나뉘어-IP-패킷을-통해-전송된다" class="headerlink" title="1.2 TCP 스트림은 세그먼트로 나뉘어 IP 패킷을 통해 전송된다."></a>1.2 TCP 스트림은 세그먼트로 나뉘어 IP 패킷을 통해 전송된다.</h2><ul><li>TCP는 <strong>IP 패킷</strong> (IP 데이터그램)이라고 불리는 작은 조각을 통해 데이터를 전송한다</li><li>HTTP는 프로토콜 스택에서 최상위 계층이다.</li><li>HTTPS에는 TLS 혹은 SSL이라 불리기도 하며 암호화 계층이 있다.</li></ul><img src="/images/2019/24/1.jpg"><ul><li>HTTP 메세지를 전송하고자 할 경우,<br>TCP 커넥션을 통해서 메세지 데이터의 내용을 순서대로 보낸다.</li></ul><ol><li>TCP는 <strong>세그먼트</strong>라는 단위로 데이터 스트림을 잘게 나누고</li><li>세그먼트를 <strong>IP 패킷</strong>이라고 불리는 <strong>봉투</strong>에 담아서 </li><li>인터넷을 통해 데이터를 전달한다.</li></ol><ul><li><strong>이 모든 것은 TCP/IP 소프트웨어에 의해 처리되며,</strong><br>그 과정은 HTTP 프로그래머에게 보이지 않는다.</li><li>각 TCP 세그먼트는<br>하나의 IP 주소에서 다른 IP 주소로<br>IP 패킷에 담겨 전달된다.</li></ul><p>IP 패킷이 포함하는 것.</p><ol><li>IP 패킷 헤더 (20byte)</li><li>TCP 세그먼트 헤더 (20byte)</li><li>TCP 데이터 조각</li></ol><p><strong>패킷 구조</strong>는 아래와 같다.<br><img src="/images/2019/24/3.jpg" style="width:100%"><br><a href="https://karfn84.tistory.com/entry/network-%ED%8C%A8%ED%82%B7-%EA%B5%AC%EC%A1%B0-ether-tcp-ip-header#recentComments" target="_blank" rel="noopener">그림출처</a></p><p><strong>IP 헤더</strong>와 <strong>TCP 헤더</strong>는 아래와 같다.<br><img src="/images/2019/24/4.jpg" style="width:100%"><br><a href="https://karfn84.tistory.com/entry/network-%ED%8C%A8%ED%82%B7-%EA%B5%AC%EC%A1%B0-ether-tcp-ip-header#recentComments" target="_blank" rel="noopener">그림출처</a></p><h2 id="1-3-TCP-커넥션-유지하기"><a href="#1-3-TCP-커넥션-유지하기" class="headerlink" title="1.3 TCP 커넥션 유지하기"></a>1.3 TCP 커넥션 유지하기</h2><ul><li>컴퓨터는 항상 TCP 커넥션을 여러 개 가지고 있다.</li><li>TCP는 <strong>포트 번호</strong>를 통해서 이런 여러 개의 커넥션을 유지한다.</li><li>TCP 커넥션은 <strong>4가지 값</strong>으로 식별한다.</li></ul><ol><li>발신지 IP 주소</li><li>발신지 포트</li><li>수신지 IP 주소</li><li>수신지 포트</li></ol><p>4가지 값으로 유일한 커넥션을 생성한다.<br>4가지 커넥션 구성요소를 똑같이 가리키고 있는 커넥션은 있을 수 없다.</p><hr><a name="2"><h1 id="2-TCP의-성능에-대한-고려"><a href="#2-TCP의-성능에-대한-고려" class="headerlink" title="2. TCP의 성능에 대한 고려"></a>2. TCP의 성능에 대한 고려</h1><ul><li>HTTP는 TCP 바로 위에 있는 계층이기 때문에 <ul><li>TCP의 성능이 문제가 될 경우 HTTP 트렌젝션 성능에 영향이 있다.</li></ul></li><li>때문에 TCP 프로토콜 내부를 알아본다.</li></ul><h2 id="2-1-HTTP-트랜잭션-지연"><a href="#2-1-HTTP-트랜잭션-지연" class="headerlink" title="2.1 HTTP 트랜잭션 지연"></a>2.1 HTTP 트랜잭션 지연</h2><img src="/images/2019/24/5.jpg" style="width:100%"><ul><li>트랜잭션을 <strong>처리</strong>하는 시간은<br>TCP 커넥션을 설정하고, 요청을 전송하고, 응답 메세지를 보내는 것에 비하면<br>상당히 <strong>짧다</strong>는 것을 알 수 있다.</li><li>대부분의 HTTP 지연은 <strong>TCP 네트워크 지연</strong> 때문에 발생한다.<br>(클라나 서버가 많은 데이터를 내려받거나, 복잡하고 동적인 자원들을 실행하지 않는 한)</li></ul><ol><li>클라이언트는 URI에서 웹 서버의 IP 주소와 포트 번호를 알아내야 한다.<ul><li>만약 호스트에 방문한 적이 없으면 DNS 인프라를 사용하여 IP 주소로 변환하는데 수십 초의 시간이 걸릴 것이다. (DNS 캐시가 없을 경우)</li></ul></li><li>클라는 TCP 커넥션 요청을 서버에게 보내고, 서버가 커넥션 허가 응답을 회신하기를 기다린다.<ul><li>커넥션 설정 시간은 새로운 TCP 커넥션에서 항상 발생한다.</li></ul></li><li>커넥션이 맺어지면 클라는 HTTP 요청을 새로 생성한 TCP 파이프를 통해 전송한다.<ul><li>웹 서버는 데이터가 도착하는 대로 TCP 커넥션에서 요청 메세지를 읽고 처리한다.</li></ul></li></ol><h2 id="2-2-성능-관련-중요-요소"><a href="#2-2-성능-관련-중요-요소" class="headerlink" title="2.2 성능 관련 중요 요소"></a>2.2 성능 관련 중요 요소</h2><p>다음과 같은 요인과 그로 인한 성능상의 문제를 포함해 영향을 주는 일반적인 TCP 관련 지연들에 대해서 다른다.</p><ol><li>TCP 커넥션의 <strong>핸드셰이크</strong> 설정</li><li>TCP 편승(piggyback) 확인 응답(acknowledgment)을 위한 <strong>확인 응답 지연 알고리즘</strong></li><li>인터넷의 혼잡을 제어하기 위한 TCP의 <strong>느린 시작 slow-start</strong></li><li>데이터를 한데 모아 한 번에 전송하기 위한 <strong>네이글(nagle) 알고리즘</strong></li><li>TIME_WAIT 지연과 포트 고갈</li></ol><h3 id="2-2-1-TCP-핸드셰이크-지연-3-handshake"><a href="#2-2-1-TCP-핸드셰이크-지연-3-handshake" class="headerlink" title="2.2.1 TCP 핸드셰이크 지연 (3 handshake)"></a>2.2.1 TCP 핸드셰이크 지연 (3 handshake)</h3><p>어떤 데이터를 전송하든, 새로운 TCP 커넥션을 열 때면,<br>TCP 소프트웨어는 커넥션을 맺기 위한 조건을 맞추기 위해 연속으로 IP 패킷을 교환한다.<br>다음은 TCP 커넥션이 핸드셰이크를 하는 순서다. (<a href="https://feel5ny.github.io/2018/01/01/CS_06/">예전에 정리한 글</a>)</p><img src="/images/2019/24/6.jpg" style="width:100%"><ol><li>클라는 새로운 TCP 커넥션을 생성하기 위해<br><strong>작은 TCP 패킷</strong>을 서버에게 보낸다.<ul><li>그 패킷은 <code>SYN</code>(<strong>syn</strong>chronize sequence numbers)라는 특별한 flag를 가진다.<br>(TCP flags의 종류)</li><li><strong>커넥션 생성 요청</strong>이라는 뜻</li></ul></li><li>서버가 그 커넥션을 받으면 몇 가지 커넥션 매개변수를 산출하고,<ul><li>커넥션 요청이 받아들여졌음을 의미하는 <code>SYN</code> + <code>ACK</code>(acknowledgment) flag를 포함한 TCP 패킷을 클라에게 보낸다.</li></ul></li><li>마지막으로 클라는 커넥션이 잘 맺어졌음을 알리기 위해서 서버에게 다시 확인 응답 신호를 보낸다. (<code>ACK</code>)<ul><li>오늘날 TCP는 클라가 이 확인 응답 패킷과 함께 + 데이터를 보낼 수 있다.</li></ul></li></ol><ul><li>실제 개발자들은 이 패킷들을 보지 못한다.</li><li>TCP 커넥션이 생성될 때 발생하는 지연이 전부다.</li></ul><ul><li>크기가 작은 HTTP 트랜잭션은 50% 이상의 시간을 TCP를 구성하는 데 쓴다.</li><li>TCP 구성으로 인한 지연을 제거하기 위해서 HTTP가 이미 존재하는 커넥션을 어떻게 재활용하는지 알아보자.</li></ul><h3 id="2-2-2-확인-응답-지연-알고리즘"><a href="#2-2-2-확인-응답-지연-알고리즘" class="headerlink" title="2.2.2 확인 응답 지연 알고리즘"></a>2.2.2 확인 응답 지연 알고리즘</h3><ul><li>인터넷 자체가 패킷 전송을 완벽히 보장하지는 않기 때문에, TCP는 성공적인 데이터 전송을 보장하기 위해서 자체적인 확인 체계를 가진다.</li><li>TCP 세그먼트는 <strong>순번</strong>과 <strong>데이터 무결성 체크섬</strong>을 가진다.</li><li>송신자의 기준은 먼저 시작한 곳<ul><li>수신자는 세그먼트를 온전히 받으면, 작은 확인 응답 패킷을 송신자에게 반환한다. (<code>ACK</code>)</li><li>송신자가 특정 시간 안에 확인 응답 메세지를 받지 못하면, 패킷이 파기되었거나 오류가 있는 것으로 판단하고 데이터를 다시 전송한다.</li></ul></li></ul><p><strong>데이터 보낼 때 같이 보내면 되겠다!</strong></p><ul><li>확인 응답은 그 크기가 작기 때문에 TCP는<br>같은 방향으로 송출되는 데이터 패킷에 확인 응답을 <strong>편승</strong>시킨다. (piggyback)</li><li>TCP는 송출 데이터 패킷과 확인 응답을 하나로 묶음으로써<br>네트워크를 좀 더 효율적으로 사용한다.</li><li>확인 응답 지연은 송출할 확인 응답을 특정 시간 동안(0.1초 ~ 0.2초) 버퍼에 저장해 두고,<br>확인 응답을 편승시키기 위한 송출 데이터 패킷을 찾는다.</li></ul><p><strong>막상 HTTP에서는</strong></p><ul><li>HTTP 동작 방식은 확인 응답이 송출 데이터 패킷에 편승할 기회를 감소시킨다.</li><li>편승할 패킷을 찾으려고 하면, 해당 방향으로 송출될 패킷이 많지 않기 때문에,<br>확인 응답 지연으로 인한 지연이 자주 발생한다.</li></ul><h3 id="2-2-3-TCP-느린-시작-slow-start"><a href="#2-2-3-TCP-느린-시작-slow-start" class="headerlink" title="2.2.3 TCP 느린 시작 slow start"></a>2.2.3 TCP 느린 시작 slow start</h3><p><strong>TCP 느린 시작</strong></p><ul><li>TCP 커넥션은 시간이 지나면서 자체적으로 <code>튜닝</code>되어서,<br>처음에는 커넥션의 최대 속도를 제한하고,<br>데이터가 성공적으로 전송됨에 따라서, <strong>속도 제한을 높여나간다.</strong></li><li>인터넷의 갑작스러운 부하와 혼잡을 방지하는 데 쓰인다.</li></ul><p><strong>혼잡 윈도를 연다. opening the congestion window</strong></p><ul><li>TCP 느린 시작은 TCP가 한 번에 전송할 수 있는 패킷의 수를 제한한다.</li><li>패킷이 성공적으로 전달되는 각 시점에 송신자는 추가로 2개의 패킷을 더 전송할 수 있는 권한을 얻는다.</li><li>HTTP 트랜잭션에서 전송할 데이터의 양이 많으면 모든 패킷을 한 번에 전송할 수 없다.<br>한 개의 패킷만 전송하고 확인 응답을 기다렸다 받으면, 2개의 패킷을 보낼 수 있고, 그 패킷 각각에 대한 확인 응답을 받으면 총 4개의 패킷을 보낼 수 있게 된다.</li><li>혼잡제어 기능 때문에 새로운 커넥션은 튜닝된 커넥션보다 느리다. (지속커넥션과 연관)</li></ul><h3 id="2-2-4-네이글-알고리즘과-TCP-NODELAY"><a href="#2-2-4-네이글-알고리즘과-TCP-NODELAY" class="headerlink" title="2.2.4 네이글 알고리즘과 TCP_NODELAY"></a>2.2.4 네이글 알고리즘과 <code>TCP_NODELAY</code></h3><ul><li>“가능하면 조금씩 여러 번 보내지 말고 한 번에 많이 보내라(Effective TCP)” 라는 원칙을 기반으로 만들어진 알고리즘이다.</li><li>John Nagle의 이름을 따서 만들어졌다.</li><li>네이글 알고리즘은 HTTP 성능 관련 여러 문제를 발생시킨다.<ol><li>크기가 작은 HTTP 메세지는 패킷을 채우지 못해, 앞으로 생길지 생기지 않을지 모르는 추가적인 데이터를 기다리며 지연될 것이다.</li><li>확인 응답 지연과 함께 쓰일 경우 비효율적이다.</li></ol><ul><li>HTTP 스택에 <code>TCP_NODELAY</code> 파라미터 값을 설정하여 네이글 알고리즘을 비활성화하기도 한다.</li></ul></li></ul><img src="/images/2019/24/7.png" style="width:100%"><blockquote><p><a href="https://maj3sty.tistory.com/518" target="_blank" rel="noopener">그림 출처</a></p></blockquote><p><a href="http://egloos.zum.com/depiness/v/772710" target="_blank" rel="noopener">TCP_NODELAY 참고글</a></p><h3 id="2-2-5-TIME-WAIT의-누적과-포트-고갈"><a href="#2-2-5-TIME-WAIT의-누적과-포트-고갈" class="headerlink" title="2.2.5 TIME_WAIT의 누적과 포트 고갈"></a>2.2.5 <code>TIME_WAIT</code>의 누적과 포트 고갈</h3><ul><li>TCP 커넥션의 endpoint에서 TCP 커넥션을 끊으면,<br>endpoint에서는 커넥션의 <strong>IP 주소와 포트 번호</strong>를 메모리의 작은 제어영역에 <strong>기록</strong>해 놓는다.</li><li>이 정보는 같은 주소와 포트 번호를 사용하는<br>새로운 TCP 커넥션이 일정 시간 동안에는 생성되지 않게 하기 위한 것이다.</li><li>이전 커넥션과 관련된 패킷이<br>그 커넥션과 같은 주소와 포트 번호를 가진 새로운 커넥션에 삽입되는 문제를 방지한다. </li><li>보통 세그먼트의 최대 생명주기에 두 배 정도 <code>2MSL</code>이라고 불리며 보통 2분 정도<blockquote><p>오래전, 라우터가 매우 느렸던 때에는 중복되는 패킷의 복제본이 삭제되기 전까지 인터넷에 있는 큐에 1분이 넘게 보관되어 있었기 때문에 최대 생명주기를 1분으로 정했다.</p></blockquote></li><li>현대의 빠른 라우터들 덕분에 커넥션이 닫힌 후에 중복되는 패킷이 생기는 경우는 거의 없어졌다.</li></ul><p><a href="http://devbv.com/2017/04/01/timewait/" target="_blank" rel="noopener">Time wait에 대한 글</a><br><a href="https://tech.kakao.com/2016/04/21/closewait-timewait/" target="_blank" rel="noopener">카카오 블로그</a><br><a href="https://meetup.toast.com/posts/55" target="_blank" rel="noopener">toast 블로그</a></p><hr><a name="3"><h1 id="3-HTTP-커넥션-관리"><a href="#3-HTTP-커넥션-관리" class="headerlink" title="3. HTTP 커넥션 관리"></a>3. HTTP 커넥션 관리</h1><p>커넥션을 생성하고 최적화하는 HTTP 기술을 설명할 것이다.</p><h2 id="3-1-흔히-잘못-이해하는-Connection-헤더"><a href="#3-1-흔히-잘못-이해하는-Connection-헤더" class="headerlink" title="3.1 흔히 잘못 이해하는 Connection 헤더"></a>3.1 흔히 잘못 이해하는 Connection 헤더</h2><ul><li>HTTP는 클라와 서버 사이에 중개 서버가 놓이는 것을 허락한다. (프락시, 중개)</li><li>어떤 경우에는 두 개의 인접한 HTTP 앱이<br>현재 맺고 있는 커넥션에만 적용될 옵션을 지정해야 할 때가 있다.</li><li>이때 HTTP Connection 헤더를 사용하면 맺고 있는 커넥션에만 값이 적용 가능하다.</li><li>Connection 헤더에는 3가지 종류의 토큰이 전달될 수 있다.</li><li>HTTP/2에서는 무시된다.</li></ul><ol><li><code>HTTP header field name</code><br><strong>헤더 보호하기</strong><ul><li>이 커넥션에만 해당되는 헤더들을 나열</li><li>해당 필드들은 현재 커넥션만을 위한 정보이므로,<br>다음 커넥션에 해당 헤더를 전달하면 안된다.</li><li>Connection 헤더에는 hop-by-hop 헤더 명을 기술한다.<ul><li>hop은 각 서버를 의미하며 hop-by-hop은 특정 두 서버 간에만 영향을 미치고, 다른 서버 간에는 영향을 미치지 않음을 뜻한다.</li></ul></li><li>Connection 헤더에 있는 헤더 필드의 이름에 해당되는 헤더들은 모두 <strong>삭제</strong>되어야 한다.</li></ul></li><li><code>임시적인 토큰값</code>: 커넥션에 대한 비표준 옵션을 의미</li><li><code>close</code>: 커넥션이 작업이 완료되면 종료되어야 함을 의미.</li><li><code>keep-alive</code></li></ol><p><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Connection" target="_blank" rel="noopener">mdn</a></p><h2 id="3-2-순차적인-트랜젝션-처리에-의한-지연"><a href="#3-2-순차적인-트랜젝션-처리에-의한-지연" class="headerlink" title="3.2 순차적인 트랜젝션 처리에 의한 지연"></a>3.2 순차적인 트랜젝션 처리에 의한 지연</h2><ul><li>커넥션 관리가 제대로 이루어지지 않으면 TCP 성능이 매우 안 좋아질 수 있다.</li><li>만약 3개의 이미지가 있는 웹페이지에 접근한다면?<ul><li>4개의 HTTP 트랜젝션을 만들어야 함. (html+이미지)</li><li>만약 각 트랜젝션이 새로운 커넥션을 필요로 한다면?<ul><li>커넥션을 맺는데 발생하는 지연과 함께 느린 시작 지연이 발생할 것이다.</li></ul></li></ul></li><li>순차처리로 인한 지연에는 <strong>물리적인 지연</strong>뿐 아니라,<br>하나의 이미지를 내려받고 있는 중에는 웹페이지의 나머지 공간에 아무런 변화가 없어서 느껴지는 <strong>심리적인 지연</strong>도 있다.</li></ul><p>HTTP 커넥션의 성능을 향상시킬 수 있는 여러 최신 기술이 있다.</p><ol><li>병렬 커넥션 parallel<ul><li>여러 개의 TCP 커넥션을 통한 <strong>동시</strong> HTTP 요청</li></ul></li><li>지속 커넥션 persistent<ul><li>커넥션을 맺고 끊는 데서 발생하는 지연을 제거하기 위한 TCP 커넥션의 <strong>재활용</strong></li></ul></li><li>파이프라인 커넥션 pipelined<ul><li><strong>공유 TCP 커넥션</strong>을 통한 병렬 HTTP 요청</li></ul></li><li>다중 커넥션 multiplexed<ul><li>요청과 응답들에 대한 <strong>중재</strong> (실험적인 기술이다..)</li></ul></li></ol><hr><hr><hr><ul><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 정리 한 글입니다.</li></ul><hr><p><strong>참고자료</strong></p><ul><li><a href="https://karfn84.tistory.com/entry/network-%ED%8C%A8%ED%82%B7-%EA%B5%AC%EC%A1%B0-ether-tcp-ip-header#recentComments" target="_blank" rel="noopener">패킷 그림</a></li><li><a href="http://egloos.zum.com/depiness/v/772710" target="_blank" rel="noopener">nagle 알고리즘</a></li><li><a href="http://devbv.com/2017/04/01/timewait/" target="_blank" rel="noopener">time wait</a></li><li><a href="https://tech.kakao.com/2016/04/21/closewait-timewait/" target="_blank" rel="noopener">time wait-카카오</a></li><li><a href="https://meetup.toast.com/posts/55" target="_blank" rel="noopener">time wait-toast밋업</a></li></ul></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;HTTP는 어떻게 TCP 커넥션을 사용하는가&lt;/li&gt;
&lt;li&gt;TCP 커넥션의 지연, 병목, 막힘&lt;/li&gt;
&lt;li&gt;병렬 커넥션, keep-alive 커넥션, 커넥션 파이프라인을 활용한 HTTP의 최적화&lt;/li&gt;
&lt;li&gt;커넥션 관리를 위해
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="TCP/IP" scheme="http://feel5ny.github.io/tags/TCP-IP/"/>
    
      <category term="connection" scheme="http://feel5ny.github.io/tags/connection/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 메세지 - 헤더</title>
    <link href="http://feel5ny.github.io/2019/08/18/HTTP_003_04/"/>
    <id>http://feel5ny.github.io/2019/08/18/HTTP_003_04/</id>
    <published>2019-08-18T12:23:55.000Z</published>
    <updated>2020-01-05T07:20:46.852Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.iana.org/assignments/message-headers/message-headers.xhtml" target="_blank" rel="noopener">해당 링크</a>를 기준으로 standard 중 일부만 정리하였다. 책에서 더 이상 쓰지 않는 헤더는 취소선 처리하였다.</p><hr><a name="header"><h1 id="메세지-헤더"><a href="#메세지-헤더" class="headerlink" title="메세지 헤더"></a>메세지 헤더</h1><p>헤더에는<br>👆 <strong>특정 종류의 메세지</strong>에만 사용할 수 있는 헤더와,<br>🤚 <strong>더 일반 목적</strong>으로 사용할 수 있는 헤더,<br>👐 그리고 응답과 요청 메세지 <strong>양쪽 모두에서 정보를 제공하는</strong> 헤더가 있다.</p><ol><li>일반 헤더<ul><li>일반 <strong>정보</strong> 헤더</li><li>일반 <strong>캐시</strong> 헤더</li></ul></li><li>요청 헤더<ul><li>요청 <strong>정보</strong> 헤더</li><li><strong>Accept</strong> 관련 헤더</li><li><strong>조건부</strong> 요청 헤더</li><li>요청 <strong>보안</strong> 헤더</li><li><strong>프락시</strong> 요청 헤더</li></ul></li><li>응답 헤더<ul><li><strong>협상</strong> 헤더</li><li>응답 <strong>보안</strong> 헤더</li></ul></li><li>엔터티 헤더<ul><li>엔터티 <strong>정보</strong> 헤더</li><li><strong>콘텐츠</strong> 헤더</li><li>엔터티 <strong>캐싱</strong> 헤더</li></ul></li></ol><hr><hr><h1 id="Header-HTTP-1-1-기준"><a href="#Header-HTTP-1-1-기준" class="headerlink" title="Header (HTTP/1.1 기준)"></a>Header (HTTP/1.1 기준)</h1><a name="1"><h2 id="1-일반-헤더-General-headers"><a href="#1-일반-헤더-General-headers" class="headerlink" title="1. 일반 헤더 General headers"></a>1. 일반 헤더 General headers</h2><ul><li>클라와 서버 양쪽 모두가 사용한다.</li><li>아주 기본적인 정보를 제공한다.</li></ul><h3 id="일반-정보헤더"><a href="#일반-정보헤더" class="headerlink" title="일반 정보헤더"></a>일반 정보헤더</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Connection: keep-alive</span><br><span class="line">Date: Wed, 21 Oct 2015 07:28:00 GMT</span><br><span class="line">Transfer-Encoding: gzip, chunked</span><br><span class="line">Via: HTTP/1.1 GWA</span><br></pre></td></tr></table></figure><ul><li><code>Connection</code>: 클라와 서버가 요청/응답 연결에 대한 옵션을 정할 수 있게 해준다.<ul><li>전송된 값이 keep-alive일 경우, 연결은 지속적이며 닫히지 않으므로 동일한 서버에 대한 후속 요청이 수행될 수 있다.</li><li><strong>close</strong>, <strong>keep-alive</strong></li></ul></li><li><code>Date</code>: 메세지가 언제 만들어졌는지에 대한 날짜와 시간을 제공한다.</li><li><del><code>MIME-Version</code>: 발송자가 사용한 MIME의 버전을 알려준다.</del></li><li><del><code>Trailer chunked transfer</code>: 인코딩된 메세지의 끝 부분에 위치한 헤더들의 목록을 나열한다.</del></li><li><code>Transfer-Encoding</code>: 수신자에게 안전한 전송을 위해 메세지에 어떤 인코딩이 적용되었는지 말해준다.<ul><li><strong>chunked</strong>, <strong>compress</strong>, <strong>deflate</strong>, <strong>gzip</strong>, <strong>identity</strong></li></ul></li><li><del><code>Upgrade</code>: 발송자가 업그레이드하길 원하는 새 버전이나 프로토콜을 알려준다.</del></li><li><code>Via</code>: 이 메세지가 어떤 중개자를 거쳐 왔는지 보여준다.<ul><li>관련) TRACE 메서드</li></ul></li></ul><h3 id="일반-캐시-헤더"><a href="#일반-캐시-헤더" class="headerlink" title="일반 캐시 헤더"></a>일반 캐시 헤더</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: public, max-age=31536000</span><br><span class="line">Pragma: no-cache</span><br></pre></td></tr></table></figure><p>최신 버전의 HTTP는 매우 풍부한 캐시 매개변수의 집합을 가지고 있다.</p><ul><li><code>Cache-Control</code>: 메세지와 함께 캐시 지시자를 전달하기 위해 사용한다.<ul><li><strong>max-age={seconds}</strong>, <strong>max-stale[={seconds}]</strong>, <strong>min-fresh={seconds}</strong>, <strong>no-cache</strong>, <strong>no-store</strong>, <strong>no-transform</strong>, <strong>only-if-cached</strong>, <strong>must-revalidate</strong>, <strong>no-cache</strong>, <strong>no-store</strong>, <strong>no-transform</strong>, <strong>public</strong>, <strong>private</strong>, <strong>proxy-revalidate</strong>, <strong>s-maxage={seconds}</strong>, <strong>immutable</strong>, <strong>stale-while-revalidate={seconds}</strong>, <strong>stale-if-error={seconds}</strong>, </li></ul></li><li><code>Pragma</code>: 메세지와 함께 지시자를 전달하는 또 다른 방법. 캐시에 국한되지 않는다. (HTTP/1.0)<ul><li><strong>no-cache</strong><a name="2"></a></li></ul></li></ul><h2 id="2-요청-헤더"><a href="#2-요청-헤더" class="headerlink" title="2. 요청 헤더"></a>2. 요청 헤더</h2><p>요청 메세지에서만 의미를 갖는 헤더다.</p><h3 id="요청-정보-헤더"><a href="#요청-정보-헤더" class="headerlink" title="요청 정보 헤더"></a>요청 정보 헤더</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">From: webmaster@example.org</span><br><span class="line">Host: developer.cdn.mozilla.net</span><br><span class="line">Referer: https://developer.mozilla.org/en-US/docs/Web/JavaScript</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X x.y; rv:42.0) Gecko/20100101 Firefox/42.0</span><br></pre></td></tr></table></figure><ul><li><del><code>Client-IP</code>: 클라가 실행된 컴퓨터의 IP를 제공한다.</del></li><li><code>From</code>: 클라 사용자의 메일주소를 제공한다.<ul><li><strong>{email}</strong></li></ul></li><li><code>Host</code>: 요청의 대상이 되는 서버의 호스트 명과 포트를 준다.<ul><li><strong>{host}:{port}</strong></li></ul></li><li><code>Referer</code>: 현재의 요청 URI가 들어있었던 문서의 URL을 제공한다.<ul><li><strong>{url}</strong></li></ul></li><li><code>User-Agent</code>: 요청을 보낸 어플리케이션의 이름을 서버에게 말해준다.<ul><li><strong>{product} / {product-version} {comment}</strong></li></ul></li><li><del><code>UA-Color</code>: 클라 기기 디스플레이의 색상 능력에 대한 정보를 제공한다.</del></li><li><del><code>UA-CPU</code>: 클라 CPU의 종류와 제조사를 알려준다.</del></li><li><del><code>UA-Disp</code>: 클라 디스플레이 능력에 대한 정보를 제공한다.</del></li><li><del><code>UA-OS</code>: 클라 기기에서 동작 중인 운영체제의 이름과 버전을 알려준다.</del></li><li><del><code>UA-Pixels</code>: 클라 기기 디스플레이에 대한 픽셀 정보를 제공한다.</del></li></ul><h3 id="Accept-관련-헤더"><a href="#Accept-관련-헤더" class="headerlink" title="Accept 관련 헤더"></a>Accept 관련 헤더</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Accept: text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8</span><br><span class="line">Accept-Charset: utf-8, iso-8859-1;q=0.5, *;q=0.1</span><br><span class="line">Accept-Encoding: gzip, compress, br</span><br><span class="line">Accept-Language: de-CH</span><br><span class="line">TE: gzip</span><br></pre></td></tr></table></figure><p>클라는 Accept 헤더들을 이용해 서버에게 자신의 선호와 능력을 알려줄 수 있다.<br>서버는 클라가 사용할 수도 없는 것을 전송하는데 시간과 대역폭을 낭비하지 않을 수 있다.</p><ul><li><code>Accept</code>: 서버에게 서버가 보내도 되는 <strong>콘텐츠 타입을 MIME 타입</strong>를 말해준다.</li><li><code>Accept-Charset</code>: 서버에게 서버가 보내도 되는 <strong>문자집합</strong>을 말해준다.</li><li><code>Accept-Encoding</code>: 서버에게 서버가 보내도 되는 <strong>인코딩</strong>을 말해준다.<ul><li><strong>gzip</strong>, <strong>compress</strong>, <strong>deflate</strong>, <strong>br</strong>, <strong>identity</strong></li></ul></li><li><code>Accept-Language</code>: 서버에게 서버가 보내도 되는 <strong>언어</strong>를 말해준다.</li><li><code>TE</code>: 서버에게 서버가 보내도 되는 확장전송 코딩을 말해준다. (Transfer-Encoding)<ul><li><strong>compress</strong>, <strong>deflate</strong>, <strong>gzip</strong>, <strong>trailers</strong></li></ul></li></ul><h3 id="조건부-요청-헤더"><a href="#조건부-요청-헤더" class="headerlink" title="조건부 요청 헤더"></a>조건부 요청 헤더</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Expect: 100-continue</span><br><span class="line">If-Match: &quot;bfc13a64729c4290ef5b2c2730249c88ca92d82d&quot;</span><br><span class="line">If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT</span><br><span class="line">If-None-Match: &quot;bfc13a64729c4290ef5b2c2730249c88ca92d82d&quot;</span><br><span class="line">If-Range: Wed, 21 Oct 2015 07:28:00 GMT</span><br><span class="line">If-Unmodified-Since: Wed, 21 Oct 2015 07:28:00 GMT</span><br><span class="line">Range: bytes=0-499, -500</span><br></pre></td></tr></table></figure><p>클라는 요청에 몇몇 제약을 넣기도 한다.<br>클라는 서버에게 요청에 응답하기 전에 먼저 조건이 참인지 확인하게 하는 제약을 포함시킬 수 있다.</p><ul><li><code>Expect</code>: 클라가 요청에 필요한 서버의 행동을 열거할 수 있게 해준다.</li><li><code>If-Match</code>: 문서의 엔터티 태그가 주어진 엔터티 태그와 일치하는 경우에만 문서를 가져온다.<ul><li><strong>{etag_value}</strong></li></ul></li><li><code>If-Modified-Since</code>: 주어진 날짜 이후에 리소스가 변경되지 않는다면 요청을 제한한다.</li><li><code>If-None-Match</code>: 문서의 <strong>엔터티 태그가 주어진 엔터티 태그와 일치하지 않는 경우에만</strong> 문서를 가져온다.</li><li><code>If-Range</code>: 문서의 특정 범위에 대한 요청을 할 수 있게 해준다.<ul><li><strong>{date}</strong>, <strong>{etag}</strong></li></ul></li><li><code>If-Unmodified-Since</code>: <strong>주어진 날짜 이후에 리소스가 변경되었다면</strong> 요청을 제한한다.</li><li><code>Range</code>: 서버가 범위 요청을 지원한다면, 리소스에 대한 특정 범위를 요청한다.<ul><li><strong>{unit}={range-start}-{range-end}, {range-start}-{range-end}</strong></li><li>ex. <code>bytes=200-1000</code></li></ul></li></ul><h3 id="요청-보안-헤더"><a href="#요청-보안-헤더" class="headerlink" title="요청 보안 헤더"></a>요청 보안 헤더</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l</span><br><span class="line">Cookie: PHPSESSID=298zf09hf012fh2; csrftoken=u32t4o3tb3gg43; _gat=1;</span><br></pre></td></tr></table></figure><p>HTTP는 자체적으로 요청을 위한 간단한 인증요구/응답 체계를 갖고 있다.<br>요청하는 클라가 어느 정도의 리소스에 접근하기 전에 자신을 인증하게 함으로써, 트랜잭션을 약간 더 안전하게 만들고자 한다.</p><ul><li><code>Authorization</code>: 클라가 서버에게 제공하는 인증 그 자체에 대한 정보를 담고 있다.<ul><li><strong>{type} {credentials}</strong></li><li>예시) Basic YWxhZGRpbjpvcGVuc2VzYW1l</li></ul></li><li><code>Cookie</code>: 클라가 서버에게 토큰을 전달할 때 사용한다. 진짜 보안헤더는 아니지만, 보안에 영향을 줄 수 있다는 것은 확실하다.<ul><li><strong>{name}={value}; {name2}={value2};</strong></li></ul></li><li><del><code>Cookie2</code>: 요청자가 지원하는 쿠키의 버전을 알려줄 때 사용한다.</del></li></ul><h3 id="프락시-요청-헤더"><a href="#프락시-요청-헤더" class="headerlink" title="프락시 요청 헤더"></a>프락시 요청 헤더</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Proxy-Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l</span><br></pre></td></tr></table></figure><ul><li><code>Max-Forwards</code>: 요청이 원서버로 향하는 과정에서 다른 프락시나 게이트웨이로 전달될 수 있는 최대 횟수.<ul><li>관련) TRACE 메서드와 함께 사용된다.</li></ul></li><li><code>Proxy-Authorization</code>: Authorization과 같으나 프락시에서 인증을 할 때 쓰인다.<ul><li><strong>{type} {credentials}</strong></li></ul></li><li><del><code>Proxy-Connection</code>: Connection과 같으나 프락시에서 연결을 맺을 때 쓰인다.</del></li></ul><a name="3"><h2 id="3-응답-헤더"><a href="#3-응답-헤더" class="headerlink" title="3. 응답 헤더"></a>3. 응답 헤더</h2><p>응답 메세지는 그들만의 응답 헤더를 갖는다.<br>응답 헤더는 클라에게 부가 정보를 제공한다. </p><h3 id="응답-정보-헤더"><a href="#응답-정보-헤더" class="headerlink" title="응답 정보 헤더"></a>응답 정보 헤더</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Age: 24</span><br><span class="line">Retry-After: Wed, 21 Oct 2015 07:28:00 GMT</span><br><span class="line">Server: Apache/2.4.1 (Unix)</span><br><span class="line">Warning: 112 - &quot;cache down&quot; &quot;Wed, 21 Oct 2015 07:28:00 GMT&quot;</span><br></pre></td></tr></table></figure><ul><li><code>Age</code>: 응답이 얼마나 오래되었는지<ul><li><strong>{delta-seconds}</strong></li></ul></li><li><del><code>Public</code>: 서버가 특정 리소스에 대해 지원하는 요청 메서드의 목록</del></li><li><code>Retry-After</code>: 현재 리소스가 사용 불가능한 상태일 때, 언제 가능해지는지 날짜 혹은 시간<ul><li><strong>{http-date}</strong>, <strong>{delay-seconds}</strong></li></ul></li><li><code>Server</code>: 서버 어플리케이션의 이름과 버전<ul><li><strong>{product}</strong></li></ul></li><li><del><code>Title</code>: HTML 문서에서 주어진 것과 같은 제목</del></li><li><code>Warning</code>: 사유 구절에 있는 것보다 더 자세한 경고 메세지<ul><li><strong>{<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Warning#Warning_codes" target="_blank" rel="noopener">warn-code</a>} {warn-agent} {warn-text} [{warn-date}]</strong></li><li>예시) Warning: 110 anderson/1.3.37 “Response is stale”</li></ul></li></ul><h3 id="협상-헤더"><a href="#협상-헤더" class="headerlink" title="협상 헤더"></a>협상 헤더</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Accept-Ranges: bytes</span><br><span class="line">Vary: User-Agent</span><br></pre></td></tr></table></figure><p>서버에 프랑스어나 독일어로 번역된 HTML 문서가 있는 경우와 같이 여러 가지 표현이 가능한 상황이라면,<br>HTTP/1.1은 서버와 클라가 어떤 표현을 택할 것인가에 대한 협상을 할 수 있도록 지원한다.</p><ul><li><code>Accept-Ranges</code>: 서버에게 서버가 보내도 되는 <strong>언어</strong>를 말해준다.</li><li><code>Vary</code>: 서버가 확인해 보아야 하고, 그렇기 때문에 응답에 영향을 줄 수 있는 헤더들의 목록</li></ul><h3 id="응답-보안-헤더"><a href="#응답-보안-헤더" class="headerlink" title="응답 보안 헤더"></a>응답 보안 헤더</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Proxy-Authenticate: Basic realm=&quot;Access to the internal site&quot;</span><br><span class="line">Set-Cookie: sessionid=38afes7a8; HttpOnly; Path=/</span><br><span class="line">WWW-Authenticate: Basic</span><br></pre></td></tr></table></figure><p>기본적인 인증 요구 헤더들이다.</p><ul><li><code>Proxy-Authenticate</code>: 프락시에서 클라로 보낸 인증요구의 목록</li><li><code>Set-Cookie</code>: 진짜 보안 헤더는 아니지만, 보안에 영향은 줄 수 있다. 서버가 클라를 인증할 수 있도록 클라 측에 토큰을 설정하기 위해 사용한다.<ul><li><strong>{cookie-name}={cookie-value}</strong></li><li><strong>{cookie-name}={cookie-value}; Expires={date}</strong></li><li><strong>{cookie-name}={cookie-value}; Max-Age={non-zero-digit}</strong></li><li><strong>{cookie-name}={cookie-value}; Domain={domain-value}</strong></li><li><strong>{cookie-name}={cookie-value}; Path={path-value}</strong></li><li><strong>{cookie-name}={cookie-value}; Secure</strong></li><li><strong>{cookie-name}={cookie-value}; HttpOnly</strong></li><li><strong>{cookie-name}={cookie-value}; SameSite=Strict</strong></li><li><strong>{cookie-name}={cookie-value}; SameSite=Lax</strong></li><li><strong>{cookie-name}={cookie-value}; SameSite=None</strong></li></ul></li><li><del><code>Set-Cookie2</code>: Set-Cookie와 비슷하게 RFC 2965로 정의된 쿠키.</del></li><li><code>WWW-Authenticate</code>: 서버에서 클라로 보낸 인증요구의 목록<ul><li><strong>{type} realm={realm}</strong></li><li>예시) Basic realm=”Access to the staging site”</li></ul></li></ul><a name="4"><h2 id="4-엔터티-헤더"><a href="#4-엔터티-헤더" class="headerlink" title="4. 엔터티 헤더"></a>4. 엔터티 헤더</h2><p>엔터티에 대해 설명하는 헤더들은 많다.<br>요청과 응답 양쪽 모두 엔터티를 포함할 수 있기 때문에,<br>이 헤더들은 양 타입의 메세지에 모두 나타날 수 있다.</p><h3 id="엔터티-정보헤더"><a href="#엔터티-정보헤더" class="headerlink" title="엔터티 정보헤더"></a>엔터티 정보헤더</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Allow: GET, POST, HEAD</span><br><span class="line">Location: /index.html</span><br></pre></td></tr></table></figure><ul><li><code>Allow</code>: 이 엔터티에 대해 수행될 수 있는 요청 메서드들을 나열한다.<ul><li>예시) Allow: GET, POST, HEAD</li></ul></li><li><code>Location</code>: 클라에게 엔터티가 실제로 어디에 위치하고 있는지 말해준다. 수신자에게 리소스에 대한 (아마도 새로운) 위치 URL을 알려줄 때 사용한다.<ul><li>관련) 리다이렉션 상태코드 (300번대)</li></ul></li></ul><blockquote><p><strong>Location</strong>과 <strong>Content-Location</strong>는 다릅니다:<br>Location가 리다이렉션의 대상(혹은 새롭게 만들어진 문서의 URL)을 가르키는데 반해,<br>Content-Location은 더 이상의 컨텐츠 협상없이, 리소스 접근에 필요한 <strong>직접적인 URL</strong>을 가르킵니다.<br>Location은 응답과 연관된 헤더인데 반해, Content-Location 은 반환된 개체와 연관이 있습니다.<br><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Content-Location" target="_blank" rel="noopener">출처 mdn</a></p></blockquote><h3 id="콘텐츠-헤더"><a href="#콘텐츠-헤더" class="headerlink" title="콘텐츠 헤더"></a>콘텐츠 헤더</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Language: de-DE</span><br><span class="line">Content-Location: /my-first-blog-post</span><br><span class="line">Content-Range: bytes 200-1000/67589</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Content-Disposition: form-data; name=&quot;myFile&quot;; filename=&quot;foo.txt&quot;</span><br></pre></td></tr></table></figure><p>엔터티의 콘텐츠에 대한 구체적인 정보를 제공한다.<br>콘텐츠의 종류, 크기, 기타 콘텐츠를 처리할 때 유용하게 활용될 수 있는 것들이다.<br>웹브라우저는 내용 유형을 기술한 Content-Type 헤더를 보고 그 객체를 어떻게 보여줄지 결정할 수 있다.</p><ul><li><del><code>Content-Base</code>: 본문에서 사용된 상대 URL을 계산하기 위한 기저 URL</del></li><li><code>Content-Encoding</code>: 본문에 적용된 어떤 인코딩<ul><li><strong>gzip</strong>, <strong>compress</strong>, <strong>deflate</strong>, <strong>identity</strong>, <strong>br</strong></li></ul></li><li><code>Content-Language</code>: 본문을 이해하는데 가장 적절한 자연어<ul><li>예시) de-DE, en-CA</li></ul></li><li><code>Content-Length</code>: 본문의 길이나 크기</li><li><code>Content-Location</code>: 리소스가 실제로 어디에 위치하는지</li><li><del><code>Content-MD5</code>: 본문의 MD5 체크섬</del></li><li><code>Content-Range</code>: 전체 리소스에서 이 엔터티가 해당하는 범위를 바이트 단위로 표현<ul><li><strong>{unit} {range-start}-{range-end}/{size}</strong></li><li>예시) bytes 200-1000/67589</li></ul></li><li><code>Content-Type</code>: 이 본문이 어떤 종류의 객체인지<ul><li><strong>{media-type};charset={value}; boundary={something}</strong></li><li>예시) text/html; charset=utf-8</li><li>예시) multipart/form-data; boundary=something</li></ul></li><li><code>Content-Disposition</code>: 콘텐츠가 브라우저에 인라인으로 표시될 것으로 예상되는지, 즉 웹 페이지 또는 웹 페이지의 일부로서 또는 첨부 파일로 로컬로 다운로드 및 저장될 것으로 예상되는지를 나타내는 헤더다.<ul><li><strong>Content-Disposition: inline</strong></li><li><strong>Content-Disposition: attachment</strong></li><li><strong>Content-Disposition: form-data</strong></li><li><strong>; name=”fieldName”</strong>이 덧붙여서 올 수 있다.</li></ul></li></ul><h3 id="엔터티-캐싱-헤더"><a href="#엔터티-캐싱-헤더" class="headerlink" title="엔터티 캐싱 헤더"></a>엔터티 캐싱 헤더</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ETag: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span><br><span class="line">Expires: Wed, 21 Oct 2015 07:28:00 GMT</span><br><span class="line">Last-Modified: Wed, 21 Oct 2015 07:28:00 GMT</span><br></pre></td></tr></table></figure><p>일반 캐싱 헤더는 언제 어떻게 캐시가 되어야 하는지에 대한 지시자를 제공한다.<br>엔터티 캐싱 헤더는 엔터티 캐싱에 대한 정보를 제공한다.</p><ul><li><code>ETag</code>: 이 엔터티에 대한 엔터티 태그</li><li><code>Expires</code>: 이 엔터티가 더 이상 유효하지 않아 원본을 다시 받아와야 하는 일시</li><li><code>Last-Modified</code>: 가장 최근 이 엔터티가 변경된 일시</li></ul><hr><hr><ul><li><a href="https://github.com/bookcrush?type=source" target="_blank" rel="noopener">책뽀개기 모임</a> 중 <strong>http 완벽가이드</strong> 1장 뽀개기 진행중입니다. (~8월말) (다음 모임은 2장)<br>(모임 참여를 원하신다면 댓글로 문의 바랍니다.)</li><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 <strong>저만의 순서</strong>로 정리 한 글입니다.</li></ul><hr><p>참고자료</p><ol><li><a href="https://www.iana.org/assignments/message-headers/message-headers.xhtml" target="_blank" rel="noopener">IANA registry</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers" target="_blank" rel="noopener">MDN</a></li></ol></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.iana.org/assignments/message-headers/message-headers.xhtml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;해당 링크&lt;/a&gt;를 기준으로 standard 
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="message" scheme="http://feel5ny.github.io/tags/message/"/>
    
      <category term="header" scheme="http://feel5ny.github.io/tags/header/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 메세지 - 상태코드</title>
    <link href="http://feel5ny.github.io/2019/08/17/HTTP_003_03/"/>
    <id>http://feel5ny.github.io/2019/08/17/HTTP_003_03/</id>
    <published>2019-08-17T12:23:55.000Z</published>
    <updated>2020-01-18T16:25:47.186Z</updated>
    
    <content type="html"><![CDATA[<img src="https://camo.githubusercontent.com/4e15cccf2a9277dcca2c8824092547dee7058744/68747470733a2f2f7261776769746875622e636f6d2f666f722d4745542f687474702d6465636973696f6e2d6469616772616d2f6d61737465722f6874747064642e706e67" style="width:100%"><p><a href="https://github.com/for-GET/http-decision-diagram" target="_blank" rel="noopener">출처: http-decision-diagram</a></p><ul><li>http 응답에, 어떤 상황에 해당 상태코드가 반환되는지를 보여주는 시각화 다이어그램 자료이다.</li></ul><hr><a name="status"><h1 id="상태코드와-사유구절"><a href="#상태코드와-사유구절" class="headerlink" title="상태코드와 사유구절"></a>상태코드와 사유구절</h1><ul><li>클라이언트에게 그들의 트랜잭션을 이해할 수 있는 쉬운 방법을 제공한다.<br>=&gt; 상태코드, 사유구절</li><li>HTTP/1.1 기준이다.</li></ul><h1 id="상태코드-HTTP-1-1-기준"><a href="#상태코드-HTTP-1-1-기준" class="headerlink" title="상태코드 (HTTP/1.1 기준)"></a>상태코드 (HTTP/1.1 기준)</h1><a name="1"><h2 id="정보성-상태-코드-100-199"><a href="#정보성-상태-코드-100-199" class="headerlink" title="정보성 상태 코드 (100 - 199)"></a>정보성 상태 코드 (100 - 199)</h2><ul><li>HTTP/1.1에 도입되었다.</li><li>복잡함을 감수할만한 가치가 있는지에 대한 논란이 되고 있다.</li></ul><h3 id="100-Continue"><a href="#100-Continue" class="headerlink" title="100 - Continue"></a>100 - Continue</h3><ul><li>요청의 시작 부분 일부가 받아들여졌으며, 클라이언트는 나머지를 계속 이어서 보내야 함을 의미한다.</li><li>이것을 보낸 후 서버는 반드시 요청을 받아 응답해야 한다.</li><li>클라가 서버에 엔터티 본문을 전송하기 전에<br>그 엔터티 본문을 서버가 받아들일 것인지 확인하려고 할 때,<br>그 확인 작업을 최적화하기 위한 의도로 도입된 것이다.</li></ul><h4 id="클라이언트와-100-Continue"><a href="#클라이언트와-100-Continue" class="headerlink" title="클라이언트와 100 Continue"></a>클라이언트와 100 Continue</h4><ul><li>클라이언트가 엔터티를 서버에게 보내려고 하고, 100 continue 응답을 기다리겠다면, 클라는 <strong>Expect 요청 헤더</strong>를 보낼 필요가 있다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Expect: 100-continue</span><br></pre></td></tr></table></figure></li></ul><p><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Expect" target="_blank" rel="noopener">Expect</a></p><ul><li>최적화를 위한 것이다.</li><li>서버가 다루거나 사용할 수 없는 큰 엔터티를 서버에게 보내지 않으려는 목적으로만 사용해야 한다.</li><li>100 Continue 값이 담긴 Expect 헤더를 보낸 클라 서버가 100 Continue 응답을 보내주기를 막연히 기다리면 안 된다. 약간의 타임아웃 후에 클라는 그냥 엔터티를 보내야 한다.<ul><li>프론트 개발자는 예상치 못한 100 Continue 응답에도 대비해야한다..</li></ul></li></ul><h4 id="서버와-100-Continue"><a href="#서버와-100-Continue" class="headerlink" title="서버와 100 Continue"></a>서버와 100 Continue</h4><p>서버가 100 Continue 값이 담긴 expect 헤더가 포함된 요청을 받는다면</p><ul><li>100 Continue 응답 혹은</li><li>에러코드로 답해야한다. 417 Expectation Failed 에러</li></ul><p>받은 엔터티에 대한 최종 응답코드는 보내줘야 한다.</p><ol><li>클라: 서버에게 expect 헤더 보냄</li><li>서버: 음! 받을 수 있으니, 100을 보내야겠군</li><li>클라: 왜 안 오지 그냥 entity 보내자.</li><li>서버: 음? 100 아직 안보냈는데 entity가 왔네. 걍 받자</li><li>서버: 잘 받았어 ~ 응답 보내줘야 함<ul><li>엔터티 읽다가 에러가 나와도, 연결을 닫아서는 안된다.</li><li>클라가 응답을 받을 수 없게 되기 때문이다. (?)<ul><li>아직 잘 모르겠다.</li></ul></li></ul></li></ol><h4 id="프락시와-100-Continue"><a href="#프락시와-100-Continue" class="headerlink" title="프락시와 100 Continue"></a>프락시와 100 Continue</h4><ol><li>클라: 서버에게 expect 헤더 보냄</li><li>프락시: 서버에게 expect 헤더 고대로 보냄<ol><li>만약 다음 홉서버가(next-hope) HTTP/1.1 이전 버전이라는 걸 알게 되면 417 Expectation Failed를 클라에게 응답한다.</li></ol></li></ol><h3 id="101-switching-protocols"><a href="#101-switching-protocols" class="headerlink" title="101 - switching protocols"></a>101 - switching protocols</h3><ul><li>클라이언트가 upgrade 헤더에 나열한 것 중 하나로 서버가 프로토콜을 바꾸었음을 의미한다.</li><li>웹 소켓과 함께 사용될 수 있다.</li></ul><p>아래는 upgrade 헤더의 웹소켓으로 서버가 프로토콜을 바꿨다는 의미이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket </span><br><span class="line">Connection: Upgrade</span><br></pre></td></tr></table></figure><hr><a name="2"><h2 id="성공-상태-코드-200-299"><a href="#성공-상태-코드-200-299" class="headerlink" title="성공 상태 코드 (200 - 299)"></a>성공 상태 코드 (200 - 299)</h2><h3 id="200-OK"><a href="#200-OK" class="headerlink" title="200 - OK"></a>200 - OK</h3><ul><li>요청은 정상이고, 엔터티 본문은 요청된 리소스를 포함하고 있다.<ul><li><code>GET</code>: 리소스를 가져왔고 메시지 바디에 전송되었다.</li><li><code>HEAD</code>: 개체 헤더가 메시지 바디에 있다.</li><li><code>POST</code>: 리소스가 명시하는 행동의 결과가 메시지 바디에 전송되었다.</li><li><code>TRACE</code>: 서버가 요청받은 메시지가 메시지 바디에 포함되어있다.</li><li><code>PUT</code> 또는 <code>DELETE</code>의 성공 결과는 종종 200 OK가 아니라 <strong>204 No Content</strong> (또는 201 Created 리소스가 처음으로 업로드되었을 때)이다</li></ul></li><li>200응답은 캐쉬될 수 있다.</li></ul><h3 id="201-Created"><a href="#201-Created" class="headerlink" title="201 - Created"></a>201 - Created</h3><ul><li>서버 개체를 <strong>생성</strong>하라는 요청을 위한 것 (<code>PUT</code>)</li><li>서버는 반드시 객체를 생성하고 해당코드로 응답해야 한다.</li><li>응답에는<ul><li>location 헤더: 생성된 리소스에 대한 최대한 구체적인 참조</li><li>엔터티 본문: 그 리소스를 참조할 수 있는 여러 URL</li></ul></li></ul><h3 id="202-Accepted"><a href="#202-Accepted" class="headerlink" title="202 - Accepted"></a>202 - Accepted</h3><ul><li>요청은 받아들여졌으나, 서버는 아직 그에 대한 어떤 동작도 수행하지 않았다.</li><li>서버가 요청의 처리를 완료할 것인지에 대한 어떤 보장도 없다.<br>요청을 받아들이기에 적법해 보인다는 의미이다.</li><li>응답<ul><li>엔터티 본문: 요청에 대한 상태와, 요청의 처리가 언제 완료될 것인지에 대한 추정(혹은 그에 대한 정보를 어디서 얻을 수 있는지)을 포함해야 한다.</li></ul></li></ul><h3 id="203-Non-Authoritative-Information"><a href="#203-Non-Authoritative-Information" class="headerlink" title="203 - Non-Authoritative Information"></a>203 - Non-Authoritative Information</h3><ul><li>엔터티 헤더에 들어있는 정보가 원래 서버가 아닌 리소스의 사본에서 왔다.(?)</li><li>프록시가 리소스의 사본을 갖고 있었지만<br>리소스에 대한 메타 정보(헤더)를 검증하지 못한(혹은 안 한) 경우 이런 일이 발생할 수 있다.</li><li>요청이 성공했지만 페이로드가 원본 서버의 200(OK) 응답의 변환 프록시에 의해 수정되었음을 나타낸다.</li></ul><h3 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 - No Content"></a>204 - No Content</h3><ul><li>응답메세지에서 헤더와 상태줄은 있지만, 엔터티 본문은 없다.</li><li>204 응답은 기본적으로 캐시할 수 있다. 그러한 반응에는 ETag 헤더가 포함된다.</li></ul><p>일반적인 사용 사례는 </p><ul><li>사용자에게 표시되는 페이지의 현재 내용을 변경하지 않고<br><code>PUT</code> 요청의 결과로 <strong>204</strong>를 반환하고 리소스를 업데이트하는 것이다.</li><li><code>PUT</code> 요청의 결과로 리소스가 생성되면 <strong>201</strong>이 대신 반환된다. </li><li>페이지를 새로 업데이트된 페이지로 변경해야 하는 경우 200을 대신 사용해야 한다.</li></ul><h3 id="205-Reset-Content"><a href="#205-Reset-Content" class="headerlink" title="205 - Reset Content"></a>205 - Reset Content</h3><ul><li>브라우저를 위해 사용되는 코드</li><li>브라우저에게 현재 페이지에 있는 HTML 폼에 채워진 모든 값을 비우거나,<br>캔버스 상태를 재설정하거나,<br>UI를 새로 고치도록 지시한다.</li></ul><h3 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 - Partial Content"></a>206 - Partial Content</h3><ul><li>부분 혹은 범위 요청이 성공했다.</li><li>나중에 우리는 클라가 특별한 헤더를 사용해서 문서의 부분 혹은 특정 범위를 요청할 수 있다는 것을 보게 될 것이다.</li><li>이 상태 코드는 범위 요청이 성공했음을 의미한다.</li><li><code>Content-Range</code>헤더와 관련 있다.</li><li>206 응답은<ul><li><code>Content-Range</code>와 <code>Date</code> 헤더를 반드시 포함해야 하며, </li><li><code>Etag</code>와 <code>Content-Location</code>중 하나의 헤더도 반드시 포함해야 한다.</li></ul></li></ul><a name="3"><h2 id="리다이렉션-상태-코드-300-399"><a href="#리다이렉션-상태-코드-300-399" class="headerlink" title="리다이렉션 상태 코드 (300 - 399)"></a>리다이렉션 상태 코드 (300 - 399)</h2><ul><li>클라이언트가 관심 있어 하는 리소스에 대해 다른 위치를 사용하라고 말해주거나, 그 리소스의 내용 대신 다른 대안 응답을 제공한다.</li><li>웹서버에서 리다이렉션 코드가 쓰이는 경우에 대한 글은 <a href="https://feel5ny.github.io/2019/09/07/HTTP_005/#5">여기(#5.3)</a>를 확인해보면된다.</li></ul><h3 id="300-Multiple-Choices"><a href="#300-Multiple-Choices" class="headerlink" title="300 - Multiple Choices"></a>300 - Multiple Choices</h3><ul><li>클라이언트가 동시에 여러 리소스를 가리키는 URL을 요청한 경우, 그 리소스의 목록과 함께 반환된다.</li><li>요청에 둘 이상의 가능한 응답이 있음을 나타낸다. </li><li>사용자 에이전트 또는 사용자는 이 중 하나를 선택해야 한다. </li><li>응답 중 하나를 선택하는 표준화된 방법이 없기 때문에, 이 응답 코드는 거의 사용되지 않는다.</li><li>서버는 Location 헤더에 선호하는 URL을 포함시킬 수 있다.</li></ul><p>일반적인 사용 사례는 </p><ul><li>어떤 서버가 하나의 HTML 문서를 영어와 프랑스어 모두로 제공하는 경우 등에 사용할 수 있다.</li><li><a href="https://feel5ny.github.io/2020/01/19/HTTP_016">클라이언트 주도협상</a></li></ul><h3 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 - Moved Permanently"></a>301 - Moved Permanently</h3><ul><li>요청된 리소스가 Location 헤더가 지정한 URL로 <strong>확실하게</strong> 이동되었음을 나타낸다. </li><li>브라우저는 이 페이지로 리디렉션 되고 검색 엔진은 그들의 자원 링크를 업데이트한다 </li><li>따라서 301 코드는 <code>GET</code> 또는 <code>HEAD</code> 방법에 대한 응답으로만 사용하고,<br>대신 POST 방법에 대한 <strong>308 영구 리디렉션</strong>을 사용하는 것이 좋다.</li><li>이 상태에서는 메서드 변경이 명시적으로 금지되기 때문이다.</li></ul><img src="/images/2019/22/02.png"><h3 id="302-Found"><a href="#302-Found" class="headerlink" title="302 - Found"></a>302 - Found</h3><ul><li>요청된 리소스가 Location 헤더가 지정한 URL로 <strong>일시적으로 이동</strong>되었음을 나타낸다. </li><li>브라우저는 이 페이지로 리디렉션 되지만 검색 엔진은 리소스에 대한 링크를 업데이트하지 않는다.</li><li>따라서 302 코드는 <code>GET</code> 또는 <code>HEAD</code> 방법에 대한 응답으로만 설정하고,<br>메서드 변경이 명시적으로 금지되므로 대신 <strong>307 임시 리디렉션</strong>을 사용하는 것이 좋다.</li><li>사용된 메서드를 <code>GET</code>로 변경하려는 경우 대신 <strong>303 “기타”</strong>를 사용해야 한다. </li></ul><img src="/images/2019/22/03.png" style="width:100%"><h3 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 - See Other"></a>303 - See Other</h3><ul><li>클라에게 리소스를 다른 URL에서 가져와야 한다고 말해주고자 할 때 쓰인다.</li><li>새 URL은 응답메세지의 Location 헤더에 들어있다.</li><li>이 코드의 목적은 <code>POST</code> 요청에 대한 응답으로 클라에게 <strong>리소스의 위치를 알려주는 것</strong>.</li><li>이 응답 코드는 보통 <code>PUT</code> 또는 <code>POST</code>의 결과로 반송된다.</li></ul><h3 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 - Not Modified"></a>304 - Not Modified</h3><ul><li>클라는 헤더를 이용해 조건부 요청을 만들 수 있다.</li><li>만약 클라가 GET과 같은 조건부 요청을 보냈고,<br>그 요청한 리소스가 최근에 수정된 일이 없다면, 이 코드는 리소스가 수정되지 않았음을 의미하게 된다.<ul><li>리소스가 여전히 최신인지 수정되었는지 검사할 수 있다.</li><li><code>If-Modified-Since</code> 헤더를 전송한다. (<code>If-None-Match</code>, <code>If-Modified-From</code>)</li></ul></li><li>캐시된 자원으로의 암묵적 리디렉션이다. </li><li>이 상태 코드를 동반한 응답은 엔터티 본문을 가져서는 안된다.</li><li>200 OK 응답에는<br><code>Cache-Control</code>, <code>Content-Location</code>, <code>Date</code>, <code>ETag</code>, <code>Expires</code>, <code>Vary</code>가 포함되었을 것이다.</li></ul><h3 id="305-Use-Proxy"><a href="#305-Use-Proxy" class="headerlink" title="305 - Use Proxy"></a><del>305 - Use Proxy</del></h3><h3 id="306-사용되지-않음"><a href="#306-사용되지-않음" class="headerlink" title="306 - 사용되지 않음"></a><del>306 - 사용되지 않음</del></h3><h3 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 - Temporary Redirect"></a>307 - Temporary Redirect</h3><ul><li>Location 헤더로 주어진 URL을 리소스를 임시로 가리키기 위한 목적으로 사용해야 한다.</li></ul><h3 id="308-Permanent-Redirect"><a href="#308-Permanent-Redirect" class="headerlink" title="308 - Permanent Redirect"></a>308 - Permanent Redirect</h3><hr><a name="4"><h2 id="클라이언트-에러-상태-코드-400-499"><a href="#클라이언트-에러-상태-코드-400-499" class="headerlink" title="클라이언트 에러 상태 코드 (400 - 499)"></a>클라이언트 에러 상태 코드 (400 - 499)</h2><ul><li>클라이언트는 서버가 다룰 수 없는 무엇인가를 보낸다.</li><li>잘못 구성된 요청 메세지 같은 것이 있을 수 있으며, 존재하지 않은 URL 요청도 있을 수 있다.</li></ul><h3 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 - Bad Request"></a>400 - Bad Request</h3><ul><li>클라이언트가 잘못된 요청을 보냈다고 말해준다.</li></ul><h3 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 - Unauthorized"></a>401 - Unauthorized</h3><ul><li>리소스를 얻기 전에 클라에게 스스로 인증하라고 요구하는 내용의 응답을 적절한 헤더와 함께 반환한다.</li></ul><h3 id="402-Payment-Required"><a href="#402-Payment-Required" class="headerlink" title="402 - Payment Required"></a>402 - Payment Required</h3><ul><li>이 상태 코드는 쓰이지 않지만, 미래에 사용될 수도 있어서 미리 준비해둔 비표준 응답 코드 </li></ul><h3 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 - Forbidden"></a>403 - Forbidden</h3><ul><li>요청이 서버에 의해 거부되었음을 알려주기 위해 사용된다.</li><li>왜 요청이 거부되었는지 서버가 알려주고자 한다면,<br>그 이유를 설명하는 엔터니 본문을 포함시킬 수 있다.</li><li>이 코드는 보통 서버가 거절의 이유를 숨기고 싶을 때 사용한다.</li><li>이 상태는 401과 비슷하지만, 로그인 로직(틀린 비밀번호로 로그인 행위)처럼 반응하여 재인증(re-authenticating)을 하더라도 지속적으로 접속을 거절 합니다.</li></ul><h3 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 - Not Found"></a>404 - Not Found</h3><ul><li>서버가 요청한 URL을 찾을 수 없음을 알려주기 위해 사용한다.</li><li>404 페이지를 띄우는 링크는 대체로 <strong>브로큰 링크(broken link)</strong> 또는 <strong>데드 링크(dead link)</strong>라고 부르며, link rot 대상일 수도 있습니다.</li><li>404 상태 코드는 리소스가 일시적, 또는 영구적으로 사라졌다는 것을 의미하지는 않다. </li><li>리소스가 영구적 삭제되었다면 404 상태 코드 대신 <strong>410 (Gone)</strong> 상태 코드가 쓰여야 합니다.</li></ul><h3 id="405-Method-Not-Allowed"><a href="#405-Method-Not-Allowed" class="headerlink" title="405 - Method Not Allowed"></a>405 - Method Not Allowed</h3><ul><li>요청 URL에 대해, 지원하지 않은 메서드로 요청받았을 때 사용한다.</li><li>요청한 리소스에 대해 어떤 메서드가 사용 가능한지 클라에게 알려주기 위해,<br>요청에 <code>Allow</code> 헤더가 포함되어야 한다.</li><li>두 가지 필수 메소드인 <code>GET</code>와 <code>HEAD</code>는 사용 불가능해서는 안 되며,<br>이러한 오류 타입을 반환해서는 안 됩니다.</li></ul><h3 id="406-Not-Acceptable"><a href="#406-Not-Acceptable" class="headerlink" title="406 - Not Acceptable"></a>406 - Not Acceptable</h3><ul><li>클라는 자신이 어떤 종류의 엔터티를 받아들이고자 하는지에 대해 매개변수로 명시할 수 있다.<ul><li><code>Accept</code></li><li><code>Accept-Charset</code></li><li><code>Accept-Encoding</code></li><li><code>Accept-Language</code></li></ul></li><li>주어진 URL에 대한 리소스 중 클라가 받아들일 수 있는 것이 없는 겨우 사용한다.</li><li>종종 서버는 클라에게 왜 요청이 만족될 수 없었는지 알려주는 헤더를 포함시킨다.</li><li>실제로 이 오류는 거의 사용되지 않는다. </li><li>서버는 최종 사용자가 암호화되고 수정하기 어려운 이 오류 코드를 사용하여 응답하는 대신 관련 헤더를 무시하고 사용자에게 실제 페이지를 제공한다. <ul><li>사용자가 완전히 만족하지 않더라도 오류 코드보다 이를 선호할 것으로 추정된다.</li></ul></li></ul><h3 id="407-Proxy-Authentication-Required"><a href="#407-Proxy-Authentication-Required" class="headerlink" title="407 - Proxy Authentication Required"></a>407 - Proxy Authentication Required</h3><ul><li>401 상태코드와 같으나, 리소스에 대해 인증을 요구하는 프락시 서버를 위해 사용한다.</li></ul><h3 id="408-Request-Timeout"><a href="#408-Request-Timeout" class="headerlink" title="408 - Request Timeout"></a>408 - Request Timeout</h3><ul><li>클라의 요청을 완수하기에 시간이 너무 많이 걸리는 경우, 서버는 이 상태 코드로 응답하고 연결을 끊을 수 있다.</li><li>이 타임아웃의 길이는 서버마다 다르지만,<br>대개 어떠한 적법한 요청도 받아들일 수 있을 정도로 충분히 길다.</li><li>408은 서버가 계속 대기하지 않고 연결을 닫기로 결정했음을 의미하므로<br>서버는 응답에 있는 “닫기” 연결 헤더 필드를 전송해야 한다.</li><li>이 응답은 Chrome, Firefox 27+, IE9와 같은 일부 브라우저들이<br>서핑 속도를 높이기 위해 HTTP 사전 연결 메커니즘을 사용하기 때문에 훨씬 더 많이 사용된다.</li></ul><h3 id="409-Conflict"><a href="#409-Conflict" class="headerlink" title="409 - Conflict"></a>409 - Conflict</h3><ul><li>요청이 리소스에 대해 일으킬 수 있는 몇몇 충돌을 지칭하기 위해 사용한다.</li><li>서버는 요청이 충돌을 일으킬 염려가 있다고 생각될 때 이 요청을 보낼 수 있다.</li><li>응답은 충돌에 대해 설명하는 본문을 포함해야 한다.</li><li>충돌은 <code>PUT</code> 요청에 대응하여 발생할 가능성이 가장 높다.<br>예를 들어 서버에 이미 있는 파일보다 오래된 파일을 업로드할 때 409의 응답이 발생하여 버전 제어 충돌이 발생할 수 있다.</li></ul><h3 id="410-Gone"><a href="#410-Gone" class="headerlink" title="410 - Gone"></a>410 - Gone</h3><ul><li>404와 비슷하나, 서버가 한때 그 리소스를 갖고 있었다는 점이 다르다.</li><li>주로 웹사이트를 유지보수 하면서, 서버 관리자가 클라에게 리소스가 제거된 경우 이를 알려주기 위해 사용한다.</li><li>캐시 가능하다.</li></ul><h3 id="411-Length-Required"><a href="#411-Length-Required" class="headerlink" title="411 - Length Required"></a>411 - Length Required</h3><ul><li>서버 요청 메시지에 Content-Length 헤더가 있을 것을 요구할 때 사용한다.</li><li>클라가 서버에 청크 데이터를 보낼때, 서버가 청크 인코딩을 받아들여주지 않을 경우에도 411 Length Required가 내려온다.</li></ul><h3 id="412-Precondition-Failed"><a href="#412-Precondition-Failed" class="headerlink" title="412 - Precondition Failed"></a>412 - Precondition Failed</h3><ul><li>클라가 조건부 요청을 했는데, 그중 하나가 실패했을 때 사용한다.</li><li>조건부 요청은 클라가 Expect 헤더를 포함했을 때 발생한다.</li><li>대상 리소스에 대한 액세스가 거부되었음을 나타낸다. </li><li>이는 <code>If-Unmodified-from</code> 또는 <code>If-None-Match</code> 헤더에 의해 정의된 조건이 충족되지 않을 때 <code>GET</code> 또는 <code>HEAD</code> 이외의 방법에 대한 조건부 요청에서 발생한다. </li></ul><h3 id="413-Payload-Too-Large-Request-Entity-Too-Large"><a href="#413-Payload-Too-Large-Request-Entity-Too-Large" class="headerlink" title="413 - Payload Too Large (Request Entity Too Large)"></a>413 - Payload Too Large (Request Entity Too Large)</h3><ul><li>서버가 처리할 수 있는 혹은 처리하고자 하는 한계를 넘은 크기의 요청을 클라가 보냈을 때 사용한다.</li><li>서버가 연결을 닫거나 헤더 필드(<code>Retry-After</code>)를 반환할 수 있다.</li></ul><h3 id="2-414-URI-Too-Long-Request-URI-Too-Long"><a href="#2-414-URI-Too-Long-Request-URI-Too-Long" class="headerlink" title="2. 414 - URI Too Long (Request URI Too Long)"></a>2. 414 - URI Too Long (Request URI Too Long)</h3><ul><li>서버가 처리할 수 있는 혹은 처리하고자 하는 한계를 넘은 길이의 요청 URL이 포함된 요청을 클라가 보냈을 때 사용한다.</li></ul><h3 id="415-Unsupported-Media-Type"><a href="#415-Unsupported-Media-Type" class="headerlink" title="415 - Unsupported Media Type"></a>415 - Unsupported Media Type</h3><ul><li>서버가 이해하거나 지원하지 못하는 내용 유형의 엔터티를 클라가 보냈을 때 사용한다.</li></ul><h3 id="416-Range-Not-Satisfiable"><a href="#416-Range-Not-Satisfiable" class="headerlink" title="416 - Range Not Satisfiable"></a>416 - Range Not Satisfiable</h3><ul><li>요청 메세지가 리소스의 특정 범위를 요청했는데,<br>그 범위가 잘못되었거나 맞지 않을 때 사용한다.</li></ul><h3 id="417-Expectation-Failed"><a href="#417-Expectation-Failed" class="headerlink" title="417 - Expectation Failed"></a>417 - Expectation Failed</h3><ul><li>요청에 포함된 Expect 요청 헤더에 서버가 만족시킬 수 없는 기대가 담겨있는 경우 사용한다.</li></ul><h3 id="418-I’m-a-teapot"><a href="#418-I’m-a-teapot" class="headerlink" title="418 - I’m a teapot"></a>418 - I’m a teapot</h3><ul><li>서버가 찻주전자이기 때문에 커피 내리기를 거절했다는 것을 의미합니다. </li><li>이 오류는 1998년 만우절 농담이었던 하이퍼 텍스트 커피 포트 제어 규약(Hyper Text Coffee Pot Control Protocol)의 레퍼런스입니다.</li></ul><h3 id="422-Unprocessable-Entity"><a href="#422-Unprocessable-Entity" class="headerlink" title="422 - Unprocessable Entity"></a>422 - Unprocessable Entity</h3><ul><li>이 응답은 서버가 요청을 이해하고 요청 문법도 올바르지만 요청된 지시를 따를 수 없음을 나타냅니다.</li><li>클라이언트는 요청을 수정하지 않고 동일한 형태로 다시 보내서는 안된다.</li></ul><h3 id="425-Too-Early"><a href="#425-Too-Early" class="headerlink" title="425 - Too Early"></a>425 - Too Early</h3><ul><li>서버가 재생될 수 있는 요청을 처리하는 것을 원치 않음을 나타내며, 이는 재생 공격의 가능성을 만든다.</li></ul><h3 id="426-Upgrade-Required"><a href="#426-Upgrade-Required" class="headerlink" title="426 - Upgrade Required"></a>426 - Upgrade Required</h3><ul><li>서버가 현재 프로토콜을 사용하여 요청을 수행하기를 거부하지만<br>클라이언트가 다른 프로토콜로 업그레이드한 후 요청을 수행할 의향이 있음을 나타낸다.</li><li>서버는 필요한 프로토콜을 나타내기 위해 이 응답과 함께 업그레이드 헤더를 보낸다.</li></ul><h3 id="428-Precondition-Required"><a href="#428-Precondition-Required" class="headerlink" title="428 - Precondition Required"></a>428 - Precondition Required</h3><ul><li>서버가 요청을 조건부로 해야 함을 나타낸다.</li><li>일반적으로 이는 <code>If-Match</code>와 같은 필수 전제 조건 헤더가 누락됨을 의미한다.</li><li>전제 조건 헤더가 서버 측 상태와 일치하지 않을 경우 응답은 412 Prefixed가 되어야 한다.</li></ul><h3 id="429-Too-Many-Requests"><a href="#429-Too-Many-Requests" class="headerlink" title="429 - Too Many Requests"></a>429 - Too Many Requests</h3><ul><li>사용자가 지정된 시간 동안 너무 많은 요청을 보냈음을 나타낸다.</li><li>재시도 후 헤더가 이 응답에 포함될 수 있으며, 이는 새 요청을 하기 전에 대기할 시간을 나타낼 수 있다.</li></ul><h3 id="3-431-Request-Header-Fields-Too-Large"><a href="#3-431-Request-Header-Fields-Too-Large" class="headerlink" title="3. 431 - Request Header Fields Too Large"></a>3. 431 - Request Header Fields Too Large</h3><ul><li>서버가 헤더 필드가 너무 커서 요청을 처리하지 않음을 나타낸다.<br>요청 헤더 필드의 크기를 줄인 후 요청을 다시 제출할 수 있다.</li><li>총 요청 헤더 필드 수가 너무 많은 경우 또는 단일 헤더 필드가 너무 큰 경우 사용할 수 있다.</li><li>이 오류는 잘 테스트된 프로덕션 시스템에서 발생해서는 안 되지만,<br>새로운 시스템을 테스트하는 동안 더 자주 발견될 수 있다.</li></ul><h3 id="451-Unavailable-For-Legal-Reasons"><a href="#451-Unavailable-For-Legal-Reasons" class="headerlink" title="451 - Unavailable For Legal Reasons"></a>451 - Unavailable For Legal Reasons</h3><ul><li>법적 이유로 사용할 수 없는 클라이언트 오류 응답 코드는 사용자가 법적 조치가 발행된 웹 페이지와 같이<br>법적 이유로 사용할 수 없는 리소스를 요청했음을 나타낸다.</li></ul><hr><a name="5"><h2 id="서버-에러-상태-코드-500-599"><a href="#서버-에러-상태-코드-500-599" class="headerlink" title="서버 에러 상태 코드 (500 - 599)"></a>서버 에러 상태 코드 (500 - 599)</h2><ul><li>클라가 올바른 요청을 보냈음에도 서버 자체에서 에러가 발생하는 경우가 있다.</li><li>클라가 서버의 제한에 걸린 것일 수도 있고,<br>혹은 게이트웨이 리소스와 같은 서버의 보조 구성요소에서 발생한 에러일 수도 있다.</li><li>프락시는 클라의 입장에서 서버와 대화를 시도할 때 자주 에러를 만나게 된다.</li></ul><h3 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 - Internal Server Error"></a>500 - Internal Server Error</h3><ul><li>서버가 요청을 처리할 수 없게 만드는 에러를 만났을 때 사용한다.</li></ul><h3 id="501-Not-Implemented"><a href="#501-Not-Implemented" class="headerlink" title="501 - Not Implemented"></a>501 - Not Implemented</h3><ul><li>클라가 서버의 능력을 넘은 요청을 했을 때 사용한다.</li><li>예서버가 지원하지 않는 메서드를 사용</li></ul><h3 id="502-Bad-Gateway"><a href="#502-Bad-Gateway" class="headerlink" title="502 - Bad Gateway"></a>502 - Bad Gateway</h3><ul><li>프락시나 게이트웨이처럼 행동하는 서버가<br>그 요청 응답 연쇄에 있는 다음 링크로부터<br>가짜 응답에 맞닥뜨렸을 때 사용한다.</li></ul><h3 id="1-503-Service-Unavailable"><a href="#1-503-Service-Unavailable" class="headerlink" title="1. 503 - Service Unavailable"></a>1. 503 - Service Unavailable</h3><ul><li>서버가 요청을 처리해 줄 수 없지만, 나중에 가능함을 의미하고자 할대 사용한다.</li><li>서버가 언제 그 리소스를 사용할 수 있게 될지 알고 있다면, 서버는 Retry-After 헤더를 응답에 포함시킬 수 있다.</li></ul><h3 id="504-Gateway-Timeout"><a href="#504-Gateway-Timeout" class="headerlink" title="504 - Gateway Timeout"></a>504 - Gateway Timeout</h3><ul><li>408과 비슷하지만,<br>다른 서버에게 요청을 보내고 응답을 기다리다<br>타임아웃이 발생한 게이트웨이나 프락시에서 온 응답이라는 점이 다르다.</li></ul><h3 id="505-HTTP-Version-Not-Supported"><a href="#505-HTTP-Version-Not-Supported" class="headerlink" title="505 - HTTP Version Not Supported"></a>505 - HTTP Version Not Supported</h3><ul><li>서버가 지원할 수 없거나, 지원하지 않으려고 하는 버전의 프로토콜로 된 요청을 받았을 때 사용한다</li><li>몇몇 서버 어플리케이션들은 오래된 버전의 프로토콜을 지원하지 않는 것을 택한다.</li></ul><h3 id="511-Network-Authentication-Required"><a href="#511-Network-Authentication-Required" class="headerlink" title="511 - Network Authentication Required"></a>511 - Network Authentication Required</h3><ul><li>클라이언트가 네트워크 액세스를 얻으려면 <strong>인증이 필요하다는 것</strong>을 나타낸다.</li><li>이 상태는 원 서버에서 생성되는 것이 아니라<br>네트워크에 대한 액세스를 제어하는 프록시를 가로채서 생성된다.</li><li>네트워크 운영자들은 때때로 접근을 허가하기 전에<br>약간의 인증, 용어의 수락 또는 다른 사용자 상호 작용을 요구한다(예: 인터넷 카페나 공항에서). </li><li>그들은 종종 자신의 MAC(Media Access Control) 주소를 사용하여 그렇게 하지 않은 클라이언트를 식별한다.</li></ul><hr><ul><li><a href="https://github.com/bookcrush?type=source" target="_blank" rel="noopener">책뽀개기 모임</a> 중 <strong>http 완벽가이드</strong> 1장 뽀개기 진행중입니다. (~8월말) (다음 모임은 2장)<br>(모임 참여를 원하신다면 댓글로 문의 바랍니다.)</li><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 <strong>저만의 순서</strong>로 정리 한 글입니다.</li></ul><hr><p>참고자료</p><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status" target="_blank" rel="noopener">MDN</a></li></ol></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;https://camo.githubusercontent.com/4e15cccf2a9277dcca2c8824092547dee7058744/68747470733a2f2f7261776769746875622e636f6d2f666f722d47
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="message" scheme="http://feel5ny.github.io/tags/message/"/>
    
      <category term="status code" scheme="http://feel5ny.github.io/tags/status-code/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 메세지 - 메서드</title>
    <link href="http://feel5ny.github.io/2019/08/16/HTTP_003_02/"/>
    <id>http://feel5ny.github.io/2019/08/16/HTTP_003_02/</id>
    <published>2019-08-16T12:23:55.000Z</published>
    <updated>2019-08-19T15:22:50.310Z</updated>
    
    <content type="html"><![CDATA[<p>HTTP 메세지 중 요청 줄에 존재하는 메서드에 대해서 알아본다. 요청 메서드에 따라서 서버에서 처리되는 과정, 반환되는 메세지의 형태가 달라진다. HTTP/1.1에서 정의한 메서드에는 총 9가지가 존재하며, 서비스에 따라 커스텀한 확장 메서드를 만들 수 있다. </p><hr><ul><li>모든 서버가 모든 메서드를 구현하지 않는다.</li><li>모든 메서드를 구현하지 않았다 하더라도 메서드는 대부분 제한적으로 사용될 것이다.</li><li>일반적으로 서버 설정에 의해 메서드의 제한이 정해지며, 따라서 사이트마다 또 서버마다 다를 수 있다.</li></ul><a name="safe"><h1 id="안전성-Safe"><a href="#안전성-Safe" class="headerlink" title="안전성 Safe"></a>안전성 Safe</h1><ul><li>HTTP는 안전한 메서드라 불리는 메서드의 집합이다.</li><li>안전한 메서드의 목적은,<br>서버에 어떤 영향을 줄 수 있는 안전하지 않은 메서드가 사용될 때<br>사용자들에게 그 사실을 알려줄 수 있도록 하는 것에 있다.</li><li>읽기 전용인 경우 안전한 메서드로 간주한다.</li><li><code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code> 메서드는 안전한 메서드로 정의되어있다. </li><li>디버깅용 메서드 <code>TRACE</code>로 클라이언트 쪽에 공격을 시도하여 credentials을 훔칠 수도 있기 때문에 안전한 메서드에 속하지 않는다.</li></ul><details>  <summary>RFC 7231 설명</summary><blockquote><p>번역에 오역이 있을 수 있습니다..</p></blockquote><p>  정의된 의미들이 본질적으로 <strong>읽기 전용</strong>인 경우, 요청 메소드는 “안전한” 것으로 간주됩니다. 즉, 클라이언트는 해당 리소스에 안전성있는 메서드를 적용한 결과로, origin 서버에 상태변화를 요청하지도 않고, 상태변화를 예상하지도 않는다. 마찬가지로, 안전성 있는 메서드를 합리적으로 사용한다면 origin 서버에서는 어떤 해를 야기하거나 리소스 손실 또는 비정상적인 부담을 예상하지 않는다.</p><p>  안전한 메소드의 정의로  </p><ol><li>잠재적으로 유해하거나, </li><li>완전히 읽기 전용이 아니거나, </li><li>안전한 메소드를 호출하는 동안 사이드 이팩트를 일으키는 행동 </li></ol><p>  을 포함시키지 않았다.<br>  중요한 것은 client가 추가젹인 행동을 요구하지 않았고, 그것에 대해 책임을 질 수 없다는 것이다.</p><p>  예를 들어 대부분의 서버는 메소드에 관계없이 모든 응답이 완료될 때 로그 파일에 액세스하기 위해 요청 정보를 추가하며, 로그 저장소가 가득 차서 서버가 손상될 수 있음에도 불구하고 안전한 것으로 간주된다. 마찬가지로, 웹 상에서 광고를 선택함으로써 시작된 안전한 요청은 종종 광고 계정을 청구하는 부작용을 낳을 것이다.</p><p>  이 사양에서 정의한 요청 메서드 중 GET, HEAD, OPTIONS 및 TRACE 메서드는 안전하도록 정의되어 있습니다.</p><p>  안전한 메서드과 안전하지 않은 메서드을 구분하는 목적은 자동 검색 프로세스(스파이더)와 캐시 성능 최적화(프리페치)가 해를 일으킬 염려 없이 작동할 수 있도록 하는 것이다.<br>  또한, 사용자 에이전트는 신뢰할 수 없는 콘텐츠를 처리할 때 안전하지 않은 메서드의 자동 사용에 적절한 제약을 가할 수 있다.<br>  사용자 에이전트는 사용자에게 잠재적 조치를 제시할 때 안전과 안전하지 않은 메서드을 구분하여 사용자가 요청하기 전에 안전하지 않은 조치를 인지할 수 있도록 해야 한다.</p><p>  효과적인 요청 URI 내의 매개 변수가 action을 선택하는 효과를 가지도록 리소스를 구성하는 경우 action이 요청 메서드의 의미와 일치하는지 확인하는 것은 리소스 소유자의 책임이다.<br>  예를 들어 웹 기반 콘텐츠 편집 소프트웨어는 “page?do=delete”와 같은 쿼리 매개 변수 내의 action을 사용하는 것이 일반적이다.<br>  이러한 리소스의 목적이 안전하지 않은 action을 수행하는 것이라면(GET, HEAD, OPTIONS가 아닌) 리소스 소유자는 안전한 요청 방법을 사용하여 액세스할 때 해당 action을 실행 중지하거나 허용하지 않아야 한다. </p><p>  그렇게 하지 않으면 자동화된 프로세스가 링크 유지보수, 프리 페치(사전 검색), 검색 색인 구축 등을 위해 모든 URI 참조에 GET를 수행할 때 사이드 이팩트가 발생할 수 있다.</p>  <details>    <summary>원문</summary>    Request methods are considered "safe" if their defined semantics are essentially read-only; i.e., the client does not request, and does not expect, any state change on the origin server as a result of applying a safe method to a target resource.  Likewise, reasonable use of a safe method is not expected to cause any harm, loss of property, or unusual burden on the origin server.    This definition of safe methods does not prevent an implementation from including behavior that is potentially harmful, that is not entirely read-only, or that causes side effects while invoking a safe method.  What is important, however, is that the client did not request that additional behavior and cannot be held accountable for it.    For example, most servers append request information to access log files at the completion of every response, regardless of the method, and that is considered safe even though the log storage might become full and crash the server.    Likewise, a safe request initiated by selecting an advertisement on the Web will often have the side effect of charging an advertising account.    Of the request methods defined by this specification, the GET, HEAD, OPTIONS, and TRACE methods are defined to be safe.    The purpose of distinguishing between safe and unsafe methods is to allow automated retrieval processes (spiders) and cache performance optimization (pre-fetching) to work without fear of causing harm.    In addition, it allows a user agent to apply appropriate constraints on the automated use of unsafe methods when processing potentially untrusted content.    A user agent SHOULD distinguish between safe and unsafe methods when presenting potential actions to a user, such that the user can be made aware of an unsafe action before it is requested.    When a resource is constructed such that parameters within the effective request URI have the effect of selecting an action, it is the resource owner's responsibility to ensure that the action is consistent with the request method semantics.    For example, it is common for Web-based content editing software to use actions within query parameters, such as "page?do=delete".    If the purpose of such a resource is to perform an unsafe action, then the resource owner MUST disable or disallow that action when it is accessed using a safe request method.     Failure to do so will result in unfortunate side effects when automated processes perform a GET on every URI reference for the sake of link maintenance, pre-fetching, building a search index, etc.  </details></details><hr><a name="idempotent"><h1 id="멱등성-Idempotent"><a href="#멱등성-Idempotent" class="headerlink" title="멱등성 Idempotent"></a>멱등성 Idempotent</h1><ul><li>특정 메서드의 요청을 여러 번 했을 경우, 한번 요청했을 때와 결과가 같다면 멱등으로 간주한다.</li><li><code>PUT</code>, <code>DELETE</code>, <code>TRACE</code> 및 안전한 요청 방법(<code>GET</code>, <code>HEAD</code>, <code>OPTIONS</code>)이 멱등성을 갖는다.</li></ul><details>  <summary>RFC 7231 설명</summary><blockquote><p>번역에 오역이 있을 수 있습니다..</p></blockquote><p>  요청 메서드로 해당 방법으로 동일한 요청을 여러번 했을 때, 한 번했을 때와 결과가 같다면 “멱등”으로 간주한다. 이 사양에서 정의한 요청 방법 중에서 PUT, DELETE 및 안전성 있는 메서드가 멱등성을 갖는다.</p><p>  안전성과 마찬가지로 멱등성은 사용자가 요청한 내용에만 적용됩니다. 서버는 각 요청을 별도로 기록하거나, 수정 관리 기록을 유지하거나 혹은 멱등성을 갖는 요청마다 다른 비멱등성 사이드이팩트들를 구현할 수도 있다.</p><p>  클라이언트가 서버의 응답을 읽기 전에 통신 장애가 발생할 경우 요청이 자동으로 반복될 수 있기 때문에 멱등성 메서드가 구별된다.  예를 들어 클라이언트가 PUT 요청을 보내고 응답이 수신되기 전에 기본 연결이 닫힌 경우 클라이언트는 새로운 연결을 설정하고 멱등(?) 요청을 다시 시도할 수 있다. 원래 요청이 성공하더라도, 응답은 다를 수 있지만, 요청을 반복하는 것은 의도된 것과 동일한 효과를 낼 것이라는 것을 알고 있다.</p>  <details>    <summary>원문</summary>    A request method is considered "idempotent"     if the intended effect on the server of multiple identical requests with that method is the same as the effect for a single such request.    Of the request methods defined by this specification, PUT, DELETE, and safe request methods are idempotent.    Like the definition of safe, the idempotent property only applies to what has been requested by the user; a server is free to log each request separately, retain a revision control history, or implement other non-idempotent side effects for each idempotent request.    Idempotent methods are distinguished because the request can be repeated automatically if a communication failure occurs before the client is able to read the server's response.  For example, if a client sends a PUT request and the underlying connection is closed before any response is received, then the client can establish a new connection and retry the idempotent request.  It knows that repeating the request will have the same intended effect, even if the original request succeeded, though the response might differ.  </details></details><hr><a name="cachable"><h1 id="캐시-가능성-Cachable"><a href="#캐시-가능성-Cachable" class="headerlink" title="캐시 가능성 Cachable"></a>캐시 가능성 Cachable</h1><ul><li>향후 재사용을 위해 이에 대한 응답을 저장할 수 있음을 나타낼 수 있다.</li><li>일반적으로 현재 시점의 응답이나 권한 있는 응답에 의존하지 않는 <code>안전한 메서드</code>는 캐시 가능한 것으로 정의한다.<ul><li><code>GET</code>, <code>HEAD</code>, <code>POST</code></li></ul></li></ul><details>  <summary>RFC 7231 설명</summary>  요청 method는 "cacheable"로 정의되어 향후의 재사용을 위해 이에 대한 응답을 저장할 수 있음을 나타낼 수 있다. 구체적인 요건은 [RFC7234](https://tools.ietf.org/html/rfc7234)를 참조한다. 일반적으로 현재 또는 권한 있는 응답에 의존하지 않는 안전한 메서드를 캐시 가능한 것으로 정의된다. 이 규격은 압도적으로 많은 캐시 구현이 GET와 HEAD만 지원하지만 GET, HEAD 및 POST는 캐시 가능한 것으로 정의한다.<p>  Request methods can be defined as “cacheable” to indicate that responses to them are allowed to be stored for future reuse; for specific requirements see <a href="https://tools.ietf.org/html/rfc7234" target="_blank" rel="noopener">RFC7234</a>.  In general, safe methods that do not depend on a current or authoritative response are defined as cacheable; this specification defines GET, HEAD, and POST as cacheable, although the overwhelming majority of cache implementations only support GET and HEAD.</p></details><h1 id="메서드-종류-HTTP-1-1-기준"><a href="#메서드-종류-HTTP-1-1-기준" class="headerlink" title="메서드 종류 (HTTP/1.1 기준)"></a>메서드 종류 (HTTP/1.1 기준)</h1><a name="1"><h2 id="1-GET"><a href="#1-GET" class="headerlink" title="1. GET"></a>1. GET</h2><p>서버에게 리소스를 달라고 요청하기 위해 쓰인다.</p><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">요청메세지에 바디 존재</td><td align="left">X</td></tr><tr><td align="left">성공 응답메세지에 바디 존재</td><td align="left">O</td></tr><tr><td align="left">안전성 </td><td align="left">O</td></tr><tr><td align="left">멱등성                 </td><td align="left">O</td></tr><tr><td align="left">캐시 가능?              </td><td align="left">O</td></tr><tr><td align="left">HTML form에서 사용 가능?</td><td align="left">O</td></tr></tbody></table><p>요청</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /index.html HTTP/1.1</span><br><span class="line">Host: feel5ny.github.io</span><br><span class="line">Accept: *</span><br></pre></td></tr></table></figure><p>응답</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 617</span><br><span class="line"></span><br><span class="line">&lt;html&gt;...&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="cf-1-왜-안전성과-멱등이-중요할까"><a href="#cf-1-왜-안전성과-멱등이-중요할까" class="headerlink" title="cf__1 왜 안전성과 멱등이 중요할까?"></a>cf__1 왜 안전성과 멱등이 중요할까?</h4><p>안전성과 멱등은 신뢰할 수 없는 네트워크 상의 HTTP를 신뢰할 수 있게 만들어 준다. 만일 GET 요청을 보내고 응답을 못 받았을 경우 그냥 한 번 더 보내면 된다. 이 동작은 안전하다. 먼저 보낸 요청이 벌써 처리되었다 하더라도 서버에 다른 영향은 없다. 마찬가지로 PUT 요청을 보내고 응답을 못 받았다면 단지 한 번 더 동일한 요청을 보내면 된다.<br>그러나 POST는 안전하지도 않고 멱등도 아니다. 따라서 POST 메소드는 주의해서 사용해야 한다. <a href="https://greatkim91.tistory.com/14" target="_blank" rel="noopener">출처(행복한 아빠)</a></p><hr><a name="2"><h2 id="2-HEAD"><a href="#2-HEAD" class="headerlink" title="2. HEAD"></a>2. HEAD</h2><p>GET처럼 행동하지만, 서버는 응답으로 <strong>헤더</strong>만을 돌려준다.<br>엔터티 본문은 반환되지 않는다.</p><p>이럴 때 사용한다.</p><ul><li>리소스를 가져오지 않고도, 그에 대해 <strong>무엇인가</strong>(타입이라거나)를 알아낼 수 있다.</li><li>응답의 상태 코드를 통해, 개체가 존재하는지 확인할 수 있다.</li><li>헤더만을 확인하여 리소스가 변경되었는지 검사할 수 있다.</li><li>큰 용량의 리소스를 다운로드 받을지 말지 결정하기 위해서 사전 요청하는 용도로 사용할 수 있다.</li></ul><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">요청메세지에 바디 존재</td><td align="left">X</td></tr><tr><td align="left">성공 응답메세지에 바디 존재</td><td align="left">X</td></tr><tr><td align="left">안전성 </td><td align="left">O</td></tr><tr><td align="left">멱등성                 </td><td align="left">O</td></tr><tr><td align="left">캐시 가능?              </td><td align="left">O</td></tr><tr><td align="left">HTML form에서 사용 가능?</td><td align="left">X</td></tr></tbody></table><p>요청</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HEAD /index.html HTTP/1.1</span><br><span class="line">Host: feel5ny.github.io</span><br><span class="line">Accept: *</span><br></pre></td></tr></table></figure><p>응답</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 617</span><br></pre></td></tr></table></figure><hr><a name="3"><h2 id="3-PUT"><a href="#3-PUT" class="headerlink" title="3. PUT"></a>3. PUT</h2><p>서버에 문서를 쓴다….(?)</p><ul><li>예시<ul><li>어떤 발행 시스템은 사용자가 PUT을 이용해 웹페이지를 만들고,</li><li>웹서버에 직접 게시할 수 있도록 해준다.</li></ul></li></ul><p>PUT 메서드의 의미는</p><ul><li>서버가 요청의 본문을 가지고 요청 URL의 이름대로 <strong>새 자료를 만들거나</strong>,</li><li>이미 URL이 존재한다면, 본문을 사용해서 <strong>교체</strong>하는 것이다.</li></ul><ul><li>데이터를 변경할 수 있는 메서드이기 때문에 서버 입장에서는 위험할 수 있다.</li><li>PUT은 콘텐츠를 변경할 수 있게 해주기 때문에,<br>많은 웹 서버가 PUT을 수행하기 전에 사용자에게<br>비밀번호를 입력해서 <strong>로그인을 하도록 요구할 것이다.</strong></li></ul><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">요청메세지에 바디 존재</td><td align="left">O</td></tr><tr><td align="left">성공 응답메세지에 바디 존재</td><td align="left">X</td></tr><tr><td align="left">안전성 </td><td align="left">X</td></tr><tr><td align="left">멱등성                 </td><td align="left">O</td></tr><tr><td align="left">캐시 가능?              </td><td align="left">X</td></tr><tr><td align="left">HTML form에서 사용 가능?</td><td align="left">X</td></tr></tbody></table><p>요청</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /joy.txt HTTP/1.1</span><br><span class="line">Host: feel5ny.github.io</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Content-Length: 34</span><br></pre></td></tr></table></figure><p>응답</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 201 Created</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 47</span><br><span class="line"></span><br><span class="line">http://feel5ny.github.io/joy.txt</span><br></pre></td></tr></table></figure><ul><li>새로운 생성 시에는 성공 응답코드로 201 Created을 내려줘야 한다.</li><li>수정 작업 시에는 성공 응답코드로 200을 내려줘야 한다. </li></ul><h4 id="PUT과-POST의-차이점은-PUT은-멱등하다"><a href="#PUT과-POST의-차이점은-PUT은-멱등하다" class="headerlink" title="PUT과 POST의 차이점은 PUT은 멱등하다."></a>PUT과 POST의 차이점은 PUT은 멱등하다.</h4><ul><li>PUT은 한번 혹은 연속적으로 여러 번 하더라도 동일하지만 영향(부작용이 아님)을 미치지만, </li><li>POST는 연속적인 요청이 그대로 전달되어, 요청이 연속적으로 들어가는 것으로 인지하여 <strong>추가적인 영향</strong>이 있을 수 있습니다.</li><li>PUT으로 새 리소스를 생성하고<br>또 동일한 내용으로 PUT을 리소스에 요청해도<br>두 번째는 이미 존재하고 동일한 내용이므로 결과는 같다. </li><li>이미 존재하는 리소스에 PUT을 보낼 경우<br>동일한 내용으로 몇 번을 보내더라도<br>동일한 내용으로 상태가 저장되므로<br>리소스 상태는 변하지 않는다.</li></ul><hr><a name="4"><h2 id="4-POST"><a href="#4-POST" class="headerlink" title="4. POST"></a>4. POST</h2><ul><li>서버에 입력 데이터를 전송하기 위해 설계되었다.</li><li>request의 body 타입은 Content-Type 헤더(header)에 따라 결정된다.</li><li>POST는 비멱등성을 갖는다. 같은 POST를 연속적으로 보낸다면 명령을 여러 번 내린 것처럼 부가적인 효과를 가져올 것입니다.</li></ul><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">요청메세지에 바디 존재</td><td align="left">O</td></tr><tr><td align="left">성공 응답메세지에 바디 존재</td><td align="left">O</td></tr><tr><td align="left">안전성 </td><td align="left">X</td></tr><tr><td align="left">멱등성                 </td><td align="left">X</td></tr><tr><td align="left">캐시 가능?              </td><td align="left">새 정보가 포함되었을 때만</td></tr><tr><td align="left">HTML form에서 사용 가능?</td><td align="left">X</td></tr></tbody></table><p>요청</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /inventory-check.cgi HTTP/1.1</span><br><span class="line">Host: feel5ny.github.io</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Content-Length: 18</span><br><span class="line"></span><br><span class="line">item=bandsaw 2647</span><br></pre></td></tr></table></figure><p>응답</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 37</span><br><span class="line"></span><br><span class="line">The bandsaw model 2647 is in stock!</span><br></pre></td></tr></table></figure><hr><a name="5"><h2 id="5-TRACE"><a href="#5-TRACE" class="headerlink" title="5. TRACE"></a>5. TRACE</h2><h4 id="자신의-요청이-서버에-도달했을-때-어떻게-보이게-되는지-알려준다"><a href="#자신의-요청이-서버에-도달했을-때-어떻게-보이게-되는지-알려준다" class="headerlink" title="자신의 요청이 서버에 도달했을 때 어떻게 보이게 되는지 알려준다."></a>자신의 요청이 서버에 도달했을 때 어떻게 보이게 되는지 알려준다.</h4><ul><li>클라이언트가 어떤 요청을 할 때,<br>그 요청은 방화벽, 프락시, 게이트웨이 등의 어플리케이션을 통과할 수 있다.</li><li>이들에게는 원래의 HTTP 요청을 <strong>수정할 수 있는 기회</strong>가 있다.</li><li>TRACE는 클라이언트에게 <strong>자신의 요청이 서버에 도달했을 때 어떻게 보이게 되는지</strong> 알려준다.</li></ul><h4 id="TRACE-요청은-목적지-서버에서-루프백-loopback-진단을-시작한다"><a href="#TRACE-요청은-목적지-서버에서-루프백-loopback-진단을-시작한다" class="headerlink" title="TRACE 요청은 목적지 서버에서 루프백 loopback 진단을 시작한다."></a>TRACE 요청은 목적지 서버에서 루프백 loopback 진단을 시작한다.</h4><ul><li>요청 전송의 마지막 단계에 있는 서버는<br>자신이 받은 요청 메세지를 본문에 넣어서<br>TRACE 응답을 돌려준다.</li><li>클라이언트는 자신과 목적지 서버 사이에 있는 모든 HTTP 어플리케이션의 요청/응답 연쇄를 따라가면서<br><strong>자신이 보낸 메세지가 망가졌거나 수정되었는지, 만약 그렇다면 어떻게 변경되었는지 확인</strong>할 수 있다.</li></ul><h4 id="TRACE는-주로-진단을-위해-사용된다-디버깅용"><a href="#TRACE는-주로-진단을-위해-사용된다-디버깅용" class="headerlink" title="TRACE는 주로 진단을 위해 사용된다. (디버깅용)"></a>TRACE는 주로 진단을 위해 사용된다. (디버깅용)</h4><ul><li><p>요청이 의도한 요청/응답 연쇄를 거쳐가는지 <strong>검사</strong>할 수 있다.</p></li><li><p>중간 어플리케이션이 여러 다른 종류의 요청들을 일관되게 다룬다고 가정하는 문제가 있다.</p><ul><li>프락시는<br>POST 요청을 바로 서버로 통과시키는 반면,<br>GET 요청은 웹 캐시와 같은 다른 HTTP 어플리케이션으로 전송한다.</li><li>TRACE는 메서드를 구별하는 메커니즘을 제공하지 않는다.<ul><li>TRACE 요청을 어떻게 처리할 것인지에 대해서는 일반적으로 중간 어플리케이션이 결정을 내린다.</li><li>TRACE 요청은 어떠한 엔터티 본문도 보낼 수 없다.<br>TRACE 응답의 엔터티 본문에는 서버가 받은 요청이 그대로 들어있다.</li></ul></li></ul></li></ul><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">요청메세지에 바디 존재</td><td align="left">X</td></tr><tr><td align="left">성공 응답메세지에 바디 존재</td><td align="left">X</td></tr><tr><td align="left">안전성 </td><td align="left">X</td></tr><tr><td align="left">멱등성                 </td><td align="left">O</td></tr><tr><td align="left">캐시 가능?              </td><td align="left">X</td></tr><tr><td align="left">HTML form에서 사용 가능?</td><td align="left">X</td></tr></tbody></table><p>클라 요청</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TRACE /product-list.txt HTTP/1.1</span><br><span class="line">Accept: *</span><br><span class="line">Host: feel5ny.github.io</span><br></pre></td></tr></table></figure><p>프록시 요청</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TRACE /product-list.txt HTTP/1.1</span><br><span class="line">Accept: *</span><br><span class="line">Host: feel5ny.github.io</span><br><span class="line">Via: 1.1 proxy3.company.com 👈</span><br></pre></td></tr></table></figure><p>서버 응답</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Content-Length: 96</span><br><span class="line"></span><br><span class="line">TRACE /product-list.txt HTTP/1.1</span><br><span class="line">Accept: *</span><br><span class="line">Host: feel5ny.github.io</span><br><span class="line">Via: 1.1 proxy3.company.com 👈</span><br></pre></td></tr></table></figure><p>프록시 응답</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Content-Length: 96</span><br><span class="line">Via: 1.1 proxy3.company.com 👈</span><br><span class="line"></span><br><span class="line">TRACE /product-list.txt HTTP/1.1</span><br><span class="line">Accept: *</span><br><span class="line">Host: feel5ny.github.io</span><br><span class="line">Via: 1.1 proxy3.company.com 👈</span><br></pre></td></tr></table></figure><hr><a name="6"><h2 id="6-OPTIONS"><a href="#6-OPTIONS" class="headerlink" title="6. OPTIONS"></a>6. OPTIONS</h2><ul><li>options 메서드는 웹 서버에게 여러 가지 종류의 <strong>지원 범위에 대해 물어본다</strong>. </li><li>서버에게 특정 리소스에 대해 어떤 메서드가 지원되는지 물어볼 수 있다.</li><li>응답메세지 헤더에 <code>Allow</code> 필드를 포함해서 돌려준다.</li><li>preflight 요청용으로 OPTIONS 메서드를 사용한다.</li></ul><h4 id="cf-2-Preflight"><a href="#cf-2-Preflight" class="headerlink" title="cf__2  Preflight"></a>cf__2  Preflight</h4><ul><li><strong>Preflight Request</strong>는 actual 요청 전에 인증 헤더를 전송하여 서버의 허용 여부를 미리 체크하는 테스트 요청이다.</li><li>CORS Preflight Request는 CORS 프로토콜이 이해하는지 확인하는 요청이다.</li><li>메서드는 OPTIONS를 사용하며, 헤더를 함게 보낸다.<ul><li><code>Access-Control-Request-Method</code></li><li><code>Access-Control-Request-Headers</code></li><li><code>Origin</code></li></ul></li><li>Preflight Request 필요시 브라우저에서 자동으로 전송되므로, 일반적인 경우 프론트 개발자는 이러한 요청을 직접 만들 필요가 없다.<br><a href="https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request" target="_blank" rel="noopener">참고</a></li></ul><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">요청메세지에 바디 존재</td><td align="left">X</td></tr><tr><td align="left">성공 응답메세지에 바디 존재</td><td align="left">O</td></tr><tr><td align="left">안전성 </td><td align="left">O</td></tr><tr><td align="left">멱등성                 </td><td align="left">O</td></tr><tr><td align="left">캐시 가능?              </td><td align="left">X</td></tr><tr><td align="left">HTML form에서 사용 가능?</td><td align="left">X</td></tr></tbody></table><p>요청</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OPTIONS * HTTP/1.1</span><br><span class="line">Host: feel5ny.github.io</span><br><span class="line">Accept: *</span><br></pre></td></tr></table></figure><p>응답</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Allow: GET, POST, PUT, OPTIONS</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><hr><a name="7"><h2 id="7-DELETE"><a href="#7-DELETE" class="headerlink" title="7. DELETE"></a>7. DELETE</h2><ul><li>서버에게 요청 URL로 지정한 리소스를 삭제할 것을 요청한다. </li><li>클라이언트는 삭제가 수행되는 것을 보장하지 못한다.<ul><li>HTTP 명세는 서버가 클라이언트에게 알리지 않고 요청을 무시하는 것을 허용하기 때문이다.</li></ul></li></ul><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">요청메세지에 바디 존재</td><td align="left">▲</td></tr><tr><td align="left">성공 응답메세지에 바디 존재</td><td align="left">▲</td></tr><tr><td align="left">안전성 </td><td align="left">X</td></tr><tr><td align="left">멱등성                 </td><td align="left">O</td></tr><tr><td align="left">캐시 가능?              </td><td align="left">X</td></tr><tr><td align="left">HTML form에서 사용 가능?</td><td align="left">X</td></tr></tbody></table><p>요청</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DELETE /joy.txt HTTP/1.1</span><br><span class="line">Host: feel5ny.github.io</span><br></pre></td></tr></table></figure><p>응답</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 201 Created</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 47</span><br><span class="line"></span><br><span class="line">I have your delete request, will take time to process.</span><br></pre></td></tr></table></figure><ul><li>200 OK</li><li>202 Accepted</li><li>204 No content</li></ul><hr><a name="8"><h2 id="8-PATCH"><a href="#8-PATCH" class="headerlink" title="8. PATCH"></a>8. PATCH</h2><ul><li>리소스의 부분 수정 시 사용된다.</li><li><code>PUT</code>과 달리 비멱등성을 가진다.</li><li><code>PATCH</code>의 사용 여부는 <code>Accept-Patch</code>로도 가능하다.</li></ul><h4 id="PUT과의-차이점"><a href="#PUT과의-차이점" class="headerlink" title="PUT과의 차이점"></a>PUT과의 차이점</h4><ul><li><code>PUT</code>은 문서 자체의 교체만을 허용한다.</li><li><code>PUT</code>으로  수정할 JSON 일부분을 보낼 때, 보낸 필드 이외의 필드는 <code>null</code> 혹은 초기화 처리가 된다.</li><li><code>PATCH</code>로 수정할 JSON 일부분을 보낼 때, 해당 필드만 수정된다.</li></ul><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">요청메세지에 바디 존재</td><td align="left">O</td></tr><tr><td align="left">성공 응답메세지에 바디 존재</td><td align="left">O</td></tr><tr><td align="left">안전성 </td><td align="left">X</td></tr><tr><td align="left">멱등성                 </td><td align="left">X</td></tr><tr><td align="left">캐시 가능?              </td><td align="left">X</td></tr><tr><td align="left">HTML form에서 사용 가능?</td><td align="left">X</td></tr></tbody></table><p>요청전 데이터</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"joy"</span>,</span><br><span class="line">  <span class="attr">"company"</span>: <span class="string">"goodoc"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PATCH</code> 요청</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PATCH /api/user/123 HTTP/1.1 </span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;company&quot;: &quot;protopie&quot;&#125;</span><br></pre></td></tr></table></figure><p><code>PATCH</code> 결과</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"joy"</span>,</span><br><span class="line">  <span class="attr">"company"</span>: <span class="string">"protopie"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PUT</code> 요청</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /api/user/123 HTTP/1.1 </span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;&quot;company&quot;: &quot;JOYI&quot;&#125;</span><br></pre></td></tr></table></figure><p><code>PUT</code> 결과</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"company"</span>: <span class="string">"JOYI"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a name="9"><h2 id="9-CONNECT"><a href="#9-CONNECT" class="headerlink" title="9. CONNECT"></a>9. CONNECT</h2><blockquote><p>잘 모르겠다.</p></blockquote><ul><li>HTTP <code>CONNECT</code> 메소드는 요청된 리소스와 양방향 통신을 시작한다. </li><li>터널을 여는 데 사용할 수 있다.</li><li>예를 들어<ul><li><code>CONNECT</code> 메소드를 사용하여 SSL(HTTPS)을 사용하는 웹 사이트에 액세스 할 수 있다. </li><li>클라이언트는 HTTP 프록시 서버에 TCP 연결을 원하는 대상으로 터널링하도록 요청한다.</li><li>그런 다음 서버는 클라이언트 대신 연결을 진행한다.</li><li>서버가 연결을 설정하면 프록시 서버는 클라이언트와의 TCP 스트림을 계속 프록시한다.</li></ul></li></ul><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">요청메세지에 바디 존재</td><td align="left">X</td></tr><tr><td align="left">성공 응답메세지에 바디 존재</td><td align="left">O</td></tr><tr><td align="left">안전성 </td><td align="left">X</td></tr><tr><td align="left">멱등성                 </td><td align="left">X</td></tr><tr><td align="left">캐시 가능?              </td><td align="left">X</td></tr><tr><td align="left">HTML form에서 사용 가능?</td><td align="left">X</td></tr></tbody></table><p>요청</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONNECT server.example.com:80 HTTP/1.1 </span><br><span class="line">Host: server.example.com:80 </span><br><span class="line">Proxy-Authorization: basic aGVsbG86d29ybGQ=</span><br></pre></td></tr></table></figure><a name="10"><h2 id="10-확장-메서드"><a href="#10-확장-메서드" class="headerlink" title="10. 확장 메서드"></a>10. 확장 메서드</h2><ul><li>HTTP 명세에 정의되지 않은 메서드다.</li><li>HTTP는 필요에 따라 확장해도 문제가 없도록 설계되어 있으므로, 새로 기능을 추가해도 과거에 구현된 소프트웨어들의 오동작을 유발하지 않는다.</li><li>아래는 웹 배포 확장메서드의 예시<ul><li><code>LOCK</code> - 사용자가 리소스를 잠글 수 있게 해준다.</li><li><code>MKCOL</code> - 사용자가 문서를 생성할 수 있게 해준다.</li><li><code>COPY</code> - 서버에 있는 리소스를 복사한다.</li><li><code>MOVE</code> - 서버에 있는 리소스를 옮긴다.</li></ul></li></ul><p>확장메서드를 다룰 때는 ‘엄격하게 보내고 관대하게 받아들여라’라는 오랜 규칙에 다르는 것이 가장 좋다.</p><hr><ul><li><a href="https://github.com/bookcrush?type=source" target="_blank" rel="noopener">책뽀개기 모임</a> 중 <strong>http 완벽가이드</strong> 1장 뽀개기 진행중입니다. (~8월말) (다음 모임은 2장)</li><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 <strong>저만의 순서</strong>로 정리 한 글입니다.</li></ul><hr><p>참고자료</p><ol><li><a href="https://uniksy1106.tistory.com/160" target="_blank" rel="noopener">http 멱등성참고 1</a></li><li><a href="https://greatkim91.tistory.com/14" target="_blank" rel="noopener">http 멱등성참고 2</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods" target="_blank" rel="noopener">http method 참고</a></li><li><a href="http://wiki.gurubee.net/display/SWDEV/CORS+%28Cross-Origin+Resource+Sharing%29" target="_blank" rel="noopener">preflight 참고 1</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Glossary/Preflight_request" target="_blank" rel="noopener">preflight 참고 2</a></li><li><a href="github.com/for-GET/http-decision-diagram">http 응답 다이어그램</a> <ul><li>도움이 많이 된 시각화 자료</li></ul></li><li><a href="https://stackoverflow.com/questions/28459418/rest-api-put-vs-patch-with-real-life-examples" target="_blank" rel="noopener">PUT과 PATCH의 차이 1</a></li><li><a href="https://papababo.tistory.com/269" target="_blank" rel="noopener">PUT과 PATCH의 차이 2</a></li><li><a href="https://tools.ietf.org/html/rfc7231#section-4" target="_blank" rel="noopener">rfc7231</a></li></ol></a></a></a></a></a></a></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;HTTP 메세지 중 요청 줄에 존재하는 메서드에 대해서 알아본다. 요청 메서드에 따라서 서버에서 처리되는 과정, 반환되는 메세지의 형태가 달라진다. HTTP/1.1에서 정의한 메서드에는 총 9가지가 존재하며, 서비스에 따라 커스텀한 확장 메서드를
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="message" scheme="http://feel5ny.github.io/tags/message/"/>
    
      <category term="method" scheme="http://feel5ny.github.io/tags/method/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 메세지 - 개요</title>
    <link href="http://feel5ny.github.io/2019/08/15/HTTP_003_01/"/>
    <id>http://feel5ny.github.io/2019/08/15/HTTP_003_01/</id>
    <published>2019-08-15T12:23:55.000Z</published>
    <updated>2019-09-08T01:09:49.216Z</updated>
    
    <content type="html"><![CDATA[<p><strong>HTTP 메서지</strong>에 대해서 알아본다. 메세지는 세 덩어리로 나눌 수 있다 <strong>시작줄, 헤더, 본문.</strong> 시작줄은 요청과 응답에 따라 다르다. 요청의 시작줄에는 서버에 요구할 동작을 명시하는 <strong>메서드</strong>, 리소스의 위치를 알려줄 <strong>URL</strong>, <strong>프로토콜 버전</strong>을 명시한다. 응답의 시작줄에는 버전과 처리 결과에 대한 <strong>상태코드</strong>, <strong>사유구절</strong>이 명시되어있다. 다음 줄에는 <strong>헤더</strong>가 존재한다. 헤더는 <strong>일반헤더, 요청헤더, 응답헤더, 확장헤더, entity헤더</strong>로 구분할 수 있다. RFC 7231에서는 요청 헤더와 응답 헤더로 나눠서 설명한다. 헤더와 본문 사이에는 꼭 <strong>한 줄</strong>을 비워두어야한다.(CRLF) <strong>본문은 옵셔널</strong>하다. 있을 때도 있고 없을 때도 있다. 메세지의 흐름을 설명하는 용어가 존재하는데, 상대적으로 표현된다. 서버를 기준으로 외부 클라에서 서버로(안으로) 흐르는 메세지를 <strong>인바운드</strong>, 서버에서 클라로(밖으로) 나가는 메세지를 <strong>아웃바운드</strong>라고 하며, 발신자를 기준으로 발신자에서 수신자의 방향을 <strong>다운스트림</strong>, 그 반대를 <strong>업스트림</strong>이라고 한다.</p><hr><a name="stream"><h1 id="1-메세지의-흐름"><a href="#1-메세지의-흐름" class="headerlink" title="1. 메세지의 흐름"></a>1. 메세지의 흐름</h1><p>HTTP 메세지는 HTTP 메세지 간에 주고받은 데이터의 블록들이다</p><ul><li>데이터의 블록<ul><li>텍스트 메타 정보: 메세지의 내용과 의미를 설명</li><li>클라이언트 서버, 프락시 사이를 흐름</li><li>메세지의 방향을 의미하는 용어<br>인바운드 / 아웃바인드 / 업스트림 / 다운스트림</li></ul></li></ul><h2 id="1-1-인바운드-아웃바운드"><a href="#1-1-인바운드-아웃바운드" class="headerlink" title="1.1 인바운드 - 아웃바운드"></a>1.1 인바운드 - 아웃바운드</h2><img src="/images/2019/20/01.jpg"><ul><li>HTTP는 <strong>인바운드</strong>와 <strong>아웃바인드</strong>라는 용어를 <strong>트랜잭션 방향</strong>을 표현하기 위해 사용한다.</li><li>흐름 표현은 상대적인 표현방식으로, 인바운드와 아웃바인드는 <strong>서버를 기준</strong>으로<br>클라에서 ⇒ 서버로의 안 쪽 흐름을 <strong>인바운드</strong><br>서버에서 ⇒ 클라 방향으로의 흐름을 <strong>아웃바운드</strong> 라고 한다.</li><li><code>인바운드로 이동</code> / <code>아웃바운드로 이동</code></li></ul><h2 id="1-2-업스트림-다운스트림"><a href="#1-2-업스트림-다운스트림" class="headerlink" title="1.2 업스트림 - 다운스트림"></a>1.2 업스트림 - 다운스트림</h2><img src="/images/2019/20/02.jpg"><ul><li>요청/응답 이라는 성격과 상관없이<br>발신자와 수신자의 개념에서 <strong>발신자를 기준</strong>으로<br>발신자에서 ⇒ 수신자 방향을 <strong>다운스트림</strong><br>수신자에서 ⇒ 발신자 방향을 <strong>업스트림</strong> 이라고 한다.</li></ul><hr><a name="syntax"><h1 id="2-메세지의-문법"><a href="#2-메세지의-문법" class="headerlink" title="2. 메세지의 문법"></a>2. 메세지의 문법</h1><ul><li>HTTP메세지는 요청이나 응답으로 분류된다.</li><li>요청 메세지는 웹서버에 <strong>어떤 동작</strong>을 요구한다. - 메서드</li><li>응답 메세지는 요청의 결과를 클라이언트에게 돌려준다.</li></ul><ol><li><p>요청<br>버전은 프로토콜 버전</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;메서드&gt; &lt;요청 URL&gt; &lt;버전&gt;</span><br><span class="line">&lt;헤더&gt;</span><br><span class="line"></span><br><span class="line">&lt;엔터티 본문&gt;</span><br></pre></td></tr></table></figure></li><li><p>응답</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;버전&gt; &lt;상태 코드&gt; &lt;사유 구절&gt;</span><br><span class="line">&lt;헤더&gt;</span><br><span class="line"></span><br><span class="line">&lt;엔터티 본문&gt;</span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="3-메세지의-각-부분"><a href="#3-메세지의-각-부분" class="headerlink" title="3. 메세지의 각 부분"></a>3. 메세지의 각 부분</h1><img src="/images/2019/20/03.jpg" style="width:100%"><ul><li>HTTP 메세지는 단순한, 데이터의 구조화된 블록이다.</li><li>시작줄 / 헤더블록 / 본문</li></ul><a name="1"><h2 id="3-1-시작줄과-헤더"><a href="#3-1-시작줄과-헤더" class="headerlink" title="3.1 시작줄과 헤더"></a>3.1 시작줄과 헤더</h2><ul><li>줄 단위로 분리된 아스키 문자열</li><li>각 줄은 <strong>캐리지 리턴(13)</strong>과 <strong>개행문자(10)</strong>로 구성된 두 글자의 줄바꿈 문자열로 끝난다.<ul><li>CRLF라고 쓴다.</li></ul></li><li>HTTP 명세에 따르면<br>줄바꿈 문자열은 CRLF이지만<br>견고한 어플리케이션이라면 그냥 개행 문자도 받아들일 수 있어야 한다는 점을<br>언급할 필요가 있을 듯하다.<ul><li>그니까 모든 어플리케이션이 CRLF를 받아들일 수 있다는 전제가 깔려야한다.</li></ul></li><li>오래되거나 잘못 만들어진 HTTP 어플리케이션들 중에서는 캐리지 리턴과 개행 문자 모두를 항상 전송하지 않는 것들도 있다.</li></ul><blockquote><p>아스키 문자열 ?<br>  미국정보교환표준부호(영어: American Standard Code for Information Interchange), 또는 줄여서 ASCII( /ˈæski/, 아스키)는 영문 알파벳을 사용하는 대표적인 문자 인코딩이다. 아스키는 컴퓨터와 통신 장비를 비롯한 문자를 사용하는 많은 장치에서 사용되며, 대부분의 문자 인코딩이 아스키에 기초를 두고 있다.</p></blockquote><blockquote><p>아스키코드<br>  10 LF ( Line Feed =&gt; 다음 줄로)<br>  13 CR ( Cariage Return =&gt; 제일 처음 칸으로)</p></blockquote><h2 id="3-1-시작줄"><a href="#3-1-시작줄" class="headerlink" title="3.1 시작줄"></a>3.1 시작줄</h2><ul><li>요청 메세지의 시작줄은 <strong>무엇을 해야하는지</strong> 말해준다.</li><li>응답 메세지의 시작줄은 <strong>무슨 일이 일어났는지</strong> 말해준다.</li></ul><a name="1-1"><h3 id="3-1-1-요청줄"><a href="#3-1-1-요청줄" class="headerlink" title="3.1.1 요청줄"></a>3.1.1 요청줄</h3><img src="/images/2019/20/04.jpg" style="width:100%"><p>요청 메세지는 서버에게 리소스에 대해 무언가를 해달라고 부탁한다.<br>요청 메세지는</p><ul><li><strong><code>메서드</code></strong> : 서버에서 어떤 동작이 일어나야 하는지 설명해주는</li><li><strong><code>URL</code></strong> : 동작에 대한 대상을 지칭</li><li><strong><code>HTTP 버전</code></strong> : 클라가 어떤 HTTP버전으로 말하고 있는지<ul><li>HTTP/1.0 이전에는 요청줄에 HTTP버전이 미포함이었다.</li></ul></li></ul><p>모든 필드는 <strong>공백</strong>으로 구분된다.<br><img src="/images/2019/20/08.png" style="width:100%"></p><a name="1-1-1"><h4 id="3-1-1-1-메서드"><a href="#3-1-1-1-메서드" class="headerlink" title="3.1.1.1 메서드"></a>3.1.1.1 메서드</h4><ul><li>요청의 시작줄은 메서드로 시작한다.</li><li>서버에게 무엇을 해야 하는지 말해준다.</li><li>HTTP 명세에서 공통 요청 메서드의 집합을 정의한다.</li></ul><ol><li>GET - 서버에서 어떤 <strong>문서를 가져온다.</strong></li><li>HEAD - 서버에서 어떤 문서에 대한 <strong><code>헤더</code>만 가져온다.</strong></li><li>POST - 서버가 처리해야 할 <strong>데이터를 보낸다.</strong></li><li>PUT - 서버에 요청 메세지의 <strong>본문을 <code>저장</code>한다.</strong></li><li>TRACE - 메세지가 프락시를 거처 서버에 도달하는 <strong>과정을 <code>추적</code>한다.</strong></li><li>OPTIONS - 서버가 어떤 메서드를 수행할 수 있는지 <strong>확인한다.</strong></li><li>DELETE - 서버에서 <strong>문서를 제거한다.</strong></li></ol><ul><li>모든 서버가 위 메서드를 모두 구현한 것은 아니다.</li><li><strong>확장메서드</strong> - 하지만 쉽게 확장할 수 (커스텀) 있도록 HTTP가 설계했기 때문에<br>그들만의 메서드를 추가로 구현했을 수도 있다.</li></ul><a name="1-1-2"><h4 id="3-1-1-2-버전"><a href="#3-1-1-2-버전" class="headerlink" title="3.1.1.2 버전"></a>3.1.1.2 버전</h4><p>버전 번호는 HTTP로 대화하는 어플리케이션들에게<br><strong>대화 상대의 능력과 메세지의 형식에 대한 단서</strong>를 제공하기 위한 것이다.</p><ul><li>요청과 응답의 버전이 다를 경우 혼란을 야기할수 있다.</li><li>HTTP/2.22는 HTTP/2.3 보다 큰 버전이다.<br>22와 3의 비교라고 보면 된다.</li></ul><a name="1-2"><h3 id="3-1-2-응답줄"><a href="#3-1-2-응답줄" class="headerlink" title="3.1.2 응답줄"></a>3.1.2 응답줄</h3><img src="/images/2019/20/05.jpg" style="width:100%"><p>응답 메세지는 수행 결과에 대한</p><ul><li>상태 정보와</li><li>결과 데이터를 클라이언트에게 돌려준다.</li></ul><p>응답 메세지의 시작줄, 즉 응답줄은</p><ul><li><strong><code>HTTP버전</code></strong></li><li>숫자로된 <strong><code>상태코드</code></strong></li><li>텍스트로 된 <strong><code>사유구절</code></strong><ul><li>HTTP/1.0 이전에는 응답에 응답줄이 들어있을 필요가 없었다.</li></ul></li></ul><p>모든 필드는 <strong>공백</strong>으로 구분된다.<br><img src="/images/2019/20/09.png" style="width:100%"></p><a name="1-2-1"><h4 id="3-1-2-1-상태코드"><a href="#3-1-2-1-상태코드" class="headerlink" title="3.1.2.1 상태코드"></a>3.1.2.1 상태코드</h4><ul><li>클라이언트에게 무엇이 일어났는지 말해준다.</li><li>응답의 시작줄에 위치한다.</li><li><strong>숫자로 된 코드</strong>와 문자열(사유구절)로 되어 있어서 사람이 이해하기 쉬운 메세지 두 형태 모두로 반환된다.</li><li>사유구절이 사람에게 쉽게 읽히고, 숫자로 된 코드는 프로그램이 에러를 처리하기 쉽다.</li><li>프로토콜이 진화하면서, 더 많은 상태 코드가 HTTP 명세에 공식적으로 정의될 것이다. </li><li>만약 인식할 수 없는 상태 코드라면 <strong>확장코드</strong>이다.</li></ul><a name="1-2-2"><h4 id="3-1-2-2-사유구절"><a href="#3-1-2-2-사유구절" class="headerlink" title="3.1.2.2 사유구절"></a>3.1.2.2 사유구절</h4><ul><li>응답 시작줄의 마지막 구성요소.</li><li>사유구절은 상태 코드와 1:1로 대응된다.</li><li>상태코드의 사람이 이해하기 쉬운 버전이다.</li><li>엄격한 규칙은 제공하지 않는다.</li></ul><a name="2"><h2 id="3-2-헤더"><a href="#3-2-헤더" class="headerlink" title="3.2 헤더"></a>3.2 헤더</h2><img src="/images/2019/20/06.jpg" style="width:100%"><ul><li>0개에서 1개 혹은 여러 개의 HTTP헤더가 온다.</li><li>긴 헤더 줄은 여러 줄로 쪼개서 더 읽기 좋게 만들 수도 있다.<br>스페이스 혹은 탭 문자가 와야 한다.</li></ul><h3 id="3-2-1-헤더-분류"><a href="#3-2-1-헤더-분류" class="headerlink" title="3.2.1 헤더 분류"></a>3.2.1 헤더 분류</h3><ul><li>헤더필드를 정의하다.</li><li>자유롭게 자신만의 헤더를 만들어낼 수 있다.</li><li>아래 분류 기준은 헤더를 이해하기 쉽게 카테고리화 한 것이며,<br><a href="https://tools.ietf.org/html/rfc7231#section-5" target="_blank" rel="noopener">RFC7231 기준</a>으로는 <code>Controls</code>, <code>Conditionals</code>, <code>Content Negotiation</code>, <code>Authentication Credentials</code>, <code>Request Context</code> 로만 분류되어있다.<ul><li><code>Controls</code>: 요청의 특정 처리를 지시하는 헤더들</li><li><code>Conditionals</code>: 조건부 헤더</li><li><code>Content Negotiation</code>: 협상 헤더</li><li><code>Authentication Credentials</code>: 권한 헤더</li><li><code>Request Context</code>: 요청 정보 헤더</li></ul></li></ul><h4 id="3-2-1-2-일반-헤더"><a href="#3-2-1-2-일반-헤더" class="headerlink" title="3.2.1.2 일반 헤더"></a>3.2.1.2 일반 헤더</h4><ul><li>요청과 응답 양쪽에 모두 나타날 수 있음</li><li>예) Date, Connection, Cache-control …</li></ul><h4 id="3-2-1-3-요청-헤더"><a href="#3-2-1-3-요청-헤더" class="headerlink" title="3.2.1.3 요청 헤더"></a>3.2.1.3 요청 헤더</h4><ul><li>요청에 대한 부가정보를 제공</li><li>예) Host, User-Agent, From, Cookie, Referer, If-Modified-Since, Authorization, Origin, Accept</li></ul><h4 id="3-2-1-4-응답-헤더"><a href="#3-2-1-4-응답-헤더" class="headerlink" title="3.2.1.4 응답 헤더"></a>3.2.1.4 응답 헤더</h4><ul><li>응답에 대한 부가정보를 제공</li><li>예) Server, Accept-Range, Set-Cookie, Expires, Age, ETag, Proxy-authenticate, Allow, Access-Control-Allow-Origin</li></ul><h4 id="3-2-1-5-Entity-헤더"><a href="#3-2-1-5-Entity-헤더" class="headerlink" title="3.2.1.5 Entity 헤더"></a>3.2.1.5 Entity 헤더</h4><ul><li>본문 크기와 콘텐츠, 혹은 리소스 그 자체를 서술</li><li>예) Content-Type, Content-language, Content-Encoding, Content-Length, Content-Location, Content-Disposition, Content-Security-Policy, Location, Last-Modified, Transfer-Encoding</li></ul><h4 id="3-2-1-6-확장-헤더"><a href="#3-2-1-6-확장-헤더" class="headerlink" title="3.2.1.6 확장 헤더"></a>3.2.1.6 확장 헤더</h4><ul><li>명세에 정의되지 않은 새로운 헤더</li></ul><img src="/images/2019/20/11.png" style="width:100%"><h3 id="3-2-본문"><a href="#3-2-본문" class="headerlink" title="3.2 본문"></a>3.2 본문</h3><ul><li>단순히 선택적인 데이터 덩어리이다. 옵셔너얼 ~</li><li>시작줄과 헤더와 달리 텍스트나 이진 데이터를 포함할 수도 있고 그냥 비어있을 수도 있다<ul><li>이진데이터: binary 데이터</li><li>이미지 파일</li></ul></li></ul><hr><a name="3"><h2 id="3-엔터티-본문"><a href="#3-엔터티-본문" class="headerlink" title="3. 엔터티 본문"></a>3. 엔터티 본문</h2><img src="/images/2019/20/07.jpg" style="width:100%"><ul><li>optional인 엔터티 본문</li><li>메세지의 화물이라고 할 수 있다.</li><li>이미지,<br>비디오,<br>HTML문서,<br>소프트웨어 어플리케이션,<br>신용카드 트랜젝션,<br>전자우편 등<br>여러 종류의 디지털 데이터를 실어 나를 수 있다.</li></ul><hr><ul><li><a href="https://github.com/bookcrush?type=source" target="_blank" rel="noopener">책뽀개기 모임</a> 중 <strong>http 완벽가이드</strong> 1장 뽀개기 진행 중입니다. (~8월말) (다음 모임은 2장)<br>(모임 참여를 원하신다면 댓글로 문의 바랍니다.)</li><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 <strong>저만의 순서</strong>로 정리 한 글입니다.</li></ul></a></a></a></a></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;HTTP 메서지&lt;/strong&gt;에 대해서 알아본다. 메세지는 세 덩어리로 나눌 수 있다 &lt;strong&gt;시작줄, 헤더, 본문.&lt;/strong&gt; 시작줄은 요청과 응답에 따라 다르다. 요청의 시작줄에는 서버에 요구할 동작을 명시하는 &lt;s
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="message" scheme="http://feel5ny.github.io/tags/message/"/>
    
  </entry>
  
  <entry>
    <title>URL과 리소스</title>
    <link href="http://feel5ny.github.io/2019/08/09/HTTP_002/"/>
    <id>http://feel5ny.github.io/2019/08/09/HTTP_002/</id>
    <published>2019-08-09T12:23:55.000Z</published>
    <updated>2019-09-03T07:26:44.349Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/bookcrush?type=source" target="_blank" rel="noopener">책뽀개기 모임</a> 중 <strong>http 완벽가이드</strong> 1장 뽀개기 진행중입니다. (~8월말) (다음 모임은 2장)<br>(모임 참여를 원하신다면 댓글로 문의 바랍니다.)</li><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 <strong>저만의 순서</strong>로 정리 한 글입니다.</li></ul><hr><a name="url"><h1 id="URL의-개념"><a href="#URL의-개념" class="headerlink" title="URL의 개념"></a>URL의 개념</h1><p>URL(Uniform Resource Locator)은 <strong>인터넷 리소스를 가리키는 표준이름</strong>이다.</p><p>URL은 전자정보 일부를 가리키고, 그것이<br>어디에 있고<br>어떻게 접근할 수 있는지 알려준다.</p><!-- - 기존 이름은 유지하면서 객체들을 다른 장소로 옮기는 것을 가능하게 해주는 URN을 포함한 URL의 미래. --><ul><li>URL은 브라우저가 정보를 찾는데 필요한 <strong>리소스의 위치</strong>를 가리키며, </li><li>URL을 이용해 사람과 어플리케이션이 인터넷 상의 수십억 개의 리소스를 찾고 사용하며 공유할 수 있다.</li><li>URL을 통해 사람이 HTTP 및 다른 프로토콜을 통해 접근할 수 있다. </li></ul><p>URL을 사용하면 리소스를 일관된 방식으로 지칭할 수 있다.<br>대부분의 URL은 동일하게 <code>스킴://서버위치/경로</code> 구조로 이루어져있다.</p><ul><li>인터넷상의 <strong>모든 리소스</strong>를 가리키고 가져오기 위해,<br>모든 사람이 <strong>같은 방식</strong>으로 이름을 써서 리소스를 찾을 수 있도록,<br>단일 방식의 작명 규칙을 가진 것이다.<br>=== 통합 자원 위치값</li></ul><h2 id="URL은-URI의-일부"><a href="#URL은-URI의-일부" class="headerlink" title="URL은 URI의 일부"></a>URL은 URI의 일부</h2><p>URL은 <strong>통합 자원식별자 혹은 URI</strong>라고 불리는 더 일반화된 부류의 부분집합이다.<br>URI는 URL과 URN으로 구성된 종합적인 개념이다.</p><ul><li>URL은 리소스가 <strong>어디 있는지</strong> 설명해서 리소스를 식별한다.</li><li>URN은 현재 그 리소스가 어디에 존재하든 상관없이 그 <strong>이름</strong>만으로 리소스를 식별한다.</li></ul><hr><h1 id="안전한-통합-자원-위치-URL-값을-위해서"><a href="#안전한-통합-자원-위치-URL-값을-위해서" class="headerlink" title="안전한 통합 자원 위치(URL)값을 위해서"></a>안전한 통합 자원 위치(URL)값을 위해서</h1><a name="1"><h2 id="1-URL의-구성"><a href="#1-URL의-구성" class="headerlink" title="1. URL의 구성"></a>1. URL의 구성</h2><ul><li>모든 리소스들은 <strong>다른 스킴</strong>을 통해 접근할 수 있으며, URL 문법은 <strong>스킴</strong>에 따라서 달라진다.</li><li>대부분의 URL은 일반 URL문법을 따른다.</li><li>의미있는 URL이라는 개념도 있다. (<a href="https://en.wikipedia.org/wiki/Clean_URL" target="_blank" rel="noopener">Clean URLs</a>)<ul><li>당신이 URL을 조작하기 쉽게 한다.</li><li>어디에 있고, 무엇을 하고, 무엇을 읽거나 웹에서 상호작용하는 지에 대해 유저들에게 분명히 알려준다.</li><li>몇몇의 검색엔진은 관련 페이지들을 잘 분류하기 위해 이런 의미론을 사용할 수 있다.</li></ul></li><li>URL은 9개의 컴포넌트로 구성되어있다. </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;스킴&gt;://&lt;사용자이름&gt;:&lt;비밀번호&gt;@&lt;호스트&gt;:&lt;포트&gt;/&lt;경로&gt;;&lt;파라미터&gt;?&lt;질의&gt;#&lt;플래그먼트&gt;</span><br></pre></td></tr></table></figure><img src="/images/2019/19/03.jpg" style="width:100%">-<img src="/images/2019/19/01.jpg" style="width:100%"><a name="1-1"><h3 id="1-1-스킴"><a href="#1-1-스킴" class="headerlink" title="1.1 스킴"></a>1.1 스킴</h3><img src="/images/2019/19/01_scheme.jpg" style="width:100%"><ul><li>스킴은 주어진 리소스에 <strong>어떻게 접근하는지</strong> 알려주는 중요한 정보다.</li><li>URL을 해석하는 어플리케이션이<br><strong>어떤 프로토콜을 사용하여 리소스를 요청해야 하는지</strong> 알려준다.</li><li>첫번째 구분자로 <code>:</code>를 사용한다.</li><li>스킴명은 대소문자를 가리지 않는다.<a name="1-2"></a></li></ul><h3 id="1-2-사용자-정보"><a href="#1-2-사용자-정보" class="headerlink" title="1.2 사용자 정보"></a>1.2 사용자 정보</h3><p>기본값</p><ul><li>사용자 이름 : anonymous</li><li>비밀번호 : <code>IEUser</code>(익스플로러), <code>chrome@example.com</code>(크롬)</li></ul><img src="/images/2019/19/01_userInfo.jpeg" style="width:100%"><ul><li>많은 서버가 자신이 가지고 있는 <strong>데이터에 접근을 허용하기 전에</strong><br>사용자 이름과 비밀번호를 요구한다.</li><li>FTP서버가 주로 그러하다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp://anonymous:my_passwd@ftp.prep.ai.mit.edu/pub/gnu</span><br></pre></td></tr></table></figure></li></ul><a name="1-3"><h3 id="1-3-호스트"><a href="#1-3-호스트" class="headerlink" title="1.3 호스트"></a>1.3 호스트</h3><img src="/images/2019/19/01_host.jpg" style="width:100%"><ul><li>어플리케이션이 인터넷에 있는 리소스를 찾으려면<br>리소스를 호스팅하고 있는 장비와<br>장비 내에서 리소스에 접근할 수 있는 서버가 어디에 있는지 알아야 한다.</li></ul><p>Host</p><ul><li>접근하려고 하는 리소스를 가지고 있는 인터넷상의 호스트장비(?)를 가리킨다.</li><li>호스트명이나 IP주소로 제공한다.</li></ul><p>Port</p><ul><li>서버가 열어놓은 네트워크 포트를 가리킨다.</li><li>TCP 프로토콜을 사용하는 HTTP는 기본 포트가 80이다. (https는 443)<a name="1-4"></a></li></ul><h3 id="1-4-경로"><a href="#1-4-경로" class="headerlink" title="1.4 경로"></a>1.4 경로</h3><img src="/images/2019/19/01_path.jpg" style="width:100%"><ul><li>리소스가 서버의 어디에 있는지 알려준다.</li><li>계층적 파일 시스템 경로와 유사한 구조이다.<ul><li>유닉스 파일 시스템의 파일 경로와 유사하다.</li></ul></li><li><code>/</code>를 기준으로 경로조각으로 나누니다.</li><li>각 경로조각은 자체만으로 파라미터 컴포넌트를 가질 수 있다.<a name="1-5"></a></li></ul><h3 id="1-5-파라미터-Matrix-parameter"><a href="#1-5-파라미터-Matrix-parameter" class="headerlink" title="1.5 파라미터 Matrix parameter"></a>1.5 파라미터 Matrix parameter</h3><img src="/images/2019/19/01_parameter.jpg" style="width:100%"><ul><li>많은 스킴이 객체에 대한 호스트 및 경로 정보만으로는 리소스를 찾지 못한다.</li><li>URL이 사용하는 어플리케이션이 리소스에 접근하려면 프로토콜 파라미터가 필요하다.</li><li>URL의 파라미터 컴포넌트는<br>어플리케이션이 서버에 정확한 요청을 하기 위해 필요한 입력 파라미터를 받는데 사용한다.</li><li>이 컴포넌트는 이름/값 쌍의 리스트로 URL 나머지 부분들로부터 <code>;</code> 문자로 구분하여 URL에 기술한다.</li></ul><h4 id="쿼리스트링과-차이점"><a href="#쿼리스트링과-차이점" class="headerlink" title="쿼리스트링과 차이점"></a>쿼리스트링과 차이점</h4><p>개인적으로 지금까지 이런 형식의 URL을 본적이 없어서, 검색해보니<br>이런 형식을 <strong>Matrix parameter</strong>라고 불리며, 쿼리스트링과의 차이점은 아래와 같다고 나왔다.<br>( 관련링크 <a 16 2009 href http: web.archive.org web 20130126100355 brettdargan.com blog 01 query-vs-matrix-params"">Query vs. Matrix Params</a> )</p><ul><li>urls with query params won’t have their response cached by intermediaries/proxies (at present)<br><strong>쿼리 파라미터가있는 URL은 현재 중개자/프록시에 의한 응답이 캐시되지 않습니다.</strong></li><li>matrix parameters may appear anywhere in path<br><strong>매트릭스 파라미터는는 path의 어느 곳이든 표현될 수 있다.</strong></li><li>calculating the relative uri is different<br><strong>상대 URI를 계산하는 것이 다르다.</strong></li><li>query params are generally abused to add new verbs instead of using existing methods on resources<br><strong>쿼리 파라미터는 일반적으로 리소스에 기존 방법을 사용하는 대신 새 동사를 추가하는데에 남용된다.</strong></li><li>matrix parameters are not resources, they are aspects that help reference a resource in an information space that is difficult to represent within a hierarchy<br><strong>매트릭스 파라미터는 자원이 아니며, 정보 공간에서 계층 구조 내에서 표현하기 어려운 자원을 참조하는 데 도움이되는 측면입니다.</strong></li></ul><p>아직 proposal state에 존재하며, 웹 표준이 아니라고 한다.<br> (관련 링크 <a href https: www.w3.org designissues matrixuris.html"">w3-MatrixURIs</a> )<br><a name="1-6"></a></p><h3 id="1-6-쿼리파라미터-질의-문자열"><a href="#1-6-쿼리파라미터-질의-문자열" class="headerlink" title="1.6 쿼리파라미터 (질의 문자열).."></a>1.6 쿼리파라미터 (질의 문자열)..</h3><img src="/images/2019/19/01_quary_parameter.jpg" style="width:100%"><ul><li>데이터베이스 같은 서비스들은 요청을 받을 리소스 형식의 <strong>범위를 좁히기 위해</strong><br>질문이나 질의를 받을 수 있다.</li><li>URL의 쿼리스트링 컴포넌트는<br><strong>게이트웨이를 가리키는 정보</strong>를 URL의 경로 컴포넌트와 함께 전달하고 있다.<ul><li>보통 게이트웨이는 다른 어플리케이션에 접근하려고 할 때 거치는 통로라고 할 수 있다.</li></ul></li></ul><ul><li>쿼리스트링은 포맷에 제약사항은 없다. (URL에 금지된 문자제외하고)</li><li><strong>편의상 많은 게이트웨이가 <code>&amp;</code>로 나뉜 <code>이름=값</code> 쌍 형식의 쿼리스트링을 원한다</strong></li></ul><a name="1-7"><h3 id="1-7-플래그먼트-fragment"><a href="#1-7-플래그먼트-fragment" class="headerlink" title="1.7 플래그먼트 fragment"></a>1.7 플래그먼트 fragment</h3><img src="/images/2019/19/01_fragment.jpg" style="width:100%"><ul><li>HTML과 같은 리소스 형식들은 본래의 수준보다 더 작게 나뉠 수 있다.</li><li>문단으로 나뉠 수 있는 경우 리소스 안에 있는 특정 문단을 가리킬 수 있다.</li><li>리소스의 특정 부분을 가리킬 수 있도록 리소스 내 조각을 가리킬 수 있는 fragment 컴포넌트를 제공한다.</li><li>보통은 서버에는 fragment를 전달하진 않고, 프론트에서 특정 문단을 보여주고 싶을 때 사용한다.</li></ul><a name="2"><h2 id="2-안전한-URL을-위해-고민한-설계자들"><a href="#2-안전한-URL을-위해-고민한-설계자들" class="headerlink" title="2. 안전한 URL을 위해 고민한 설계자들"></a>2. 안전한 URL을 위해 고민한 설계자들</h2><h3 id="URL-설계자들은-이런-고민을-했다"><a href="#URL-설계자들은-이런-고민을-했다" class="headerlink" title="URL 설계자들은 이런 고민을 했다."></a><strong>URL 설계자들</strong>은 이런 고민을 했다.</h3><ol><li>모든 인터넷 프로토콜로 URL이 <strong>안전하게 전송</strong>될 수 있기를 바랬고<ul><li><strong>안전한 전송</strong>이란,<br>정보가 유실될 위험 없이 URL을 전송할 수 있다는 것을 의미한다.<br>문자가 제거되는 일을 피하고자 URL은 상대적으로 작고 일반적으로 안전한 알파벳 문자만 포함하도록 허락한다.</li></ul></li><li><strong>가독성</strong>도 있기를 바랬다.</li></ol><hr><h3 id="URL-설계자들은-이런-결론을-내렸다"><a href="#URL-설계자들은-이런-결론을-내렸다" class="headerlink" title="URL 설계자들은 이런 결론을 내렸다."></a><strong>URL 설계자들</strong>은 이런 결론을 내렸다.</h3><ol><li><p>특정 문자 사용 금지.</p><ul><li>따라서 출력이 되지 않거나 보이지 않는 문자를<br>이메일 프로그램에서 사용할 수 있다고 해서,<br>그리고 그 문자들이 변환될 수 있다 하더라도,<br><strong>URL에서 그런 문자들을 사용하는 것은 금지</strong>되었다.</li></ul></li><li><p>알파벳 이외의 문자도 포함될 수 있도록 <strong>이스케이프 기능</strong> 추가</p><ul><li>사람들이 알파벳 이외의 문자도 포함하려고 할 때가 있다는 것을 알게 되어<br><strong>이스케이프라는 기능</strong>을 추가하여<br>안전하지 않은 문자를 안전한 문자로 <strong>인코딩</strong>할 수 있게 하였다.<a name="2-1"></a></li></ul></li></ol><h3 id="2-1-URL문자-집합"><a href="#2-1-URL문자-집합" class="headerlink" title="2.1 URL문자 집합"></a>2.1 URL문자 집합</h3><ol><li>역사적으로 많은 컴포터 어플리케이션이 <code>US-ASCII</code> 문자 집합을 사용해 왔다.</li><li>US-ASCII는 문자를 서식화하고 하드웨어상에서 신호를 주고받기 위해, 7비트를 사용하여 영문 자판에 있는 키 대부분과 몇몇 출력되지 않는 제어 문자를 표현한다.</li><li>미국인들에게는 편리하지만, 유럽언어나 수백가지 비 라틴계 언어들에 존재한는 변형된 문자들까지 US-ASCII가 지원하지 않는다.</li><li>URL이 특정 이진데이터를 포함해야하는 경우도 있다.</li></ol><p>이런 경우를 지원하기 위해서 <strong>이스케이프 문자열</strong>을 쓸 수 있게 설계하였다.</p><ul><li>이스케이프 문자열은 URL에서 사용이 금지된 문자들로, 특정 문자나 데이터를 인코딩할 수 있게 함으로써 이동성과 완성도를 높였다.<a name="2-2"></a></li></ul><h3 id="2-2-인코딩-체계"><a href="#2-2-인코딩-체계" class="headerlink" title="2.2 인코딩 체계"></a>2.2 인코딩 체계</h3><p>URL에 있는 안전하지 않은 문자들을 표현할 수 있는 인코딩 방식이 고안되었다.<br>인코딩은 이스케이프 문자로 바꿔준다.</p><ul><li>이스케이프 문자 (<a href https: ko.wikipedia.org wiki %ed%8d%bc%ec%84%bc%ed%8a%b8_%ec%9d%b8%ec%bd%94%eb%94%a9"">퍼센트 문자</a>): <code>%</code>로 시작해 ASCII 코드로 표현되는 두개의 16진수 숫자로 이루어져있다.</li></ul><p>예시</p><ul><li><code>~</code>   →   126 (0x7E)  →   %7E</li><li><code></code>   →   32 (0x20)   →   %20</li><li><code>%</code>   →   37 (0x25)   →   %25<a name="2-3"></a></li></ul><h3 id="2-3-문자-제한"><a href="#2-3-문자-제한" class="headerlink" title="2.3 문자 제한"></a>2.3 문자 제한</h3><ol><li>몇몇 문자는 URL에서 특별한 의미로 예약되어있다.</li><li>어떤 문자는 US-ASCII의 출력 가능한 문자 집합에 포함되어있지 않다.</li><li>몇몇 인터넷 게이트웨이와 프로토콜에서 혼동되는 것으로 알려져 있어 사용을 지양하고 있다.</li></ol><h4 id="URL-예약어"><a href="#URL-예약어" class="headerlink" title="URL 예약어"></a>URL 예약어</h4><ul><li><code>%</code> : 인코딩 이스케이프 토큰</li><li><code>/</code> : 경로 컴포넌트 세그먼트를 나누는 용도</li><li><code>.</code> : 경로 컴포넌트에서 사용</li><li><code>..</code> : 경로 컴포넌트에서 사용</li><li><code>#</code> : fragment 컴포넌트에서 사용</li><li><code>?</code> : 쿼리파라미터 컴포넌트에서 사용</li><li><code>;</code> : 매트릭스 파라미터 컴포넌트에서 사용</li><li><code>:</code> : 스킴, 사용자 이름/비밀번호, 호스트/포트의 구획문자로 사용</li><li><code>$</code> : 미리 선점되었다.</li><li><code>+</code> : 미리 선점되었다.</li></ul><h4 id="게이트웨이에서-불안하게-다루기-때문에-제한"><a href="#게이트웨이에서-불안하게-다루기-때문에-제한" class="headerlink" title="게이트웨이에서 불안하게 다루기 때문에 제한"></a>게이트웨이에서 불안하게 다루기 때문에 제한</h4><ul><li><code>{</code> <code>}</code> <code>|</code> <code>\</code> <code>~</code> <code>[</code> <code>]</code> <code>・</code> <ul><li>게이트웨이와 같은 여러 전송 에이전트에서 불안하게 다루기 때문에 제한됨</li></ul></li><li><code>&lt;</code> <code>&gt;</code> <code>&quot;</code> <ul><li>안전하지 않음. </li><li>웹 문서에서 URL을 구분지어 표시s하듯이 URL 범위 밖에서 역할이 있는 문자이기 때문에 반드시 인코딩해야한다.</li></ul></li></ul><h4 id="US-ASCII-관련"><a href="#US-ASCII-관련" class="headerlink" title="US-ASCII 관련"></a>US-ASCII 관련</h4><ul><li><code>0x00-0x1F</code> <code>0x7F</code><ul><li>제한됨. </li><li>이 16진수 범위에 속하는 문자들은 인쇄되지 않는 US-ASCII 문자다.</li></ul></li><li><code>&gt; 0x7F</code><ul><li>제한됨. </li><li>이 16진수 범위에 속하는 문자들은 7비트 US-ASCII 문자가 아니다.</li></ul></li></ul><a name="3"><h2 id="3-편리한-URL-사용을-위한-상황별-단축-URL"><a href="#3-편리한-URL-사용을-위한-상황별-단축-URL" class="headerlink" title="3. 편리한 URL 사용을 위한 상황별 단축 URL"></a>3. 편리한 URL 사용을 위한 상황별 단축 URL</h2><p>웹 클라이언트는 몇몇 단축 URL을 인식하고 사용한다.</p><ol><li>상대URL은 리소스 안에 있는 리소스를 간결하게 기술하는데 사용</li><li>URL확장은 사용자가 기억하고 있는 URL 일부를 입력하면 나머지 부분을 자동으로 입력해준다.<a name="3-1"></a></li></ol><h3 id="3-1-상대-URL"><a href="#3-1-상대-URL" class="headerlink" title="3.1 상대 URL"></a>3.1 상대 URL</h3><p>URL은 2가지로 나뉜다.</p><ul><li>상대 URL : 모든 정보를 담고 있지 않다. 기저(base)URL을 사용해야한다.</li><li>절대 URL : 리소스에 접근하는데 필요한 모든 정보를 가지고 있다.</li></ul><ul><li>문서의 URL을 기준으로 상대경로로 해석될 수 있다.</li><li>상대URL은 <ul><li>fragment이거나 </li><li>URL 일부다.</li></ul></li></ul><p>브라우저 같은 어플리케이션은 <strong>상대URL과 절대URL 간에 상호 변환</strong>을 할 수 있어야 한다.</p><h4 id="기저-URL"><a href="#기저-URL" class="headerlink" title="기저 URL"></a>기저 URL</h4><p>기저 URL 찾는 방법</p><ol><li>리소스에서 명시적으로 제공<br><code>&lt;base&gt;</code> HTML 태그를 기술할 수 있다. (<a href https: developer.mozilla.org ko docs web html element base"">base</a>)</li><li>리소스를 포함하고 있는 기저 URL<br>해당 리소스의 URL을 기저 URL로 쓸 수 있다.</li><li>기저URL이 없는 경우<br>불안전하거나 깨진 URL일 수도 있다.</li></ol><h4 id="상대-참조-해석하기"><a href="#상대-참조-해석하기" class="headerlink" title="상대 참조 해석하기"></a>상대 참조 해석하기</h4><p>상대 URL과 기저을 각각의 컴포넌트 조각으로 나누는 것이다.<br>URL분해하기 = URL 파싱하기<br>변환을 위해서 특정 알고리즘을 사용한다.<br>이 알고리즘은 상대URL을 절대URL 형태로 변환한다.</p><img src="/images/2019/19/02.jpg" style="width:100%"><a name="3-2"><h3 id="3-2-URL-확장"><a href="#3-2-URL-확장" class="headerlink" title="3.2 URL 확장"></a>3.2 URL 확장</h3><ol><li><p>호스트명 확장</p><ul><li><code>yahoo.com</code> ⇒ <code>www.yahoo.com</code> 을 만든다.</li><li>사용자의 시간을 절약하고 혼란을 막아준다.</li><li>호스트명에 대한 확장 기능은 프락시와 다른 HTTP 어플리케이션에 문제를 발생시킬 수도 있다.</li></ul></li><li><p>히스토리 확장</p><ul><li>과거에 사용자가 방문했던 URL의 기록을 저장해놓는다.</li></ul></li></ol><a name="4"><h2 id="4-접근하는-방법의-종류-스킴의-종류"><a href="#4-접근하는-방법의-종류-스킴의-종류" class="headerlink" title="4. 접근하는 방법의 종류(스킴의 종류)"></a>4. 접근하는 방법의 종류(스킴의 종류)</h2><table><thead><tr><th align="left">스킴</th><th align="left">설명</th><th align="right">예</th></tr></thead><tbody><tr><td align="left">http</td><td align="left">HTTP스킴이다. 포트값이 생략되어 있으면 기본값은 80이다.</td><td align="right"><code>http://feel5ny.github.io</code></td></tr><tr><td align="left">https</td><td align="left">암호화하기 위해 넷스케이프에서 개발한 보안 소켓 계층(SSL)을 사용한다. 기본포트는 443</td><td align="right"><code>https://feel5ny.github.io</code></td></tr><tr><td align="left">mailto</td><td align="left">이메일 주소를 가리킨다. RFC 822</td><td align="right"><code>mailto:joe@joes-hardware.com</code></td></tr><tr><td align="left">ftp</td><td align="left">파일 전송 프로토콜. FTP는 웹과 URL이 출현하기 전부터 있었다.</td><td align="right"><code>ftp://anonymous:joe%40joes-hardware.com@prep.ai.mit.edu:21/pub/gnu/</code></td></tr><tr><td align="left">rtsp, rtspu</td><td align="left">실시간 스트리밍 프로토콜(Real Time Streaming Protocol), rtspu에서 u는 리소스를 읽기 위해서 UDP 프로토콜이 사용됨을 뜻한다.</td><td align="right"><code>rtsp://www.joes-hardware.com:554/interview/cto_video</code></td></tr><tr><td align="left">file</td><td align="left">주어진 호스트 기기에서 바로 접근할 수 있는 파일들을 나타낸다.</td><td align="right"><code>file//OFFICE-FS/policies/casual-fridays.doc</code></td></tr><tr><td align="left">news</td><td align="left">RFC 1036에 정의된 바와 같이 특정 문서나 뉴스 그룹에 접근하는데 사용한다.</td><td align="right"><code>news:rec.arts.startrek</code></td></tr><tr><td align="left">telnet</td><td align="left">대화형 서비스에 접근하는데 사용한다.</td><td align="right"><code>telnet://slurp:webhound@joes-hardware.com:23/</code></td></tr></tbody></table><hr><p>참고자료</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_domain_name" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_domain_name</a></li><li><a href="https://developer.mozilla.org/ko/docs/Learn/Common_questions/What_is_a_URL" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Learn/Common_questions/What_is_a_URL</a></li></ul></a></a></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bookcrush?type=source&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;책뽀개기 모임&lt;/a&gt; 중 &lt;strong&gt;http 완벽가이드&lt;/strong&gt; 1장 뽀개기 
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
      <category term="URL" scheme="http://feel5ny.github.io/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 개관</title>
    <link href="http://feel5ny.github.io/2019/08/03/HTTP_001/"/>
    <id>http://feel5ny.github.io/2019/08/03/HTTP_001/</id>
    <published>2019-08-03T12:23:55.000Z</published>
    <updated>2021-02-12T04:07:06.388Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://github.com/bookcrush?type=source" target="_blank" rel="noopener">책뽀개기 모임</a> 중 <strong>http 완벽가이드</strong> 1장 뽀개기 진행중입니다. (~8월말) (다음 모임은 2장)<br>(모임 참여를 원하신다면 댓글로 문의 바랍니다.)</li><li><a href http: www.kyobobook.co.kr product detailviewkor.laf?ejkgb="KOR&mallGb=KOR&barcode=9788966261208&orderClick=LAG&Kc=" "">HTTP 완벽가이드</a> 책을 보고 이해한 내용을 <strong>저만의 순서</strong>로 정리 한 글입니다.</li></ul><hr><a name="0"><h1 id="개요-클라이언트와-서버의-전체-흐름-보기"><a href="#개요-클라이언트와-서버의-전체-흐름-보기" class="headerlink" title="개요 / 클라이언트와 서버의 전체 흐름 보기"></a>개요 / 클라이언트와 서버의 전체 흐름 보기</h1><p>웹 어플리케이션은 사용자에게 어플리케이션을 보여주기 위해,<br>사용자가 어플리케이션에 입장할 시점에<br>서버에서 데이터(소스)를 받아와야한다. </p><p>어플리케이션은 서버에게 어떻게 데이터를 받아오는지 http를 모른다고 생각하고 상상해보자.</p><ol><li><p>우선 데이터가 존재하는 서버의 <strong>위치부터 파악</strong> 해야한다. </p><ul><li>데이터는 보통 다른 서버에서 받아오게 되는데,<br>수많은 서버 중 특정 서버를 가리키기 위해서는 해당 서버의 <strong>주소</strong>를 알아야한다.</li></ul><img src="/images/2019/18/02"><blockquote><p>Host</p></blockquote></li><li><p>위치를 파악했다면 클라이언트와 서버의 연결이 필요하다.</p><img src="/images/2019/18/03"><blockquote><p>TCP/IP 커넥션, port</p></blockquote></li><li><p>연결이 이루어졌다면, 서버에게 <strong>원하는 바를 요청</strong>해야한다.</p><ul><li>서버와 클라이언트가 둘다 이해할 수 있는 공용 언어가 필요하다. </li><li>공용 언어에서 어떤 <strong>대화방식</strong>이 이루어지는지,<br>어떤 <strong>약속된 규칙</strong>으로 메세지를 주고받는지를 파악하고,<br>이 규칙을 지킨 요청사항을 보내야한다.</li></ul><img src="/images/2019/18/04"><blockquote><p>HTTP: HTTP 프로토콜을 통해 요청/응답메세지를 보낸다.</p></blockquote></li><li><p>요청이나 응답에서 어떤 데이터를 보내고, 받았는지<br><strong>데이터의 위치, 종류를 알아야,</strong> 클라이언트에서 해석할 수 있다.</p><ul><li>데이터는 종류가 많다. 일반 text부터 이미지, pdf파일, 음악파일, 영상파일 등등</li><li>어떤 종류의 데이터가 오가고 있고 어떻게 해석해줘야하는지에 대해 알려줘야한다.</li></ul><img src="/images/2019/18/05"><blockquote><p>Content-Type, URI</p></blockquote></li><li><p><strong>특정상황에선</strong> 통신을 원할하게 해주는 다른 요소들이 필요하다.</p><ul><li>서버의 데이터를 필터하는 과정이 필요하거나,<br>받은 데이터를 저장해서 서버요청을 줄이는 등<br>특정상황에서의 처리를 위한 요소가 필요하다.</li></ul><img src="/images/2019/18/06"><blockquote><p>HTTP의 기반 시스템의 구성요소</p></blockquote></li></ol><p>이 모든 과정에 필요한 HTTP에 대해서 알아보고, 과정 순서대로 톺아보려고한다.</p><hr><hr><a name="http"><h1 id="HTTP의-개념"><a href="#HTTP의-개념" class="headerlink" title="HTTP의 개념"></a>HTTP의 개념</h1><h2 id="HTTP-HyperTest-Transfer-Protocaol"><a href="#HTTP-HyperTest-Transfer-Protocaol" class="headerlink" title="HTTP (HyperTest Transfer Protocaol)"></a>HTTP (HyperTest Transfer Protocaol)</h2><p>HTTP는 WWW 상에서 정보를 주고받을 수 있는 프로토콜이다.<br><strong>주로 HTML 문서를 주고받는 데에 쓰인다.</strong><br>TCP와 UDP를 사용하며, 80번 포트를 사용한다.</p><ul><li><p>인터넷의 멀티미디어 배달부</p></li><li><p>웹브라우저, 서버, 웹 어플리케이션 모두 HTTP (HyperTest Transfer Protocaol)을 통해 서로 대화한다.</p></li><li><p>HTTP는 현대 인터넷의 공용어이다.</p></li><li><p>HTTP는 신뢰성 있는 데이터 전송 프로토콜을 사용하기 때문에, 데이터가 지구 반대편에서 오더라도 전송 중 손상되거나 꼬이지 않음을 보장한다.</p></li><li><p>웹 서버는 <strong>HTTP프로토콜</strong>로 의사소통하기 때문에 보통 HTTP서버라고 불린다.</p></li></ul><blockquote><p><strong>프로토콜이란?</strong><br>사람과 사람이 통신할 때 서로 이해할 수 있는 언어, 공용된 언어를 사용해 전세계 모든 사람과 대화 할수 있다라고 하면,<br>컴퓨터와 컴퓨터도 서로 이해 할 수 있는 언어, 공용된 언어를 사용 해야 한다는 것인데 이것이 바로 <strong>프로토콜(Protocol)</strong> 입니다.</p></blockquote><ul><li>HTTP클라이언트와 HTTP서버는 월드 와이드 웹의 기본 요소이다.</li><li>HTTP클라이언트는 HTTP를 사용할 수 있는 에이전트를 뜻한다.</li></ul><hr><hr><a name="1"><h1 id="클라이언트-입장에서-생각해보기"><a href="#클라이언트-입장에서-생각해보기" class="headerlink" title="클라이언트 입장에서 생각해보기"></a>클라이언트 입장에서 생각해보기</h1><ol><li>원하는 데이터가 있는 서버의 위치를 알아야한다.</li><li>위치를 파악했다면 연결이 필요하다.</li><li>연결이 이루어졌다면, 서버에게 원하는 바를 요청해야한다.</li><li>어디에있는 어떤 데이터인지를 알려줘야한다.</li></ol><h2 id="1-원하는-데이터가-있는-서버의-위치를-알아야한다"><a href="#1-원하는-데이터가-있는-서버의-위치를-알아야한다" class="headerlink" title="1. 원하는 데이터가 있는 서버의 위치를 알아야한다."></a>1. 원하는 데이터가 있는 서버의 위치를 알아야한다.</h2><p>데이터를 갖고 있는 서버의 위치를 알기 위해서 해당 서버의 <strong>주소</strong>, 즉 ip주소와 포트번호를 알아야한다. </p><hr><h3 id="1-1-접속-IP-주소-그리고-포트번호"><a href="#1-1-접속-IP-주소-그리고-포트번호" class="headerlink" title="1.1 접속, IP 주소 그리고 포트번호"></a>1.1 접속, IP 주소 그리고 포트번호</h3><p>뒤에 나올 TCP/IP 커넥션에 필요한 IP주소와 포트번호에 대한 내용이다. </p><ul><li><p>HTTP 클라이언트가 서버에 메세지를 전송할 수 있게 되기 전에,<br><strong>인터넷 프로토콜 주소와 포트번호</strong>를 사용해<br>클라이언트와 서버 사이에 TCP/IP 커넥션을 맺어야 한다.</p></li><li><p>TCP에서는<br>서버 컴퓨터에 대한 IP주소와<br>그 서버에서 실행 중인 프로그램이 사용중인 <a href="https://feel5ny.github.io/2018/01/02/CS_07/#port">포트번호</a>가 필요하다.<br>( 전화기로 치면, IP주소는 전화번호, 포트번호는 전화 걸고자 하는 상대방이 쓰는 번호 )</p></li><li><p>IP주소와 포트번호는 어떻게 알 수 있을까? ⇒ <strong>URL</strong>을 이용하면된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://207.200.83.29:80</span><br><span class="line">http://www.netscape.com:80/index.html</span><br><span class="line">http://www.netscape.com/index.html</span><br></pre></td></tr></table></figure><ul><li>호스트 명은 도메인 이름 서비스 (Domain Name Service, <a href="https://feel5ny.github.io/2018/01/02/CS_07/#dns">DNS</a>)라 불리는 장치를 통해 쉽게 <strong>IP로 변환될 수 있다.</strong></li><li>포트번호가 없는 경우 기본은 <strong>80</strong>이다.</li></ul></li></ul><hr><h3 id="1-2-단순한-HTML리소스를-사용자에게-보여주는-순서"><a href="#1-2-단순한-HTML리소스를-사용자에게-보여주는-순서" class="headerlink" title="1.2 단순한 HTML리소스를 사용자에게 보여주는 순서"></a>1.2 단순한 HTML리소스를 사용자에게 보여주는 순서</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. 웹 브라우저는 서버의 URL에서 호스트 명을 추출한다.</span><br><span class="line">2. 웹 브라우저는 서버의 호스트 명을 IP로 변환한다.</span><br><span class="line">3. 웹 브라우저는 URL에서 포트번호 (있다면) 을 추출한다.</span><br><span class="line">4. 웹 브라우저는 웹 서버와 TCP 커넥션을 맺는다.</span><br><span class="line">5. 웹 브라우저는 서버에 http 요청을 보낸다.</span><br><span class="line">6. 서버는 웹브라우저에 http 응답을 돌려준다.</span><br><span class="line">7. 커넥션이 닫히면, 웹 브라우저는 문서를 보여준다.</span><br></pre></td></tr></table></figure><p>1번부터 4번까지 알아보았다.</p><hr><a name="2"><h2 id="2-위치를-파악했다면-연결이-필요하다"><a href="#2-위치를-파악했다면-연결이-필요하다" class="headerlink" title="2. 위치를 파악했다면 연결이 필요하다."></a>2. 위치를 파악했다면 연결이 필요하다.</h2><p>TCP 커넥션을 통해서 어떻게 데이터가 넘어가는지 알아보자.</p><h3 id="TCP-IP-Transmission-Control-Protocol-Internet-Protocol"><a href="#TCP-IP-Transmission-Control-Protocol-Internet-Protocol" class="headerlink" title="TCP/IP (Transmission Control Protocol / Internet Protocol)"></a>TCP/IP (Transmission Control Protocol / Internet Protocol)</h3><ul><li>인터넷 전송 프로토콜</li><li>인터넷 자체가 TCP/IP에 기초하고 있다.</li><li>TTCP/IP는 TCP와 IP가 층을 이루는, 패킷 교환 네트워크 프로토콜의 집합이다. </li><li>TCP/IP는 각 네트워크와 하드웨어의 특성을 숨기고,<br>어떤 종류의 컴퓨터나 네트워크든 서로 <strong>신뢰성 있는 의사소통</strong>을 하게 해 준다.</li></ul>  <img src="https://feel5ny.github.io/images/post_img/66/protocol.gif"><ul><li>네트워크 개념상, HTTP프로토콜은 TCP위의 계층이다. <ul><li>HTTP는 자신의 메세지 데이터를 전송하기 위해 TCP를 사용한다. </li></ul></li><li>이와 유사하게 TCP는 IP위의 계층이다.</li><li>HTTP는 어플리케이션 계층 프로토콜이다. </li><li>HTTP는 네트워크 통신의 핵심적인 세부사항에 대해서 신경쓰지 않는다.</li></ul><hr><h3 id="TCP가-제공하는-것"><a href="#TCP가-제공하는-것" class="headerlink" title="TCP가 제공하는 것"></a>TCP가 제공하는 것</h3><ul><li>오류 없는 데이터 전송</li><li>순서에 맞는 전달</li><li>조각나지 않는 데이터 스트림</li></ul><hr><h3 id="텔넷을-이용한-예시"><a href="#텔넷을-이용한-예시" class="headerlink" title="텔넷을 이용한 예시"></a>텔넷을 이용한 예시</h3><ul><li>텔넷 유틸리티는<br>당신의 키보드를 목적지의 TCP 포트로 연결해주고<br>출력 TCP 포트를 당신의 화면으로 연결해준다.</li><li>텔넷은 직접 컴퓨터의 포트로 TCP 커넥션을 연결해서 그 포트로 글자를 타이핑해 넣을 수 있게 해준다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">telnet feel5ny.github.io 80 👈👩‍💻</span><br><span class="line">Trying 185.199.108.153...</span><br><span class="line">Connected to feel5ny.github.io.</span><br><span class="line">Escape character is &apos;^]&apos;.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET /index.html HTTP/1.1 👈👩‍💻</span><br><span class="line">Host: feel5ny.github.io 👈👩‍💻</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HTTP/1.1 301 Moved Permanently</span><br><span class="line">Server: GitHub.com</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Location: https://feel5ny.github.io/index.html</span><br><span class="line">X-GitHub-Request-Id: D618:10D7:EA3B81:F6E706:5D445B26</span><br><span class="line">Content-Length: 178</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Date: Fri, 02 Aug 2019 15:47:51 GMT</span><br><span class="line">Via: 1.1 varnish</span><br><span class="line">Age: 0</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-Served-By: cache-itm18822-ITM</span><br><span class="line">X-Cache: MISS</span><br><span class="line">X-Cache-Hits: 0</span><br><span class="line">X-Timer: S1564760871.463728,VS0,VE108</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Fastly-Request-ID: 092f039231a1abe8f0a17ae484a57d8d54cf5810</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;301 Moved Permanently&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor=&quot;white&quot;&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;301 Moved Permanently&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><hr><a name="3"><h2 id="3-연결이-이루어졌다면-서버에게-원하는-바를-요청해야한다-트랜젝션-메세지"><a href="#3-연결이-이루어졌다면-서버에게-원하는-바를-요청해야한다-트랜젝션-메세지" class="headerlink" title="3. 연결이 이루어졌다면, 서버에게 원하는 바를 요청해야한다. ( 트랜젝션, 메세지 )"></a>3. 연결이 이루어졌다면, 서버에게 원하는 바를 요청해야한다. ( 트랜젝션, 메세지 )</h2><p>서버와 <strong>대화</strong>하는 방식을 알아야한다.</p><ul><li><p>클라이언트와 서버의 대화는<br>주로 사람이 대화하듯이 말을 <strong>전달</strong>하고,<br><strong>응답</strong>받는 모양으로 구성되어있다.</p><img src="/images/2019/18/08"></li><li><p>즉, HTTP <strong>트랜잭션</strong>은 요청 명령과 응답 결과로 구성되어있다.</p></li><li><p>서로가 이해하는 언어로 사용해야하기때문에 HTTP <strong>메세지</strong>라고 불리는 정형화된 데이터 덩어리를 이용해 이루어진다.</p></li></ul><h3 id="3-1-트랜젝션"><a href="#3-1-트랜젝션" class="headerlink" title="3.1 트랜젝션"></a>3.1 트랜젝션</h3><img src="/images/2019/18/09"><h4 id="3-1-1-메서드"><a href="#3-1-1-메서드" class="headerlink" title="3.1.1 메서드"></a>3.1.1 메서드</h4><p>클라이언트는 사용자의 요청에 따라 데이터를 처리하기위해 서버에게 특정 액션을 설명해줘야한다. </p><ul><li>이를 위해서 HTTP는 <strong>HTTP 메서드</strong>라고 불리는 여러 가지 종류의 요청 명령을 지원한다.</li><li>메서드는 서버에게 어떤 동작이 취해져야하는지 말해준다.</li></ul><p>HTTP 에서 흔히 쓰이는 5가지 메서드</p><ol><li><strong>GET</strong> (서버 ⇒ 클) 보내라.<br>서버에서 클라이언트로 지정한 소스를 </li><li><strong>PUT</strong> 저장하라.<br>클라이언트에서 서버로 보낸 데이터를 지정한 이름의 리소스로</li><li><strong>DELETE</strong> 삭제하라.<br>지정한 리소스를 서버에서</li><li><strong>POST</strong> (클 ⇒ 서버) 보내라.<br>클라이언트 데이터를 서버 게이트웨이 어플리케이션으로</li><li><strong>HEAD</strong> 보내라<br>지정한 리소스에 대한 응답에서, HTTP 헤더 부분만 보내라.</li></ol><h4 id="3-1-2-상태코드"><a href="#3-1-2-상태코드" class="headerlink" title="3.1.2 상태코드"></a>3.1.2 상태코드</h4><ul><li>상태 코드는<br>클라이언트에게 요청이 성공했는지<br>아니면 추가 조치가 필요한지 알려주는 세자리 숫자다.</li></ul><p>흔히 쓰이는 상태 코드 몇가지.</p><ol><li>200 문서가 바르게 반환되었다.<br><strong>사유구절</strong><br>http는 각 숫자 상태 코드에 텍스트로 된 사유구절 (reason phrase)도 함께 보낸다.<ol><li>200 OK</li><li>200 Document attached</li><li>200 Success</li><li>200 All’s cool, dude</li></ol></li><li>302 다시 보내라. 다른 곳에 가서 리소스를 가져가라. </li><li>404 리소스를 찾을 수 없다.</li></ol><h3 id="3-2-메세지"><a href="#3-2-메세지" class="headerlink" title="3.2 메세지"></a>3.2 메세지</h3><ul><li>서로가 이해하는 언어로 사용해야하기때문에 HTTP <strong>메세지</strong>라고 불리는 정형화된 데이터 덩어리를 이용해 이루어진다.</li><li>http 메세지는 단순한 줄 단위이 문자열이다.</li><li>이진 형식이 아닌 일반 텍스트이기 때문에 사람이 읽고 쓰기 쉽다.</li></ul><p>HTTP 메세지 </p><ul><li><p>웹 클라이언트 ⇒ 웹 서버 : 요청 메세지</p></li><li><p>웹 서버 ⇒ 웹 클라이언트 : 응답 메세지</p></li><li><p>이 외의 다른 종류이 http 메세지는 없다.</p></li><li><p>http 요청과 응답 메세지의 형식은 굉장히 비슷하다.</p></li></ul><img src="/images/2019/18/10.jpg"><blockquote><p><a href="https://www.cs.umd.edu/~shankar/417-F01/Slides/chapter2a-aus/sld016.htm" target="_blank" rel="noopener">출처</a></p></blockquote><ol><li>시작줄<br>요청이라면 <strong>무엇을 해야 하는지</strong><br>응답이라면 <strong>무슨 일이 일어 났는지</strong><br>나타낸다.</li><li>요청헤더<br>헤더 필드는 <code>:</code> 구분되어 있는 하나의 이름과 하나의 값으로 구성된다.<br>빈 줄로 끝난다.</li><li>본문<br>본문은 필요에 따라 올 수 있다.<br>문자열이며, 임의의 이진 데이터를 포함할 수 있다. (이미지, 비디오, 오디오 트랙, 응용소프트웨어)</li></ol><a name="4"><h2 id="4-어디에있는-어떤-데이터인지를-알려줘야한다-리소스"><a href="#4-어디에있는-어떤-데이터인지를-알려줘야한다-리소스" class="headerlink" title="4. 어디에있는 어떤 데이터인지를 알려줘야한다. ( 리소스 )"></a>4. 어디에있는 어떤 데이터인지를 알려줘야한다. ( 리소스 )</h2><p>이제 서버와 어떻게 대화하는지를 알게 되었다.<br>특정 데이터를 특정 액션(메서드)을 해달라는 요청을 하는 방법을 알게되었는데,<br><strong>특정 데이터</strong>라는 건 어떻게 서버가 알게 해야할까.<br><img src="/images/2019/18/11.jpg"><br>우선 데이터가</p><ol><li>어디에 있는 어떤 컨텐츠인지.</li><li>해당 컨텐츠가 어떤 타입인지를 알야아한다.</li></ol><p>어디에 있는 어떤 컨텐츠인지를 어떻게 알까. URI개념을 이용하면 된다.</p><h3 id="4-1-URI"><a href="#4-1-URI" class="headerlink" title="4.1 URI"></a>4.1 URI</h3><p>Uniform Resource Identifier = 통합 자원 식별자</p><ul><li>웹 서버 리소스는 각자 이름을 갖고 있다.</li></ul><p>아래 URI를 분석해보면,<br><code>https://feel5ny.github.io/2019/07/07/Joylog_003/</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. https:// http 프로토콜을 사용하라</span><br><span class="line">2. feel5ny.github.io 으로 이동하라</span><br><span class="line">3. /2019/07/07/Joylog_003 라고 불리는 리소스를 가져와라.</span><br></pre></td></tr></table></figure><p>URI에는 2가지가 있다.</p><ol><li>URL (locator)</li><li>URN (name)</li></ol><h4 id="4-1-1-URL-locator"><a href="#4-1-1-URL-locator" class="headerlink" title="4.1.1 URL (locator)"></a>4.1.1 URL (locator)</h4><p>Uniform Resource locator = 통합 자원 지시자</p><ul><li>리소스 식별자의 가장 흔한 형태다.</li><li>URL 은 특정 서버의<br>한 리소스에 대한<br><strong>구체적인 위치</strong>를 서술한다.</li><li>오늘날 대부분의 URI는 URL이다.</li><li>URL은 리소스가 정확히 어디에 있고, 어떻게 접근할 수 있는지 분명히 알려준다.</li><li>대부분의 URL은 세 부분으로 이루어지고, 표준 포맷을 따른다.<br>( <a href="https://feel5ny.github.io/2019/07/07/Joylog_003/">https://feel5ny.github.io/2019/07/07/Joylog_003/</a> )<ol><li><code>https://</code><br>URL의 첫번째 부분은 <strong>스킴</strong>이라고 불린다.<br>리소스에 접근하기 위해 사용되는 프로토콜을 서술한다.<ul><li>보통은 http 프로토콜 <code>http://</code><blockquote><p>스킴과 스키마의 차이점<br>스키마(schema)는 계획이나 도식을 가리키는 영어 낱말로, 다음을 가리킨다. 참고로 스킴(scheme)은 스키마와 거의 같은 의미로 쓰이나, 보통 스키마가 대략적인 계획이나 도식을 뜻하는 데 비해 스킴은 구체적이고 확정된 것을 말한다.</p></blockquote></li></ul></li><li><code>feel5ny.github.io</code><br>두번째 부분은 서버의 인터넷 주소를 제공</li><li><code>/2019/07/07/Joylog_003/</code><br>마지막은 웹 서버의 리소스를 가리킨다.</li></ol></li></ul><h4 id="4-1-2-URN-name"><a href="#4-1-2-URN-name" class="headerlink" title="4.1.2 URN (name)"></a>4.1.2 URN (name)</h4><blockquote><p>잘 모르겠다.</p></blockquote><p>Uniform Resource name = 통합 자원 이름</p><ul><li>URN은 콘텐츠를 이루는 한 리소스에 대해,<br>그 리소스의 위치에 영향받지 않는 유일무이한 이름 역할을 한다. (?)</li><li>이 위치 독립적인 URN은 리소스를 여기저기로 옮기더라도 문제없이 동작한다. </li><li>리소스가 그 이름을 변하지 않게 유지한 한,<br>여러 종류의 네트워크 접속 프로토콜로 접근해도 문제없다.<ul><li>예시) 인터넷 표준문서 RFC 2141이 어디에 잇거나 상관없이 그것을 지칭하기 위해 URN을 사용할 수 있다. </li></ul></li><li>URN은 여전히 실험 중인 상태이고,<br>아직 널리 채택되지 않았다. </li><li>효율적인 동작을 위해 URN은 리소스 위치를 분석하기 위한 인프라 지원이 필요한데,<br>그러한 인프라가 부지하기에 URN 채택이 더 늦춰지고 있다.</li></ul><p>어디에 있고, 어떤 이름을 갖는 파일인지를 알아보는 방법을 알아봤으니,<br>해당 컨텐츠가 어떤 종류의 타입인지를 알야아한다.</p><h3 id="4-2-미디어-타입"><a href="#4-2-미디어-타입" class="headerlink" title="4.2 미디어 타입"></a>4.2 미디어 타입</h3><p>인터넷은 수천 가지 데이터 타입을 다루기 때문에<br>HTTP는 웹에서 전송되는 객체 각각에<br>신중하게 <strong>MIME 타입</strong>이라는 데이터 포맷 라벨을 붙인다.</p><h4 id="4-2-1-MIME"><a href="#4-2-1-MIME" class="headerlink" title="4.2.1 MIME"></a>4.2.1 MIME</h4><p>MIME = multipurpose Internet Mail Extensions = 다목적 인터넷 메일 확장</p><h5 id="왜-MIME"><a href="#왜-MIME" class="headerlink" title="왜 MIME?"></a>왜 MIME?</h5><ul><li>MIME은 원래 각기 다른 <strong>전자메일 시스템 사이에서</strong><br><strong>메세지가 오갈 때 겪는 문제점을 해결하기 위해</strong> 설계되었다.</li><li>MIME은 이메일에서 잘 동작하기 때문에<br>http에서도 멀티미디어 콘텐츠를 기술하고 라벨을 붙이기 위해 채택되었다.</li></ul><h5 id="HTTP에서-MIME-타입은"><a href="#HTTP에서-MIME-타입은" class="headerlink" title="HTTP에서 MIME 타입은?"></a>HTTP에서 MIME 타입은?</h5><p>웹 서버는 모든 HTTP 객체 데이터에 MIME 타입을 붙인다.</p><ul><li>웹브라우저는 서버로부터 객체를 돌려받을 때,<br>다룰 수 있는 객체인지, MIME타입을 통해 확인한다.</li><li>대부분의 웹브라우저는 잘 알려진 객체 타입 수백가지를 다룰 수 있다.</li><li>이미지 파일을 보여주고<br>html 파일을 분석하거나 포매팅하고,<br>오디오 파일을 컴퓨터의 스피커를 통해 재생하고<br>특별한 포맷의 파일을 다루기 위해 외부 플러그인 소프트웨어를 실행한다.</li></ul><h5 id="MIME은-어떻게-표시되나"><a href="#MIME은-어떻게-표시되나" class="headerlink" title="MIME은 어떻게 표시되나?"></a>MIME은 어떻게 표시되나?</h5><p>MIME 타입은 사선 /으로 구분된 주 타입과 부타입으로 이루어진 문자열 라벨이다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">주타입/부타입 (primary object type / specific subtype)</span><br></pre></td></tr></table></figure><p>종류</p><ul><li>html로 작성된 텍스트 문서 <code>text/html</code></li><li>plain ASCII 텍스트 문서 <code>text/plain</code></li><li>jpeg <code>image/jpeg</code></li><li>gif <code>image/gif</code></li><li>quicktime <code>video/quicktime</code></li><li>microsoft ppt <code>application/vnd.ms-powerpoint</code></li></ul><a name="version"><h1 id="HTTP의-종류"><a href="#HTTP의-종류" class="headerlink" title="HTTP의 종류"></a>HTTP의 종류</h1><h3 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h3><p>1991년 HTTP 프로토타입 HTTP/0.9</p><p>문제점</p><ul><li>심각한 디자인 결함</li><li>연동: 구식 클라이언트하고만 같이 사용 가능.</li><li>메서드: GET 메서드만 지원</li><li>미지원: MIME타입, HTTP헤더, 버전 번호는 지원하지 않는다.</li></ul><p>상황</p><ul><li>원래 간단한 HTML 객체를 받아오기 위해 만들어진 것이다.</li><li>바로 1.0으로 대체됨</li></ul><h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h3><p>처음으로 널리 쓰이기 시작한 HTTP 버전</p><ul><li>버전번호, HTTP 헤더, 추가 메서드, 멀티미디어 객체 처리를 추가가했다.</li><li>HTTP가 상업적, 학술적으로 급성장하던 시기에 만들어진, 잘 동작하는 용례들의 모음에 가깝다.</li></ul><h3 id="HTTP-1-0-1"><a href="#HTTP-1-0-1" class="headerlink" title="HTTP/1.0+"></a>HTTP/1.0+</h3><p>상황</p><ul><li>월드와이드 웹이 급격히 성공하면서<br>클라이언트와 서버들은 그에 다른 요구를 만족시키기 위해<br>HTTP에 기능을 추가해갔다.</li></ul><p>지원</p><ul><li>오래 지속되는 keep-alive 커넥션, </li><li>가상 호스팅 지원, </li><li>프락시 연결 지원, </li><li>공식은 아니지만 표준으로 추가됨.</li></ul><h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h3><p>HTTP 설계의 구조적 결함 교정,<br>두드러진 성능 최적화,<br>잘못된 기능제거에 집중했다.</p><h3 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP/2.0"></a>HTTP/2.0</h3><p>1.1 성능 문제를 개선하기 위해<br><strong>구글의 SPDY 프로토콜</strong>을 기반으로 설계가 진행중인 프로토콜이다.</p><ul><li>SPDY<ul><li>SPDY는 ‘speedy’라는 단어를 기반으로 Google이 만든 조어로,<br>Google이 자신들의 ‘Make the Web Faster’ 노력의 하나로 제안한 새로운 프로토콜입니다.<br>이는 초창기 인터넷 환경에서 고안된 HTTP의 단점들을 보완하여,<br>지금과 앞으로의 인터넷 환경을 보다 효율적으로 이용할 수 있는 프로토콜로 제안된 것입니다.</li><li>참고자료: <a href="https://d2.naver.com/helloworld/140351" target="_blank" rel="noopener">NAVER D2</a></li></ul></li></ul><hr><p>@2021-02-12 추가</p><ul><li>http2에 대한 문서 <a href="https://http2-explained.haxx.se/ko" target="_blank" rel="noopener">https://http2-explained.haxx.se/ko</a></li><li>http3에 대한 문서 <a href="https://http3-explained.haxx.se/ko" target="_blank" rel="noopener">https://http3-explained.haxx.se/ko</a></li></ul><a name="http-app"><h1 id="HTTP-기반-시스템의-구성요소-인터넷-곳곳에-설치된"><a href="#HTTP-기반-시스템의-구성요소-인터넷-곳곳에-설치된" class="headerlink" title="HTTP 기반 시스템의 구성요소 ( 인터넷 곳곳에 설치된 )"></a>HTTP 기반 시스템의 구성요소 ( 인터넷 곳곳에 설치된 )</h1><p>특정상황에 효율적인 처리를 위해 만들어진 HTTP 구성 요소 개념</p><ul><li>프락시</li><li>캐시</li><li>게이트웨이</li><li>터널</li><li>에이전트</li></ul><h2 id="1-프락시"><a href="#1-프락시" class="headerlink" title="1. 프락시"></a>1. 프락시</h2><p>클라이언트와 서버 사이에 위치한 HTTP 중개자</p><img src="/images/2019/18/12.png"><p>서버와 클라이언트 사이에 중계자로서<br><strong>대리로 통신을 수행하는 것</strong>을 가리켜 ‘프록시’,<br>그 <strong>중계 기능</strong>을 하는 것을 ‘프록시 서버’라고 부른다.</p><ul><li>클라이언트와 서버 사이에 위치한다.</li><li>클라이언트의 모든 HTTP 요청을 받아 서버에 전달한다.<ul><li>요청을 수정한 뒤에<br>이 어플리케이션은 사용자를 위한 프락시로 동작하며<br>사용자를 대신해서 서버에 접근한다.</li></ul></li><li>프락시는 주로 보안을 위해 사용된다.</li><li>모든 웹 트래픽 흐름 속에서 신뢰할 만한 중개자 역할을 한다.</li><li>프락시는 요청과 응답을 필터링한다.</li></ul><p>예시</p><ul><li>어플리케이션 바이러스를 검출하거나</li><li>초등학교 학생들에게 성인 콘텐츠를 차단한다.</li></ul><h2 id="2-캐시"><a href="#2-캐시" class="headerlink" title="2. 캐시"></a>2. 캐시</h2><p>많이 찾는 웹페이지를<br>클라이언트 가까이에 보관하는 <strong>HTTP 창고</strong></p><img src="/images/2019/18/13.png"><ul><li>웹캐시와 캐시 프락시는 자신을 거쳐 가는 문서들 중<br><strong>자주 찾는 것의 사본을 저장해두는,</strong><br>특별한 종류의 HTTP 프락시 서버이다.</li><li>더 빠르게 문서를 다운받을 수 있다.</li><li>HTTP는 캐시를 효율적으로 동작하게 하고,<br>캐시된 콘텐츠를 최신 버전으로 유지하면서<br>동시에 프라이버시도 보호하기 위한 많은 기능을 정의한다.</li></ul><h2 id="3-게이트웨이"><a href="#3-게이트웨이" class="headerlink" title="3. 게이트웨이"></a>3. 게이트웨이</h2><p><strong>다른 어플리케이션</strong>과 연결된 특별한 웹 <strong>서버</strong></p><img src="/images/2019/18/14.png"><ul><li>다른 서버들의 중개자로 동작하는 특별한 서버다.</li><li>주로, HTTP 트래픽을 다른 프로토콜로 변환하기 위해 사용된다.</li><li>게이트웨이는 언제나 스스로가 리소스를 갖고 있는 진짜 서버인 것처럼 요청을 다룬다.</li><li>클라이언트는 자신이 게이트웨이와 통신하고 있음을 알아채지 못할 것이다.<br>( 변환의 개념이기때문에 A에서 B의 변환이라면 A, B의 정보를 모두 알기 때문에 )</li></ul><p>예시</p><ul><li>HTTP/FTP 게이트웨이는 FTP URI에 대한 HTTP요청을 받아들인뒤<br>FTP 프로토콜을 이용해 문서를 가져온다.</li><li>받아온 문서는 HTTP 메세지에 담겨 클라이언트에게 보내다.</li></ul><h2 id="4-터널"><a href="#4-터널" class="headerlink" title="4. 터널"></a>4. 터널</h2><p>HTTP 통신을 전달하기만 하는 특별한 프락시</p><img src="/images/2019/18/15.png"><ul><li>터널은 두 커넥션 사이에서<br>날raw 데이터를 열어보지 않고<br><strong>그대로 전달</strong>해주는 HTTP 어플리케이션이다.</li><li>HTTP 터널은<br>비 HTTP 데이터를<br>하나 이상의 HTTP 연결을 통해<br>그대로 전송해주기 위해 사용된다.</li></ul><p>예시</p><ul><li>암호화된 SSL 트래픽을 HTTP 커넥션으로 전송함으로써, 웹 트래픽만 허용하는 사내 방화벽을 통과시키는 것이 있다.</li></ul><h2 id="5-에이전트"><a href="#5-에이전트" class="headerlink" title="5. 에이전트"></a>5. 에이전트</h2><p>자동화된 HTTP 요청을 만드는 준지능적 semi-intelligent 웹클라이언트</p><img src="/images/2019/18/16.png"><ul><li>사용자 에이전트는<br><strong>사용자를 위해 HTTP 요청을 만들어주는</strong><br>클라이언트 프로그램이다.</li><li>웹 요청을 만드는 어플리케이션은 무엇이든 HTTP 에이전트다.</li></ul><p>예시</p><ul><li>자동화된 에이전트: 스파이더, 웹로봇</li></ul><hr><p>참고링크</p><ol><li><a href="https://bignet.tistory.com/73" target="_blank" rel="noopener">https://bignet.tistory.com/73</a></li></ol></a></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/bookcrush?type=source&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;책뽀개기 모임&lt;/a&gt; 중 &lt;strong&gt;http 완벽가이드&lt;/strong&gt; 1장 뽀개기 
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="HTTP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/HTTP/"/>
    
    
      <category term="http" scheme="http://feel5ny.github.io/tags/http/"/>
    
      <category term="study" scheme="http://feel5ny.github.io/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>2019 상반기 회고 + 하반기 다짐 (feat. 글또)</title>
    <link href="http://feel5ny.github.io/2019/07/07/Joylog_003/"/>
    <id>http://feel5ny.github.io/2019/07/07/Joylog_003/</id>
    <published>2019-07-07T12:23:55.000Z</published>
    <updated>2020-11-15T11:44:44.744Z</updated>
    
    <content type="html"><![CDATA[<p>2019년 상반기가 지났다.<br>그동안 잘 지냈는지, 어떻게 지내고 있는지 스스로 회고해보고,<br>앞으로 2019년을 어떻게 잘 마무리할 것인지 정리해보려고 한다. </p><hr><hr><a name="1"><h1 id="1-2019-다짐한-것-잘-이루고-있을까"><a href="#1-2019-다짐한-것-잘-이루고-있을까" class="headerlink" title="1. 2019 다짐한 것, 잘 이루고 있을까?"></a>1. 2019 다짐한 것, 잘 이루고 있을까?</h1><p><a href="https://feel5ny.github.io/2019/01/13/Joylog_002">2019 다짐 글 ( 안녕 2018, 안녕 2019 ) ➔</a> </p><hr><a name="1-1"><h2 id="1-1-기본-실력-키우기-10"><a href="#1-1-기본-실력-키우기-10" class="headerlink" title="1.1 기본 실력 키우기 (10%)"></a>1.1 기본 실력 키우기 (10%)</h2><p>2019년 다짐 글을 쓸 당시 <strong>기본 실력을 키우자</strong> 라는 글을 쓸 때의 느낌은.. 참 가벼웠던 거 같다.<br>두루뭉술했고, 구체적이지 않아서, 어쨌든 <code>자바스크립트 공부겠지.</code>, <code>특정 책 하나 더 공부하지</code>라는 정도로만 느꼈었다. 때문에 목표가 구체적이지 않아서, 동기도 강하지 않았다. </p><p> 그런 와중에 회사에서의 상반기 경험으로  <strong>기본 실력의 범위를 다시 한번 정의할 수 있었다.</strong><br>상반기 때는 기본 실력이 왜 중요한지, 구체적으로 느낄 수 있는 여러 가지 사건이 있었다. 프론트엔드 개발자로서의 언어의 기본 지식도 포함되지만, 서비스(어플리케이션)을 만들고 배포하고 유지 보수하는 상황에서 필요한 지식도 기본 실력에 포함시켜야 한다고 생각했고, 그 지식의 더 원론적인 레벨에 있는 내용도 더 많이 공부해야겠다고 생각이 들었다.</p><p>상반기를 가볍게 본다면 자바스크립트의 es6 문법에 대해서 좀 더 공부했고, 실무에서도 활용해보려고 노력했다. 리액트 등의 프레임워크 의존도도 벗어나보려고 스터디도 참여해 보았고, 알고리즘 공부도 조금씩 진행했다. </p><p>이 글의 하반기 다짐 글에는 기본 실력 키우기의 소제목을 구체적으로 정의해서 실천해야겠다.</p><a name="1-2"><h2 id="1-2-디자인-시스템-이해도-높이기-30"><a href="#1-2-디자인-시스템-이해도-높이기-30" class="headerlink" title="1.2 디자인 시스템 이해도 높이기 (30%)"></a>1.2 디자인 시스템 이해도 높이기 (30%)</h2><p>디자인 시스템의 이해도를 높이기 위해서<br>개인적으로는 <strong>코드 레벨에서 구조화</strong>정도까지만 작업이 되었고,<br>외부적으로는 디자인 시스템에 대해서 <strong>사내발표</strong>를 진행했다. </p><img src="/images/2019/17/01.jpg"><p>디자이너와 함께하는 프로젝트에서 효과가 발휘되는 시스템인데, 현재 나의 상황에서는 사내의 프로젝트 정도가 디자인 시스템을 적용할 수 있었다. 이 시스템의 구축은 디자이너와의 협업도 필요한 부분이지만, 사전에 <strong>이 시스템이 개발자들에게 어떤 생산성을 가져다주는지</strong>에 대해서 팀원들에게 먼저 알려줄 필요가 있다고 생각이 들었다.</p><a name="1-3"><h2 id="1-3-포트폴리오-작업하기-0"><a href="#1-3-포트폴리오-작업하기-0" class="headerlink" title="1.3 포트폴리오 작업하기 (0%)"></a>1.3 포트폴리오 작업하기 (0%)</h2><p>개인적인 포트폴리오 작업을 이루지 못했다. </p><!-- <img src="/images/2019/17/03.jpeg"> --><p>너무 무겁게 생각해서 시작을 못한 것도 큰 이유인 것 같다.<br>그래서 이번엔 진짜 가볍게! 어플리케이션 수준 말고, 우선 <strong>게츠비 혹은 hexo 블로그 테마를 만드는 것을 1차 목표</strong>로 다시 잡았다.<br>또 다른 목표는 <strong>회사일과 내 생활의 균형을 맞춰가면서 작은 것 하나라도 만들어보는 것.</strong></p><hr><hr><a name="2"><h1 id="2-2019-상반기-뭘-했을까"><a href="#2-2019-상반기-뭘-했을까" class="headerlink" title="2. 2019 상반기 뭘 했을까"></a>2. 2019 상반기 뭘 했을까</h1><a name="2-1"><h2 id="2-1-👥-외부-활동"><a href="#2-1-👥-외부-활동" class="headerlink" title="2.1  👥 외부 활동"></a>2.1  👥 외부 활동</h2><h3 id="2-1-1-글또-2기-글쓰기-활동"><a href="#2-1-1-글또-2기-글쓰기-활동" class="headerlink" title="2.1.1 글또 2기 (글쓰기 활동)"></a>2.1.1 글또 2기 (글쓰기 활동)</h3><img src="/images/2019/17/04.jpg"><p>작년 11월부터 글또 2기에 참여하고 있었다. 4월에 마무리를 지으면서, 총 17개의 글을 작성하였다. 개수는 큰 의미가 없지만.. 1기에 비해서는 글의 퀄리티나, 글감의 종류는 많이 아쉬운 편이다.<br>나름 그래도 반강제적으로 공부할 수 있도록 만들어준 것에 감사하다. 2주일마다 주말에 컴퓨터 앞에 앉을 수 있도록 도와주는 고마운 모임이다.<br>2기 마무리 때는 케어랩스 본사로 초대 드렸다. 타이밍이 좋지 않아 엘리베이터 공사 중에 모임 날짜가 잡혀서 반강제로 10층까지 계단 운동을 할 수 있도록 만들어드렸다 😂</p><h3 id="2-1-2-코드-스피츠-수업-참여-원론-수업"><a href="#2-1-2-코드-스피츠-수업-참여-원론-수업" class="headerlink" title="2.1.2 코드 스피츠 수업 참여 (원론 수업)"></a>2.1.2 코드 스피츠 수업 참여 (원론 수업)</h3><p>좋아하는 코드 스피츠 강의를 2개 참여했다. </p><ol><li>OOP Design with Game (2월)</li><li>코드골프 알고리즘 (4월)</li></ol><img src="/images/2019/17/06.png"><p>1번 수업이 진짜 재밌었다. 그 당시 어플리케이션에서 역할별로 레이어를 쪼개는 아키텍처에 대해서 적용해 보려고 고민을 많이 하고 있었는데, 고민만큼 의문도 컸었다. 사실 레이어를 쪼개지 않을수록 그 순간의 작업량은 쪼갰을 때보다는 확실히 적고, 단순하기 때문이다. 그런 의문이 들 때 이 수업을 들었는데, <strong>레이어링이 후에 어플리케이션의 복잡도를 낮출 수 있도록 도와준다는 내용을 듣고</strong>, 확신을 얻고 작업할 수 있게 되었다. 물론 자바스크립트로 게임을 만드는 것에도 엄청 재밌었다. </p><p>코드 스피츠 수업은 수업 자체가 너무 알차기 때문에 정리하는 데만 해도 시간이 많이 걸리는 수업이다. 단점이라면, <strong>정리만으로도 마치 공부를 다했다는 착각이 들기 때문에 반드시 배운 내용을 덮어두고 의식적으로 실습을 해봐야지 배운 내용을 리마인드 시키면서 체화시킬 수 있는데</strong>, 정리 이후의 시간에 투자를 많이 못 했던 것 같다. 물론 작년까지만 해도 코드 스피츠 수업 내용 자체를 이해하기위해 많은 노력을 했었어야 했는데,<br>이제는 조금? 작년보다는 받아들이는데 시간이 조금 줄어든 것 같다… <strong>의식적 실습에 더 투자해보자.</strong></p><img src="/images/2019/17/05.jpg"><p>코드골프 수업 때는 사실 이 영역은 배워야 할 부분이 너무 많다는 것이 느껴져서 중도 포기를 하게 되었다. 지식부터 접근할 때의 생각 방법까지.. 이 수업 시간에는 매 순간이 놀라움이었다. (정말 매번 수업 때마다 <code>헐?</code>을 난무)<br>아직까지는 따라가기 버겁다고 생각이 들어서 keep 해 놓았고, 티끌 모아 태산 전략으로 아주 조금씩 공부해 보려고 한다.</p><h3 id="2-1-3-바닐라-JS-온라인-스터디-코드-리뷰-JS"><a href="#2-1-3-바닐라-JS-온라인-스터디-코드-리뷰-JS" class="headerlink" title="2.1.3 바닐라 JS 온라인 스터디 (코드 리뷰, JS)"></a>2.1.3 바닐라 JS 온라인 스터디 (코드 리뷰, JS)</h3><img src="/images/2019/17/07.png"><p>프로그래머스에서 진행하는 바닐라 자바스크립트 스터디에 참여했다. 평소 사내에서는 리액트 위주로 작업을 하기 때문에 따로 사이드 프로젝트를 하지 않는 이상,(사실 사이드 프로젝트에서도 바닐라는 잘 안 쓰게 될 거 같다..) 혹은 코드 스피츠 같은 바닐라 자바스크립트 기반의 수업에 참여하지 않는 이상 바닐라로 실습하는 환경을 만들기 힘들었기 때문에 감을 잃지 않게 수강하게 되었다. 수업방식은 과제의 명세를 다 구현하고, pr을 올리면 서로가 코드 리뷰를 해주는 방식이다. </p><img src="/images/2019/17/08.png"><p>근데 생각보다 코드 리뷰에 대해서 너무 좋은 인상을 얻게 되었다. 사실 솔직하게는 제대로 된 코드 리뷰를 처음 받아본 것 같았다. 이렇게 서로 다른 스타일을 갖고 있는 많은 인원의 코드 리뷰를 받을 수 있다는 것과, 서로 간의 커뮤니케이션 방법에 대해서도 다양하게 접할 수 있어서 협업 시 지녀야 할 스킬에 대해서 배울 수 있었다.</p><h3 id="2-1-4-AWS-워크샵-aws-서비스들-맛보기"><a href="#2-1-4-AWS-워크샵-aws-서비스들-맛보기" class="headerlink" title="2.1.4 AWS 워크샵 (aws 서비스들 맛보기)"></a>2.1.4 AWS 워크샵 (aws 서비스들 맛보기)</h3><p>사실 이 워크샵 때 진행했던 모든 aws 서비스를 전부 이해하진 못했다. 하루 만에 8가지 서비스 맛보기니 ㅎㅎ 뭔가 <strong>aws에는 이렇게나 많은 서비스가 있고, 이 기능을 너희가 써주면 좋을 거 같아!</strong> 느낌의 수업이었다. 수업도 아니고.. 거의 튜토리얼 형 수업이었다. 집에서 몇 번 하면서 아 이런 게 있구나 하는 정도로 복습해 보려고 한다. 간단한 토이 프로젝트에 써보면 재밌을 거 같긴 하다.  </p><h3 id="2-1-5-이상한-모임-번역-실패인가-아닌가"><a href="#2-1-5-이상한-모임-번역-실패인가-아닌가" class="headerlink" title="2.1.5 이상한 모임 번역 (실패인가 아닌가)"></a>2.1.5 이상한 모임 번역 (실패인가 아닌가)</h3><img src="/images/2019/17/09.png" style="width: 100px"><p>이모에서 번역팀을 모집해서 참여했다. 나름 테스트 번역도 통과해서 비개발 번역팀에 속하게 되었고, 첫 번째 번역은 <a href="https://medium.com/s/world-wide-wtf/meaning-without-words-an-emoji-revolution-aadb4bc0266c" target="_blank" rel="noopener">이모지 글</a>에 대한 번역이었다. 하나의 글을 함께 번역하는데, 데드라인을 딱히 정하지 않고 있어서 다른 분들은 아직도 .. 진행 중이다… (뭔가 이 모임은 마무리 지어야겠다..)</p><hr><hr><a name="2-2"><h2 id="2-2-🗣-발표"><a href="#2-2-🗣-발표" class="headerlink" title="2.2  🗣 발표"></a>2.2  🗣 발표</h2><h3 id="2-2-1-사내-발표"><a href="#2-2-1-사내-발표" class="headerlink" title="2.2.1 사내 발표"></a>2.2.1 사내 발표</h3><p>굿닥은 매주 사내 테크톡을 진행한다. 개발자들이 매주 돌아가면서 자유롭게 발표를 하는 형식으로 진행하는데, 상반기 때는 3번의 발표를 진행했다. 대부분이 팀 내에 공유가 되면 좋을 주제들 위주로 진행했다.</p><ol><li>[함께자라기] 책 리뷰 <ul><li>난 어떻게 야생해서 성장해야하는가</li><li>우린 어떻게 함께 성장해 할 수 있는가</li></ul></li><li>디자인 시스템과 웹 프론트엔드<ul><li>디자인 시스템은 무엇인가?</li><li>웹 프론트엔드는 디자인시스템을 프로젝트에 어떻게 녹일 수 있는가</li></ul></li><li>버저닝과 문서화 (feat.Web)<ul><li>버저닝은 전체 프로세스에서 어떤 장점을 줄까</li><li>docs as code 개념으로 문서를 관리하자</li></ul></li></ol><img src="/images/2019/17/12.png">+<img src="/images/2019/17/01.jpg">+<img src="/images/2019/17/13.jpg"><h3 id="2-2-2-외부-발표"><a href="#2-2-2-외부-발표" class="headerlink" title="2.2.2 외부 발표"></a>2.2.2 외부 발표</h3><h4 id="1-실수하며-성장하기"><a href="#1-실수하며-성장하기" class="headerlink" title="1. 실수하며 성장하기"></a>1. 실수하며 성장하기</h4><p>올해 초, 패캠 수료생들의 모임에서 발표를 진행했다. 1년 동안 무엇을 실수했고, 그로 인해서 무엇을 배웠냐에 초점을 맞춰서 발표를 진행했다. 개인적으로 1년을 회고할 수 있어서 좋았다. </p><h4 id="2-기록하며-성장하기"><a href="#2-기록하며-성장하기" class="headerlink" title="2. 기록하며 성장하기"></a>2. 기록하며 성장하기</h4><p>이제 막 커리어를 시작할 분들을 위한 세미나에서 발표 제안이 왔다.<br>제일 도움이 많이 되었던 <code>기록하기</code>에 대해서 발표해보려고 한다. <a href="https://festa.io/events/370" target="_blank" rel="noopener">➔</a></p><img src="/images/2019/17/10.png">+<img src="/images/2019/17/11.jpg"><hr><hr><a name="2-3"><h2 id="2-3-✍️-어떤-글을-썼을까-17"><a href="#2-3-✍️-어떤-글을-썼을까-17" class="headerlink" title="2.3  ✍️ 어떤 글을 썼을까? (17)"></a>2.3  ✍️ 어떤 글을 썼을까? (17)</h2><h3 id="2-3-1-글감-회고"><a href="#2-3-1-글감-회고" class="headerlink" title="2.3.1 글감 회고"></a>2.3.1 글감 회고</h3><ul><li>📚 공부 정리글 13</li><li>개인 글 1</li><li>💡 튜토리얼 글 3</li></ul><p>2기 때 글또를 하면서 작성했던 글의 종류이다. 2기 때 글의 카테고리를 이렇게 정리했었다.</p><ol><li>📚: 공부하자! 내 스타일로 메모</li><li>💡: 작업하다가 삽질해서 내 것이 된 지식을 정리하자.</li><li>🙆: 내가 알고 있는 부분을 정리해보자.</li><li>🏃: 세미나 다녀왔습니다.</li></ol><p>그때 당시에는 “<code>1번 &gt; 2번, 3번</code> 비율로 쓸 예정이다.” 라고 했었는데, 확실히 예상대로 ㅎㅎ 1번을 많이 작성하₩긴 했다. 3번 4번은 아예 작성하지를 못했다. 4번은 상반기에는 딱히.. 세미나가 없었다. 사실 표만 예매하고 가지 않아서 쓸 후기가 없었다. 3번은 약간 여유가 있을 때 쓰게 되곤하는데, 상반기에는 여유가 없었다. 사내에 큰 배포도 있었고, 야근도 종종 하고 이것저것 일을 벌여놔서 그런 게 아닌가 싶다.</p><h3 id="2-3-2-2기-때-생각했던-글의-방향"><a href="#2-3-2-2기-때-생각했던-글의-방향" class="headerlink" title="2.3.2 2기 때 생각했던 글의 방향?"></a>2.3.2 2기 때 생각했던 글의 방향?</h3><img src="/images/2019/17/16.png"><ol><li>확실히 글 쓰는데 스트레스는 받지 않았다.</li><li>책 요약은 2개 작성</li><li>3번은 거의 쓰지 못했다.</li><li>🧐</li></ol><hr><a name="2-4"><h2 id="2-4-👤-개인-공부"><a href="#2-4-👤-개인-공부" class="headerlink" title="2.4  👤 개인 공부"></a>2.4  👤 개인 공부</h2><h3 id="2-4-1-자바스크립트"><a href="#2-4-1-자바스크립트" class="headerlink" title="2.4.1 자바스크립트"></a>2.4.1 자바스크립트</h3><p>사실 상반기에는 자바스크립트 자체 공부는 많이 못 한 거 같다. 물론 수업을 이것저것 듣긴 했지만.. 개인적으로는 이것저것 삽질을 통해 알게 된 깨달음 정도..만 있었던 거 같다. (반성반성)</p><h3 id="2-4-2-아키텍처"><a href="#2-4-2-아키텍처" class="headerlink" title="2.4.2 아키텍처"></a>2.4.2 아키텍처</h3><p>클린 아케텍처에 한때 꽂혔었다. 레거시 코드를 양성하고 싶지 않은 강한 마음으로, 복잡도를 낮출 수 있는 여러 가지 설계 방법에 대해서 고민했었고, 클린 아키텍처에 관심을 갖게 되었다. 기존 알고 있던 아키텍처보다 조금 더 비즈니스 로직을 이상적으로 분리할 수 있었지만, 레이어가 많이 쪼개짐에 따라 관리해야 할 레이어도 많이 생겨난다는 상황은 또 다른 고민을 만들긴 했다.</p><h3 id="2-4-2-삽질하면서-공부"><a href="#2-4-2-삽질하면서-공부" class="headerlink" title="2.4.2 삽질하면서 공부"></a>2.4.2 삽질하면서 공부</h3><ol><li>젠킨스<br>젠킨스를 이것저것 만져보면서 공부하게 되었다. 사실 툴 공부이기 때문에 큰 의미는 없지만 이것저것 재밌게 커스터마이징하면서 배울 수 있었는데, 특히 shell script 배운 게 너무 재밌고 신기했다. git hook에서 precommit시 이것저것 조건문을 걸어서 git의 특정 명령어를 막는다던가, 특정 상황은 제외를 거는 스크립트를 작성하는 부분이 신기했고 재밌었다.</li><li>웹 캐시<br>웹의 캐시구조에 대해서 여러 가지 버그를 통해서 배울 수 있었다. 특정 버그 픽스를 위해서 캐시의 일부분만을 이해했기 때문에 전체 공부를 위해서 네트워크 책을 톺아보려고 한다.</li></ol><hr><hr><p><a name="2-5"></a></p><h2 id="2-5-💁‍-김나영-활동"><a href="#2-5-💁‍-김나영-활동" class="headerlink" title="2.5  💁‍ 김나영 활동"></a>2.5  💁‍ 김나영 활동</h2><h3 id="2-5-1-유튜브"><a href="#2-5-1-유튜브" class="headerlink" title="2.5.1 유튜브..?"></a>2.5.1 유튜브..?</h3><p>남자친구와 유튜브 컨텐츠를 제작해보려고 했다. 계정도 만들고 촬영도 했는데 편집을 아직 못했다. 유투브 콘텐츠는 확실히 자극적인 콘텐츠로 만들어야 하는데, 자극적인 카피를 뽑는 것부터, 생소한 주제라든지, 재밌게 편집해야 하는 부분이라든지, 지금까지 만들었던 콘텐츠들과는 다르게 생각해야 하는 면이 있어서 만들 때부터 고민이다.</p><h3 id="2-5-2-필라테스"><a href="#2-5-2-필라테스" class="headerlink" title="2.5.2 필라테스"></a>2.5.2 필라테스</h3><p>매년 한 해의 다짐 리스트에 있던 운동을 시작해보았다. 체력이 너무 떨어진 것 같아서 시작한 것도 있다.<br>사실 다른 핑계들 때문에 시작하지 못할 수 있었는데, 회사에서 필라테스 하시는 분들의 이야기도 듣고, 주변 지인들의 적극적인 권유로 시작하게 되었다. 2달 반 정도 진행되고 있는데, 선생님이 자세가 괜찮다고 엊그제 말씀해주셔서 기분이 좋은 상태다! 필라테스도 알아야 할 용어가 너무 많아서, 선생님은 단어만 말하면 내가 딱딱 그 자세를 하길 원하시는데, 바로바로 기억해내지 못했다. 몇 번을 그렇게 되니 안되겠다 싶어 한번 정리나 해보자 해서, 요약 그림을 만들었는데, 한두 번하다가 그만뒀다.</p><img src="/images/2019/17/15.jpeg"><img src="/images/2019/17/14.jpeg"><hr><hr><a name="3"><h1 id="3-2019-하반기-뭘-해볼까-목표-설정"><a href="#3-2019-하반기-뭘-해볼까-목표-설정" class="headerlink" title="3. 2019 하반기 뭘 해볼까 (목표 설정)"></a>3. 2019 하반기 뭘 해볼까 (목표 설정)</h1><p>상반기를 회고해보니 공부 비율보다는 딴짓 비율이 높은 것 같다.<br>좀 더 기본 지식 딥한 공부 + 체화하는 실습시간을 갖는 걸 목표로 잡고 계획해봐야겠다.</p><hr><a name="3-1"><h2 id="3-1-👤-개인-공부"><a href="#3-1-👤-개인-공부" class="headerlink" title="3.1 👤 개인 공부"></a>3.1 👤 개인 공부</h2><h3 id="3-1-1-기본-실력-키우기-10"><a href="#3-1-1-기본-실력-키우기-10" class="headerlink" title="3.1.1 기본 실력 키우기 (10%)"></a>3.1.1 기본 실력 키우기 (10%)</h3><ol><li>웹 네트워크<ul><li>장기전으로 가야 하기 때문에 스터디로 진행하려고 한다.</li><li>HTTP 완벽가이드 책을 끝까지 톺아보기</li></ul></li><li>기본 톺아보기<ol><li>구글 웹문서<ul><li>목표: 어플리케이션 개념에서 알아야 할 웹 지식을 배우자</li><li>구글에서 정리한 <a href="https://developers.google.com/web/" target="_blank" rel="noopener">웹 문서</a>를 톺아보기</li></ul></li><li>mdn<ul><li>목표: 기본적으로 내가 편하게 쓰고 있는 api나 method에 대해서 제대로 알자.</li><li>mdn의 기본설명을 확인하면서 쉽게 설명할 수 있는 수준으로 이해하고 공부하려고 한다.</li></ul></li></ol></li></ol><h3 id="3-1-2-디자인-시스템-이해도-높이기-30"><a href="#3-1-2-디자인-시스템-이해도-높이기-30" class="headerlink" title="3.1.2 디자인 시스템 이해도 높이기 (30%)"></a>3.1.2 디자인 시스템 이해도 높이기 (30%)</h3><ol><li>프로젝트 컴포넌트 정리하기<ul><li>프로젝트 컴포넌트의 속성을 좀 더 디자인 속성의 개념으로 카테고리화한다.</li><li>docs as code 개념으로 컴포넌트 문서화를 진행한다. (스토리북)</li></ul></li><li>디자이너와 싱크 맞추기<ul><li>1번이 완료된다는 전제가 필요하다.</li></ul></li></ol><h3 id="3-1-3-포트폴리오-작업하기-0"><a href="#3-1-3-포트폴리오-작업하기-0" class="headerlink" title="3.1.3 포트폴리오 작업하기 (0%)"></a>3.1.3 포트폴리오 작업하기 (0%)</h3><p>맨 처음에 말했던 것처럼 블로그 테마 하나 내보기! 지금까지 블로그 하면서 불편했던 부분을 개선해서 올리려고 한다.</p><a name="3-2"><h2 id="3-2-✍-어떤-글을-쓸까-글감-방향"><a href="#3-2-✍-어떤-글을-쓸까-글감-방향" class="headerlink" title="3.2 ✍ 어떤 글을 쓸까? (글감 방향)"></a>3.2 ✍ 어떤 글을 쓸까? (글감 방향)</h2><ol><li>📚: 공부하자! 내 스타일로 메모</li><li>💡: 작업하다가 삽질해서 내 것이 된 지식을 정리하자.</li><li>🙆: 내가 알고 있는 부분을 정리해보자.</li><li>🏃: 세미나 다녀왔습니다.</li></ol><p>아무래도 <code>1번 &gt; 2번 &gt; 3번, 4번</code> 순으로 작성할 것 같다. 특히 이번 삽질하면서 작성하고 싶은 글이 너무 많아서 2번의 비율이 예전보다 높지 않을까 생각된다.</p><p>우선 이번 기수 때 12개의 글을 기본 작성해야 하니</p><ul><li>1번: 5개</li><li>2번: 3개</li><li>3번: 2개</li><li>4번: 2개</li></ul><p>이렇게 개수는 필수로 두고 작성해보자!</p><a name="3-3"><h2 id="3-3-💁‍-김나영-활동"><a href="#3-3-💁‍-김나영-활동" class="headerlink" title="3.3 💁‍ 김나영 활동"></a>3.3 💁‍ 김나영 활동</h2><ol><li>유튜브 영상 12월 전에 1개 이상 올리기.</li><li>필라테스 복근 운동 시 마지막 버티기 힘들 때 하나 더 해보려고 하기.</li><li>나만의 제대로 쉬는 방법 생각해보기<br>사실 개인의 스트레스는 나 자신뿐만 아니라 주변에도 안 좋은 영향을 끼치는 것 같다. 이번 상반기 때 그런 부분을 많이 느끼면서, 하반기 때는 스트레스를 잘 관리하고, 단기간 동안 최고의 휴식은 어떻게 취할 수 있는지에 대해서 생각해 보기로 했다. 요가든 명상이든 책에서 얻을 수 있는 부분이던, 술로 스트레스를 푸는 방법 말고 나만의 휴식 방법에 대해서 고민해보고 정립하고 싶다.</li></ol></a></a></a></a></a></a></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019년 상반기가 지났다.&lt;br&gt;그동안 잘 지냈는지, 어떻게 지내고 있는지 스스로 회고해보고,&lt;br&gt;앞으로 2019년을 어떻게 잘 마무리할 것인지 정리해보려고 한다. &lt;/p&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;a name=&quot;1&quot;&gt;

&lt;h1 id=&quot;1-2019
      
    
    </summary>
    
      <category term="blog 🙆" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/"/>
    
      <category term="JoyStory" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/JoyStory/"/>
    
    
      <category term="Joy" scheme="http://feel5ny.github.io/tags/Joy/"/>
    
      <category term="blog" scheme="http://feel5ny.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>코드스피츠80_OOP design with game (2)- 2. 모델 (베이스 레이어)</title>
    <link href="http://feel5ny.github.io/2019/03/17/OOP_09_2/"/>
    <id>http://feel5ny.github.io/2019/03/17/OOP_09_2/</id>
    <published>2019-03-17T04:32:40.000Z</published>
    <updated>2019-10-31T13:06:01.466Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>코드스피츠 강의 정리록</p></blockquote><p>생소한 도메인으로 배우는게 좋다.<br>익숙한 도메인들은 익숙한 처리방법으로 처리하기때문에 객체지향을 배우기 어렵다.<br>때문에 80기는 게임을 통해서 진행할 예정.</p><hr><a name="1"><h1 id="1-저번시간의-코드에서-잘못된-점을-찾아보자"><a href="#1-저번시간의-코드에서-잘못된-점을-찾아보자" class="headerlink" title="1. 저번시간의 코드에서 잘못된 점을 찾아보자."></a>1. 저번시간의 코드에서 잘못된 점을 찾아보자.</h1><a name="1-1"><h2 id="1-1-베이스-클래스에-네이티브-지식이-포함되어있다"><a href="#1-1-베이스-클래스에-네이티브-지식이-포함되어있다" class="headerlink" title="1.1 베이스 클래스에 네이티브 지식이 포함되어있다."></a>1.1 베이스 클래스에 네이티브 지식이 포함되어있다.</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Block = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> GET(type = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">5</span>))&#123; <span class="keyword">return</span> <span class="keyword">new</span> Block(type);&#125;</span><br><span class="line">  <span class="keyword">constructor</span>(type) &#123;</span><br><span class="line">    <span class="keyword">this</span>._type = type;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> image()&#123; <span class="keyword">return</span> 👉 <span class="string">`url('img/block<span class="subst">$&#123;<span class="keyword">this</span>._type&#125;</span>.png'`</span>;&#125;</span><br><span class="line">  <span class="keyword">get</span> type()&#123; <span class="keyword">return</span> <span class="keyword">this</span>._type&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>블럭 모델에 네이티브 지식이 들어가있다. (css 지식)</li><li>베이스 레이어에 들어오면 안되는 지식이다.</li></ul><blockquote><p>아키텍처는 코드에 가질 수 있는 역할과 가질 수 없는 역할,<br>  기질 수 있는 책임과 가질수 없는 책임을 명시할 수 있고,<br>  그것으로 코드가 바른지 안바른지 판단하는 기준표가 된다.</p><ul><li>기존 모델에서 지금 아키텍처와 안 맞는 부분을 지목할 수 있다.</li></ul></blockquote><hr><a name="1-2"><h2 id="1-2-통제권을-가진-제왕이-존재한다-1-블럭-위치값의-지식"><a href="#1-2-통제권을-가진-제왕이-존재한다-1-블럭-위치값의-지식" class="headerlink" title="1.2 통제권을 가진 제왕이 존재한다. (1) - 블럭 위치값의 지식"></a>1.2 통제권을 가진 제왕이 존재한다. (1) - 블럭 위치값의 지식</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">👉 <span class="keyword">const</span> data = [];</span><br><span class="line">...</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="params">tid</span> =&gt;</span> &#123;</span><br><span class="line">  table = <span class="built_in">document</span>.querySelector(tid);</span><br><span class="line">  👉 <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line">    <span class="keyword">const</span> r = [];</span><br><span class="line">    data.push(r);</span><br><span class="line">    👉 <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; column; j++) r[j] = Block.GET();</span><br><span class="line">  &#125;</span><br><span class="line">  table.addEventListener(<span class="string">'mousedown'</span>, down);</span><br><span class="line">  table.addEventListener(<span class="string">'mouseup'</span>, up);</span><br><span class="line">  table.addEventListener(<span class="string">'mouseleave'</span>, up);</span><br><span class="line">  table.addEventListener(<span class="string">'mousemove'</span>, move);</span><br><span class="line">  render();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="cf-1-프로시저적인-생각을-한다-를-어디서-알-수-있냐면"><a href="#cf-1-프로시저적인-생각을-한다-를-어디서-알-수-있냐면" class="headerlink" title="cf__1. 프로시저적인 생각을 한다? 를 어디서 알 수 있냐면,"></a>cf__1. 프로시저적인 생각을 한다? 를 어디서 알 수 있냐면,</h4><p>= <strong>모든 연산을 data를 갖고 하려고 한다.</strong></p><ul><li>data가 왕이다. 통제의 왕</li></ul><p>일반적으로 프로시저로 짜면 메모리를 적게 사용하게 된다.</p><ul><li>메모리의 효율성이 높아지고, 연산의 횟수가 줄어든다.</li><li>하지만 모든 복잡성을 본인이 감당해야한다. <ul><li>예를들어 현재는 2차원배열로 작업했지만,<br>요건이 만약 3차원의 개념으로 바뀐다면?<br>3차원배열로 바꿔야하는데 그럼.. 로직을 아예 바꿔야함</li></ul></li></ul><h3 id="블럭의-위치값"><a href="#블럭의-위치값" class="headerlink" title="블럭의 위치값"></a>블럭의 위치값</h3><p>2차원 배열에 들어가는데, 블럭에 X값 Y값이 들어가있나? </p><ul><li>안들어가있음. 실제 객체는(Block) 모르고 있다. </li><li>블럭은 x, y값을 모르는데 자기 스스로 move나 판정을 할 수 있을까?<br>row와 column값은(i와 j) Block의 지식일까? data의 지식일까?</li><li>현재는 data가 통제의 왕이기 때문에 data가 블럭의 판정통제권을 들고 있다.(i, j)</li></ul><p>객체지향은 내 할일이 아니면 위임하는 것이다.</p><ul><li>자기일이 아닌거는 계속 미룬다. 미룰사람이 누군지만 알고 있으면 된다.</li><li>말로만 객체지향이나 역할을 거의 수행할 수 없는 상태.<br>현재 블럭은 x,y에 대한 역할을 수행할 수 없다.</li></ul><hr><a name="1-3"><h2 id="1-3-통제권을-가진-제왕이-존재한다-2-선택된-블럭의-지식"><a href="#1-3-통제권을-가진-제왕이-존재한다-2-선택된-블럭의-지식" class="headerlink" title="1.3 통제권을 가진 제왕이 존재한다. (2) - 선택된 블럭의 지식"></a>1.3 통제권을 가진 제왕이 존재한다. (2) - 선택된 블럭의 지식</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> selected = [], getBlock = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> down = <span class="function">(<span class="params">&#123;pageX: x, pageY: y&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(isDown) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> curr = getBlock(x,y);</span><br><span class="line">  <span class="keyword">if</span>(!curr) <span class="keyword">return</span>;</span><br><span class="line">  isDown = <span class="literal">true</span>;</span><br><span class="line">  👉 selected.length = <span class="number">0</span>; </span><br><span class="line">  👉 selected[<span class="number">0</span>] = startBlock = currBlock = curr;</span><br><span class="line">  render();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> move = <span class="function">(<span class="params">&#123; pageX: x, pageY: y &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!isDown) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> curr = getBlock(x, y);</span><br><span class="line">  <span class="keyword">if</span> (!crr || curr.type !== startBlock.type || !isNext(curr)) <span class="keyword">return</span>;</span><br><span class="line">  👉 <span class="keyword">if</span> (selected.indexOf(curr) == <span class="number">-1</span>) selected.push(curr);</span><br><span class="line">  👉 <span class="keyword">else</span> <span class="keyword">if</span> (selected[selected.length - <span class="number">1</span>] == curr) selected.pop();</span><br><span class="line">  currBlock = curr;</span><br><span class="line">  render();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> up = <span class="function"><span class="params">()</span> =&gt;</span> (👉 selected.length &gt; <span class="number">2</span> ? remove() : reset());</span><br></pre></td></tr></table></figure><ol><li><p>selected를 사방에서 직접 컨트롤하고 있다. </p><ul><li>만약 선택의 조건이 현재 요건과 달라진다면?<br>down, move, up 모두 바꿔야 한다. </li></ul></li><li><p>selected도 블럭이 선택되어있는지 아닌지에 대한 지식이기 때문에<br>Block의 지식이다.</p><ul><li>선택된 그룹도 블럭이 알고 있는 것이고,</li><li>블럭이 블럭 인스턴스끼리 협력하는 코드는 블럭내의 지식이다.</li><li>블럭은 내 형제가 누군지에 대해서 블럭이라는 클래스 지식내에서 해결할 수 있다.</li></ul></li><li><p>우리는 완전히 독립되어있는 어떤 데이터를 바라보고 있는<br>프로시저를 짜서 해결하려고 한다.</p><ul><li>때문에 데이터 구조가 달라지면 다 바꿔야한다.</li></ul></li><li><p>끊임없는 상태에 대한 변화의 책임을<br>블럭이 갖고 있어야한다.</p><ul><li>가장 중요한 권한은 블럭의 type이 아니라<br><strong>끊임없는 상태에 대한 변화의 책임을 블럭이 갖고 있어야한다.</strong> </li><li>상태를 갖고 있으면 관리가 어렵기 때문에 해당 책임을 갖고 있는 객체가 알아서 하게끔 권한을 주는 것.</li><li>현재 코드에서 블럭의 상태는<br>거의 상태가 없는 객체나 마찬가지이다.</li></ul></li></ol><hr><a name="2"><h1 id="2-프로시저를-객체지향으로-바꿔보자"><a href="#2-프로시저를-객체지향으로-바꿔보자" class="headerlink" title="2. 프로시저를 객체지향으로 바꿔보자."></a>2. 프로시저를 객체지향으로 바꿔보자.</h1><a name="2-1"><h2 id="2-1-모델-feat-유틸"><a href="#2-1-모델-feat-유틸" class="headerlink" title="2.1 모델 (feat. 유틸)"></a>2.1 모델 (feat. 유틸)</h2><a name="2-1-1"><h3 id="2-1-1-심플한-책임"><a href="#2-1-1-심플한-책임" class="headerlink" title="2.1.1 심플한 책임"></a>2.1.1 심플한 책임</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Block = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> GET(type = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random() * <span class="number">5</span>))&#123; <span class="keyword">return</span> <span class="keyword">new</span> Block(type);&#125;</span><br><span class="line">  <span class="keyword">constructor</span>(type) &#123;</span><br><span class="line">    <span class="keyword">this</span>._type = type;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> image()&#123; <span class="keyword">return</span> <span class="string">`url('img/block<span class="subst">$&#123;<span class="keyword">this</span>._type&#125;</span>.png'`</span>;&#125;</span><br><span class="line">  <span class="keyword">get</span> type()&#123; <span class="keyword">return</span> <span class="keyword">this</span>._type&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>👇👇👇</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UTIL = &#123;</span><br><span class="line">  el: <span class="function">(<span class="params">v: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">document</span>.querySelector(v),</span><br><span class="line">  prop: <span class="function">(<span class="params">...arg</span>) =&gt;</span> <span class="built_in">Object</span>.assign(...arg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IItem &#123;</span><br><span class="line">  pos: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  select: <span class="function">(<span class="params">item: Item</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  unselect: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Item = <span class="keyword">class</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> GET(<span class="keyword">type</span>: <span class="built_in">number</span>, x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Item(<span class="keyword">type</span>, x, y);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">_type: <span class="built_in">number</span>, _x: <span class="built_in">number</span>, _y: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    prop(<span class="keyword">this</span>, &#123;_type, _x, _y, _selected: <span class="literal">false</span>, _prev: <span class="literal">null</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="keyword">type</span>()&#123; <span class="keyword">return</span> <span class="keyword">this</span>._type; &#125;</span><br><span class="line">  <span class="keyword">get</span> x()&#123; <span class="keyword">return</span> <span class="keyword">this</span>._x; &#125;</span><br><span class="line">  <span class="keyword">get</span> y()&#123; <span class="keyword">return</span> <span class="keyword">this</span>._y; &#125;</span><br><span class="line">  <span class="keyword">get</span> selected()&#123; <span class="keyword">return</span> <span class="keyword">this</span>.selected; &#125;</span><br><span class="line">  <span class="keyword">get</span> prev()&#123; <span class="keyword">return</span> <span class="keyword">this</span>._prev; &#125;</span><br><span class="line"></span><br><span class="line">  pos(x: <span class="built_in">number</span>, y: <span class="built_in">number</span>)&#123; <span class="comment">// 어디로 움직일지</span></span><br><span class="line">    <span class="keyword">this</span>._x = x;</span><br><span class="line">    <span class="keyword">this</span>._y = y;</span><br><span class="line">  &#125;</span><br><span class="line">  select(item: Item)&#123; <span class="comment">// 어떤 아이템에 선택할지?</span></span><br><span class="line">    <span class="keyword">this</span>._selected = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>._prev = item;</span><br><span class="line">  &#125; </span><br><span class="line">  unselect()&#123;</span><br><span class="line">    <span class="keyword">this</span>._selected = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>._prev = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>싱글 노드 링크드 리스트가 완성되었다.</p><ul><li>이전에는 배열로(data) 관리했었는데, 이제는 링크드 리스트로 관리한다.<br>나의 지식은 나와 이전(prev) 정도까지밖에 모르기 때문에</li></ul></li><li><p>item 객체가 이 이상을 알게 되면, 권한 위반이 된다.</p><ul><li>*<em>권한 책임을 축소하면 연산이 많이 일어난다. *</em><br>(연산이 늘어난 부분은 걱정하지 말자.)</li></ul></li><li><p>밖에는 캡슐화 된 메소드로 대화한다.</p><ul><li>블럭 상태는 밖에서 관리하지 않고,</li><li>밖에서는 pos, select, unselect만 알게하자.</li></ul></li></ol><a name="2-1-2"><h3 id="2-1-2-어려운-책임"><a href="#2-1-2-어려운-책임" class="headerlink" title="2.1.2 어려운 책임"></a>2.1.2 어려운 책임</h3><p>좀 더 어려운 책임을 바라보게 하자.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Item = <span class="keyword">class</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  isSelectedList(item: Item)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>._prev) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>._prev === item) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">this</span>._prev.isSelectedList(item) </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  isBorder(item: Item) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">Math</span>.abs(<span class="keyword">this</span>.x - item.x) &lt; <span class="number">2</span>) &amp;&amp;</span><br><span class="line">           (<span class="built_in">Math</span>.abs(<span class="keyword">this</span>.y - item.y) &lt; <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-isSelectedList"><a href="#1-isSelectedList" class="headerlink" title="1. isSelectedList"></a>1. isSelectedList</h4><p>selectedList에 포함되어있냐 아니냐를 판단하는 메소드</p><ul><li>모든 상황이 안되면, 바로 이전의 item에게 물어본다.</li></ul><ul><li>책임 권한을 _prev로 제약하여 메모리와 연산을 교환하였다. (링크드 리스트)</li><li>이 모든 건 자료구조의 일부이다.</li></ul><h5 id="cf-2-객체지향에서-책임의-범위와-자료구조"><a href="#cf-2-객체지향에서-책임의-범위와-자료구조" class="headerlink" title="cf__2. 객체지향에서 책임의 범위와 자료구조"></a>cf__2. 객체지향에서 책임의 범위와 자료구조</h5><ol><li><p>책임 범위를 축소하면 연산을 많이하게 된다.</p><ul><li>타클래스의 메서드를 호출할 경우도 있고,<br>본인의 연결되어있는 클래스를 호출하는 경우가 더 많다.</li></ul></li><li><p>객체지향에서는 기본적으로 배열같은 어그리게이션(집합)을 쓰는 경우가 거의 없다.</p><ul><li>어그리게이션을 쓰면 어그리게이터에 대한 로직을 따로 짜야한다.</li><li>코디네이터를 더 만들기 싫으면 본인 안에 링크드 리스트로 연결하는 수밖에 없다.</li><li>컬렉터를 만드냐 안만드냐는 아키텍처상 중요한 요소이다.</li><li>컬렉터를 추상화하는 것은 굉장히 어려운 것이다.</li><li>통합된 자료구조를 안쓰게 되니까 다 연산으로 되어있는 자료구조를 쓰게 된다.</li></ul></li><li><p>배열을 링크드 리스트로 치환한 것이다.</p></li></ol><ul><li>같은 자료구조임에도 불구하고, 연산으로 메모리로 치환하거나 메모리를 연산으로 치환할 수 있다.<ul><li>연산을 메모리로 치환하면 속도가 빨라진다.<ul><li>메모리를 연산으로 치환하면 좋은 점이<br>하나는 메모리가 절감되는 경우가 생기고,<br>권한을 축소할 수 있는 권한이 생긴다. (프로시저)</li></ul></li><li>자바스크립트의 프로토타입체인은 대표적으로 연산을 통해서 메모리를 줄이는 시스템이다.<br>연산을 통해서 프로토타입 체인에 가져오는 것이다.<br>예전 메모리가 없던(넷스케이프)시절 개발된 자바스크립트.<ul><li>하지만 현대의 크롬브라우저는 속도가 더 중요하기 때문에 모든 프로토타입 체이닝에 잇는 것을 다 copy해서 캐시테이블을 만들어서 거기서 읽는다.<ul><li>더이상 프로토타입 체인 타고 가서 가져오지 않는다. 때문에 크롬에서 자바사크립트가 빠른 이유이다.</li><li>체인을 매번 타고 가는 연산은 귀찮기 때문에</li></ul></li></ul></li></ul></li></ul><blockquote><p>알고리즘의 태반은 자료구조로 되어있고,<br>자료구조의 태반은 다시 또 알고리즘으로 돌아가게 되어있다.<br>항상 메모리와 연산은 교환할 수 있다.</p></blockquote><h4 id="2-isBorder"><a href="#2-isBorder" class="headerlink" title="2. isBorder"></a>2. isBorder</h4><p>나의 인접 셀을 파악하는 것도 나의 권한이다.</p><ul><li>특정 아이템의 x,y가 나의 지식이기 때문에.</li><li>나의 x,y와 아이템의 x,y의 차이를 이용해서 나의 인접 셀인지 아닌지를 알 수 있다.</li></ul><h5 id="cf-3-권한-책임-역할"><a href="#cf-3-권한-책임-역할" class="headerlink" title="cf__3. 권한 + 책임 = 역할"></a>cf__3. <strong>권한 + 책임 = 역할</strong></h5><ol><li><p>우리가 책임을 부여하고 싶으면, 권한을 부여해야한다.<br>두개가 어긋나면 둘중 하나가 깨진다.</p><ul><li>객체지향에서 권한은 은닉화 되어서 내부 상태로 숨고,<br>책임은 표면화되서 외부 메소드를 드러나게 되어있다.<br>메소드는 캡슐화해서 표현된다.<br>ex_ATM기기</li><li>객체지향에서 메소드는 <code>this</code>라는 내부상태의 은닉되어있는 상태를 사용하고 있느냐,<br>추상화가 되어있는, 캡슐화 되어있는 메소드냐가 충족되어야<br>객체지향에서 메소드라고 부른다.</li></ul></li><li><p>얼만큼 캡슐화되어야하는지는 대상에 따라 다르다.</p><ul><li>어느 정도로 캡슐화되어있느냐는 공개 범위에 달려있다.</li><li>현재 Item의 기준은 게임이다. 게임이 이해할 수 있고, 몰라도 되는 기준으로 캡슐화</li><li>그게 내부 인터널에서 사용하는것?</li><li>자기들끼리 쓰는것?</li><li>부모자식간에 쓰는 것?</li></ul></li></ol><blockquote><p>내가 만약 프로그램을 짜서 공개되는 코드도 마지막에 은닉과 캡슐화를 처리하는 단계는 항상 머리속에 짱구를 그려야한다.</p></blockquote></a></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;코드스피츠 강의 정리록&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;생소한 도메인으로 배우는게 좋다.&lt;br&gt;익숙한 도메인들은 익숙한 처리방법으로 처리하기때문에 객체지향을 배우기 어렵다.&lt;br&gt;때문에 80기는 게임을 통해서 진행할 
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2019 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2019-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="OOP" scheme="http://feel5ny.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>코드스피츠80_OOP design with game (2)- 1. 개요</title>
    <link href="http://feel5ny.github.io/2019/03/11/OOP_09_1/"/>
    <id>http://feel5ny.github.io/2019/03/11/OOP_09_1/</id>
    <published>2019-03-11T01:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.737Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>코드스피츠 강의 정리록</p></blockquote><p>생소한 도메인으로 배우는게 좋다.<br>익숙한 도메인들은 익숙한 처리방법으로 처리하기때문에 객체지향을 배우기 어렵다.<br>때문에 80기는 게임을 통해서 진행할 예정.</p><hr><a name="0"><h1 id="0-프로시저-프로그래밍"><a href="#0-프로시저-프로그래밍" class="headerlink" title="0. 프로시저 프로그래밍"></a>0. 프로시저 프로그래밍</h1><blockquote><p>저번시간의 프로시저 프로그래밍 복습</p></blockquote><a name="0-1"><h2 id="프로시저-프로그래밍의-특징"><a href="#프로시저-프로그래밍의-특징" class="headerlink" title="프로시저 프로그래밍의 특징"></a>프로시저 프로그래밍의 특징</h2><ol><li><strong>함수</strong>와 <strong>함수가 처리해야 할 데이터</strong>가 분리되어있고,<br><strong>데이터와 함수가 같이 연동되어야 하지만 프로시저가 작동된다.</strong><br>.프로시저 작동에서는 행위에만 집착하게 된다. (데이터 배열에 무엇을 채웠어 무엇을 비웠어)<br>데이터를 처리했다는 행위에 집중한다.<br>.</li><li>함수형과는 다르게 프로시저들은 가리키고 있는 <strong>데이터</strong>가 있다.<br>프로시저는 <strong>상태</strong>를 지향하며,<br>(유틸리티처럼) 특정 상태를 변화시키는 것에 관심을 둔다.<br>(함수형은 인자로 받거나 지역변수만 사용하는 식으로 데이터를 처리하고 있다.)</li></ol><hr><a name="0-2"><h2 id="프로시저-프로그래밍의-단점"><a href="#프로시저-프로그래밍의-단점" class="headerlink" title="프로시저 프로그래밍의 단점"></a>프로시저 프로그래밍의 단점</h2><ol><li><strong>데이터의 변화</strong>와 <strong>데이터를 처리하는 함수의 변화</strong>가 동시에 이루어지지 않는다.<br>.</li><li>데이터를 조금만 바꾸던지, 처리를 바꾸면<br>데이터가 어긋나게 되고 프로그램 전체가 깨지게 된다.<ul><li>데이터 항목 구성을 변화하거나<br>데이터 자체에 추가적인 내용이나 연결되어있는 데이터를 만드는 일은 흔하다.<br>=&gt; 이런 상황이 생기면 기존의 프로시저가 깨진다.</li><li>우리는 프로시저 프로그래밍에 익숙해져 있다.<br>ex_TDD<br>TDD를 사용하면 무조건 프로시저로 짜게 된다.<br>테스트 메소드 전체는 다 프로시져이다.<ul><li>테스트 메소드가 알 수 없는 외부상태의 것을 테스트하는 함수 <ul><li>: 프로시저</li></ul></li><li>: 객체를 바꾸면 테스트함수가 다 깨짐. 다 바꿔야함.</li><li>테스트 주도 개발을 하려면, 설계를 잘하면 할 수 있다.</li></ul></li></ul></li></ol><ul><li>프로시저로 만들면 어떤 일이 생긴냐면..<br>ex_만약에 폭발형 아이템을 만든다면?<br>=&gt; 프로시저 전체를 다 수정하는 수밖에 없다.<br>=&gt; if를 넣어서 분기하면서 수정하는 수밖에 없다.(모든 함수에 다 들어간다.)<br>=&gt; <strong>if가 추가되는 것이 문제가 아니라 기존의 모든 레거시와의 관계를 재검토해서 들어가야하는데..복잡성을 감당할 수 없다.</strong></li></ul><p>복잡성이 폭발하면 ? =&gt; 버려야합니다.</p><ul><li>프로그래밍의 수명은 복잡성 컨트롤 제어에 실패하면<br>더이상 유지보수할 수 없기 때문에<br>나머지의 모든 프로그래밍 기법들은 복잡성이 더 복잡해지지 않게 하기 위해.</li></ul><a name="0-3"><h2 id="엔트로피-증가법칙-😎😎"><a href="#엔트로피-증가법칙-😎😎" class="headerlink" title="엔트로피 증가법칙 😎😎"></a>엔트로피 증가법칙 😎😎</h2><p>많은 사람들의 요건추가와 변화로 엔트로피가 꾸준히 증가한다.<br>엔트로피를 증가시키는 것을 최대한 둔화시켜야한다.<br>프로그래밍 세계에서 엔트로피가 언제 증가하는지 알아가는 것이 우리 스터디에서 배워야할 것.<br>많은 장치로 엔트로피의 증가를 막을 수있다.<br>아무리 막아도 내년되면 다시 짜야한다.<br>잘못짠 프로그램은 엔트로피가 급격하게 증가해서 빨리 버리게 된다.<br>잘짠 프로그램도 버려야한다.</p><p>엔트로피 증가방향을 컨트롤해서 완화시키고<br>복잡한 환경이나 여러가지 변화상황을 잘 받아들일 수 있는 구조를 짜는것을<br>디자인이라고 하고<br>아키텍처라고 한다.</p><p>엔트로피 증가를 막으려고.</p><hr><a name="0-4"><h2 id="엔트로피-증가를-막자"><a href="#엔트로피-증가를-막자" class="headerlink" title="엔트로피 증가를 막자."></a>엔트로피 증가를 막자.</h2><p>객체지향에서는 어떻게 앤트로피 증가를 막느냐.<br><strong>역할</strong>이라는 것으로 분리해서 막는다.</p><a name="0-4-0"><h3 id="가장-중요한-변화율"><a href="#가장-중요한-변화율" class="headerlink" title="가장 중요한 변화율"></a>가장 중요한 변화율</h3><p>변화율을 기준으로 역할을 분리해서 역할별로 객체들을 만들고 싶은데,<br>그렇게 하기에는 우리가 해결해야 하는 문제가 너무 큰 덩어리로 되어있는 문제라는 것이다.</p><p>사람은 한꺼번에 복잡성 제어를 못 하기 때문에 복잡성 폭발한 프로그램은 버리게 된다.<br>너무 복잡한 것은 분석할 수 없다.<br>복잡한 문제는 나눠서 분석해야지만 분석할 수 있다.</p><p>복잡한 문제를 나눠서 분석하기 위한 도구를 <strong>추상화 도구</strong>라고 한다.<br>(<a href="https://feel5ny.github.io/2018/10/01/OOP_06/#2">다른 글</a>)</p><a name="0-4-1"><h3 id="1-Categorizing"><a href="#1-Categorizing" class="headerlink" title="1. Categorizing"></a>1. Categorizing</h3><p>분류를 통해서 계속 나눠가면<br>상쇄 적인 부분만 하나씩 정복해나가면 전체를 이해할 수 있다는 개념</p><ul><li>단점: 카테고리가 여러 곳에 소속되어있을 때 처리하기가 많다.</li></ul><a name="0-4-2"><h3 id="2-Modeling"><a href="#2-Modeling" class="headerlink" title="2. Modeling"></a>2. Modeling</h3><p>기억해야만 할 것을 정리하면 모델링이 된다.</p><ul><li>없어야 할 데이터는 없어야 한다. 없어야 할 데이터가 있는 것도 오류다.<br>.현재의 모델링이 미래에 유용한 것도 아니고<br>미래를 위해서 현재의 모델링을 함부로 확장하는 것도 아니다.</li><li>모델링의 단점: 유지보수가 힘들다. 현실 세계에서는 모델이 자주 바뀐다<br>ex_학생. =&gt; 학번, 이름,</li></ul><p>데이터에 의존하고 있는 프로시저가 데이터의 변화를 따라갈 수 없기 때문에 프로시저 프로그램들이 에러가 나는 것이다.</p><ul><li>현실 세계에서 모델링을 해야 하고<br>모델링을 다루는 함수들을 강력하게 바인딩시키지 않으면<br>모델의 변화가 프로시저에 충분히 반영되지 않거나<br>프로시저의 변화가 모델에 반영되지 않아 둘이 어긋나서 프로그램이 깨지는 것.</li></ul><a name="0-4-3"><h3 id="3-Grouping"><a href="#3-Grouping" class="headerlink" title="3. Grouping"></a>3. Grouping</h3><p>우리가 필요해서 묶어주는 것</p><ul><li>enum을 사용하면 단일집합을 사용할 수있다.</li><li>class도 집합.<br>클리스의 인스턴스를 만드는 것도 어떤 그룹인지 마킹을 해주는 의미도 있다.<br>단지 그룹핑만을 위해서 마커를 사용할 경우에 클래스나 인터페이스를 마커 클래스나 마커 인터페이스라고 한다.<br>ex_ 페이스북에 해시태그에 ‘맛집’도 집합</li></ul><hr><hr><a name="1"><h1 id="1-레이어-분리-Layering"><a href="#1-레이어-분리-Layering" class="headerlink" title="1. 레이어 분리 (Layering)"></a>1. 레이어 분리 (Layering)</h1><p>(feat. 마틴 파울러의 <strong>앤터 프라이즈 디자인 패턴 책</strong>)레이어라는 방법을 사용한다.<br>레이어는 일종에 카테고라이즈에 가깝다. </p><p>먼저 크게 분리한다.<br>client ←→ server<br>presentation ←→ doman ←→ data source</p><ul><li>domain: 도메인 로직</li><li>data source: 저장하는 로직</li><li>presentation: 도메인을 표현하는 로직 (앱, 웹,..)</li></ul><img src="/images/2019/14/01.png">1. 레이어는 계층적이다. 레이어들간에는 호환되지 않는다! 층을 정확하게 나눠야한다.2. 기저레이어는 추상레이어를 모른다.  **추상레이어**    - 기저레이어를 사용하는 레이어    - 기저레이어에 대한 지식을 알고 있는 레이어    - OOP에 대입하면       **기저레이어: 부모클래스      추상레이어: 자식클래스**    - 자식이 부모를 알고 있다. 부모는 자식을 모른다.3. 레이어안에 다수의 역할이 소속된다.  레이어안에는 다수의 역할이나 다수의 역할을 수행하는 인스턴스들이 소속된다.<p>레이어안에는 레이어의 전체적인 레이어 가이드들을 지키고 있는 수많은 레이어들이 존제한다.</p><hr><p>인메모리에서 레이어를 나누어보자.<br>레이어를 나누는 눈이 필요하다.</p><ol><li>(함수형) 유틸리티<br>함수와 메소드의 차이는 this를 쓰냐안쓰냐.<br>OOP에는 기저 인터페이스나 기저 클래스도 유틸리티로 분류하기도 한다.</li><li>베이스 클래스</li><li>구상 클래스</li><li>호스트코드</li></ol><p>게임의 실체는 어디일까?<br>실체는 호스트 코드.</p><ul><li>구상 클래스, 베이스 클래스에 로직이 있고, 호스트코드는 사용하는 입장이다.</li><li>진짜로 일하는 애는 호스트코드</li><li>호스트코드부터 짜는 것이 좋다. 반대로 짜게 되면 사용하지 않을 것들도 만들게 됨.</li></ul><p>수업 시간에는 아키텍처를 공부하기 위해 반대로 짜볼 것이다.</p><hr><img src="/images/2019/14/02.png"><a name="1-0"><h3 id="0-유틸리티"><a href="#0-유틸리티" class="headerlink" title="0. 유틸리티"></a>0. 유틸리티</h3><p>함수 호출 하는 방식으로 다른 레이어와 소통한다. 모든 레이어와 소통.</p><a name="1-1"><h3 id="1-베이스-클래스"><a href="#1-베이스-클래스" class="headerlink" title="1. 베이스 클래스"></a>1. 베이스 클래스</h3><p>베이스 클래스와 구상 클래스의 관계는 상속되거나 소유된다.</p><hr><a name="1-1-1"><h4 id="1-1-기반이-되는-3가지-클래스"><a href="#1-1-기반이-되는-3가지-클래스" class="headerlink" title="1.1 기반이 되는 3가지 클래스"></a>1.1 기반이 되는 3가지 클래스</h4><ol><li>모델<br>모델링 한 것, 게임 자체를 모델링한 데이터가 존재함. (entity)</li><li>뷰모델을 그림 그릴 수 있는 로직</li><li>컨트롤러<br>뷰와 대화하거나 해당 모델을 처리할 수 있는 로직이 한꺼번에 들어있음<ul><li>컨트롤러가 여러 개의 모델을 소유하게 될 것이다.</li></ul></li></ol><p>뷰가 인터렉션을 할 때 컨트롤러에게 위임하는데<br>컨트롤러에게 뷰의 책임을 위임하지 않을 것이다.<br>뷰가 컨트롤러에 그냥 위임하게 되면 컨트롤러에 뷰의 사정이 들어가게 된다.<br>(네이티브 분리가 안 된다. ex_ dom을 컨트롤하는 로직 등등..)</p><ul><li><strong>mvc패턴을 날로쓰면 컨트롤러가 반드시 특정 뷰와 강력한 바인딩이 되어서 뷰를 교체할 수 없다.</strong></li><li>강력한 바인딩을 해제하기 위해서는<br>컨트롤러에게는 <strong>순수한 데이터 관련된 요청만 시켜야하고</strong><br>나머지 인터렉션은 뷰가 가져갸아한다.<ul><li>mvp나, mvvm을 쓰면된다.</li></ul></li><li>view에서는 인터렉션 1차 처리를 한다. event listener같은 로직을 넣고,</li><li>컨트롤러에는 순수한 데이터만 보낼 것</li></ul><hr><a name="1-1-2"><h4 id="1-2-뷰와-컨트롤러-사이의-버퍼-메세지"><a href="#1-2-뷰와-컨트롤러-사이의-버퍼-메세지" class="headerlink" title="1.2 뷰와 컨트롤러 사이의 버퍼 = 메세지"></a>1.2 뷰와 컨트롤러 사이의 버퍼 = 메세지</h4><ul><li>뷰가 컨트롤러와 직접 대화하게 되면 뷰의 네이티브 지식을 알아야한다.<br>이것을 방지하기 위해 버퍼를 하나 둔다. (메세지)</li><li>컨트롤러는 메세지만 바라보고 있고,<br>뷰도 메세지만 바라보면서<br>메세지로만 통신한다.</li></ul><p><strong>why?</strong></p><ul><li>네이티브 요소를 완전히 제거해서<br>컨트롤러도 인메모리 객체를,<br>뷰도 인메모리 객체를 바라보게 하기 위해서 중간에 메세지라는 매개체를 둔다.</li></ul><p><strong>메세지는 중립적인 역할</strong></p><ul><li>메세지는 중립적인 역할이자, 인메모리 객체이다.<br>네이티브 지식이 전혀 없다.</li><li>컨트롤러는 이 메세지를 받아들여서 모델과 매핑을 시켜야하고,<br>뷰는 메세지를 받아들여서 네이트브 객체와 매핑을 시켜야한다.</li></ul><hr><a name="1-1-3"><h4 id="1-3-서브-뷰"><a href="#1-3-서브-뷰" class="headerlink" title="1.3 서브 뷰"></a>1.3 서브 뷰</h4><p>뷰도 혼자서 전부 처리하기에 힘들기때문에<br>서브뷰를 만들어서 그림그리는 체계를 나눠준다.  </p><blockquote><p>최종적으로 만들 것은 구상서브뷰와 구상모델을 만들게 된다.</p></blockquote><ul><li>서브뷰의 구상서브뷰와 뷰의 구상뷰를 만들 것이다.<ul><li>구상서브뷰는 <code>div</code>가 될 것이고</li><li>구상뷰는 <code>section</code>뷰가 될 것이다.</li></ul></li><li>모델은 아직 서브 모델이 필요없다.<br>( 블럭의 다른 종류를 만들지 않음._ 추후 폭탄만들때는 필요 )</li></ul><hr><p>베이스 클래스 까지는 인메모리 객체이다.<br>네이티브 지식이 하나도 나오지 않는다. 구상 클래스만 네이티브 지식을 갖게 된다.</p><ul><li>네이티브 지식은 횡으로도 분리하지만 종으로도 분리하게 되는데 이를 레이어링이라고 했다. </li><li>우리가 레이어링을 한 이유는 베이스 클래스에는 순수한 인메모리 객체만 두고, 구상클래스에 네이티브 지식을 두게 하기 위함이다.</li></ul><hr><hr><a name="1-2"><h3 id="2-구상클래스"><a href="#2-구상클래스" class="headerlink" title="2. 구상클래스"></a>2. 구상클래스</h3><ul><li>호스트 클래스는 구상클래스를 인스턴스화 하여 사용한다. </li></ul><ol><li>구상모델</li><li><del>구상컨트롤러</del><ul><li>Game이 바로 컨트롤러 역할을 수행하고 있음</li><li>게임에 있는 하나하나의 블럭이 모델.</li><li>게임이라는 컨트롤러 하나만 있으면 되기 때문에 굳이 없어도됨.</li></ul></li><li>구상뷰</li></ol><hr><hr><a name="1-3"><h3 id="3-호스트코드"><a href="#3-호스트코드" class="headerlink" title="3. 호스트코드"></a>3. 호스트코드</h3><ul><li>구상컨트롤러 생성 및 초기화 </li></ul></a></a></a></a></a></a></a></a></a></a></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;코드스피츠 강의 정리록&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;생소한 도메인으로 배우는게 좋다.&lt;br&gt;익숙한 도메인들은 익숙한 처리방법으로 처리하기때문에 객체지향을 배우기 어렵다.&lt;br&gt;때문에 80기는 게임을 통해서 진행할 
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2019 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2019-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="OOP" scheme="http://feel5ny.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Mac 환경에서 IE디버깅하기. (virtualBox 사용)</title>
    <link href="http://feel5ny.github.io/2019/03/10/debug_01/"/>
    <id>http://feel5ny.github.io/2019/03/10/debug_01/</id>
    <published>2019-03-10T01:20:19.000Z</published>
    <updated>2019-03-10T08:00:13.892Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>개인 삽질 정리록<br>개인이 접한 문제를 해결했던 경험을 바탕으로 적은 글이므로,<br>오류가 있는 부분은 댓글로 부탁드립니다 </p></blockquote><p>맥OS에서 프론트 개발을 하면 종종 IE 디버깅을 해야할때가 있다. ( <del>버리고 싶은 IE 🌎</del> )<br>virtual박스나 가상머신 파일 다운로드 시간이 걸리므로 미리미리 셋팅해두면 좋다.</p><p>여러가지 다른 솔루션이 있겠지만 ( Hyper-V, VirtualBox, Parallels ),<br>이번 글에서는 오라클에서 제공하는 <code>버추얼박스</code>를 활용하여<br>IE 디버깅을 하는 방법에 대해서 간단하게 적어보려고한다.<br>튜토리얼성 글이다.</p><hr><h3 id="TL-DR-짧은-설명"><a href="#TL-DR-짧은-설명" class="headerlink" title="TL;DR 짧은 설명"></a>TL;DR 짧은 설명</h3><ol><li>virtual박스 설치, windowOS 설치</li><li>가상머신 ip주소로 접근</li><li>끝</li></ol><hr><p><a name="1"></a></p><h2 id="1-virtual박스-설치-windowOS-설치"><a href="#1-virtual박스-설치-windowOS-설치" class="headerlink" title="1. virtual박스 설치, windowOS 설치"></a>1. virtual박스 설치, windowOS 설치</h2><p>virtual박스는 오라클에서 만든 가상머신 솔루션이다.</p><h3 id="1-1-virtual-machine이란"><a href="#1-1-virtual-machine이란" class="headerlink" title="1.1 virtual machine이란?"></a>1.1 virtual machine이란?</h3><p>하드웨어를 소프트웨어적으로 구현해서<br>그 위에서 운영체제가 작동하도록하는 기술이다. (<a href="https://opentutorials.org/course/173" target="_blank" rel="noopener">출처</a>)</p><hr><h3 id="1-2-virtualBox-설치-windowOS-설치"><a href="#1-2-virtualBox-설치-windowOS-설치" class="headerlink" title="1.2 virtualBox 설치, windowOS 설치"></a>1.2 virtualBox 설치, windowOS 설치</h3><p>설치는 간단하다 -! 시간만 걸릴뿐..</p><h4 id="1-2-1-버추얼박스-설치-링크"><a href="#1-2-1-버추얼박스-설치-링크" class="headerlink" title="1.2.1 버추얼박스 설치 (링크)"></a>1.2.1 버추얼박스 설치 (<a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">링크</a>)</h4><img src="/images/2019/13/01.png"><ul><li>본인의 OS에 맞는 것을 설치하면 된다.</li><li>우리는 mac에서 개발하고 있으니 OS X hosts</li></ul><h4 id="1-2-2-버추얼머신-설치-링크"><a href="#1-2-2-버추얼머신-설치-링크" class="headerlink" title="1.2.2 버추얼머신 설치 (링크)"></a>1.2.2 버추얼머신 설치 (<a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/" target="_blank" rel="noopener">링크</a>)</h4><img src="/images/2019/13/02.png"><ul><li>원하는 가상머신 다운로드 후 설치한다.</li><li>다운로드 파일 실행시키면 자동으로 셋팅이 된다.</li></ul><hr><p><a name="2"></a></p><h2 id="2-가상머신-ip주소-확인"><a href="#2-가상머신-ip주소-확인" class="headerlink" title="2. 가상머신 ip주소 확인"></a>2. 가상머신 ip주소 확인</h2><p>가상머신이 실행되고 우리가 설치한 windowOS가 실행된다.</p><img src="/images/2019/13/03.png"><h3 id="ip주소를-파악한다"><a href="#ip주소를-파악한다" class="headerlink" title="ip주소를 파악한다."></a>ip주소를 파악한다.</h3><p>터미널에서(command prompt) <code>ipconfig</code>를 입력하면 정보가 나온다.<br><code>Default GateWay</code>의 ip주소를 localhost처럼 사용하면 된다.</p><h3 id="끝"><a href="#끝" class="headerlink" title="끝.."></a>끝..</h3><p>단점: 느리닷!</p><img src="/images/2019/13/04.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;개인 삽질 정리록&lt;br&gt;개인이 접한 문제를 해결했던 경험을 바탕으로 적은 글이므로,&lt;br&gt;오류가 있는 부분은 댓글로 부탁드립니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;맥OS에서 프론트 개발을 하면 종종 IE 디버깅을 해야
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="0_DevLog 👻" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/0-DevLog-%F0%9F%91%BB/"/>
    
    
      <category term="web" scheme="http://feel5ny.github.io/tags/web/"/>
    
      <category term="debug" scheme="http://feel5ny.github.io/tags/debug/"/>
    
      <category term="IE" scheme="http://feel5ny.github.io/tags/IE/"/>
    
  </entry>
  
  <entry>
    <title>코드스피츠80_OOP design with game (1)- 2. OOAD &amp; 프로시저 P</title>
    <link href="http://feel5ny.github.io/2019/02/23/OOP_08_2/"/>
    <id>http://feel5ny.github.io/2019/02/23/OOP_08_2/</id>
    <published>2019-02-23T01:20:19.000Z</published>
    <updated>2019-11-10T14:36:12.091Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>코드스피츠 강의 정리록</p></blockquote><p>생소한 도메인으로 배우는게 좋다.<br>익숙한 도메인들은 익숙한 처리방법으로 처리하기때문에 객체지향을 배우기 어렵다.<br>때문에 80기는 게임을 통해서 진행할 예정.</p><hr><p>객체지향 프로그래밍을 배우기 전,<br><strong>프로시저 프로그래밍</strong> 형태의 코드를 알아본다.</p><p><a name="2"></a></p><h1 id="2-게임-개요-및-규칙"><a href="#2-게임-개요-및-규칙" class="headerlink" title="2. 게임 개요 및 규칙"></a>2. 게임 개요 및 규칙</h1><img src="/images/2019/12/01.png"><p><a name="2-1"></a></p><h2 id="2-1-앤티티-파악"><a href="#2-1-앤티티-파악" class="headerlink" title="2.1 앤티티 파악"></a>2.1 앤티티 파악</h2><p>아키텍트나 디자인패턴을 만드는 설계자들은<br>현상을 보고, 현상으로부터 프로그램 엔티티를 도출해서 설계를 들어간다.</p><ul><li><p>블럭에는 타입이 있구나.</p></li><li><p>블럭 connect의 최저 갯수 제한이 있겠구나.</p></li><li><p>스테이지의 가로 세로 갯수</p></li><li><p>선택했던 블럭들을 돌아갈 수 있다.</p></li><li><p>새로운 블록이 떨어진다.</p><blockquote><p>인지과학<br>  가상세계임에도 불구하고 물리력가 중력을 기대한다 ㅋ</p></blockquote></li></ul><p><a name="2-2"></a></p><h2 id="2-2-규칙"><a href="#2-2-규칙" class="headerlink" title="2.2 규칙"></a>2.2 규칙</h2><p><a name="2-2-1"></a></p><h3 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h3><ul><li>블럭타입: 5가지 (0,1,2,3,4)</li><li>cell size: 8*8</li></ul><p><a name="2-2-2"></a></p><h3 id="Core-Action"><a href="#Core-Action" class="headerlink" title="Core Action"></a>Core Action</h3><img src="/images/2019/12/02.png"><ol><li>한번에 3개 이상 같은 색으로 인접한 블록이 선택되면 </li><li>삭제됨</li><li>삭제되면 위의 블록이 내려옴.</li><li>내려온 뒤</li><li>공간의 블록이 생성되어 채워짐</li></ol><blockquote><p>cf__1 <strong>게임이야기</strong> ~모바일시대에서는 복잡한 core action이 많이 들어간 게임은 상품성이 없다. (안좋은 예: 와우)<br>core action이 단순한 게임이 상품성이 좋다. 최근 rpg게임들은 단순하게 변했다. 한붓그리기도 이미 오래전에 누가 찾아낸 코어액션중에 하나이다. 재밌는 반복거리를 찾아내면 벗어나려고 하지 않는다.</p></blockquote><hr><hr><p><a name="3"></a></p><h1 id="3-어디서부터-시작할까"><a href="#3-어디서부터-시작할까" class="headerlink" title="3. 어디서부터 시작할까?"></a>3. 어디서부터 시작할까?</h1><h2 id="프로그램의-핵심은-데이터"><a href="#프로그램의-핵심은-데이터" class="headerlink" title="프로그램의 핵심은 데이터"></a>프로그램의 핵심은 데이터</h2><p>사람은 표면적인 것만 파악하려고 한다.</p><ul><li>표면적인 것과 시각적인 것</li><li>경험에 의존에 의해서 파악하기 때문에 경험한 것만 보인다.</li></ul><p>프로그램의 핵심은 데이터이다.</p><ul><li>거의 대부분의 프로그램들은 다 예쁜 데이터 view.</li><li>개발자의 눈으로 보면 프로그램의 핵심은 데이터이다. </li></ul><h2 id="entity의-종류를-미리-파악하자-👀"><a href="#entity의-종류를-미리-파악하자-👀" class="headerlink" title="entity의 종류를 미리 파악하자. 👀"></a>entity의 종류를 미리 파악하자. 👀</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">column = <span class="number">8</span>;</span><br><span class="line">row = <span class="number">8</span>;</span><br><span class="line">blockTypes = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">Block = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;&#125;;</span><br><span class="line">  isNext()&#123;&#125;;</span><br><span class="line">  isValid()&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="현실세계-entity에는-이-3가지-이외에는-발견하기-힘들다"><a href="#현실세계-entity에는-이-3가지-이외에는-발견하기-힘들다" class="headerlink" title="현실세계 entity에는 이 3가지 이외에는 발견하기 힘들다."></a>현실세계 entity에는 이 3가지 이외에는 발견하기 힘들다.</h3><ol><li>스칼라 값<ul><li>설정에 따라 자유롭게 크기를 변경할 수 있음.</li><li>단일 값 </li><li>가변적</li><li>(한번에 하나의 값만 보유할 수 있는 원자량 <a href="https://ko.wikipedia.org/wiki/%EC%8A%A4%EC%B9%BC%EB%9D%BC" target="_blank" rel="noopener">from wiki</a>)</li></ul></li><li>정의값<ul><li>미리 정해진 타입이 존재한다.</li><li>bolckTypes는 콜렉션 개념이 아니다.<br>집합을 정의한 개념이다. 하나의 값인것처럼.</li></ul></li><li>객체값<ul><li>생성되거나 삭제되고, 연결되거나 조건을 파악한다.</li><li>블록을 객체로 보는 이유는 <strong>블록이 자신만의 책임을 위임할 수 있기 때문</strong>이다.<ul><li>다음번에 올 수 있는 블록이니?</li><li>올바른 위치인 상태이니?</li><li>자신의 상태를 은닉하고 캡슐화</li></ul></li><li>블록에는 자신만의 책임을 가질 수 있기 때문에 객체로 평가하게 된다.</li></ul></li></ol><blockquote><p>UML을 깊이 공부하면 5가지 종류의 여러가지 entity과 관계가 나온다.</p></blockquote><hr><h3 id="cf-2-클래스이냐-싱글톤-객체이냐-를-항상-고민한다"><a href="#cf-2-클래스이냐-싱글톤-객체이냐-를-항상-고민한다" class="headerlink" title="cf__2. 클래스이냐? 싱글톤 객체이냐?를 항상 고민한다."></a>cf__2. 클래스이냐? 싱글톤 객체이냐?를 항상 고민한다.</h3><blockquote><p>싱글톤 객체<br>  애플리케이션이 시작될 때 어떤 클래스가 최초 한번만 메모리를 할당하고(Static) 그 메모리에 인스턴스를 만들어 사용하는 디자인패턴.<br>  생성자가 여러 차례 호출되더라도 실제로 생성되는 객체는 하나고<br>  최초 생성 이후에 호출된 생성자는 최초에 생성한 객체를 반환한다.<br>  싱글톤 패턴은 단 하나의 인스턴스를 생성해 사용하는 디자인 패턴이다.</p></blockquote><ul><li>객체는 하나만 있거나 여러개 있다.<br>하나만 있는 것인지 여러개 있는 것인지 파악해야한다.</li><li>하나만 있는데 클래스로 정의하거나<br>여러개 있는 것인데 객체로 만들면 반드시 고우투헬..<ul><li>여러개 있는 것을 개별적으로 만들면,<br>여러개 있는 애들은 보통 변화를 한꺼번에 일으켜야하는데<br>개별적으로 만들었기 때문에 한꺼번에 수정할 수 없게 된다. </li><li>하나만 있어야 하는데 클래스로 만들면<br>인스턴스가 여러개 생길 수 있다.</li></ul></li></ul><hr><hr><p><a name="3-1"></a></p><h2 id="3-1-객체-Block"><a href="#3-1-객체-Block" class="headerlink" title="3.1 [객체] Block"></a>3.1 [객체] Block</h2><ol><li>클래스? 혹은 싱글톤 객체?<ul><li>블록은 여러개 생성되므로 <strong>클래스</strong></li></ul></li><li>책임</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Block = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(type)&#123;</span><br><span class="line">    <span class="keyword">this</span>._type = type;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> image()&#123;<span class="keyword">return</span> <span class="string">`url('img/<span class="subst">$&#123;<span class="keyword">this</span>._type&#125;</span>.png')`</span>;&#125;</span><br><span class="line">  <span class="keyword">get</span> type()&#123;<span class="keyword">return</span> <span class="keyword">this</span>._type;&#125;</span><br><span class="line">&#125;</span><br><span class="line">Block.GET = <span class="function">(<span class="params">type = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random(</span>)*5)) =&gt;</span> <span class="keyword">new</span> Block(type);</span><br></pre></td></tr></table></figure><ol><li>자신만의 <strong>타입</strong>을 갖는다.<ul><li><code>parseInt(Math.random()*5)</code>: 0 ~ 4 사이의 타입을 얻게됨</li><li><strong>인자에 초기화 코드를 명시해주면<br>선언과 코드의 내용을 분리할 수 있어서 가독성이 좋아진다.</strong></li></ul></li><li>타입에 따른 <strong>이미지 경로</strong>를 반환한다.<br>(타입에 따른 블록 이미지가 다르니까.. )</li></ol><h3 id="왜-factory-함수로-Block-GET"><a href="#왜-factory-함수로-Block-GET" class="headerlink" title="왜 factory 함수로? (Block.GET)"></a>왜 factory 함수로? (<code>Block.GET</code>)</h3><ul><li>Block 클래스는 <strong>받아온 type을 자기 타입으로 기억하는데</strong>만 관심 있다. </li><li>타입을 전달하지 않았을 때 어떻게 만드는지는<br><strong>엄밀하게 따지면 블럭의 지식은 아니다.</strong><ul><li>블럭을 만드는 쪽이 관심 있다.<ul><li>만드는 쪽이 관심있는 것과<br>만들어 지는 쪽이 관심있는 것이 다르다. </li></ul></li><li>랜덤함수는 팩토리 함수가 가져야할 지식이다.</li></ul></li></ul><h3 id="팩토리-함수는-클래스-내부로-가면-안된다"><a href="#팩토리-함수는-클래스-내부로-가면-안된다" class="headerlink" title="팩토리 함수는 클래스 내부로 가면 안된다."></a>팩토리 함수는 클래스 내부로 가면 안된다.</h3><ul><li><strong>변화율</strong>때문에!</li><li>타입은 stage마다 바뀔꺼고, 아이템 추가되면 더 바뀔 것이다.</li><li>타입은 변화율이 높은 개념이므로 클래스와 분리하여 명확한 의도를 작성하게 한다.</li></ul><blockquote><p><strong>변화율을 평가하는 가장 쉬운 방법</strong><br>  변화율을 잘 디자인 했으면 책임이 없다고 생각됬던 객체는 수정되지 않아야한다.<br>  우리의 목표는 보다 더 많은 파일을 안건드리고<br>  <strong>일부파일만 건드려야한다.</strong></p></blockquote><hr><h4 id="cf-3-Factory-함수"><a href="#cf-3-Factory-함수" class="headerlink" title="cf__3. Factory 함수"></a>cf__3. Factory 함수</h4><p>객체지향할 때 클래스를 사용하는 경우 생성자를 봉인하자.<br><strong>factory함수로 클래스를 얻어가게 하자.</strong></p><ul><li><code>static</code> 키워드 써서 불러오게 해도됨.</li><li>factory 함수의 명칭은 일관되게 모든 클래스에 생성자를 대신하는 스태틱 함수를 만들자.<br>(예제에서는 <code>GET</code>)<blockquote><p>팩토리 함수 : 객체를 반환하는 함수</p></blockquote></li></ul><hr><h4 id="cf-4-단일-책임원칙-훈련하기"><a href="#cf-4-단일-책임원칙-훈련하기" class="headerlink" title="cf__4. 단일 책임원칙 훈련하기"></a>cf__4. <strong>단일 책임원칙 훈련하기</strong></h4><p>단일 책임원칙은 엄밀하게 지키려면 굉장히 어렵고,<br>섬세하게 바라보는 눈으로<br>언제나 의심해서 관리하지 않으면 실력..키워지지 않는다.<br>(빠르면 3년 늦으면 5년..ㅎ)</p><hr><p><a name="3-2"></a></p><h2 id="3-2-객체-Game"><a href="#3-2-객체-Game" class="headerlink" title="3.2 [객체] Game"></a>3.2 [객체] Game</h2><p>게임이라는 객체는 블록들을 소유하는 마스터 객체</p><ol><li><p>클래스이냐? 싱글톤 객체이냐?<br>게임은 하나의 객체만 있으면 된다. (바둑판 하나.)<br>구지 클래스로 선언하지 않고, 싱글톤 객체로 만든다.<br>=&gt; 싱글톤 객체</p></li><li><p>책임<br>2번과 3번은 내부에서만 알면된다.</p><ol><li>초기화<br>필요한 정보를 바탕으로 게임 본체를 생성</li><li>렌더링<br>그림 갱신</li><li>이벤트 걸기<br>각 블록에서 이벤트를 처리</li></ol></li><li><p>외부에서 게임의 어떤 상태만 알면 될까?</p><ul><li>게임 초기화<br>함수만 하나 노출하면 됨</li></ul></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 게임은 초기화된 게임이 바로 생성되어야 하므로, 즉시실행함수로.</span></span><br><span class="line"><span class="keyword">const</span> Game = (<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> init = ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> init;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><hr><p><a name="4"></a></p><h1 id="4-Game-시나리오"><a href="#4-Game-시나리오" class="headerlink" title="4. Game 시나리오"></a>4. Game 시나리오</h1><ol><li>테이블 형태 정의</li><li>테이블 생성</li><li>테이블 내에 블록 데이터 채우기 (data)<br>2차원배열을 만들어야하기때문에<br>row와 column을 돌면서 생성한다.</li><li>렌더링<ul><li>data는 inMemory 객체</li><li>render를 따로 호출하는 것은 네이티브 객체이기때문에(dom의 세상..)</li></ul></li><li>렌더링 전 table에 이벤트 걸기.</li></ol><hr><p><a name="4-1"></a></p><h3 id="1-2-3-객체-스칼라값-정의값-테이블-데이터-정의"><a href="#1-2-3-객체-스칼라값-정의값-테이블-데이터-정의" class="headerlink" title="1. + 2. + 3. [객체, 스칼라값, 정의값] 테이블 데이터 정의"></a>1. + 2. + 3. [객체, 스칼라값, 정의값] 테이블 데이터 정의</h3><ol><li>테이블 형태 정의</li><li>테이블 생성</li><li>테이블 내에 블록 데이터 채우기 (data)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Game = (<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> column = <span class="number">8</span>, row = <span class="number">8</span>, blockSize = <span class="number">80</span>;</span><br><span class="line">  <span class="keyword">const</span> data = [];</span><br><span class="line">  <span class="keyword">let</span> table;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> init = <span class="function"><span class="params">tid</span> =&gt;</span> &#123;</span><br><span class="line">    table = <span class="built_in">document</span>.querySelector(tid);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line">      <span class="keyword">const</span> r = [];</span><br><span class="line">      data.push(r);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; column; j++) r[j] = Block.GET();</span><br><span class="line">    &#125;</span><br><span class="line">    render();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> render = <span class="function"><span class="params">_</span> =&gt;</span> &#123;...&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><p><a name="4-4"></a></p><h3 id="4-렌더링"><a href="#4-렌더링" class="headerlink" title="4. 렌더링"></a>4. 렌더링</h3><p>데이터를 소비해서<br>표를 다시 그려주는 로직.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Game = (<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> column = <span class="number">8</span>, row = <span class="number">8</span>, blockSize = <span class="number">80</span>;</span><br><span class="line">  <span class="keyword">const</span> data = [];</span><br><span class="line">  <span class="keyword">let</span> table;</span><br><span class="line">  <span class="keyword">const</span> init = <span class="function"><span class="params">tid</span> =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    render();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">///</span></span><br><span class="line">  👇👇👇</span><br><span class="line">  <span class="keyword">const</span> el = <span class="function"><span class="params">tag</span> =&gt;</span> <span class="built_in">document</span>.createElement(tag);</span><br><span class="line">  <span class="keyword">const</span> render = <span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">    table.innerHTML = <span class="string">''</span>;</span><br><span class="line">    data.forEach(<span class="function"><span class="params">row</span> =&gt;</span> table.appendChild(</span><br><span class="line">      row.reduce(<span class="function">(<span class="params">tr, block</span>) =&gt;</span> &#123;</span><br><span class="line">        tr.appendChild(el(<span class="string">'td'</span>)).style.cssText = <span class="string">`</span></span><br><span class="line"><span class="string">          <span class="subst">$&#123;block? <span class="string">`background: <span class="subst">$&#123;block.image&#125;</span>;`</span> : <span class="string">''</span>&#125;</span></span></span><br><span class="line"><span class="string">          width: <span class="subst">$&#123;blockSize&#125;</span>px;</span></span><br><span class="line"><span class="string">          height: <span class="subst">$&#123;blockSize&#125;</span>px</span></span><br><span class="line"><span class="string">          cursor: pointer`</span>;</span><br><span class="line">        <span class="keyword">return</span> tr;</span><br><span class="line">      &#125;, el(<span class="string">'tr'</span>))</span><br><span class="line">    ));</span><br><span class="line">  &#125;;</span><br><span class="line">  👆👆👆</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>배열을 루프돌아서<br>각각의 줄을 td를 갖는 tr로 바꿔서<br>table에 넣고 싶음.</p><ul><li>td를 갖는 tr로 <img src="/images/2019/12/04.png" style="width:20rem;"></li><li>각각의 줄을 (td를 갖는) tr로 바꿔서 <img src="/images/2019/12/03.png" style="width:20rem;"></li></ul><hr><h5 id="cf-5-배열의-고차함수"><a href="#cf-5-배열의-고차함수" class="headerlink" title="cf__5. 배열의 고차함수"></a>cf__5. 배열의 고차함수</h5><p>배열의 고차함수를 쓰는 원리는 간단하다.</p><ul><li>루프돌고 싶으면 <code>forEach</code></li><li>배열의 원소를 바꾼 배열을 얻고 싶으면 <code>map</code></li><li>하나의 값으로 뭉치고 싶으면 <code>reduce</code><blockquote><p>여러개의 집합을 하나의 스칼라값으로 바꾸는 것</p></blockquote></li></ul><hr><p><a name="4-5"></a></p><h3 id="5-table에-이벤트-걸기"><a href="#5-table에-이벤트-걸기" class="headerlink" title="5. table에 이벤트 걸기."></a>5. table에 이벤트 걸기.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> Game = (<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> column = <span class="number">8</span>, row = <span class="number">8</span>, blockSize = <span class="number">80</span>;</span><br><span class="line">  <span class="keyword">const</span> data = [];</span><br><span class="line">  <span class="keyword">let</span> table;</span><br><span class="line">  <span class="keyword">const</span> init = <span class="function"><span class="params">tid</span> =&gt;</span> &#123;</span><br><span class="line">    table = <span class="built_in">document</span>.querySelector(tid);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; row; i++)&#123;</span><br><span class="line">      <span class="keyword">const</span> r = [];</span><br><span class="line">      data.push(r);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; column; j++) r[j] = Block.GET();</span><br><span class="line">    &#125;</span><br><span class="line">    👇👇👇</span><br><span class="line">    table.addEventListener(<span class="string">'mousedown'</span>, down);</span><br><span class="line">    table.addEventListener(<span class="string">'mouseup'</span>, up);</span><br><span class="line">    table.addEventListener(<span class="string">'mouseleave'</span>, up);</span><br><span class="line">    table.addEventListener(<span class="string">'mousemove'</span>, move);</span><br><span class="line">    👆👆👆</span><br><span class="line">    render();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> el = <span class="function"><span class="params">tag</span> =&gt;</span> <span class="built_in">document</span>.createElement(tag);</span><br><span class="line">  <span class="keyword">const</span> render = <span class="function"><span class="params">_</span> =&gt;</span> &#123;...&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>mousedown<ul><li>마우스를 누르는 그 순간. (click과 다르게 press하는 순간)</li></ul></li><li>mouseup<ul><li>손가락을 떼는 그 순간.</li></ul></li><li>mouseleave<ul><li>바인딩된 요소에만 이벤트가 발생하며, 해당 엘리먼트의 영역에서 마우스가 벗어날 때 발생한다.</li></ul></li><li>mousemove<ul><li>마우스가 엘리먼트에서 움직일 때 </li></ul></li></ul><hr><p><a name="4-5-1"></a></p><h3 id="5-1-이벤트-gt-블럭을-누르는-순간-down"><a href="#5-1-이벤트-gt-블럭을-누르는-순간-down" class="headerlink" title="5.1 이벤트 &gt; 블럭을 누르는 순간: down"></a>5.1 이벤트 &gt; 블럭을 누르는 순간: down</h3><ol><li><p>move는 mousedown인 상태여야 의미가 있다.<br><strong>down의 상태값</strong> 필요</p></li><li><p>현재 눌러진 블록의 위치값 알아야함.<br>event로부터 x,y값 전체좌표를 받아와서<br>x, y좌표를 이용해서 테이블 내에서 몇번째 블록인지, 데이터로 치환하게 된다.</p><p>현재 눌러진 블록이 첫 시작? 아니면 중간?</p><ol><li>시작 블록<ul><li>지금 선택이 시작되는 블록</li><li>라이언타입이면 계속 라이언 타입</li><li>시작값은 왜 알아야하지?<ul><li>돌아가기도 해야함.</li></ul></li></ul></li><li>현재 블록<ul><li>move할때마다 변함 (cursor와 같은)</li></ul></li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> down = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// down된 상태를 활성</span></span><br><span class="line">  <span class="comment">// x, y로부터 block 데이터를 얻음</span></span><br><span class="line">  <span class="comment">// 위에서 얻은 블록을 시작블록 및 현재 블록으로 설정하고 선택목록에 포함시킴.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>down의 상태값<ul><li>down이 아닐때만 down.</li></ul></li><li>어떤 블록이 선택되어있는지.</li><li>x,y값을 넣으면 몇번째인지 알아낼 수 있는 함수</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> column = <span class="number">8</span>, row = <span class="number">8</span>, blockSize = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">const</span> data = [];</span><br><span class="line"><span class="keyword">let</span> table;</span><br><span class="line">👇👇👇</span><br><span class="line"><span class="keyword">let</span> startBlock, currBlock, isDown;</span><br><span class="line"><span class="keyword">const</span> selected = [], getBlock = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> down = <span class="function">(<span class="params">&#123;pageX: x, pageY: y&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(isDown) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> curr = getBlock(x,y);</span><br><span class="line">  <span class="keyword">if</span>(!curr) <span class="keyword">return</span>;</span><br><span class="line">  isDown = <span class="literal">true</span>;</span><br><span class="line">  selected.length = <span class="number">0</span>;</span><br><span class="line">  selected[<span class="number">0</span>] = startBlock = currBlock = curr;</span><br><span class="line">  render();</span><br><span class="line">&#125;</span><br><span class="line">👆👆👆</span><br></pre></td></tr></table></figure><p>getBlock이외의 밑에나오는 로직은 전부 인메모리 로직.<br>네이티브 레이어를 다루는 방법은 즉시 인메모리 객체로 변환한다. </p><hr><h5 id="cf-6-네이티브-객체를-다룰때-가장-중요한-요령"><a href="#cf-6-네이티브-객체를-다룰때-가장-중요한-요령" class="headerlink" title="cf__6. 네이티브 객체를 다룰때 가장 중요한 요령"></a>cf__6. 네이티브 객체를 다룰때 가장 중요한 요령</h5><ul><li><strong>네이티브 레이어를 최대한 줄이는 것.</strong></li><li>네이티브의 정보 중에 필요한 핵심정보만 이용해서 즉시 인메모리 객체로 바꿈.</li><li>네이티브의 코드가 많이 퍼져있으면 퍼져있을수록<br>더욱더 다루기 어렵고<br>더욱더 컨버팅하기 어렵게 된다.</li><li>네이티브 코드중에 필요한 부분만 추출해서 =&gt; 즉시 인메모리 객체로 바꾸고</li><li>나머지 로직은 인메모리에서 수용하도록 함.</li></ul><blockquote><p>좋은 개발자<br>말하면 코드로 옮기는 것이 리얼타임이 될때까지.. 훈련하자.<br>좋은 개발자는 제어문을 잘쓰거나, 코드를 한국어로 번역하거나 한국어를 코드로 번역하는 능력에 달려있다.<br>숙련을 많이 해서 실시간으로.</p></blockquote><hr><h4 id="5-cf-네이티브-코드-gt-인메모리-객체로-변환"><a href="#5-cf-네이티브-코드-gt-인메모리-객체로-변환" class="headerlink" title="5.cf 네이티브 코드 =&gt; 인메모리 객체로 변환"></a>5.cf 네이티브 코드 =&gt; 인메모리 객체로 변환</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 네이티브 객체의 값을 =&gt; 인메모리 객체로 변환해주는 변환기 !</span></span><br><span class="line"><span class="comment">// 많이 나옴.</span></span><br><span class="line"><span class="keyword">const</span> getBlock = (x: <span class="built_in">number</span>, y: <span class="built_in">number</span>): <span class="function"><span class="params">Block</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; top: T, left: L &#125; = table.getBoundingClientRect();</span><br><span class="line">  <span class="keyword">if</span> (x &lt; L || x &gt; L + blockSize * row || y &lt; T || y &gt; T + blockSize * column)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 바둑판 범위를 넘는 경우 제외(왼쪽넘어, 오른쪽넘어, 위쪽넘어, 아래쪽 넘어)</span></span><br><span class="line">  <span class="keyword">return</span> data[<span class="built_in">parseInt</span>(y - T) / blockSize][<span class="built_in">parseInt</span>(x - L) / blockSize];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><code>getBoundingClientRect</code><br>Element.getBoundingClientRect() 메서드는<br>요소의 크기와 요소의 viewport에서의 상대적인 위치를 반환합니다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DOMRect </span><br><span class="line">&#123; x: 0, </span><br><span class="line">  y: 0, </span><br><span class="line">  width: 0, </span><br><span class="line">  height: 0, </span><br><span class="line">  top: 0, </span><br><span class="line">  bottom: 0, </span><br><span class="line">  left: 0, </span><br><span class="line">  right: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><hr><p><a name="4-5-2"></a></p><h3 id="5-2-이벤트-gt-블럭을-떼는-순간-up"><a href="#5-2-이벤트-gt-블럭을-떼는-순간-up" class="headerlink" title="5.2 이벤트 &gt; 블럭을 떼는 순간: up"></a>5.2 이벤트 &gt; 블럭을 떼는 순간: up</h3><p>코어액션이 여기서 다 일어난다.</p><ol><li>down을 해제</li><li>선택목록이 3이상이면 삭제 실시</li><li>2이하면 리셋</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> up = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// down을 해제</span></span><br><span class="line">  <span class="comment">// 선택목록이 3이상이면 삭제 실시</span></span><br><span class="line">  <span class="comment">// 2이하면 리셋</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-0-reset"><a href="#5-2-0-reset" class="headerlink" title="5.2.0 reset"></a>5.2.0 reset</h4><p>선택항목이 2이하면 모두 초기화시킨다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> up = <span class="function"><span class="params">_</span> =&gt;</span> selected.length &gt; <span class="number">2</span> ? remove() : reset();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reset = <span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  startBlock = currBlock = <span class="literal">null</span>;</span><br><span class="line">  selected.length = <span class="number">0</span>;</span><br><span class="line">  isDown = <span class="literal">false</span>;</span><br><span class="line">  render();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="cf-7-쉬운것부터-짜자"><a href="#cf-7-쉬운것부터-짜자" class="headerlink" title="cf__7. 쉬운것부터 짜자!"></a>cf__7. 쉬운것부터 짜자!</h5><p>쉬운 것은 의존성이 없다. 고칠 일이 적다.<br>복잡한 것부터 짜면 의존성이 많은 것부터 짜게 되고,<br>나중에 깨달은게 많을수록 더 많이 고치게 된다.</p><hr><ol><li>선택된 블록들을 지워주고 =&gt; remove</li><li>떨어뜨린 다음에 =&gt; drop</li><li>새로 생성하고 =&gt; readyToFill</li><li>다시 내려와주면서, 합쳐줘야함. =&gt; fill </li></ol><p><a name="4-5-2-1"></a></p><h4 id="5-2-1-remove-😫😫"><a href="#5-2-1-remove-😫😫" class="headerlink" title="5.2.1 remove 😫😫"></a>5.2.1 remove 😫😫</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> remove = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">/* 데이터 내부의 row를 돌면서</span></span><br><span class="line"><span class="comment">    해당 row에 선택된 요소가 존재하면 null로 만드는 함수.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  data.forEach(<span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line">    selected.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> i;</span><br><span class="line">      <span class="keyword">if</span> ((i = r.indexOf(v)) !== <span class="number">-1</span>) r[i] = <span class="literal">null</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  render();</span><br><span class="line">  setTimeout(drop, <span class="number">300</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>forEach는 for문보다 대화가됨.</p></blockquote><p>column을 돌면서 row를 계산해서 떨어뜨리는 일을 한다.<br>한턴에는 한칸씩 떨어진다.<br>중력에 의해 떨어지는 방향은<br>column기준이기때문에 column을 먼저 loop돌린다.<br>row는 맨 아랫줄부터 떨어지는 작업을 해야하므로.. (전체row -1) 부터 시작</p><ul><li>isNext: 윗줄에도 block이 있는 상황이라 다음 row도 검사해야하는지.</li><li>isEmpty: 떨어질 블럭이 하나의 column row들에 있는지 없는지.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> drop = <span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> isNext = <span class="literal">false</span>; <span class="comment">// drop을 더 해야하는지 말아야하는지.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; column; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = row - <span class="number">1</span>; i &gt; <span class="number">-1</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!data[i][j] &amp;&amp; i) &#123; <span class="comment">// 해당 구멍에 블럭이 없고, row의 인덱스가 0이 아닌(꼭대기가 아닌)</span></span><br><span class="line">        <span class="keyword">let</span> k = i, <span class="comment">// 해당 줄의 index를 복사한다.</span></span><br><span class="line">          isEmpty = <span class="literal">true</span>; <span class="comment">// data[i][j] 위에 떨어질 블럭이 비었는지 아닌지.</span></span><br><span class="line">        <span class="keyword">while</span> (k--) <span class="comment">// index를 하나씩 확인하면서</span></span><br><span class="line">          <span class="keyword">if</span> (data[k][j]) &#123; <span class="comment">// 위에 블럭이 있으면</span></span><br><span class="line">            isEmpty = <span class="literal">false</span>; <span class="comment">// 위에 떨어질 블럭이 하나라도 있다는 뜻</span></span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 반복분을 끝낸다.</span></span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty) <span class="keyword">break</span>; <span class="comment">// 위에 떨어질 블럭이 하나도 없으면 row loop 종료 다음 column loop 시작</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 위에 블럭이 하나라도 있는 상황이고, </span></span><br><span class="line">        <span class="comment">// 다음 row도 검새햐아함을 flag</span></span><br><span class="line">        isNext = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 떨어뜨리기.</span></span><br><span class="line">        <span class="keyword">while</span> (i--) &#123; <span class="comment">// 해당 줄 위에</span></span><br><span class="line">          data[i + <span class="number">1</span>][j] = data[i][j]; <span class="comment">// 현재 검사한 블럭에 위의 블럭을 넣어주고,</span></span><br><span class="line">          data[i][j] = <span class="literal">null</span>; <span class="comment">// 위의 블럭은 null로 초기화</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// row loop를 종료 다음 column loop 시작</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render();</span><br><span class="line">  isNext ? setTmeout(drop, <span class="number">300</span>) : readyToFill();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>ㅋㅋㅋ ㅠㅠ 대댜냐댜..<br>머리가 좋아지는수밖에 없다.<br>잘짜고, 쉽게 짤때까지 머리로 훈련하는 수밖에 없다.<br>알고리즘, 코딩인터뷰, 자료구조, 트리구조 보다 도메인 해석 능력을 키우자.<br>어떠한 도메인에 대해서 알고리즘을 짜는 능력은 훈련밖에 없다.<br>복잡한 일이 일어나는 것을 눈으로 관찰해서 어떤 일인지 파악한 다음에<br>코드로 차근차근 푸는건 훈련밖에 없다.<br>이거 안되면 아키텍처고 디자인패턴이고 필요없다..</p></blockquote><hr><p>채울준비를 하는 것은 밖에부터 채워야하는 애들이 예쁘게 내려오게 하기 위해서.</p><ol><li>지워진 모양 그대로의 형태가 위에 형성되고 =&gt; readyToFill</li><li>해당 형태가 떨어지는 상황 =&gt; fill</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fills = [];</span><br><span class="line"><span class="comment">// fill 배열 초기화</span></span><br><span class="line"><span class="comment">// column은 똑같고, row만 계산해서 생성하면 됨.</span></span><br><span class="line"><span class="comment">// 실제 fills의 길이와 채워진 카운팅이 같게되면 다 채워졌다고 볼 예정 </span></span><br><span class="line"><span class="keyword">let</span> fillCnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readyToFill = <span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  fills.length = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line">  <span class="comment">// data를 돌면서 구멍난 부분을 찾는다.</span></span><br><span class="line">  data.some(<span class="function"><span class="params">row</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (row.indexOf(<span class="literal">null</span>) === <span class="number">-1</span>) <span class="keyword">return</span> ture; <span class="comment">// 구멍없는 row면 끝냄.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> r = [...row].fill(<span class="literal">null</span>); <span class="comment">// 새로운 row를 만들어서 우선 null로 채움</span></span><br><span class="line">    fills.push(r);</span><br><span class="line">    row.forEach(<span class="function">(<span class="params">v, i</span>) =&gt;</span> !v &amp;&amp; (r[i] = Block.GET())); </span><br><span class="line">    <span class="comment">// v가 없으면 해당 구멍에 block으로 채움 </span></span><br><span class="line">  &#125;);</span><br><span class="line">  fillCnt = <span class="number">0</span>; <span class="comment">// ?</span></span><br><span class="line">  setTimeout(fill, <span class="number">300</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fill = <span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (fillCnt &gt; fills.length) &#123; </span><br><span class="line">    <span class="comment">// fillCnt가 증가하다가 fills의 length와 일치하면 그만둘 때 </span></span><br><span class="line">    isDown = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fillCnt; i++) &#123;</span><br><span class="line">    <span class="comment">// 채워야하는 fill 배열의 row에서 해당 요소가 null이 아니라 채워져있으면(v), </span></span><br><span class="line">    <span class="comment">// data의 해당 요소에 v를 넣는다.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// fills에 있는 마지막줄부터 윗줄을 채워가면 된다..</span></span><br><span class="line">    fills[fills.length - i - <span class="number">1</span>].forEach(<span class="function">(<span class="params">v, j</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (v) data[fillCnt - i - <span class="number">1</span>][j] = v;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  fillCnt++;</span><br><span class="line">  render();</span><br><span class="line">  setTimeout(fill, <span class="number">300</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><hr><p><a name="4-5-3"></a></p><h3 id="5-3-이벤트-gt-블럭을-down하면서-움직이는-상태-move"><a href="#5-3-이벤트-gt-블럭을-down하면서-움직이는-상태-move" class="headerlink" title="5.3 이벤트 &gt; 블럭을 down하면서 움직이는 상태: move"></a>5.3 이벤트 &gt; 블럭을 down하면서 움직이는 상태: move</h3><p>누른상태에서 다음(혹은 이전) 블럭으로 움직이는 상태</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> move = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// down이 아니라면 이탈</span></span><br><span class="line">  <span class="comment">// x,y 위치의 블록을 얻음</span></span><br><span class="line">    <span class="comment">// 위에서 얻은 블록이 이전 블록의 타입이 같고 인접되어있는지 검사</span></span><br><span class="line">    <span class="comment">// 위에서 얻은 블록이 선택목록에 없으면 추가</span></span><br><span class="line">    <span class="comment">// 위에서 얻은 블록이 선택목록에 있다면 전전 블록일 경우 하나 삭제</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> move = <span class="function">(<span class="params">&#123; pageX: x, pageY: y &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!isDown) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">const</span> curr = getBlock(x, y);</span><br><span class="line">  <span class="keyword">if</span> (!crr || curr.type !== startBlock.type || !isNext(curr)) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (selected.indexOf(curr) == <span class="number">-1</span>) selected.push(curr);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (selected[selected.length - <span class="number">1</span>] == curr) selected.pop();</span><br><span class="line">  currBlock = curr;</span><br><span class="line">  render();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 받아오는 curr 블럭과 cache해놓은 curr 블럭을 비교하여 인접해있는지 검사.</span></span><br><span class="line"><span class="comment">// 나와 위치가 한개 차이 난다는 것. x로 하나 차이 혹은 y로 하나 차이</span></span><br><span class="line"><span class="keyword">const</span> isNext = <span class="function"><span class="params">curr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> r0,</span><br><span class="line">    c0,</span><br><span class="line">    r1,</span><br><span class="line">    c1,</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* data에서 들어온 </span></span><br><span class="line"><span class="comment">    curr의 x인덱스, y인덱스와 </span></span><br><span class="line"><span class="comment">    currBlock의 x인덱스와 y인덱스를 구하는 방법. </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  data.some(<span class="function">(<span class="params">row, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> j;</span><br><span class="line">    <span class="keyword">if</span> ((j = row.indexOf(currBlock)) !== <span class="number">-1</span>) (r0 = i), (c0 = j), cnt++;</span><br><span class="line">    <span class="keyword">if</span> ((j = row.indexOf(curr)) !== <span class="number">-1</span>) (r1 = i), (c1 = j), cnt++;</span><br><span class="line">    <span class="keyword">return</span> cnt === <span class="number">2</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    curr !== currBlock &amp;&amp; (<span class="built_in">Math</span>.abs(r0 - r1) === <span class="number">1</span> || <span class="built_in">Math</span>.abs(c0 - c1) === <span class="number">1</span>)</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>자바스크립트에서 배열의 고차함수로 여러 제어문을 제거할 수 있다.</p><h2 id="최종-코드-및-정리"><a href="#최종-코드-및-정리" class="headerlink" title="최종 코드 및 정리"></a>최종 코드 및 정리</h2><p>프로시저 함수: 반환값이 없는 함수<br>sideEffect가 엄청 많다.<br>현재 로직들은 모두 프로시저 함수.<br>앞으로 객체지향으로 리팩토링 예정.</p><details><summary>최종코드 (TS ver.)</summary><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Game에서 사용한 interface</span></span><br><span class="line"><span class="keyword">interface</span> IGame &#123;</span><br><span class="line">  <span class="comment">// 게임판 정보</span></span><br><span class="line">  column: <span class="built_in">number</span>;</span><br><span class="line">  row: <span class="built_in">number</span>;</span><br><span class="line">  blockSize: <span class="built_in">number</span>;</span><br><span class="line">  data: (Block | <span class="literal">null</span>)[][];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 네이티브 객체 정보</span></span><br><span class="line">  table: HTMLElement;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 상태 정보</span></span><br><span class="line">  startBlock: Block;</span><br><span class="line">  currBlock: Block;</span><br><span class="line">  isDown: <span class="built_in">boolean</span>;</span><br><span class="line">  selected: Block[];</span><br><span class="line">  isNext: <span class="function">(<span class="params">curr: Block</span>) =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line">  getBlock: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> Block;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 이벤트 관련</span></span><br><span class="line">  down: <span class="function">(<span class="params">&#123; pageX: x, pageY: y &#125;: &#123; pageX: <span class="built_in">number</span>; pageY: <span class="built_in">number</span> &#125;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  move: <span class="function">(<span class="params">&#123; pageX: x, pageY: y &#125;: &#123; pageX: <span class="built_in">number</span>; pageY: <span class="built_in">number</span> &#125;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  up: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  reset: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  remove: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  drop: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  fills: (Block | <span class="literal">null</span>)[][];</span><br><span class="line">  fillCnt: <span class="built_in">number</span>;</span><br><span class="line">  readyToFill: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  fill: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// util</span></span><br><span class="line">  el: <span class="function">(<span class="params">tag: HTMLElementTagNameMap</span>) =&gt;</span> HTMLElement;</span><br><span class="line">  </span><br><span class="line">  render: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 도저히 머리가 따라가기 힘들어서 TS로 우선 변환..</span></span><br><span class="line"><span class="keyword">const</span> Game = <span class="function">(<span class="params">(<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">class</span> Block &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">static</span> GET(<span class="params"><span class="keyword">type</span> = <span class="built_in">Math</span>.random(<span class="params"></span>) * 5</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">return</span> <span class="keyword">new</span> Block(<span class="params"><span class="keyword">type</span></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    _type: <span class="built_in">number</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    constructor(<span class="params"><span class="keyword">type</span></span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">this</span>._type = <span class="keyword">type</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">get</span> image(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">return</span> `url(<span class="params">'img/block$&#123;<span class="keyword">this</span>._type&#125;.png'</span>)`;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">get</span> <span class="keyword">type</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">return</span> <span class="keyword">this</span>._type;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> column = 8,</span></span></span><br><span class="line"><span class="function"><span class="params">    row = 8,</span></span></span><br><span class="line"><span class="function"><span class="params">    blockSize = 80;</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> data: (<span class="params">Block | <span class="literal">null</span></span>)[][] = [];</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">let</span> table: HTMLElement;</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">let</span> startBlock: Block, currBlock: Block, isDown: <span class="built_in">boolean</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> selected: Block[] = [];</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> getBlock = (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): Block =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> &#123; top: T, left: L &#125; = table.getBoundingClientRect(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params">x &lt; L || x &gt; L + blockSize * row || y &lt; T || y &gt; T + blockSize * column</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">return</span> <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">return</span> data[(<span class="params">y - T</span>) / blockSize][(<span class="params">x - L</span>) / blockSize];</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> isNext = (<span class="params">curr: Block</span>): <span class="built_in">boolean</span> =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">let</span> r0: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      c0: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      r1: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      c1: <span class="built_in">number</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">      cnt = 0;</span></span></span><br><span class="line"><span class="function"><span class="params">    data.some(<span class="params">(<span class="params">row: (<span class="params">Block | <span class="literal">null</span></span>)[], i: <span class="built_in">number</span></span>) =&gt; &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      <span class="keyword">let</span> j: <span class="built_in">number</span>;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      <span class="keyword">if</span> (<span class="params">(<span class="params">j = row.indexOf(<span class="params">currBlock</span>)</span>) != -1</span>) (<span class="params">r0 = i</span>), (<span class="params">c0 = j</span>), cnt++;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      <span class="keyword">if</span> (<span class="params">(<span class="params">j = row.indexOf(<span class="params">curr</span>)</span>) != -1</span>) (<span class="params">r1 = i</span>), (<span class="params">c1 = j</span>), cnt++;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      <span class="keyword">return</span> cnt == 2;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">    &#125;</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">return</span> (<span class="params"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      (<span class="params">curr != currBlock &amp;&amp; <span class="built_in">Math</span>.abs(<span class="params">r0 - r1</span>) == 1</span>) || <span class="built_in">Math</span>.abs(<span class="params">c0 - c1</span>) == 1</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">    </span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> reset = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    startBlock = currBlock = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    selected.length = 0;</span></span></span><br><span class="line"><span class="function"><span class="params">    isDown = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    render(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> remove = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    data.forEach(<span class="params">(<span class="params">r: (<span class="params">Block | <span class="literal">null</span></span>)[]</span>) =&gt; &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      <span class="comment">//데이터삭제</span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      selected.forEach(<span class="params">(<span class="params">v: Block</span>) =&gt; &#123;</span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params">        <span class="keyword">let</span> i: <span class="built_in">number</span>;</span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params">        <span class="keyword">if</span> (<span class="params">(<span class="params">i = r.indexOf(<span class="params">v</span>)</span>) != -1</span>) r[i] = <span class="literal">null</span>;</span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params">      &#125;</span>);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">    &#125;</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    render(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    setTimeout(<span class="params">drop, 300</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> drop = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">let</span> isNext = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">for</span> (<span class="params"><span class="keyword">let</span> j = 0; j &lt; column; j++</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">for</span> (<span class="params"><span class="keyword">let</span> i = row - 1; i &gt; -1; i--</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">if</span> (<span class="params">!data[i][j] &amp;&amp; i</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">let</span> k = i,</span></span></span><br><span class="line"><span class="function"><span class="params">            isEmpty = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">while</span> (<span class="params">k--</span>)</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">if</span> (<span class="params">data[k][j]</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">              isEmpty = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">              <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">            &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">if</span> (<span class="params">isEmpty</span>) <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">          isNext = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">while</span> (<span class="params">i--</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">            data[i + 1][j] = data[i][j];</span></span></span><br><span class="line"><span class="function"><span class="params">            data[i][j] = <span class="literal">null</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">          &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">          <span class="keyword">break</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">        &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">      &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    render(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    isNext ? setTimeout(<span class="params">drop, 300</span>) : readyToFill(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> fills: (<span class="params">Block | <span class="literal">null</span></span>)[][] = [];</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">let</span> fillCnt = 0;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> readyToFill = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    fills.length = 0;</span></span></span><br><span class="line"><span class="function"><span class="params">    data.some(<span class="params">(<span class="params">row: (<span class="params">Block | <span class="literal">null</span></span>)[]</span>) =&gt; &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      <span class="keyword">if</span> (<span class="params">row.indexOf(<span class="params"><span class="literal">null</span></span>) == -1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      <span class="keyword">const</span> r: (<span class="params">Block | <span class="literal">null</span></span>)[] = [...row].fill(<span class="params"><span class="literal">null</span></span>);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      fills.push(<span class="params">r</span>);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      row.forEach(<span class="params">(<span class="params">v: Block | <span class="literal">null</span>, i</span>) =&gt; !v &amp;&amp; (<span class="params">r[i] = Block.GET(<span class="params"></span>)</span>)</span>);</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">    &#125;</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    fillCnt = 0;</span></span></span><br><span class="line"><span class="function"><span class="params">    setTimeout(<span class="params">fill, 300</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> fill = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params">fillCnt &gt; fills.length</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      isDown = <span class="literal">false</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">for</span> (<span class="params"><span class="keyword">let</span> i = 0; i &lt; fillCnt; i++</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      fills[fills.length - i - 1].forEach(<span class="params">(<span class="params">v, j</span>) =&gt; &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">        <span class="keyword">if</span> (<span class="params">v</span>) data[fillCnt - i - 1][j] = v;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      &#125;</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    fillCnt++;</span></span></span><br><span class="line"><span class="function"><span class="params">    render(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    setTimeout(<span class="params">fill, 300</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> down = (<span class="params">&#123; pageX: x, pageY: y &#125;: &#123; pageX: <span class="built_in">number</span>; pageY: <span class="built_in">number</span> &#125;</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params">isDown</span>) <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> curr = getBlock(<span class="params">x, y</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params">!curr</span>) <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    isDown = <span class="literal">true</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    selected.length = 0;</span></span></span><br><span class="line"><span class="function"><span class="params">    selected[0] = startBlock = currBlock = curr;</span></span></span><br><span class="line"><span class="function"><span class="params">    render(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> move = (<span class="params">&#123; pageX: x, pageY: y &#125;</span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params">!isDown</span>) <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">const</span> curr = getBlock(<span class="params">x, y</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params">!curr || curr.<span class="keyword">type</span> != startBlock.<span class="keyword">type</span> || !isNext(<span class="params">curr</span>)</span>) <span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">if</span> (<span class="params">selected.indexOf(<span class="params">curr</span>) == -1</span>) selected.push(<span class="params">curr</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="params">selected[selected.length - 2] == curr</span>) selected.pop(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    currBlock = curr;</span></span></span><br><span class="line"><span class="function"><span class="params">    render(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> up = (<span class="params"></span>) =&gt; (<span class="params">selected.length &gt; 2 ? remove(<span class="params"></span>) : reset(<span class="params"></span>)</span>);</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> el = (<span class="params">tag: keyof HTMLElementTagNameMap</span>) =&gt; <span class="built_in">document</span>.createElement(<span class="params">tag</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">const</span> render = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    table.innerHTML = "";</span></span></span><br><span class="line"><span class="function"><span class="params">    data.forEach(<span class="params">row =&gt;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">      table.appendChild(<span class="params"></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params">        row.reduce(<span class="params">(<span class="params">tr, block</span>) =&gt; &#123;</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">          tr.appendChild(<span class="params">el(<span class="params">"td"</span>)</span>).style.cssText = `</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">        $&#123;block ? `background:$&#123;block.image&#125;;` : ""&#125;</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">        width:$&#123;blockSize&#125;px;</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">        height:$&#123;blockSize&#125;px;</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">        cursor:pointer`;</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">          <span class="keyword">return</span> tr;</span></span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params"><span class="params">        &#125;, el(<span class="params">"tr"</span>)</span>)</span></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params"><span class="params">      </span>)</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="params">    </span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="keyword">return</span> (<span class="params">tid: <span class="built_in">string</span></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    table = <span class="built_in">document</span>.querySelector(<span class="params">tid</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">for</span> (<span class="params"><span class="keyword">let</span> i = 0; i &lt; row; i++</span>) &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">const</span> r = [];</span></span></span><br><span class="line"><span class="function"><span class="params">      data.push(<span class="params">r</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="keyword">for</span> (<span class="params"><span class="keyword">let</span> j = 0; j &lt; column; j++</span>) r[j] = Block.GET(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    &#125;</span></span></span><br><span class="line"><span class="function"><span class="params">    table.addEventListener(<span class="params">"mousedown", down</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    table.addEventListener(<span class="params">"mouseup", up</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    table.addEventListener(<span class="params">"mouseleave", up</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    table.addEventListener(<span class="params">"mousemove", move</span>);</span></span></span><br><span class="line"><span class="function"><span class="params">    render(<span class="params"></span>);</span></span></span><br><span class="line"><span class="function"><span class="params">  &#125;;</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span>)<span class="params">()</span>;</span></span><br><span class="line"><span class="function"><span class="params">Game</span>(<span class="params">"#stage"</span>);</span></span><br></pre></td></tr></table></figure></details>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;코드스피츠 강의 정리록&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;생소한 도메인으로 배우는게 좋다.&lt;br&gt;익숙한 도메인들은 익숙한 처리방법으로 처리하기때문에 객체지향을 배우기 어렵다.&lt;br&gt;때문에 80기는 게임을 통해서 진행할 
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2019 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2019-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="OOP" scheme="http://feel5ny.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>코드스피츠80_OOP design with game (1)- 1. 객체지향과 값지향</title>
    <link href="http://feel5ny.github.io/2019/02/17/OOP_08_1/"/>
    <id>http://feel5ny.github.io/2019/02/17/OOP_08_1/</id>
    <published>2019-02-17T01:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>코드스피츠 강의 정리록</p></blockquote><p>생소한 도메인으로 배우는게 좋다.<br>익숙한 도메인들은 익숙한 처리방법으로 처리하기때문에 객체지향을 배우기 어렵다.<br>때문에 80기는 게임을 통해서 진행할 예정.</p><hr><p><a name="1"></a></p><h1 id="1-객체지향-준비운동"><a href="#1-객체지향-준비운동" class="headerlink" title="1. 객체지향 준비운동"></a>1. 객체지향 준비운동</h1><h2 id="객체지향-←→-값지향"><a href="#객체지향-←→-값지향" class="headerlink" title="객체지향 ←→ 값지향"></a>객체지향 ←→ 값지향</h2><p>객체지향의 반대말은 값지향이다.<br>객체지향과 값지향을 비교해보면서 기본개념을 잡고 넘어가자.</p><hr><p><a name="1-1"></a></p><h2 id="1-1-객체지향"><a href="#1-1-객체지향" class="headerlink" title="1.1 객체지향"></a>1.1 객체지향</h2><p><a name="1-1-1"></a></p><h3 id="1-참조값을-사용함"><a href="#1-참조값을-사용함" class="headerlink" title="1) 참조값을 사용함."></a>1) 참조값을 사용함.</h3><p>객체지향에서는<br>함수의 인자를 보내던,<br>변수에 대입을 하던,<br>연산을 하던<br>참조를 사용한다.</p><hr><h4 id="cf-1-언어마다-어떠한-타입에-대해서-값으로-처리-참조로-처리할지-결정한다"><a href="#cf-1-언어마다-어떠한-타입에-대해서-값으로-처리-참조로-처리할지-결정한다" class="headerlink" title="cf__1 언어마다 어떠한 타입에 대해서 값으로 처리, 참조로 처리할지 결정한다."></a>cf__1 언어마다 어떠한 타입에 대해서 값으로 처리, 참조로 처리할지 결정한다.</h4><p>그렇다고 오브젝트는 값이 아닐 것이다 라고 생각하면 안된돠.<br>오브젝트도 값으로 생각하는 언어들이 있다.</p><ul><li>자바스크립트에서는 스트링을 값으로 보고 있다.</li><li>자바에서는 스트링을 객체로 보고 있다.</li></ul><p>언어마다 어떠한 타입에 대해서 직접적으로 값으로 처리할지<br>참조로 처리할지 결정하는 것이다. 원래 값이고 원래 참조다 라는 개념은 없다.</p><hr><h4 id="한번-만든-객체가-전파됨"><a href="#한번-만든-객체가-전파됨" class="headerlink" title="* 한번 만든 객체가 전파됨."></a>* 한번 만든 객체가 전파됨.</h4><p>참조는 순식간에 전파된다.<br>객체 컨텍스트에서는 참조를 쓴다고 했다.<br>참조가 되면 원본은 <code>힙메모리</code>에 만들어지고<br>모든 객체는 <strong>힙메모리의 주소</strong>만 참조하고 다니는 것이다. 주소값만 복사되고 있는 것.<br>⇒ 한번 만들어진 객체는 통제권을 쉽게 벗어나서 주소의 복사가 왕창 일어난다는 것이다.</p><p>객체지향의 큰 어려움은 객체를 일단 만들고 나면<br><strong>주소값을 보호할 수 있을 것 같지만 실제로는 순식간에 퍼져나간다.</strong><br>⇒ 문제는 그 주소값을 참조하는 변수에 새로운 객체를 할당할 수 있다.</p><p>A라는 변수가 원래는 old 객체를 참조하고 있었는데,<br>A라는 변수에 new객체를 할당하면 새로운 주소가 A변수에 들어간다.<br>⇒ A는 아무 문제가 없지만, B = A, C = B의 B,C변수들이 다 바보가 된다.<br><strong>즉, A의 참조부분을 잡았던 애들이 다 바보가 된다.</strong><br>B와 C는 old를 가리키고 있지만, A는 이제 new가 되었다..</p><p>객체지향에서는 객체 참조키를 함부로 노출하지 않고 쥐고 있지 않으면<br>순식간에 오염이 전파되서 A객체도 new객체를 받아들일 수 없다. <code>겁나니까.</code></p><p>객체지향은 이러한 단점이 있다. 참조가 쉽게 전파된다.<br>참조 전파를 막는 장치가 있거나,<br>섬세하게 관리하지않으면 참조가 순식간에 전파되어서<br>참조를 전파시킨 본인조차도 새 객체를 받아들일 수 없다. 그럼.. 전체가 썪어서 망가진다..</p><h5 id="이-부분을-관리하는-것이-객체지향에서-어려운-점이다"><a href="#이-부분을-관리하는-것이-객체지향에서-어려운-점이다" class="headerlink" title="*이 부분을 관리하는 것이 객체지향에서 어려운 점이다. *"></a>*<em>이 부분을 관리하는 것이 객체지향에서 어려운 점이다. *</em></h5><hr><p>그에 비해서 값지향은 매번 복사가된다. 전파되지 않는다는 것이다.<br>끊임없는 클론이 양산된다.<br>⇒ 메모리가 엄청나게 많이 사용된다.<br>⇒ GC에 의존할 수밖에 없다.</p><p>값으로 계속 복사가 되기때문에<br>값에 대한 컨텍스트를 이어갈 수 없고<br>컨텍스트를 포함한 새로운 값을 만드는데 성공해야한다.</p><p>값지향에서는 히스토리를 볼 수 없고 상태의 흐름을 볼 수 없다.<br>중간중간에 흔적을 따로따로 상태를 보관해줘야한다.</p><p>결과물이 복잡할수록 함수의 복잡성은 올라간다.<br>⇒ 수정은 더욱더 올라간다.<br>ex) 함수형, rx</p><p>객체지향은 싱글톤 객체나 메모리상의 유일한 객체를 참조로 전파시키고 있으니까,<br><strong>메모리상의 유리한 점이나 객체의 생성에 대한 안정성을 확보해 줄 수 있다.</strong><br>다만, 주소의 전파가 일어나면 썩어들어간다.</p><hr><h4 id="데이터를-처리하는-메소드를-내장함"><a href="#데이터를-처리하는-메소드를-내장함" class="headerlink" title="* 데이터를 처리하는 메소드를 내장함."></a>* 데이터를 처리하는 메소드를 내장함.</h4><p>본인의 상태를 본인이 책임질 수 있다.<br>class 내에 메소드들이 this가 안나오면 메소드가 아니다.</p><ul><li><code>this</code>가 없고, 인지와 지역변수만 쓰는 것은 유틸리티 함수이다.</li><li>우리는 기계적으로 class코드를 살펴보고 메소드에 this가 나오는지 안나오는지 살펴보고 안나오면 전부 유틸리티로 보내야한다.</li><li>다른 함수에서 유틸리티를 사용할지도 모르고,<br>나중에 유틸리티 함수로 분리하지 않고, 리팩토링이나 수정시<br>비슷한 함수를 사용하는 위치가 어디있는지 모르게 되며, 중복코드가 생길 가능성이 있다.</li></ul><hr><h4 id="모든-메소드는-현재-객체-컨텍스트-사용"><a href="#모든-메소드는-현재-객체-컨텍스트-사용" class="headerlink" title="* 모든 메소드는 현재 객체 컨텍스트 사용"></a>* 모든 메소드는 현재 객체 컨텍스트 사용</h4><p>리팩토링할 때 알 수 있는 것은<br>우리가 짠 클래스에 this를 사용하지 않는 메소드가 나온다는 점으로부터, </p><ul><li>이건 객체협력으로 문제를 풀고 잇지 않구나를 알 수 있다.<br><code>값 컨텍스트</code>를 섞어서 문제를 풀었다는 것을 알 수 있다.</li></ul><p>리팩토링이 끝나고 나면, <strong>this만 사용하는 클래스의 협력으로 문제가 풀리게 된다.</strong><br>그것이 우리의 궁극적인 목표이기도 하다.</p><hr><p><a name="1-1-2"></a></p><h3 id="2-각-객체는-단일한-책임을-갖음-SOLID-마틴-파울러"><a href="#2-각-객체는-단일한-책임을-갖음-SOLID-마틴-파울러" class="headerlink" title="2) 각 객체는 단일한 책임을 갖음 SOLID (마틴 파울러)"></a>2) 각 객체는 단일한 책임을 갖음 SOLID (마틴 파울러)</h3><p>우리가 알파고가 아니다. 이세돌이다.<br>사람의 한계로 인해서 한번에 하나밖에 안된다.<br>인간의 한계때문에 SOLID원칙이 있는 것이다.</p><blockquote><p>⇒ 그래서 컨벤션이 존재. </p></blockquote><ul><li>자신이 처리할 수 없는 책임은 타 객체와 협력</li><li>객체망에 참여하여 자신의 역할 수행g하도록 한다.</li></ul><hr><p><a name="1-1-3"></a></p><h3 id="3-객체지향-사고"><a href="#3-객체지향-사고" class="headerlink" title="3) 객체지향 사고"></a>3) 객체지향 사고</h3><ol><li>객체망으로 문제를 해결한다.<ul><li>혼자할 수 있는 일이 단일책임밖에 없기 때문에<br>객체망으로 해결한다.</li></ul></li><li>단일책임을 준수한다.</li><li>객체를 이용하여 문제를 해결한다.<ul><li>값으로 문제를 해결하지 않는다. </li><li>모든 처리를 객체로한다.</li><li>값을 도입하면 도입할수록 객체지향이 아니게된다.</li></ul></li><li><strong>은닉</strong>과 <strong>캡슐화</strong>를 활용하여 상태를 처리한다.<br>순식간에 전파되기 때문에.</li></ol><h4 id="은닉"><a href="#은닉" class="headerlink" title="은닉"></a><strong>은닉</strong></h4><p>왜 안보여 줄까? ⇒ 지식 (knowledge)<br>은닉을 하는 이유는 사람때문이다. 사람을 못믿기 때문에..<br>객체지향은 사람 중심의 사고로 사람을 무지하다고 생각하는..ㅋㅋ 패러다임이다.</p><h4 id="캡슐화"><a href="#캡슐화" class="headerlink" title="캡슐화"></a><strong>캡슐화</strong></h4><p>은닉과 전혀 다른 이야기이다. 나의 행동을 구체적으로 부여주지 않으려고 하는건 아니다.<br><strong>추상화된 수준으로 설명하고 싶은 것.</strong><br>(ex_ATM기기: 돈세는 소리로 사용자의 목적을 인지시키지만, 실제 내부에서는 많은 일이 벌어진다.)</p><p>캡슐화를 common sense로 제공한다.<br>*<em>가장 설계능력이 많이 필요한 부부은 캡슐화이다. *</em><br>좋은 아키텍쳐는 캡슐화를 잘한다.<br>캡슐화를 하는 이유 중 하나는 객체망을 숨기기 위한 것도 있다.<br>아키텍쳐들이 하는 일들이다.</p><p>기계 친화적인 코드는 없다. 기계친화적인 포맷은 없다.<br>사람에게 이해가 쉬운 코드. 사람이 잘 사용할 수 있는 캡슐화. </p><p><strong>⇒ 객체지향이 지원하는 것이다.</strong></p><hr><p><a name="1-2"></a></p><h2 id="1-2-값지향"><a href="#1-2-값지향" class="headerlink" title="1.2 값지향"></a>1.2 값지향</h2><p><a name="1-2-1"></a></p><h3 id="1-값의-복사를-사용함"><a href="#1-값의-복사를-사용함" class="headerlink" title="1) 값의 복사를 사용함."></a>1) 값의 복사를 사용함.</h3><h4 id="값의-평가-방법"><a href="#값의-평가-방법" class="headerlink" title="* 값의 평가 방법"></a>* 값의 평가 방법</h4><p>값이라는 것은 어떻게 구분할까?<br>객체 간의 식별은 메모리의 주소로 한다.</p><p>값에서는 메모리의 주소는 틀리지만,<br>타입에서 인정한 동과평과방법에 의해서<br>값의 동과를 판별하는 전용식이 따로 있다. </p><p>메모리의 주소로 평가하는 것이 아니라<br>값에 따라서 평가하는 방법이 다 다르다.</p><hr><h4 id="값을-처리하는-유틸리티-함수가-존재"><a href="#값을-처리하는-유틸리티-함수가-존재" class="headerlink" title="* 값을 처리하는 유틸리티 함수가 존재"></a>* 값을 처리하는 유틸리티 함수가 존재</h4><p>값에서는 값을 평가하는 기준이 따로 있고,<br>그것으로 동과를 평가한다. (메모리의 주소로 평가하지 않는다.)<br>값이 있으면 값의 동과를 평가하는 식은 값 밖에 있다.<br>메소드도 아니다.<br>메소드로 처리하지 않고 값을 처리하는 유틸리티 함수로 값을 처리하게 된다. </p><ul><li>타입 그룹별로 존재하게 된다.</li></ul><hr><h5 id="함수가-값을-처리하는-경우-컨텍스트는-없음"><a href="#함수가-값을-처리하는-경우-컨텍스트는-없음" class="headerlink" title="* 함수가 값을 처리하는 경우 컨텍스트는 없음"></a>* 함수가 값을 처리하는 경우 컨텍스트는 없음</h5><p>메모리에 있는 값 그 자체를 사용한다.</p><blockquote><p>cf__2. 객체도 값처럼 사용하면 값 컨텍스트로 넘어간다.<br>자바같은 언어에서 객체는 생성할때 무조건 고유한 해시코드를 갖고 태어난다.<br>객체는 원래 메모리 주소로 구분해야하는데, 해시코드를 어딘가에 캐시잡아놓고, 해시코드와 해시코드를 비교해서 객체의 동과를 비교하려고 한다. 이런 경우 객체지만 값 컨택스트로 넘어간다.<br>메모리의 주소로 비교해야하는데, 특별한 값의 비교방법으로 동과를 평가하면 그 비교식들은 순식간의 값 컨텍스트로 바뀐다.</p></blockquote><hr><p><a name="1-2-2"></a></p><h3 id="2-값은-순수한-데이터로-책임의-개념이-없음"><a href="#2-값은-순수한-데이터로-책임의-개념이-없음" class="headerlink" title="2) 값은 순수한 데이터로 책임의 개념이 없음"></a>2) 값은 순수한 데이터로 책임의 개념이 없음</h3><h4 id="각-역할에-맞는-적절한-값의-타입이-존재함"><a href="#각-역할에-맞는-적절한-값의-타입이-존재함" class="headerlink" title="* 각 역할에 맞는 적절한 값의 타입이 존재함"></a>* 각 역할에 맞는 적절한 값의 타입이 존재함</h4><p>값 지향에서는 값과 독립적인 함수일가?<br>인티저를 더하는 함수는 값에 독립적일까? 독립적이다.<br><strong>단지 타입에 종속되어있다.</strong> </p><p>어떤 함수는 인티저 타입만 건드릴 수 있고,<br>어떤 함수는 더블 타입만 건드릴 수 있다.<br>이때 말한 타입은 객체타입이 아님.</p><p>타입에 따라서 값타입이냐<br>객체타입이냐는 굉장히 큰 구분점을 갖게 된다.<br>값타입에서는 그 타입이 함수를 그룹짓는 기준이 되어버린다. </p><p>값에서는 하나하나 값을 구분하는 것이 아니라<br>값의 타입만 구분할 수 있기 때문이다.<br>그 다음에는 이 값과 값의 크기만 갖는것이다.</p><p>객체는 그렇게 구분되지 않는다.<br>메모리만 있으면 독립성이 확보이다.<br>값은 복잡한 녀석들이다 의외로 </p><hr><h4 id="값을-처리하는-함수의-조합으로-문제를-해결함"><a href="#값을-처리하는-함수의-조합으로-문제를-해결함" class="headerlink" title="*  값을 처리하는 함수의 조합으로 문제를 해결함"></a>*  값을 처리하는 함수의 조합으로 문제를 해결함</h4><p>값은 계속 복사되고, 계속 역할이 없는 상태로 존재하기 때문에<br>값지향을 이용해서 문제를 처리하기 위해서는<br>값을 처리하는 함수의 조합으로 문제를 처리하는 수밖에 없다.</p><blockquote><p>HOC</p></blockquote><p>끊임없이 그 함수가 값을 만들거나 값을 받아들이면서<br>최종적으로 도메인을 해결하기 때문에<br>결국에 값을 통한 문제들은 대부분 <strong>파이프라인</strong>으로 결론을 내게된다.</p><p>ex__도자기 공정<br>도자기를 예로 들자.<br>도자기를 만드는 방법을<br>흙을 반죽하고 ⇒ 반죽한 흙을 빚어서 도자기를 만드는 과정이라고 치면.<br>과정을 유틸리티 함수로 만들어보자.</p><p>함수는 흙을 받고, 반죽을 return하게끔 만들 수 있다.<br>이런 함수는 고정상태와 고정출력이 있다.<br>어떤 과정을 순수하게 고정상태와 고정출력이 있는 상태로 구분지어서 나눌 수 있냐가 중요하다.</p><p>-값지향을 하기 위해서는 상태를 구분지을 수 있냐 없냐 즉,<br>내가 처리하려는 공정을 딱딱 잘라낼 수 있는지 없는지가 굉장히 중요하다. </p><p><strong>하지만 우리 비즈니스의 요건들은 딱딱 잘라낼 수 있는 상황이 아니다.</strong><br>무조건 아닌 것은 아니고, 우리가 속해있는 도메인에 달려있다.<br>값지향으로는 가역성을 만들기 어려워서 리셋을 한다.</p><hr><p><a name="1-2-3"></a></p><h3 id="3-값-지향-사고"><a href="#3-값-지향-사고" class="headerlink" title="3) 값 지향 사고"></a>3) 값 지향 사고</h3><ol><li>연산을 통해 문제를 해결한다.</li><li>연산에 적합한 값을 정의한다(함수포함)</li><li>값을 통해 문제를 해결한다.</li><li>순수함수를 활용하여 상태를 제거한다.</li></ol><p>값과<br>immutable과<br>rx와<br>함수형으로 풀 수 있는 문제는<br>그렇게 많지 않다.</p><p>주요 도메인은 객체지향을 쓰는 이유는 사람의 마음은 기계가 아니기 때문에..<br>개발 잘 하고싶으면 인지과학, 인지심리, 뇌과학 배우면 좋다.<br>사람들이 좋아하는 것을 하면 좋은 아키텍처가 될수있다 .. :)</p><hr><p><a name="1-3"></a></p><h2 id="1-3-객체지향에서-단일-책임의-도출-기준"><a href="#1-3-객체지향에서-단일-책임의-도출-기준" class="headerlink" title="1.3 객체지향에서 단일 책임의 도출 기준"></a>1.3 객체지향에서 단일 책임의 도출 기준</h2><h3 id="객체-디자인-또는-설계"><a href="#객체-디자인-또는-설계" class="headerlink" title="객체 디자인 또는 설계"></a>객체 디자인 또는 설계</h3><p>객체의 책임을 도출하고 객체망을 구성하는 것</p><p>책임 (or 역할)을 도출하는 기준으로 사용할 수 있는 후보군<br>3가지 요령이 있다. (3번으로 갈수록 뒤로갈수록 중요성이 높다.)</p><hr><p><a name="1-3-1"></a></p><h4 id="1-도메인-의존성"><a href="#1-도메인-의존성" class="headerlink" title="1) 도메인 - 의존성"></a>1) 도메인 - 의존성</h4><p>객체디자인을 할 때 도메인에서 뽑는 것이 좋다.</p><ul><li>의존성 관리가 훨씬 쉬워진다.</li><li>객체망을 구성할때 독립적인 단위로 구성할 수 있다.</li></ul><h5 id="첫번째로-역할을-인식할때는-도메인-경계를-나누고-시작하자"><a href="#첫번째로-역할을-인식할때는-도메인-경계를-나누고-시작하자" class="headerlink" title="* 첫번째로 역할을 인식할때는 도메인 경계를 나누고 시작하자."></a>* 첫번째로 역할을 인식할때는 도메인 경계를 나누고 시작하자.</h5><p><strong>DDD 개발</strong>: 의존성때문에!</p><ul><li>의존성의 범위를 정의할 수 있기 때문에</li><li>가역성이 좋아진다.</li></ul><hr><p><a name="1-3-2"></a></p><h4 id="2-네이티브-영역-가변성"><a href="#2-네이티브-영역-가변성" class="headerlink" title="2) 네이티브 영역 - 가변성"></a>2) 네이티브 영역 - 가변성</h4><p>개발은 크게 2가지 영역을 다룬다고 생각해도된다.</p><ol><li><strong>인메모리 객체</strong><br>로직이 메모리안에서 도는 로직들이 있다.<br>-</li><li><strong>I/O</strong> (네이티브 영역)<br>통제권 밖에 잇는 것.<br>ex. DOM, 쿠키, ajax</li></ol><h5 id="인메모리와-인메모리-바깥-생태계가-주고받는-행위가-존재한다"><a href="#인메모리와-인메모리-바깥-생태계가-주고받는-행위가-존재한다" class="headerlink" title="* 인메모리와 인메모리 바깥 생태계가 주고받는 행위가 존재한다."></a>* 인메모리와 인메모리 바깥 생태계가 주고받는 행위가 존재한다.</h5><ul><li>쿠키를 읽어온다. : 하드에서 읽어옴</li><li>네트워크 통신 : 소켓으로 읽어옴</li><li>돔하고 대화..</li></ul><p>I/O를 사용하면 드득거린다.<br>쿠키를 읽을때 드득거리는 것을 볼 수 있다.<br><strong>때문에 일부러 <code>웹워커</code>같은 것을 사용한다.</strong></p><ul><li>ajax 비동기인데 왜 워커에서 띄어서 하지?<ul><li>ajax가 I/O라서 ajax가 발동하는 순간을 보면 드득거린다.</li><li>백그라운드 thread를 띄어서(웹워커) 여기서 I/O를 띄어야,<br>메인 thread에 영향을 안주게 된다.</li></ul></li></ul><h5 id="네이티브-영역-I-O영역"><a href="#네이티브-영역-I-O영역" class="headerlink" title="* 네이티브 영역: I/O영역"></a>* 네이티브 영역: I/O영역</h5><p>인메모리 영역과 네이티브 영역을 분리해서 객체를 구성해라.</p><p><strong>믹스한 경우</strong></p><ul><li>ex__<br>인메모리 객체와 돔을 믹스해서 사이트를 만들엇을 경우<br>돔말고 캔버스로 바꾸면? =&gt; 고우투 헬</li></ul><p><strong>이 두개를 분리한 사례</strong> </p><ul><li>React</li><li>리액트의 인메모리 구조체가<br>네이티브와 완전히 분리되어있기 때문에<br>.리액트로 짠 코드를<br>리액트 네이티브로 바꿀 수 있고<br>리액트 캔버스로 바꿀 수 있다.<br>.리액트 본체가 완전히 인메모리로 되어있기 때문에 가능한 상황.</li></ul><p>도메인보다 더 중요하다.<br>네이티브 도메인을 분리해주자.</p><hr><h5 id="정리"><a href="#정리" class="headerlink" title="정리 **"></a>정리 **</h5><p>네이티브 영역을 분리해서 프로그램을 구축하지 않으면<br>새로운 네이티브 영역과 바인딩하거나 환경이 바뀔때 비용을 든다..<br>네이티브 영역에 의존하면 안된다.<br>의존하지 않기 위해서는 인메모리, I/O 따로 만들어야한다.</p><blockquote><p>도메인 패턴<br>도메인 패턴을 따르지 않는 패턴을<br>enterprise pattern에서 <strong>transaction script pattern</strong></p></blockquote><hr><p><a name="1-3-3"></a></p><h4 id="3-변화율-유지보수"><a href="#3-변화율-유지보수" class="headerlink" title="3) 변화율 - 유지보수"></a>3) 변화율 - 유지보수</h4><p>변화율의 기준으로 나누어야한다.</p><p>예를 들어<br>고객의 <strong>비즈니스 요구사항</strong>이 바뀔때 바뀌는 부분이고<br>고객의 <strong>시장반응</strong>이 바뀔때 바뀌는 부분이라면<br>해당 변화율 기준으로 나눠놔야한다.</p><p>구간을 나눠서, 책임을 나눌 때<br>어떠한 일때문에 바뀌는지에 따라서 나눠 놓으라는 것.</p><p>모든 프로그램은 변하니까.<br>변하는 이유에 따라서 나눠놔라.<br>좋은 아키텍트가 되는 중요한 자질이다.</p><p>변화율을 꽤뚫어봐라!변화율에 대한 센스가 아키텍트의 중요한 자질.</p><hr><hr><p>도메인을 기준으로 책임을 도출해보자.<br>네이티브 영역을 분리해서 책임을 도출해보자.<br>변화율을 인식해서 책임을 도출해보자.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;코드스피츠 강의 정리록&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;생소한 도메인으로 배우는게 좋다.&lt;br&gt;익숙한 도메인들은 익숙한 처리방법으로 처리하기때문에 객체지향을 배우기 어렵다.&lt;br&gt;때문에 80기는 게임을 통해서 진행할 
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2019 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2019-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="OOP" scheme="http://feel5ny.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>(ing..) ES6 Symbol 프로퍼티</title>
    <link href="http://feel5ny.github.io/2019/02/04/JS_24/"/>
    <id>http://feel5ny.github.io/2019/02/04/JS_24/</id>
    <published>2019-02-04T01:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ECMAScript6 책 (두고두고 보는 자바스크립트 표준 레퍼런스)<br>정리중 입니다.</p></blockquote><hr><p><a name="0"></a></p><h2 id="0-Well-Known-Symbol"><a href="#0-Well-Known-Symbol" class="headerlink" title="0. Well-Known Symbol"></a>0. Well-Known Symbol</h2><p>스펙에서 <code>@@iterator</code> 형태로 작성된 것을 볼 수 있는데, <code>@@</code>는 <code>Symbol</code> 대신 사용한 것이다.</p><ul><li>@@iterator === Symobl.iterator</li></ul><p>Well-Known Symbol은 스펙에서 처리 알고리즘을 구분하기 위해 부여한 이름이다.</p><ul><li>즉, 자바스크립트 엔진이 디폴트로 처리하는 알고리즘 유형 이름이다.</li></ul><p>자바스크립트 프로그램에 같은 이름의 Well-Known Symbol을 작성하면 엔진의 디폴트처리를 실행하지 않고, 프로그램에 작성된 코드를 실행한다.</p><ul><li>Well-Known Symbol이 오버라이드되는 것과 같으므로 프로그램에 같은 이름을 작성하여 Well-Known Symbol기능을 대체할 수 있다.</li><li>이런 가변성과 유용성을 제공하는 것이 Well-Known Symbol의 목적.</li></ul><p>11개의 Well-Known Symbol이 있다.</p><p><a name="1"></a></p><h2 id="1-toStringTag"><a href="#1-toStringTag" class="headerlink" title="1. toStringTag"></a>1. toStringTag</h2><p><code>[object Object]</code> 형태에서 Object를 Symbol.toStringTag 값으료 정하면 Object 문자열이 해당 값으로 출력된다.</p><ul><li>Object를 toString으로 반환할 때와 Function 오브젝트를 toString으로 반활할때 둘다 <code>[obejct Object]</code>로 출력되므로 이를 구분하기 위해 <code>Symbol.toSTringTag</code>로 구분지으면 된다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b.prototype[<span class="built_in">Symbol</span>.toStringTag]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;</span><br><span class="line">a.toString() <span class="comment">// "[object Object]"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">B.prototype[<span class="built_in">Symbol</span>.toStringTag] = <span class="string">"나는 B"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> B()</span><br><span class="line">c.toString() <span class="comment">// "[object 나는 B]"</span></span><br></pre></td></tr></table></figure><h3 id="1-2-클래스의-메서드로-사용"><a href="#1-2-클래스의-메서드로-사용" class="headerlink" title="1-2. 클래스의 메서드로 사용"></a>1-2. 클래스의 메서드로 사용</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span> </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> aObj = <span class="keyword">new</span> a();</span><br><span class="line"><span class="built_in">console</span>.log(aObj.toString()); <span class="comment">// "[object Object]"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="keyword">get</span>[Symbol.toStringTag]()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'나는 B'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> BObj = <span class="keyword">new</span> B();</span><br><span class="line"><span class="built_in">console</span>.log(BObj.toString()); </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Map</span>.prototype[<span class="built_in">Symbol</span>.toStringTag]);</span><br></pre></td></tr></table></figure><p>개발자 코드로 Well-Known Symbol 기능을 대체할 수 있다.</p><p><a name="2"></a></p><h2 id="2-isConcatSpreadable"><a href="#2-isConcatSpreadable" class="headerlink" title="2. isConcatSpreadable"></a>2. isConcatSpreadable</h2><p><a name="3"></a></p><h2 id="3-unscopables"><a href="#3-unscopables" class="headerlink" title="3. unscopables"></a>3. unscopables</h2><p><a name="4"></a></p><h2 id="4-species-개념"><a href="#4-species-개념" class="headerlink" title="4. species 개념"></a>4. species 개념</h2><p><a name="5"></a></p><h2 id="5-species"><a href="#5-species" class="headerlink" title="5. species"></a>5. species</h2><p><a name="6"></a></p><h2 id="6-다른-Class-변환"><a href="#6-다른-Class-변환" class="headerlink" title="6. 다른 Class 변환"></a>6. 다른 Class 변환</h2><p><a name="7"></a></p><h2 id="7-null-변환"><a href="#7-null-변환" class="headerlink" title="7. null 변환"></a>7. null 변환</h2><p><a name="8"></a></p><h2 id="8-toPrimitive"><a href="#8-toPrimitive" class="headerlink" title="8. toPrimitive"></a>8. toPrimitive</h2><p><a name="9"></a></p><h2 id="9-iterator"><a href="#9-iterator" class="headerlink" title="9. iterator"></a>9. iterator</h2><p>Symbol.iterator()는 이터레이터 오브젝트를 생성하며 반환한다.<br>Symbol.iterator는 String, Array, Map, Set, TypedArray 오브젝트의 prototype에 연결되어 있다.<br><strong>오브젝트의 [Symbol.iterator]를 호출하면 이터레이터 오브젝트를 생성하여 반환한다.</strong></p><h3 id="Array-prototype-Symbol-iterator"><a href="#Array-prototype-Symbol-iterator" class="headerlink" title="Array.prototype[Symbol.iterator]"></a>Array.prototype[Symbol.iterator]</h3><p>배열을 처리하기 위한 이터레이터 오브젝트를 생성하여 반환한다.<br>배열 엘리먼트를 하나씩 처리할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numberArray = [<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> numberArray)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iteratorObj = numberArray[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br><span class="line"><span class="built_in">console</span>.log(iteratorObj.next());</span><br></pre></td></tr></table></figure><ul><li><code>for..of</code>문에서 배열이 반복되는 것은 numberArray 오브젝트에 <code>Symbol.iterator</code>가 있기 때문이다.</li><li>배열 엘리먼트를 하나씩 읽는 처리는 Symbol.iterator()를 호출하여 값을 반환하는 것에 해당한다.</li></ul><p><code>numberArray[Symbol.iterator]();</code></p><ul><li>numberArray 인스턴스의 Symbol.iterator()를 호출하는 것으로 이터레이터 오브젝트를 생성하여 반환한다.</li></ul><img src="/images/2019/09/01.png"><img src="/images/2019/09/02.png"><h3 id="String-prototype-Symbol-iterator"><a href="#String-prototype-Symbol-iterator" class="headerlink" title="String.prototype[Symbol.iterator]"></a>String.prototype[Symbol.iterator]</h3><p><code>Array.prototype[Symbol.iterator]</code> 와 같은 원리</p><h3 id="Object-prototype-Symbol-iterator"><a href="#Object-prototype-Symbol-iterator" class="headerlink" title="Object.prototype[Symbol.iterator]"></a>Object.prototype[Symbol.iterator]</h3><p>Object에는 Symbol.iterator가 없다. 때문에 for-of를 사용할 수 없다.<br>obj 내에 Symbol.iterator를 작성하면 반복 처리할 수 있다.</p><p><a name="10"></a></p><h2 id="10-Generator"><a href="#10-Generator" class="headerlink" title="10. Generator"></a>10. Generator</h2><p><a name="11"></a></p><h2 id="11-match-match-결과-반환"><a href="#11-match-match-결과-반환" class="headerlink" title="11. match(): match 결과 반환"></a>11. match(): match 결과 반환</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;ECMAScript6 책 (두고두고 보는 자바스크립트 표준 레퍼런스)&lt;br&gt;정리중 입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&quot;0&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;0-Well-Known-Symbo
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="symbol" scheme="http://feel5ny.github.io/tags/symbol/"/>
    
      <category term="iterator" scheme="http://feel5ny.github.io/tags/iterator/"/>
    
  </entry>
  
  <entry>
    <title>ES6 Symbol 오브젝트</title>
    <link href="http://feel5ny.github.io/2019/02/03/JS_23/"/>
    <id>http://feel5ny.github.io/2019/02/03/JS_23/</id>
    <published>2019-02-03T14:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>Symbol에 대해서 이해가 안갔는데 C언어의 enum과 비슷한 개념이라고 설명한 부분에서 살짝 감이 왔다. </p><hr><blockquote><p>ECMAScript6 책 (두고두고 보는 자바스크립트 표준 레퍼런스)<br>인프런 JavaScript ES6+ 제대로 알아보기 – 중급 :: symbol</p></blockquote><hr><p>심볼은 3가지 형태로 사용할 수 있다.</p><ol><li><strong>Symbol()</strong>: Symbol 값을 생성하며 스코프 안에서 사용한다.</li><li><strong>Symbol.for()</strong>: 글로벌 Symbol registry에 저장되며 전체 프로그램에서 사용한다.</li><li><strong>Well-Known Symbol</strong>: 빌트인 Symbol 프로퍼티로 오버라이드하여 기능을 추가, 변경할 수 있다.</li></ol><p><a name="1"></a></p><h2 id="1-primitive"><a href="#1-primitive" class="headerlink" title="1. primitive"></a>1. primitive</h2><p>string, number, boolean은 레퍼(Wrapper) 오브젝트가 있다.</p><ul><li>string은 String</li><li>number는 Number</li><li>boolean은 Boolean</li><li>es6에서 symbol의 Symbol 오브젝트가 추가되었다.</li></ul><p>wrapper 오브젝트는 vlaueOf()로 프리미티브 값을 구할 수 있지만, symbol은 값을 반환하지 않는다.</p><hr><p><a name="2"></a></p><h2 id="2-Symbol"><a href="#2-Symbol" class="headerlink" title="2. Symbol()"></a>2. Symbol()</h2><p><code>Symbol([description])</code></p><ul><li>description: 설명, 주석</li><li>반환값: 유니크한 Symbol 값</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>();</span><br></pre></td></tr></table></figure><ol><li>new 연산자를 사용하지 않는다.</li><li>Symbol()로 생성된 값은 프로그램 전체를 통해 유일하고, 값을 변경할 수 없다.(immutable)<ul><li><strong>C언어의 enum과 비슷한 개념이다.</strong></li></ul></li><li>생성한 Symobol에 프로퍼티를 설정할 수 없다.</li><li>반환자가 오브젝트가 아니므로, 오브젝트를 생성한다고 할 수 없다.<ul><li><strong>symbol값을 생성한다</strong>는 표현이 적절하다.</li></ul></li><li>String의 <code>&#39;&#39;</code>, Array의 <code>[]</code> 처럼 Symbol을 생성하는 리터럴이 없다.<ul><li>undefined와 null 처럼 <strong>그 자체가 값이 되는 것도 아니다.</strong></li><li><strong>함수로 호출해야 값을 생성하여 반환한다.</strong> <code>Symbol()</code></li></ul></li><li>Symbol()로 값을 생성하고 출력하면, Symbol()로 생성한 값을 반환하지 않고, Symbol 값을 생성했던 <code>형태를 반환한다.</code> 이는 symbol의 특징이다.</li><li><strong>Symbol값을 외부에 노출시키지 않는 것이 Symbol의 특징이다.</strong></li><li>Symbol()로 생성한 값의 설명이나 주석을 문자열로 작성한다.<br>Symbol값을 외부에 제공하지 않으므로 디버깅할 때 유용하다.<br>파라미터를 작성하지 않으면 <code>undefined</code>로 인식한다.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">feature1: <span class="keyword">const</span> sym = <span class="built_in">Symbol</span>();</span><br><span class="line">feature6: sym              <span class="comment">// Symbol()</span></span><br><span class="line">feature_: <span class="keyword">typeof</span> sym       <span class="comment">// symbol</span></span><br><span class="line">feature8: <span class="built_in">Symbol</span>(<span class="string">"주석"</span>)    <span class="comment">// Symbole(주석)</span></span><br><span class="line">feature2: sym == Symbole() <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><p><a name="3"></a></p><h2 id="3-Symbol-값-변경"><a href="#3-Symbol-값-변경" class="headerlink" title="3. Symbol 값 변경"></a>3. Symbol 값 변경</h2><ul><li>Symbol()로 생성한 Symbol값은 변경할 수 없다.</li><li>Symbol값에 문자열을 추가하고 싶을 경우 Symbol을 toString()이나 String()으로 변환한 후 연결해야한다.</li></ul><hr><p><a name="4"></a></p><h2 id="4-Symbol-오브젝트-생성"><a href="#4-Symbol-오브젝트-생성" class="headerlink" title="4. Symbol 오브젝트 생성"></a>4. Symbol 오브젝트 생성</h2><p>Object(123)처럼 Object()의 파라미터에 123을 지정하면 Number 오브젝트를 반환한다.</p><ul><li>Object() 파라미터에 Symbol 값을 지정하면 Symbol 오브젝트를 반환한다.</li><li>Symbol 오브젝트에 Symbol메서드, Symbol.prototype, protototype에 연결된 프로퍼티가 설정된다.</li></ul><hr><p><a name="5"></a></p><h2 id="5-오브젝트에서-Symbol-사용"><a href="#5-오브젝트에서-Symbol-사용" class="headerlink" title="5. 오브젝트에서 Symbol 사용"></a>5. 오브젝트에서 Symbol 사용</h2><p>유일한 값을 갖는 Symbol 특성을 활용하여<br>Symbol 값을 오브젝트의 프로퍼티 키로 사용하면 프로퍼티<br>키가 중복되지 않습니다.</p><h3 id="symbol-keyed-property"><a href="#symbol-keyed-property" class="headerlink" title="symbol-keyed property"></a>symbol-keyed property</h3><p><code>[Symbol()]</code>형태와 같이 대괄호 안에 Symbol()을 작성 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;[<span class="built_in">Symbol</span>()]: <span class="number">123</span>&#125;</span><br></pre></td></tr></table></figure><p>이렇게 프로퍼티 키에 작성한 Symbol()을 <strong><code>symbol-keyed property</code></strong>라고 한다.</p><ul><li><code>{ ABC: 123 }</code>에서 <code>ABC</code>에 Symbol값을 넣은 것이다.<br>여기서 Symbol값은 문자열이 아니라 그냥 <strong>Symbol값</strong>이라고 생각하면된다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>(<span class="string">"123"</span>);</span><br><span class="line"><span class="keyword">let</span> obj = &#123;[sym]: <span class="string">"456"</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj);      <span class="comment">// &#123;Symbol(123): "456"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj[sym]); <span class="comment">// 456</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.sym);  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>대괄호를 사용하지 않고 <code>obj.sym</code> 형태로 작성하면 에러는 안나지만 <code>undefined</code>가 반환된다.</p><ul><li>Symbol을 키로 갖는 프로퍼티를 <code>&lt;&lt;&gt;&gt;</code>형태로 표기하고 있다.</li></ul><hr><p><a name="6"></a></p><h2 id="6-Symbol-사용형태"><a href="#6-Symbol-사용형태" class="headerlink" title="6. Symbol 사용형태"></a>6. Symbol 사용형태</h2><p>for-in 문에서 symbol-keyed property는 열거되지 않는다.</p><ul><li>Symbol이 <code>[[Enumerable]]: false</code>이기 때문.<br><a href="https://feel5ny.github.io/2017/12/04/JS_05_1/">(객체의 데이터 프로퍼티에서 <code>[[Enumerable]]</code>은 기본적으로 true이다.)</a></li></ul><h3 id="6-1-for-in-문에서-Symbol-사용-외부스코프에서-의미없는-키값-gt-symbol화"><a href="#6-1-for-in-문에서-Symbol-사용-외부스코프에서-의미없는-키값-gt-symbol화" class="headerlink" title="6.1 for-in 문에서 Symbol 사용 (외부스코프에서 의미없는 키값 =&gt; symbol화)"></a>6.1 for-in 문에서 Symbol 사용 (외부스코프에서 의미없는 키값 =&gt; symbol화)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">nine</span>: <span class="number">999</span>&#125;;</span><br><span class="line">obj[<span class="built_in">Symbol</span>(<span class="string">"one"</span>)] = <span class="number">111</span>;</span><br><span class="line">obj[<span class="built_in">Symbol</span>(<span class="string">"two"</span>)] = <span class="string">"222"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;nine: 999, Symbol(one): 111, Symbol(two): "222"&#125;</span></span><br><span class="line"><span class="comment">// nine</span></span><br></pre></td></tr></table></figure><p>일반적으로 for-in문으로 객체를 순회하면서 symbol-keyd property는 접근할 수 없다.<br>때문에 객체의 고유한 식별자로써, 상수개념으로 사용한다.<br>외부 스코프에서 의미가 있지 않는 값들만 symbol화 시킨다.<br>은닉화의 목적이 있기때문에 외부 스코프에서는 접근가능하지 않아야하지만 <a href="'#6-4'">내부에서는 가능하도록 만들어야한다.</a></p><ul><li><code>Object.getOwnPropertySymbols()</code>를 사용하여 symbol-keyed property 키값들을 열거할 수 있다.</li><li><code>Reflect.ownKeys</code>를 사용하면 symbol-keyed property 키와 값까지 알 수 있다.</li></ul><h3 id="6-2-클래스-메서드-이름으로-Symbol-사용"><a href="#6-2-클래스-메서드-이름으로-Symbol-사용" class="headerlink" title="6.2 클래스 메서드 이름으로 Symbol 사용"></a>6.2 클래스 메서드 이름으로 Symbol 사용</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbolOne = <span class="built_in">Symbol</span>(<span class="string">"symbol one"</span>);</span><br><span class="line"><span class="keyword">const</span> symbolTwo = <span class="built_in">Symbol</span>(<span class="string">"symbol two"</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sports</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> [symbolOne]()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Symbol-1"</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  [symbolTwo]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Symbol-2"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Sports[symbolOne]());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> Sports();</span><br><span class="line"><span class="built_in">console</span>.log(obj[symbolTwo]());</span><br></pre></td></tr></table></figure><h3 id="6-3-JSON-stringify-에서-Symbol-사용"><a href="#6-3-JSON-stringify-에서-Symbol-사용" class="headerlink" title="6.3 JSON.stringify()에서 Symbol 사용"></a>6.3 JSON.stringify()에서 Symbol 사용</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>(<span class="string">"key"</span>);</span><br><span class="line"><span class="keyword">let</span> result = <span class="built_in">JSON</span>.stringify(&#123;[sym]: <span class="string">"값"</span>&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>빈 오브젝트가 반환된다.<br>이는 Symbol 값을 외부에 노출되지 않도록 하기 위한 조치이다.</p><p><a name="6-4"></a></p><h3 id="6-4-프로퍼티-은닉화"><a href="#6-4-프로퍼티-은닉화" class="headerlink" title="6.4 프로퍼티 은닉화"></a>6.4 프로퍼티 은닉화</h3><ul><li>symbol로 정의된 키값에는 바로 접근이 불가능하다.</li><li>키값이 들어있는 프로퍼티를 객체 내부에 적용해놓으면 심볼 키에 접근가능하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    [a]: <span class="number">10</span>,</span><br><span class="line">    a: a,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Symbol-for"><a href="#7-Symbol-for" class="headerlink" title="7. Symbol.for"></a>7. <code>Symbol.for</code></h2><p>public member 전역공간에서 공유되는 심볼.<br>여기저기서 많이 사용되는 공용상수를 사용할때 사용</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">Symbol</span>.for(<span class="string">'abc'</span>) </span><br><span class="line"><span class="comment">// 새로 생성해서 넣음.</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// "Symbol(abc)"</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">Symbol</span>.for(<span class="string">'abc'</span>) </span><br><span class="line"><span class="comment">// 기존에 'abc' 식별자로 되어있는 symbol을 찾아서 있으면 넣어준다.</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// "Symbol(abc)"</span></span><br><span class="line"></span><br><span class="line">a === b <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>?!a와 b가 값과 타입이 같다고 나온다.<br><code>Symbol.for</code>는 for의 인자를 식별자로 사용한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> COMMON1 = <span class="built_in">Symbol</span>.for(<span class="string">'공유심볼'</span>)</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">[COMMON1]: <span class="string">'공유할 프로퍼티 키값. 어디서든 접근 가능'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br><span class="line">obj1[<span class="built_in">Symbol</span>.for(<span class="string">'공유심볼'</span>)]</span><br><span class="line"><span class="comment">// "공유할 프로퍼티 키값. 어디서든 접근 가능"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Comment&quot;&gt;&lt;a href=&quot;#Comment&quot; class=&quot;headerlink&quot; title=&quot;Comment&quot;&gt;&lt;/a&gt;Comment&lt;/h3&gt;&lt;p&gt;Symbol에 대해서 이해가 안갔는데 C언어의 enum과 비슷한 개념이라고 설명한 부분에서
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="symbol" scheme="http://feel5ny.github.io/tags/symbol/"/>
    
  </entry>
  
  <entry>
    <title>코드스피츠77 ES6_4회차_Abstract loop &amp; lazy execution</title>
    <link href="http://feel5ny.github.io/2019/02/03/JS_20/"/>
    <id>http://feel5ny.github.io/2019/02/03/JS_20/</id>
    <published>2019-02-03T11:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<p>🌕🌑🌑</p><h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h3><p>복습할때나 이 문제가 까먹었을 즈음에 풀어보기</p><ol><li>iterable객체 완성하기<br><code>???</code> 구해보기<br>(2가지 방법으로)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]()&#123;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">  data: [&#123;<span class="attr">a</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="attr">b</span>:<span class="string">'-'</span>&#125;, [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>], <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">  next()&#123;</span><br><span class="line">    <span class="keyword">return</span> ???</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>코드스피츠 강의 정리록입니다.</p></blockquote><hr><h3 id="4강-키워드-Generator의-지연실행-측면과-이를-위한-추상루프화"><a href="#4강-키워드-Generator의-지연실행-측면과-이를-위한-추상루프화" class="headerlink" title="4강 키워드: Generator의 지연실행 측면과 이를 위한 추상루프화"></a>4강 키워드: Generator의 지연실행 측면과 이를 위한 추상루프화</h3><hr><p><a name="1"></a></p><h2 id="1-abstract-loop-루프의-추상화"><a href="#1-abstract-loop-루프의-추상화" class="headerlink" title="1. abstract loop: 루프의 추상화"></a>1. abstract loop: 루프의 추상화</h2><p><a name="1-1"></a></p><h3 id="1-1-complex-recursion-복잡한-반복"><a href="#1-1-complex-recursion-복잡한-반복" class="headerlink" title="1.1 complex recursion 복잡한 반복"></a>1.1 complex recursion 복잡한 반복</h3><p>단순한 배열 루프인 경우 간단히 이터레이션을 작성할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]()&#123;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;,</span><br><span class="line">  data:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], </span><br><span class="line">  next()&#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       done:<span class="keyword">this</span>.data.length == <span class="number">0</span>,</span><br><span class="line">       value:<span class="keyword">this</span>.data.shift()</span><br><span class="line">    &#125;; </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="복잡한-다층형-그래프는-어떻게-이터레이션-할-것인가"><a href="#복잡한-다층형-그래프는-어떻게-이터레이션-할-것인가" class="headerlink" title="복잡한 다층형 그래프는 어떻게 이터레이션 할 것인가?"></a>복잡한 다층형 그래프는 어떻게 이터레이션 할 것인가?</h4><p>es6와 es6이전의 객체 리터럴의 큰 차이점이 무엇인가 </p><ol><li>es6이전<ul><li>기존의 객체 리터럴에서는 객체 리터럴의 순서가 없다.</li><li>자바로 따지면 hash memory로 되어있다.</li></ul></li><li>es6<ul><li>es6의 객체 리터럴은에서는 객체 리터럴의 순서가 있다.</li><li><strong>linked hash memory</strong>로 되어있다.</li><li>반드시 순서대로 해석된다.</li></ul></li></ol><h4 id="문제"><a href="#문제" class="headerlink" title="문제"></a>문제</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]()&#123;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">  data: [&#123;<span class="attr">a</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="attr">b</span>:<span class="string">'-'</span>&#125;, [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>], <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">  next()&#123;</span><br><span class="line">    <span class="keyword">return</span> ???</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="생각해보기-글쓴이-생각"><a href="#생각해보기-글쓴이-생각" class="headerlink" title="생각해보기 (글쓴이 생각..)"></a>생각해보기 (글쓴이 생각..)</h5><ol><li>iterable 프로토콜 유지하기 </li><li>배열 요소들의 타입 검사 <ol><li>객체일 경우<br>객체 내부 키값의 요소들의 타입 검사 <ol><li>객체일 경우</li><li>배열일 경우 </li><li>일반 값인 경우<br>=&gt; 처음 타입 검사와 같은 흐름이므로 해당 flow를 recursive 되도록 한다. <ul><li>어떻게 같은 루프를 다시 태우지..</li></ul></li></ol></li><li>배열일 경우<br>배열 요소의 타입 검사<ol><li>객체일 경우</li><li>배열일 경우 </li><li>일반 값인 경우<br>=&gt; 처음 타입 검사와 같은 흐름이므로 해당 flow를 recursive 되도록 한다. <ul><li>어떻게 같은 루프를 다시 태우지..</li></ul></li></ol></li><li>일반 값인 경우<br>값 반환 </li></ol></li></ol><hr><h5 id="cf-1-루프를-어떻게하면-잘-짤-수-있을까"><a href="#cf-1-루프를-어떻게하면-잘-짤-수-있을까" class="headerlink" title="cf__1. 루프를 어떻게하면 잘 짤 수 있을까."></a>cf__1. 루프를 어떻게하면 잘 짤 수 있을까.</h5><p>루프를 잘 짜고<br>보다 어려운 로직을 짜는 방법은<br><strong>내 머리가 선언한 변수만큼을 추적할 수 있어야 한다…</strong></p><p>기본적인 알고리즘 전략은 최대한 상태를 덜쓰는것. 내 머리가 추적할 정도로..</p><hr><h4 id="정답"><a href="#정답" class="headerlink" title="정답"></a>정답</h4><p>각각이 컨테이너 형이라면<br>그 컨테이너를 다시 해체해서 다시 배열에 붙여준다.<br>더 이상 컨테이너 형이 아닐 때까지</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 프로토콜만 맞춰주면 된다.</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   done: boolean,</span></span><br><span class="line"><span class="comment">//   value: 출력값..</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]()&#123;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">  data: [&#123;<span class="attr">a</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="attr">b</span>:<span class="string">'-'</span>&#125;, [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>], <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">  next()&#123;</span><br><span class="line">    <span class="keyword">let</span> v;</span><br><span class="line">    <span class="keyword">while</span>(v = <span class="keyword">this</span>.data.shift()) &#123;</span><br><span class="line">      <span class="comment">// shift가 더이상 안되면 undefined</span></span><br><span class="line">      <span class="keyword">switch</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">Array</span>.isArray(v):</span><br><span class="line">          <span class="comment">// 2번째 케이스문의 객체 타입가드 조건문이 array 타입도 포함되므로, array만을 위한 조거문을 먼저 작성한다.</span></span><br><span class="line">          <span class="keyword">this</span>.data.unshift(...v);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> v &amp;&amp; <span class="keyword">typeof</span> v === <span class="string">'object'</span>:</span><br><span class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> v) <span class="keyword">this</span>.data.unshift(...x);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">          <span class="keyword">return</span> &#123;<span class="attr">value</span>:v, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="정답-내의-오류"><a href="#정답-내의-오류" class="headerlink" title="정답 내의 오류"></a>정답 내의 오류</h5><p><code>for(var k in v)</code></p><ol><li><p>for…in문은 <strong>prototype의 key까지 다 나오기 때문에</strong> <code>hasOwnProperty</code>를 조건에 추가해야한다.</p><ul><li>hasOwnProperty는 자신의 고유 속성, 즉 상속받은 프로퍼티가 아닌 순수 자신의 속성인 경우에만 true라는 값을 반환하는 특징이 있습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> v)&#123;</span><br><span class="line">  <span class="keyword">if</span>(v.hasOwnProperty(k)) <span class="keyword">this</span>.data.unshift(...x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>현재 상태에서는 순서 보장이 안된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> v) x.push(v[k])</span><br><span class="line"><span class="keyword">this</span>.data.unshift(...x);</span><br></pre></td></tr></table></figure></li></ol><hr><h5 id="한번더-리팩토링"><a href="#한번더-리팩토링" class="headerlink" title="한번더 리팩토링"></a>한번더 리팩토링</h5><p>값인 타입을 <code>v instanceof Object</code>로 판단할 수 있다!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]()&#123;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;</span><br><span class="line">  data: [&#123;<span class="attr">a</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="attr">b</span>:<span class="string">'-'</span>&#125;, [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>], <span class="number">8</span>, <span class="number">9</span>],</span><br><span class="line">  next()&#123;</span><br><span class="line">    <span class="keyword">let</span> v;</span><br><span class="line">    <span class="keyword">while</span>(v = <span class="keyword">this</span>.data.shift()) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!(v <span class="keyword">instanceof</span> <span class="built_in">Object</span>)) <span class="keyword">return</span> &#123;<span class="attr">value</span>: v&#125;;</span><br><span class="line">      <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(v)) v = <span class="built_in">Object</span>.values(v);</span><br><span class="line">      <span class="keyword">this</span>.data.unshift(...v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">true</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h4><p>자바스크립트 언어는 2가지로 되어있다. </p><ol><li>언어자체의 문법적인 내용, </li><li>클래스 라이브러리<br>자바스크립트의 클래스 라이브러리는 <strong>코어객체</strong> (Built-in)<br>Math, Date, RegEx…<br>=&gt; 표준으로 제공되고 있는 언어 표준의 일부<br>=&gt; 언어 스팩의 일부</li></ol><p><strong>코어객체에 있는 메서드들을 사용하는 것이<br>기본 언어자체의 문법을 사용하는 것보다 더 안전하다.</strong><br>ex. for..in보다 Object.values</p><blockquote><p><strong>재사용성 올리기</strong><br><code>unshift</code>나 <code>shift</code>로 인해서 data의 배열이 빈배열이 되는 상황이 된다.<br>클래스로 묶어서 매번 부를때마다 인스턴스를 반환하는 형태로 만들자.</p></blockquote><h5 id="cf-2-함수를-변수에-할당하자"><a href="#cf-2-함수를-변수에-할당하자" class="headerlink" title="cf__2. 함수를 변수에 할당하자."></a>cf__2. 함수를 변수에 할당하자.</h5><p>함수를 정의할때 3가지 스타일</p><ol><li>함수 표현식 </li><li>함수 선언문</li><li>Function…</li></ol><p>함수는 값이기 때문에 변수에 할당하는 형식이 맞다. 더 정확하게 호이스팅에 의존하지 않고 어느 시점에 함수를 만들었다를 명확하게 코드로 인지할 수 있기 때문에 function으로 시작하는 함수 정의방법은 아예 금지시키고 못쓰게 하는 경우가 많다. lint에도 함수선언문 금지룰이 있다.</p><p>클래스도 하나의 값이다. 변수에 할당이 된다. 변수의 할당 없이 class..로 시작하는 선언방법은 이 클래스가 언제 만들어졌는지 모호하게 만드는 관점이 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Compx = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data) &#123;<span class="keyword">this</span>.data = data;&#125;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]()&#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.data));</span><br><span class="line">    <span class="comment">// 완전한 복사. 가장빨리 복사하는 방법..</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next()&#123;</span><br><span class="line">        <span class="keyword">let</span> v;</span><br><span class="line">        <span class="keyword">while</span>(v = data.shift())&#123;</span><br><span class="line">          <span class="keyword">if</span>(!(v <span class="keyword">instanceof</span> <span class="built_in">Object</span>)) <span class="keyword">return</span> &#123;<span class="attr">value</span>:v&#125;;</span><br><span class="line">          <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(v)) v = <span class="built_in">Object</span>.values(v);</span><br><span class="line">          data.unshift(...v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">done</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> Compx([&#123;<span class="attr">a</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="attr">b</span>:<span class="string">'-'</span>&#125;, [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>], <span class="number">8</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="built_in">console</span>.log([...a]);</span><br><span class="line"><span class="built_in">console</span>.log([...a]);</span><br></pre></td></tr></table></figure><p>shift를 사용하는 것은 data가 배열이 와야하는 조건이 있기 때문에<br>data의 사본을 만들때 아예 배열화시킨다.<br><code>const data = [JSON.parse(JSON.stringify(this.data));]</code></p><p>if절을 보면 mandatory가 아닌 optional.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Compx = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data) &#123;<span class="keyword">this</span>.data = data;&#125;</span><br><span class="line">  *gene()&#123;</span><br><span class="line">    <span class="keyword">const</span> data = [<span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.data))];</span><br><span class="line">    <span class="keyword">let</span> v;</span><br><span class="line">    <span class="keyword">while</span>(v = data.shift())&#123;</span><br><span class="line">      <span class="keyword">if</span>(!(v <span class="keyword">instanceof</span> <span class="built_in">Object</span>)) <span class="keyword">yield</span> v;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(v)) v = <span class="built_in">Object</span>.values(v);</span><br><span class="line">        data.unshift(...v);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> Compx([&#123;<span class="attr">a</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>], <span class="attr">b</span>:<span class="string">'-'</span>&#125;, [<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>], <span class="number">8</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="built_in">console</span>.log([...a]);</span><br><span class="line"><span class="built_in">console</span>.log([...a]);</span><br></pre></td></tr></table></figure><hr><hr><p><a name="1-2"></a></p><h3 id="1-2-abstract-loop"><a href="#1-2-abstract-loop" class="headerlink" title="1.2 abstract loop"></a>1.2 abstract loop</h3><p>위의 루프는 목적이 있는 루프이다.<br>목적이 있는 루프를 만들고 목적을 바꾸면 루프를 다시 짜야한다.</p><h4 id="다양한-구조의-루프와-무관하게-해당-값이나-상황의-개입만-하고-싶은-경우"><a href="#다양한-구조의-루프와-무관하게-해당-값이나-상황의-개입만-하고-싶은-경우" class="headerlink" title="다양한 구조의 루프와 무관하게 해당 값이나 상황의 개입만 하고 싶은 경우"></a>다양한 구조의 루프와 무관하게 해당 값이나 상황의 개입만 하고 싶은 경우</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(data, f) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> v;</span><br><span class="line">  <span class="keyword">while</span>(v = data.shift())&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(v <span class="keyword">instanceof</span> <span class="built_in">Object</span>))&#123;</span><br><span class="line">      <span class="comment">// v로 뭔가 하는 부분</span></span><br><span class="line">      f(v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(v)) v = <span class="built_in">Object</span>.values(v);</span><br><span class="line">      data.unshift(...v);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이 상황에서 f(v)를 호출하는 body에 본래 목적과 다른 로직이 추가 될 경우,<br>같은 로직을 복사하고 원하는 로직을 추가해야하는 상황이 발생한다.<br>문으로 로직을 작성할 때는 별다른 방법이 없다.<br><strong>=&gt; 제어문을 재활용할 수 없으므로 중복정의할 수 밖에 없다.</strong><br>=&gt; 문은 사용하고 나면 재활용할 수 없는데 이걸 어떻게 객체화하지?</p><h4 id="결국-제어문을-직접-사용할-수-없고-구조객체를-이용해-루프-실행기를-별도로-구현"><a href="#결국-제어문을-직접-사용할-수-없고-구조객체를-이용해-루프-실행기를-별도로-구현" class="headerlink" title="결국 제어문을 직접 사용할 수 없고 구조객체를 이용해 루프 실행기를 별도로 구현"></a>결국 제어문을 직접 사용할 수 없고 구조객체를 이용해 루프 실행기를 별도로 구현</h4><p>구조를 추상화해보자.</p><ul><li>루프 공통 골격 </li><li>개별구조객체</li></ul><h5 id="cf-3-if문을-제거하는-방법"><a href="#cf-3-if문을-제거하는-방법" class="headerlink" title="cf__3. if문을 제거하는 방법"></a>cf__3. if문을 제거하는 방법</h5><p>우리가 배우는 거의 모든 priority 기법은 if를 어떻게하면 제거할까에 대한 연구일 수도 있다. 사람은 if가 많아지면 감당이 안된다. 조건이 많아져서..<br>if를 어떻게하면 제거할 수 있을까?</p><ul><li>정단한 이유라면 바로 제거할 수 없다. 필요에 의해서 태어났기 때문에</li><li>if로 나눠지는 경우의 수만큼의 값을 미리 만들어 놓고, 바깥쪽에서 그 값을 선택해서 들어오게 하는 수밖에 없다.</li></ul><p>아래는 if가 3개이다.</p><ol><li>array일때 </li><li>object일때</li><li>primitive일때<br>3개만큼의 객체를 만들어놓고 바깥쪽에서 객체를 결정하게 끔 만들어 주면 값으로 분리할 수 있게 된다. =&gt; 이렇게 if문이 하나씩 제거된다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(data, f) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> v;</span><br><span class="line">  <span class="keyword">while</span>(v = data.shift())&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(v <span class="keyword">instanceof</span> <span class="built_in">Object</span>))&#123;</span><br><span class="line">      f(v)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(v)) v = <span class="built_in">Object</span>.values(v);</span><br><span class="line">      data.unshift(...v);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><img src="/images/2019/10/01.png"><h4 id="팩토리-컴포지트"><a href="#팩토리-컴포지트" class="headerlink" title="팩토리 + 컴포지트"></a>팩토리 + 컴포지트</h4><ul><li>선택기는 팩토리 패턴으로</li><li>각각의 조건문을 컴포지트 패턴으로</li></ul><h5 id="cf-4-팩토리-패턴-참고"><a href="#cf-4-팩토리-패턴-참고" class="headerlink" title="cf__4. 팩토리 패턴 참고"></a>cf__4. 팩토리 패턴 <a href="https://joshua1988.github.io/web-development/javaScript/javaScript-pattern-design/#%ED%8C%A9%ED%86%A0%EB%A6%AC-%ED%8C%A8%ED%84%B4" target="_blank" rel="noopener">참고</a></h5><ul><li>비슷한 객체를 공장에서 찍어내듯이 반복적으로 생성할 수 있게 하는 패턴</li><li>컴파일 시점에 구체적인 타입(클래스)을 몰라도 객체 생성이 가능하다</li><li>팩토리 패턴의 가장 흔한 사례는 Object() 를 이용한 객체 생성시, 주어지는 값의 타입에 따라 String, Boolean, Number 등으로 객체가 생성되는 것이다.</li></ul><h5 id="cf-5-composite-패턴"><a href="#cf-5-composite-패턴" class="headerlink" title="cf__5. composite 패턴"></a>cf__5. composite 패턴</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 😵😵😵</span></span><br><span class="line"><span class="keyword">const</span> Operator = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> factory(v)&#123;</span><br><span class="line">    <span class="keyword">if</span>(v <span class="keyword">instanceof</span> <span class="built_in">Object</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(!<span class="built_in">Array</span>.isArray(v)) v = <span class="built_in">Object</span>.values(v);</span><br><span class="line">      <span class="comment">// --- object도 배열로 환원시켰기 때문에 현재 v는 배열임.</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ArrayOp(v.map(<span class="function"><span class="params">v</span> =&gt;</span> Operator.factory(v)))</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">new</span> PrimaOp(v);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(v)&#123;<span class="keyword">this</span>.v = v&#125;</span><br><span class="line">  operation(f)&#123;<span class="keyword">throw</span> <span class="string">'override'</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// primitive 타입 처리하는 클래스</span></span><br><span class="line"><span class="keyword">const</span> PrimaOp = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Operator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(v)&#123;<span class="keyword">super</span>(v)&#125;</span><br><span class="line">  operation(f)&#123;f(<span class="keyword">this</span>.v);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 타입을 처리하는 클래스</span></span><br><span class="line"><span class="keyword">const</span> ArrayOp = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Operator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(v)&#123;<span class="keyword">super</span>(v);&#125;</span><br><span class="line">  operation(f)&#123;<span class="keyword">for</span>(<span class="keyword">const</span> v <span class="keyword">of</span> <span class="keyword">this</span>.v) v.operation(f);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Operator.factory([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>, <span class="attr">b</span>:<span class="number">5</span>&#125;,<span class="number">6</span>,<span class="number">7</span>]).operation(<span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure><ul><li>케이스를 더 많이 늘리는 것도 가능하다..</li></ul><p><a name="2"></a></p><h2 id="2-lazy-execution"><a href="#2-lazy-execution" class="headerlink" title="2. lazy execution"></a>2. lazy execution</h2><p><a name="2-1"></a></p><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><p><a name="2-2"></a></p><h3 id="yield-1"><a href="#yield-1" class="headerlink" title="yield*"></a>yield*</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;🌕🌑🌑&lt;/p&gt;
&lt;h3 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h3&gt;&lt;p&gt;복습할때나 이 문제가 까먹었을 즈음에 풀어보기&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;itera
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2018 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2018-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="yield" scheme="http://feel5ny.github.io/tags/yield/"/>
    
      <category term="generator" scheme="http://feel5ny.github.io/tags/generator/"/>
    
      <category term="loop" scheme="http://feel5ny.github.io/tags/loop/"/>
    
  </entry>
  
  <entry>
    <title>코드스피츠77 ES6_3회차_Iteration &amp; generator</title>
    <link href="http://feel5ny.github.io/2019/02/03/JS_19/"/>
    <id>http://feel5ny.github.io/2019/02/03/JS_19/</id>
    <published>2019-02-03T09:20:19.000Z</published>
    <updated>2019-11-11T13:35:16.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="🌕🌑🌑"><a href="#🌕🌑🌑" class="headerlink" title="🌕🌑🌑"></a>🌕🌑🌑</h2><p>자바스크립트에서도 일반명사처럼 생긴 고유명사가 많이 나오고, 그중에 하나가 interface. 자바에서의 interface는 따로 있지만, 자바스크립트에서의 interface는 무슨 의미인지, 뭐에 쓰는 용어인지 알아보자.<br>자바스크립트 스펙에 정의되어있는 interface 규격에 맞춰 자바스크립트의 루프가 구현되어있기 때문에 중요하며, loop를 배우기 전에 알아보자.</p><p><a name="0"></a></p><h2 id="1-Interface-in-JS"><a href="#1-Interface-in-JS" class="headerlink" title="1. Interface in JS"></a>1. Interface in JS</h2><h3 id="1-1-Interface"><a href="#1-1-Interface" class="headerlink" title="1.1 Interface"></a>1.1 Interface</h3><p>ECMAScript 공식문서에서는 interface에 대한 정의를 명확하게 내리고 있다.</p><ol><li>인터페이스란 사양에 맞는 값과 연결된 속성키의 셋트 </li><li>어떤 Object라도 인터페이스의 정의를 충족시킬 수 있다.</li><li>하나의 Object는 여러 개의 인터페이스를 충족시킬 수 있다.<ul><li>반환값의 타입까지 정할 수 있다.</li></ul></li></ol><h4 id="interface-예제"><a href="#interface-예제" class="headerlink" title="interface 예제"></a>interface 예제</h4><ol><li>test라는 키를 갖고 </li><li>값으로 문자열인지를 1개 받아 boolean 결과를 반환하는 함수가 온다.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test(str)&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cf__1. es6 객체리터럴<br>test옆에 바로 괄호?</p><ul><li>es6에서 객체 리터럴에 새로 도입된 문법. </li><li>key에 function을 집어넣는 경우가 생기면, function과 <code>:</code>을 생략하고 바로 괄호를 쓸 수 있는 문법이 추가되었다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  test: <span class="function"><span class="keyword">function</span> (<span class="params">str</span>)</span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>자바스크립트 엔진 레벨에서 여러가지 interface를 정의하고 있다.</p></blockquote><hr><h3 id="1-2-Iterator-interface"><a href="#1-2-Iterator-interface" class="headerlink" title="1.2 Iterator interface"></a>1.2 Iterator interface</h3><ol><li>next라는 키를 갖고 </li><li>값으로 인자를 받지 않고<br><code>IteratorResultObject</code>를 반환하는 함수가 온다.<ul><li>IteratorResultObject는 interface이다.<br>(아래의 IteratorResult interface를 확인)</li></ul></li><li>IteratorResultObject는 <code>value</code>와 <code>done</code>이라는 키를 갖고 있다.</li><li>이 중 <code>done</code>은 계속 반복할 수 있을지 없을지에 따라 불린값을 반환한다.<ul><li>done이 <code>true</code>일때는 value는 <code>undefined</code> 라는것도 정의되어있음</li></ul></li></ol><p>위 조건만 만족하면 Iterator 객체로 본다.<br>아래는 타입스크립트에서 자바스크립트 내장 객체들을 정의해놓은 type definition 파일의 일부를 가져왔다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.es2015.iterable.d.ts</span></span><br><span class="line"><span class="keyword">interface</span> IteratorResult&lt;T&gt; &#123;</span><br><span class="line">    done: <span class="built_in">boolean</span>;</span><br><span class="line">    value: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Iterator&lt;T&gt; &#123;</span><br><span class="line">    next(value?: <span class="built_in">any</span>): IteratorResult&lt;T&gt;;</span><br><span class="line">    <span class="keyword">return</span>?(value?: <span class="built_in">any</span>): IteratorResult&lt;T&gt;;</span><br><span class="line">    <span class="keyword">throw</span>?(e?: <span class="built_in">any</span>): IteratorResult&lt;T&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  next()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="그니까-iterator란"><a href="#그니까-iterator란" class="headerlink" title="그니까 iterator란"></a>그니까 iterator란</h4><p>이터레이터 프로토콜(: 데이터 컬렉션을 순회하기 위한 프로토콜(미리약속된 규칙))은 next메소드를 호출하면 iterable을 순회하며 value, done 프로퍼티를 갖는 iteratorResultObject를 반환한다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  data: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">  next()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      value: <span class="keyword">this</span>.data.pop(),</span><br><span class="line">      done: <span class="keyword">this</span>.data.length == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="1-3-Iterable-interface"><a href="#1-3-Iterable-interface" class="headerlink" title="1.3 Iterable interface"></a>1.3 Iterable interface</h3><ol><li>Symbol.iterator라는 키를 갖고 </li><li>값으로 인자를 받지 않고 <strong><code>Iterator Object</code>를 반환하는 함수가 온다.</strong><br>Iterator Object 인터페이스는 위 1.2의 interface</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.es2015.iterable.d.ts</span></span><br><span class="line"><span class="keyword">interface</span> Iterable&lt;T&gt; &#123;</span><br><span class="line">    [Symbol.iterator](): Iterator&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IterableIterator&lt;T&gt; <span class="keyword">extends</span> Iterator&lt;T&gt; &#123;</span><br><span class="line">    [Symbol.iterator](): IterableIterator&lt;T&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  [Symbole.iterator]()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="attr">value</span>: <span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="그니까-iterable란"><a href="#그니까-iterable란" class="headerlink" title="그니까 iterable란?"></a>그니까 iterable란?</h4><p>iterable은 Symbol.iterator 메소드를 구현하거나, 프로토타입 체인에 의해 상속한 객체를 말한다.<br>Symbol.iterator 메소드는 이터레이터를 반환한다. </p><blockquote><p><a href="https://poiemaweb.com/es6-symbol" target="_blank" rel="noopener">Symbol</a>?</p><ul><li>ES6 추가된 새로운 primitive type</li><li>객체가 아닌 값으로 인식된다는 말.</li><li>typeof로 보면 Symbole 타입이 나온다.</li><li>primitive이지만 <strong>객체의 키로 사용할 수 있는 특징</strong>이 있다.</li><li>Symbol.iterator는 이터레이터 오브젝트를 생성하면서 반환한다.</li><li>오브젝트의 <code>[Symbol.iterator]</code>를 호출하면 이터레이터 오브젝트를 생성하여 반환한다. <ul><li>심볼은 주로 이름의 충돌 위험이 없는 유일한 객체의 프로퍼티 키(property key)를 만들기 위해 사용한다. </li></ul></li></ul></blockquote><p>iterator만 있으면 되지 않을까? 왜 iterable이 필요하지?</p><ul><li>loop를 돌 수 있는 reset 타이밍을 위해서</li><li>즉, loop를 돌리는 객체의 사본을 만들기 위해서 iterable형태가 필요한 것이다.<ul><li>위에서 iterable 형태를 보면, Symbole.iterator를 키로 갖는걸 볼 수 있는데,<br>루프 돌 때마다 <strong>루프를 위한 변수</strong>와 <strong>원본데이터 변수</strong>를 구분하면서 iterator를 잘 구축하라고 iterable이 한번 개입하는 것이다.</li><li><a href="https://jusungpark.tistory.com/25" target="_blank" rel="noopener">iterator 패턴</a>에서 온 개념<br></li></ul></li></ul><hr><p><a name="2"></a></p><h2 id="2-Loop-to-Iterator"><a href="#2-Loop-to-Iterator" class="headerlink" title="2. Loop to Iterator"></a>2. Loop to Iterator</h2><p>왜 for, while, do..while을 쓰지 않게 하고 이런걸 제공할까</p><ul><li>문이기 때문에 한번 실행하고 나면 사라진다.(노이만 머신의 구조)<ul><li>메모리에 남지않고, 실행된 후 사라진다.</li></ul></li><li>두번다시 반복시킬 수 없다.<ul><li>다시 호출을 위해서는 함수로 빼던지, 2번사용하던지 해야한다.</li><li>여러번 다시 사용하는것은 안전하지 않다.. 어딘가 저장해놓고 재사용해야한다.</li><li><strong>loop를 <code>식</code>으로 바꾸고 싶다는 마음이 생김!!</strong></li></ul></li></ul><hr><h3 id="2-1-While문으로-살펴보는-Iterator"><a href="#2-1-While문으로-살펴보는-Iterator" class="headerlink" title="2.1 While문으로 살펴보는 Iterator"></a>2.1 While문으로 살펴보는 Iterator</h3><p>현대언어의 기본적인 패러다임은<br><strong>문을 제거하고 전부 식(값)으로 바꾸버리는 것.</strong></p><p>모든 문을 함수에 집어 넣어버리면<br>함수에서는 값이 반환되는 형태이고, 그 함수를 호출하면 문을 원하는 시점에 실행할 수 있게된다.</p><ul><li>여러번 문을 반복해서 실행할 수 있다.</li><li>문을 메모리에(함수) 담아두면 flow를 타지 않고 원하는 시점에 마음대로 실행할 수 있다.</li><li><strong>commend 패턴</strong><br>: 우리가 원하는 문들을 죄다 값으로 바꿔서 invoke에 저장하고, invoke를 호출할때마다 마음대로 문을 실행했다, 멈췄다, 되돌렸다 를 할 수 있게 만들어주는 패턴 </li></ul><p>for문이나 while문을 <strong>값</strong>으로 바꾸고 싶다.<br>반복 전용에 해당되는 객체로 바꿔주면 된다.</p><h4 id="while-vs-iterator"><a href="#while-vs-iterator" class="headerlink" title="while vs iterator"></a>while vs iterator</h4><ol><li><p>while</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">while</span>(arr.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr.pop());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>조건문: 계속 반복할지 판단.</li><li>body: 반복시마다 처리할 것.</li></ul></li><li><p>iterator</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  arr: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">  next()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      done: <span class="keyword">this</span>.arr.length == <span class="number">0</span>, </span><br><span class="line">      <span class="comment">// while의 조건문에 해당 (계속 반복할지 판단.)</span></span><br><span class="line">      value: <span class="built_in">console</span>.log(<span class="keyword">this</span>.arr.pop())</span><br><span class="line">      <span class="comment">// while의 body에 해당 (반복시 처리할 것.)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>더 반복할지 말지에 대한 조건문을 while에서는 while문 자체가 들고 있었지만,<br>iterator에서는 iterator의 next 반환값 자체가 갖고 있다.<br>즉, next에 의존적이 된다. </li></ul></li></ol><h4 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h4><div style="padding:20px; background-color:rgba(0,0,0,0.2)">1. 반복자체를 하지는 않지만 (: iterator 객체와 next객체가 반복하진 않지만.)  2. 외부에서 반복을 하려고 할 때    3. 반복에 필요한 조건과 실행을     4. 미리 준비해 둔 객체       (self description: 나 자신에 대해서 내부에 설명)<p>  즉, 반복행위와 반복을 위한 준비를 분리 </p><ol><li>미리 반복에 대한 준비를 해두고 </li><li>필요할 때 필요한 만큼 반복 </li></ol><p>  <strong>3. 반복을 재현할 수 있음</strong></p></div><p>반복 자체를 하지 않지만,<br>외부에서 iterator를 이용해서 반복하려고 하는 상황을 위해서,<br>반복에 필요한 조건과 실행을 미리 준비해둔 객체를 갖고 있는 것이다. (iteratorResult객체)</p><p>next만 부르면, 몇번이고 반복할 수 있다.<br>이제는 더이상 복잡한 loop의 상태조건이나 문의 실행을 다 빼버리고,<br>외부에서는 반복이라는 행위만 하면된다.<br>=&gt; 반복기와 반복조건을 분리</p><hr><p><a name="3"></a></p><h2 id="3-ES6-Loop"><a href="#3-ES6-Loop" class="headerlink" title="3. ES6+ Loop"></a>3. ES6+ Loop</h2><h3 id="3-1-사용자-반복-처리기"><a href="#3-1-사용자-반복-처리기" class="headerlink" title="3.1 사용자 반복 처리기"></a>3.1 사용자 반복 처리기</h3><p>직접 Iterator 반복처리기를 구현해보자. 커스텀</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 반복기</span></span><br><span class="line"><span class="keyword">const</span> loop = <span class="function">(<span class="params">iter: IterableIterator&lt;<span class="built_in">number</span>[]&gt;, f: <span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// iterable 가드</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> iter[Symbol.iterator] == <span class="string">'function'</span>) &#123;</span><br><span class="line">    iter = iter[Symbol.iterator]();</span><br><span class="line">      <span class="comment">// next확인하는 가드도 있어야함.</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// iterator 가드</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> iter.next != <span class="string">'function'</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123; </span><br><span class="line">      <span class="keyword">const</span> v = iter.next();</span><br><span class="line">      <span class="keyword">if</span> (v.done) <span class="keyword">return</span>; <span class="comment">// undefined면 종료처리</span></span><br><span class="line">      f(v.value); <span class="comment">// 아니면 f에 value 전달</span></span><br><span class="line">  &#125; <span class="keyword">while</span> (<span class="literal">true</span>); <span class="comment">// 반복기일뿐!! 재귀함수로 짜도 상관없다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 반복되야할 조건이 있는 iterable</span></span><br><span class="line"><span class="keyword">const</span> iter = &#123;</span><br><span class="line">  arr: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">  [Symbol.iterator]() &#123; <span class="keyword">return</span> <span class="keyword">this</span>; &#125;,</span><br><span class="line">  next() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">          done: <span class="keyword">this</span>.arr.length == <span class="number">0</span>,</span><br><span class="line">          value: <span class="keyword">this</span>.arr.pop()</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loop(iter,<span class="built_in">console</span>.log)</span><br></pre></td></tr></table></figure><p>반복되야되는 조건에 해당되는 값들과<br>반복기를 분리했더니<br>반복기쪽에서는 그냥 돌리기만 하면되는 책임으로 확 줄고 (loop함수),<br>나머지 상태관리나 루프에 대한 모든 책임은 다 iterator객체가 가져갔다.</p><ul><li>iterator객체가 굉장히 안전적으로 몇번이라도 이 loop를 성공할 것이다.</li></ul><p>개발자스스로 나름대로의 구조와 이름으로 짤수도 있다.<br>단지 이제는 자바스크립트 표준이 있다.</p><p>이터레이터 패턴을 구현하는데에 있어서 자바스크립트 표준 스펙이 나왔고, 이걸 구현하는 공식적인 방법이 스펙으로 정의되어있다.<br>만약 스스로 나름대로의 이터레이터를 구현해 왔다면, 이제는 자바스크립트 표준 인터페이스에 맞춰서 iterator를 구현하시는 쪽으로 바꿔야한다.<br>언어의 혜택이 많기 때문 </p><hr><h3 id="3-2-내장-반복-처리기"><a href="#3-2-내장-반복-처리기" class="headerlink" title="3.2 내장 반복 처리기"></a>3.2 내장 반복 처리기</h3><p>언어의 지원을 받는다는 것은 무슨뜻일가.<br>언어가 iterator 인터페이스에 대해서 처리해주는 내장 기능이 있다.<br>우리가 만든 모든 객체가 iterator 인터페이스를 충족해주면, 언어가 제공하는 문법적인 요소를 다 사용할 수 있다.<br><strong>iterable객체가 아닌데 아래의 처리기들을 사용하면 스크립트가 죽는다.</strong></p><p>어떤 객체가 Iterable이라면, 그 객체에 대해서 자바스크립트에서는 아래의 기능들을 사용할 수 있다.</p><ul><li>분해대입(destructuring assignment)</li><li>spread 연산자 (…)</li><li>for…of 루프</li><li>기타 iterable을 인수로 받는 함수</li></ul><ol><li><p>Array destructuring 배열해체 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iter는 iterable 객체.</span></span><br><span class="line"><span class="keyword">const</span> iter = &#123; </span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]()&#123;<span class="keyword">return</span> <span class="keyword">this</span>&#125;,</span><br><span class="line">  arr: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">  next()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      done: <span class="keyword">this</span>.arr.length == <span class="number">0</span>,</span><br><span class="line">      value: <span class="keyword">this</span>.arr.pop()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [a, ...b] = iter;</span><br><span class="line"><span class="built_in">console</span>.log(a,b); <span class="comment">// 4, [3,2,1]</span></span><br></pre></td></tr></table></figure><ul><li>해체구분은 보통 변수를 선언하는 쪽에 쓰인다.</li><li>배열은 <code>=</code>의 왼쪽에 오면 변수이름이 된다.</li><li>해당 index에 있는 값을 변수에 담음.</li></ul></li><li><p>Spread 펼치기 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iter = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]()&#123;<span class="keyword">return</span> <span class="keyword">this</span>&#125;,</span><br><span class="line">  arr: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">  next()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      done: <span class="keyword">this</span>.arr.length == <span class="number">0</span>,</span><br><span class="line">      value: <span class="keyword">this</span>.arr.pop()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = [...iter];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// [4,3,2,1]</span></span><br></pre></td></tr></table></figure></li><li><p>Rest Parameter (나머지 인자)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iter = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]()&#123;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;,</span><br><span class="line">  arr:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">  next()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      done: <span class="keyword">this</span>.arr.length == <span class="number">0</span>,</span><br><span class="line">      value: <span class="keyword">this</span>.arr.pop()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = <span class="function">(<span class="params">...arg</span>) =&gt;</span> <span class="built_in">console</span>.log(arg);</span><br><span class="line">test(...iter);</span><br></pre></td></tr></table></figure></li><li><p><code>for ...of</code><br>while, for처럼 권한이 있지않고 권한이 전혀 없는 for.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> iter = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]()&#123;<span class="keyword">return</span> <span class="keyword">this</span>;&#125;,</span><br><span class="line">  arr:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">  next()&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      done: <span class="keyword">this</span>.arr.length == <span class="number">0</span>,</span><br><span class="line">      value: <span class="keyword">this</span>.arr.pop()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> v <span class="keyword">of</span> iter)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>for...of</code> iterator에서 value만 받아서 내려준다.</li></ul><p>배열이나 object를 써야지 이 혜택을 받는 것이 아니라, iterator만 만들면 이 혜택을 받을 수 있다.<br>객체 만들때는 괴로울지 몰라도, 사용할때는 예쁘게 작업 가능.</p><blockquote><p>신규로 출시되는 많은 API가 iterable을 포함하고 태어나기때문에<br>iterable interface는 es6세계에서 반드시 이해하고 외우고 있어야 하는 내용이다.</p></blockquote><h4 id="정리-1"><a href="#정리-1" class="headerlink" title="정리"></a>정리</h4><p>자바스크립트 es6이후에는 반복을 위해서 iterable을 만든다.</p><hr><h3 id="3-3-연습"><a href="#3-3-연습" class="headerlink" title="3.3 연습"></a>3.3 연습</h3><p>제곱을 요소로 갖는 가상컬렉션 😵😵😵</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> N2 = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(max)&#123;</span><br><span class="line">    <span class="keyword">this</span>.max = max; <span class="comment">// 무한배열을 막기위해</span></span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]()&#123;</span><br><span class="line">    <span class="keyword">let</span> cursor = <span class="number">0</span>, max = <span class="keyword">this</span>.max;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      done: <span class="literal">false</span>,</span><br><span class="line">      next()&#123; <span class="comment">// 반복기일 뿐</span></span><br><span class="line">        <span class="keyword">if</span> (cursor &gt; max) &#123; </span><br><span class="line">          <span class="keyword">this</span>.done = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.value = cursor * cursor;</span><br><span class="line">          cursor++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([...new N2(<span class="number">5</span>)]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> v <span class="keyword">of</span> <span class="keyword">new</span> N2(<span class="number">5</span>))&#123;</span><br><span class="line">  consoel.log(v )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하나의 Object는 여러 개의 인터페이스를 충족시킬 수 있다.<br>이 객체는 Iterator객체임과 동시에 iteratorResultObject이기도 하다.</p><ul><li>우리가 만든 loop에는 안전장치가 있어야한다.</li><li>loop조건을 걸때 무조건 max값을 넣는 습관을 들이자.</li><li>symbol iterator를 호출할 때 마다 제각각 다른 지역변수가 만들어질테고,<br>그때마다 태어난 함수도 제각각 다른 지역변수를 자유변수로 캡쳐해둘 것이다.<ul><li>함수호출할때마다 instance가 자기만의 field를 갖고 태어난것과 비슷하네?<blockquote><p>함수형 패러다임에서는 instance를 new 연산자로 생성하는 대신에,<br>함수를 생성함으로써 그때에 있는 자유변수를 instance의 field처럼 쓰게 된다.<br>자바스크립트에서는 instance를 만들면서 field지정할것인지.<br>함수를 생성하면서 자유변수를 지정할 것인지 선택할 수 있다.<br>혹은 섞어 쓰거나.</p><ul><li>이게 자바스크립트가 혼란스러운 이유…  </li><li>비단 자바스크립트만 그렇진 않다..</li></ul></blockquote></li></ul></li></ul><hr><h4 id="cf-2-함수-함수-스코프-클로저"><a href="#cf-2-함수-함수-스코프-클로저" class="headerlink" title="cf__2. 함수, 함수 스코프, 클로저"></a>cf__2. 함수, 함수 스코프, 클로저</h4><p>함수는 함수가 만들어지는 시점에 바깥쪽에 있는 변수들을 캡쳐해서 마치 지역변수로 쓸 수 있는 권한이 있다.</p><ul><li>함수 입장에서는 지역변수, 인자도 아닌데 참조할 수 있는 변수 =&gt; 자유변수 </li><li>자유변수가 생성되는 원리는 언어마다 다르다.</li><li>자유변수를 함수는 사용할 수 있다.</li><li>자바스크립트 매커니즘에서는 next라는 함수가 탄생할 때, 바깥쪽 함수 둘레에 있는 변수들을 사용할 수 있다.<blockquote><p>자유변수가 잡혀서 사용되는 닫혀진 공간을 클로저라고 한다.<br>함수는 곧 클로저라고 할 수 있다. 자유변수를 가둬둘 수 있기 때문에 </p></blockquote></li></ul><h4 id="cf-3-자바스크립트를-특정버전으로-열심히-공부해도-계속-바뀐다"><a href="#cf-3-자바스크립트를-특정버전으로-열심히-공부해도-계속-바뀐다" class="headerlink" title="cf__3. 자바스크립트를 특정버전으로 열심히 공부해도..계속 바뀐다."></a>cf__3. 자바스크립트를 특정버전으로 열심히 공부해도..계속 바뀐다.</h4><ul><li>자바스크립트 엔진의 구조는 계속 바뀌기 때문에 컴퓨터 사이언스 원론을 이해하는게 훨씬 낫다.</li><li>스코프 체이닝.. 변수를 캡쳐해오고.. 이건 자바스크립트 3.1 engine 원리임.. 지금</li><li>얼마전 크롬 67에서는 새로운 함수 호출 실행 시스템을 만들었기 때문에 함수 호출이 급격하게 빨라졌다.</li><li>요즘 책은 … 모두 자바스크립트 3.1 엔진이야기다….(헐)<ul><li>‘현재에 이르러 배우게되는 자바스크립트는 대부분 ECMAScript 3 버전에 대한 공부이며, 최근에 출시된 ECMAScript 6 버전이 새로운 기능으로 무장되어 있어 이와 관련된 공부가 필요할 것이다.<br><a href="https://webdir.tistory.com/512" target="_blank" rel="noopener">출처</a></li><li>지금 엔진은 그렇게 움직이지 않는다.</li><li>그냥 컴퓨터 사이언스 원론을 이해하는게 낫다.</li></ul></li></ul><hr><p>자료구조를 iterable로 구축하는 훈련이 되있어야하지만, 문법적인 혜택을 누릴 수 있다.<br>하지만 생각보다 iterable 객체를 만드는 것이 리소스가 많이 든다.<br>generator함수로 해결할 수 있다. </p><hr><p><a name="4"></a></p><h2 id="4-Generator"><a href="#4-Generator" class="headerlink" title="4. Generator"></a>4. Generator</h2><h3 id="Iterator의-구현을-돕는-Generator-IteratorGenerator"><a href="#Iterator의-구현을-돕는-Generator-IteratorGenerator" class="headerlink" title="Iterator의 구현을 돕는 Generator (IteratorGenerator)"></a>Iterator의 구현을 돕는 Generator (IteratorGenerator)</h3><p><code>function*()</code></p><p><strong>generator 함수를 생성하는 리터럴.</strong></p><ul><li>generator함수를 호출할 때마다 iterator가 만들어진다.</li><li>generator는 iterator이며, 동시에 iterable이기도 하다. 😵😵😵<ul><li>반복기와 반복조건부분이 분리되어있지만 함께 갖고 있다.</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> generator = <span class="function"><span class="keyword">function</span>*(<span class="params">max</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cursor = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(cursor &lt; max)&#123; <span class="comment">// iterator에서 next()와 같은 역할</span></span><br><span class="line">    <span class="keyword">yield</span> cursor * cursor;</span><br><span class="line">    cursor++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([...generator(<span class="number">5</span>)]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> v <span class="keyword">of</span> generator(<span class="number">5</span>))&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yield라는 키워드</p><ul><li>suspense라는 기능: while문이 돌다가 잠깐 멈춘다!</li><li>문은 멈출 수 없지만 yield에서 중지된다.</li><li>iteratorResultObject를 반환한다.<ul><li>루틴이 아니다. <strong>co-routine</strong></li><li>함수는 루틴<br>generator는 코루틴이라고 부른다.</li></ul></li></ul><img src="/images/2019/07/01.png"><hr><p>참고자료<br><a href="https://helloworldjavascript.net/pages/260-iteration.html" target="_blank" rel="noopener">https://helloworldjavascript.net/pages/260-iteration.html</a><br><a href="https://poiemaweb.com/es6-iteration-for-of" target="_blank" rel="noopener">https://poiemaweb.com/es6-iteration-for-of</a><br><a href="https://jusungpark.tistory.com/25" target="_blank" rel="noopener">https://jusungpark.tistory.com/25</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;🌕🌑🌑&quot;&gt;&lt;a href=&quot;#🌕🌑🌑&quot; class=&quot;headerlink&quot; title=&quot;🌕🌑🌑&quot;&gt;&lt;/a&gt;🌕🌑🌑&lt;/h2&gt;&lt;p&gt;자바스크립트에서도 일반명사처럼 생긴 고유명사가 많이 나오고, 그중에 하나가 interface. 자
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2018 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2018-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="generator" scheme="http://feel5ny.github.io/tags/generator/"/>
    
      <category term="iterator" scheme="http://feel5ny.github.io/tags/iterator/"/>
    
  </entry>
  
  <entry>
    <title>CodeSpitz77 2회_Flow control statement (2)</title>
    <link href="http://feel5ny.github.io/2019/02/03/JS_18_2/"/>
    <id>http://feel5ny.github.io/2019/02/03/JS_18_2/</id>
    <published>2019-02-03T07:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<p>🌕🌑🌑</p><h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h3><p><strong>optional flow control</strong>에서는 <code>if문</code>에 대해서 다룬다. if문에서 가장 중요한 것은 모든 상황에 대한 예외처리이며, 특히 if..else을 사용할 경우 else문 뒤에는 <strong>mandatory</strong> 상태의 문이 와야한다. <strong>후방결합</strong>이라는 특징때문에 else if 사용을 조심해야한다. 병행조건일때는 switch문을 쓰고 부분집합에서의 조건문이 필요할 경우에는 if..else를 사용한다.<br>if문의 여러 중첩을 else if문으로 쓰곤했는데, 많은 상황을 예외처리 한것인가에 대해 항상 의문이 들곤했었다. 이번 시간을 통해서 else if문은 지양하기로 하고, else문 뒤에 조건문을 추가하고 싶을 경우 중괄호 이후에 if else문을 써서, else뒤에는 mandatory한 상황을 만들게끔 습관을 들이기로 했다.<br><strong>Iterate Flow Control</strong>에서는 <code>For문</code>과 <code>While, do..while</code>문을 다룬다. For문은 3가지 식을 넣을 수 있는데 첫번째는 <strong>식</strong>과 문 중에는 <strong>선언문</strong>만 올 수 있고, 두번째는 boolean을 반환하는 조건식이 오며, <strong>빈값일 경우 무조건 truthy</strong>라는 특징이 있으므로 무한루프에 빠지지 않게 조심해야한다. 세번째는 식이 오는데, statement의 마지막에 처리되므로 statement 마지막에 두어도된다. w<strong>hile문</strong>은 조건식이 필수이며, 조건식과 관련된 코드가 body에 안나올 경우 무한루프에 빠지게된다. do..while문은 while 조건문 뒤에 <code>;</code>을 붙여야한다.</p><blockquote><p>코드스피츠 강의 정리록<br>77 동영상 음원문제로 77교안을 토대로 73강의를 들으며 작성</p></blockquote><hr><p><a name="2"></a></p><h2 id="2-Optional-flow-control"><a href="#2-Optional-flow-control" class="headerlink" title="2. Optional flow control"></a>2. Optional flow control</h2><p>conditional Statement: 조건문<br><a name="2-1"></a></p><h3 id="2-1-if-if-else"><a href="#2-1-if-if-else" class="headerlink" title="2.1 if, if else"></a>2.1 if, if else</h3><p><code>if (condition)   statement1[else   statement2]</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (c &gt; <span class="number">5</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">switch</span> (c) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (c &gt; <span class="number">5</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">for</span> (;;) &#123;&#125;</span><br></pre></td></tr></table></figure><p><a name="2-1-1"></a></p><h4 id="2-1-1-Truthy-Falsy"><a href="#2-1-1-Truthy-Falsy" class="headerlink" title="2.1.1 Truthy, Falsy"></a>2.1.1 Truthy, Falsy</h4><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy" target="_blank" rel="noopener">mdn</a></p><ul><li>falsy는 <code>0, false, null, undefined,&quot;&quot;, NaN</code>이 있다.</li><li>나머지는 truthy이다. </li></ul><hr><p><a name="2-1-2"></a></p><h4 id="2-1-2-Optional-Mandatory"><a href="#2-1-2-Optional-Mandatory" class="headerlink" title="2.1.2 Optional, Mandatory"></a>2.1.2 Optional, Mandatory</h4><p>특정 상황에 따라 optional한지 mandatoy한지 다르다.</p><ul><li>if절은 optional,</li><li>if else절은 mandatory하다.<ul><li>if else절은 모든 구문이 mandatory여야한다.</li></ul></li><li>optional 상태의 경우는 예외처리가 안되어있다고 생각하면 된다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (expression) <span class="comment">//optional</span></span><br><span class="line"><span class="keyword">if</span> (expression) statement1 <span class="keyword">else</span> statement2 <span class="comment">// Mandatory</span></span><br></pre></td></tr></table></figure><p><strong>암묵적인 오류(context error)</strong><br>예1)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a) <span class="comment">// mandatory</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (b &amp;&amp; a) </span><br><span class="line"><span class="keyword">else</span></span><br></pre></td></tr></table></figure><p>위의 코든에서 첫번째 else뒤에는 mandatory되어야하지만, optional하다. </p><ul><li>a와 b의 상태에 따라 <code>b &amp;&amp; a</code>의 값이 다르기 때문 </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a)</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (b &amp;&amp; a)</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!b &amp;&amp; a)</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(b &amp;&amp; !a)</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!b &amp;&amp;!a)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>에2)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(c === <span class="number">1</span>)&#123;</span><br><span class="line">  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">  <span class="keyword">if</span> (c === <span class="number">2</span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>else 다음에 옵셔널한 if만 놓여있다.<br>else 안에는 mandatory해야한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(c === <span class="number">1</span>)&#123;</span><br><span class="line">  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="keyword">if</span> (c === <span class="number">2</span>)&#123;</span><br><span class="line">  </span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>if..else문에서 else if문을 사용할 경우 육안으로는 많은 경우를 대비하는 처리하기 헷갈린다.</li><li>이는 후방 결합때문이다.</li></ul><hr><p><a name="2-1-3"></a></p><h4 id="2-1-3-RL-Parsing"><a href="#2-1-3-RL-Parsing" class="headerlink" title="2.1.3 RL Parsing"></a>2.1.3 RL Parsing</h4><ul><li><code>arrow function</code>과 if else 구문만 오른쪽에서 왼쪽으로 <code>후방 결합</code>한다.<ul><li><strong><code>대부분의 버그는 후방 결합에서 일어난다.</code></strong></li><li><strong>else if문 쓰는 습관을 버리자.</strong></li><li><strong>else 다음에 조건문이 필요할 경우, 중괄호 이후에 if-else문 사용하기</strong></li></ul></li><li>후방결합의 실수를 피하기 위해 중괄호와 괄호를 붙여주는 것이 좋다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (c===<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">  <span class="keyword">if</span> (c===<span class="number">2</span>)&#123;</span><br><span class="line"></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>병렬조건을 선택할 때 절대로 <code>else if</code>를 쓰면 안되는 이유이다.</p><ul><li><code>else if</code>는 원래부터 위험한 코드고,</li><li>남들이 해석할때 난감해 지는 코드일 뿐만아니라,</li><li><strong>else 후방조건이 제대로 붙어있는지 검사하기 굉장히 까다롭다.</strong></li><li>컴파일 에러도 안나고 런타임 다 통과하기 때문..</li><li>런타임때 다 통과하지만 로직이 잘못된 경우가 너무 많다.</li></ul><hr><p><a name="2-1-4"></a></p><h4 id="2-1-4-Nested-Parallel"><a href="#2-1-4-Nested-Parallel" class="headerlink" title="2.1.4 Nested, Parallel"></a>2.1.4 Nested, Parallel</h4><p>이렇게 if else를 봤더니.. </p><ul><li>1차 조건이 분기한 이후에 <code>부분집합</code>에서만 쓰인다.</li><li>병행조건일 때 쓰는 것이 아니라 <code>부분집합을 다시 분기할때</code>..</li><li><strong>nested되어있는 sub집합에 대한 조건일때 사용한다.</strong></li><li>else if는 병행조건일 때 쓰면 원래 안되는 것.</li></ul><h5 id="병행조건-Parallel-일때는-무조건-gt-switch"><a href="#병행조건-Parallel-일때는-무조건-gt-switch" class="headerlink" title="병행조건(Parallel)일때는 무조건! =&gt; switch"></a>병행조건(Parallel)일때는 무조건! =&gt; switch</h5><ul><li><p>switch를 쓴다.</p></li><li><p>내가 평가해야할 식들이 동등할 경우 !!! switch문으로 간다.</p></li><li><p>내가 평가해야할 식이 nested되어야 할 경우 if중첩.</p></li><li><p>병행조건에는 반드시 예외가 생길 수 있는 가능성이 있기 때문에<br><strong>switch에는 default가 필수이다!!</strong></p></li></ul><h5 id="if-else-안에-switch문은-괜찮을까"><a href="#if-else-안에-switch문은-괜찮을까" class="headerlink" title="if else 안에 switch문은 괜찮을까?"></a>if else 안에 switch문은 괜찮을까?</h5><ul><li>else 에는 mandatory가 되어야 하는데 switch문에서 default 문을 썼다면 mandatory가 보장되기 때문에 사용해도된다.<ul><li>병행조건으로 빠졌지만, dafault가 붙어있는 이상 빠져 나올 구멍이 없다.</li></ul></li><li>조건문을 중첩해서 사용할 때는 mandatory로 빠지는 건지 optional로 빠지는지 확인하면 된다. </li></ul><p>mandatory로 시작했으면 mandatory로 끝내야하고<br>optional로 시작했으면 optional로 끝내야하고<br>optional과 mandatory를 섞어 써야한다면 </p><ul><li>로직분리를 잘하던지 </li><li>완전히 분리해서 함수로 빼던지(격리).</li></ul><blockquote><p>자기 코드의 의도를 명확하게 해서 변화가 일어날 때 어디까지만 수정하고 나머지는 여파가 없게끔 하는 방법에 대해서 익힐 필요가 있다.<br>코드를 짤때 어떻게 섬세하게 짤 것인가.</p></blockquote><hr><hr><p><a name="3"></a></p><h2 id="3-Iterate-Flow-Control"><a href="#3-Iterate-Flow-Control" class="headerlink" title="3. Iterate Flow Control"></a>3. Iterate Flow Control</h2><p>반복문</p><ul><li>for</li><li>while, do..while</li><li>for ( of ); =&gt; for iteration</li><li>for ( in ); =&gt; forEach와 유사 </li></ul><p><a name="3-1"></a></p><h3 id="3-1-For"><a href="#3-1-For" class="headerlink" title="3.1 For"></a>3.1 For</h3><p>for문의 3개의 선택식에 어떤 코드를 넣어야할지 반드시 이해해야한다.</p><p><code>for ([initialization]; [condition]; [final-expression])</code></p><ol><li><p>Initialization<br><code>Limited Statement</code></p><ul><li>원래 식만 와야하는데 선언문 한정으로 문이 올 수 있다.<br>(문중에 선언문만 올 수 있다.)</li></ul><p>선언문 또는 식이 올 수 있다.<br>혹은 <strong>공문</strong>도 올 수 있다.<br>식 또는 변수 선언. 주로 카운터 변수를 초기화할 때 사용한다.</p></li><li><p>condition (:조건)<br>매 반복마다 평가할 식.<br>평가 결과가 참이라면 statement를 실행한다.<br><strong>이 식을 넣지 않을 때(공문) 결과는 언제나 참이다.</strong> (<code>Empty Truthy</code>)</p><ul><li>무한루프</li></ul><p>결과가 거짓이라면 for문의 바로 다음 식으로 건너 뛴다.</p></li><li><p>final-expression<br>매 반복 후 평가할 식.<br>다음번 condition 평가 이전에 발생한다.<br>statement 끝에 있는것과 같는 상황이다.<br><strong>즉, statement 마지막에 실행된다.</strong> (<code>Last Execution</code>)반복해서 쓰지 않기 위해서 3번째 항목에 넣는것.</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>; <span class="comment">// declare statement. 문이다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; turthy; ex)&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="3-2"></a></p><h3 id="3-2-While-do-while"><a href="#3-2-While-do-while" class="headerlink" title="3.2 While, do while"></a>3.2 While, do while</h3><p><code>while (condition) statement</code></p><ul><li>condition이 공문일 경우 syntax error를 반환한다.</li><li>while문은 중문이 오는 것이 정상.<br>2줄이 오는 것이 정상이다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(truthy)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// while문 보다 1번은 먼저 더 실행하는 꼴</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125; <span class="keyword">while</span> (truthy);</span><br></pre></td></tr></table></figure><p><code>do   statementwhile (condition);</code></p><ul><li>do while문은 마지막에 <code>;</code> 붙이는게 공식문서에 명시되어있는 규칙</li><li>do 다음의 statement가 단문일 경우 <code>;</code>붙이면 됨<br><code>do a++; while(a);</code></li></ul><p><a name="3-2-1"></a></p><h4 id="3-2-1-Infinite-Loop"><a href="#3-2-1-Infinite-Loop" class="headerlink" title="3.2.1 Infinite Loop"></a>3.2.1 Infinite Loop</h4><p>while문과 do..while문은 평가식에 관여되어있는<br>상태값을 바꾸지 않으면 무한루프에 빠질 위험이 높다.</p><p><strong><code>식별자와 관련된 코드가 안나온다면 무한루프</code></strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(a &gt; <span class="number">2</span>)&#123;</span><br><span class="line">  a++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>조건식(condition)에 나오는 상태가 body에 나오는지 안나오는지부터 봐야한다.</li></ul><hr><blockquote><p>현실코드</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(act.method().c)&#123;</span><br><span class="line">  author.action();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>??? 뭔지 모름.</p><ul><li><p>이런 코드는 무조건 배재해야한다..</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = act.method().c</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(a)&#123;</span><br><span class="line">  author.action();</span><br><span class="line">  a = act.method().c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>적어도 body안에 조건식에 나오는 상태가 되었다..</p></li></ul><hr><p>참고자료<br><a href="https://mkki.github.io/code-spitz/2018/07/12/code-spitz-2.html" target="_blank" rel="noopener">https://mkki.github.io/code-spitz/2018/07/12/code-spitz-2.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;🌕🌑🌑&lt;/p&gt;
&lt;h3 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR&quot;&gt;&lt;/a&gt;TL;DR&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;optional flow control&lt;/strong&gt;에서는 &lt;c
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2018 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2018-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="flow control" scheme="http://feel5ny.github.io/tags/flow-control/"/>
    
  </entry>
  
  <entry>
    <title>CodeSpitz77 2회_Flow control statement (1)</title>
    <link href="http://feel5ny.github.io/2019/02/03/JS_18_1/"/>
    <id>http://feel5ny.github.io/2019/02/03/JS_18_1/</id>
    <published>2019-02-03T05:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<p>🌕🌑🌑</p><blockquote><p>코드스피츠 강의 정리록</p></blockquote><hr><h3 id="복습"><a href="#복습" class="headerlink" title="복습"></a>복습</h3><p>Flow란?<br>우리가 짠 <strong>파일</strong>이<strong>메모리</strong>에 적재되고,<br>적재된 순간, 명령과 데이터로 나눠져서 적재된 다음에<br><strong>명령이 쭉 한꺼번에 실행</strong>되는데,<br>명령이 차근차근 실행되는 과정.</p><hr><hr><p><a name="0"></a></p><h2 id="0-Record-Completion-Record"><a href="#0-Record-Completion-Record" class="headerlink" title="0. Record, Completion Record"></a>0. Record, Completion Record</h2><p>자바스크립트 언어의 기본적인 문처리 기법을 알아보자.</p><hr><p><a name="0-1"></a></p><h3 id="0-1-Record"><a href="#0-1-Record" class="headerlink" title="0.1 Record"></a>0.1 Record</h3><p>자바스크립트는 문을 처리할때 식과 다르게 처리한다.<br>식은 하나의 값으로 처리될 뿐이지만,<br>문은 <strong>실행단위</strong>로 처리된다.<br>문을 10개 쓰면, 10개의 실행단위가 생각난다.<br>(식은 10개 써도, 값 하나로 수렴될 뿐이다.)<br>문의 갯수를 늘리면, <strong>자바스크립트 엔진</strong>은 갯수만큼을 <strong>처리해야할 과제</strong>로 알고 있다.<br><strong>한줄한줄의 문이 생길때 마다 과제로 등록해 놓는다.</strong><br>=&gt; <strong>Record</strong></p><p>우리가 일반적으로 <strong>문</strong>을 짜면 <strong>Record</strong> 하나하나로 번역이 된다.<br><strong>자바스크립트 엔진</strong>은 우리가 짠 코드를 파싱할때 <strong>문</strong>들을 Record단위로 파싱한다.<br>Record가 하나하나 생성이되면 flow를 타고 쭉 움직인다. </p><img src="/images/2019/05/flow_01.png"><p><strong>Record를 만들고<br>Record를 실행하는 과정이<br>자바스크립트 엔진의 주 작동원리이다.</strong></p><blockquote><p>요즘 현대 브라우저들은 자바스크립트 3.1엔진에서 돌지 않는다.<br>(인사이드 자바스크립트나 자바스크립트를 말하다와 같은 책들은 좋지만, 작동원리는 현대 브라우저와 다르다. (3.1버전 엔진기준으로 설명된 책))<br>모든 항목에 있어서 브라우저들이 해석하는 방식이 달라졌다. 스펙문서도 달라짐.<br>자바스크립트 엔진의 작동원리를 지금 버전에서 배워도, 매년 스펙이 갱신되기 때문에 내가 알고 있던 지식이 다음해에는 무의미해질 수 있다.<br>기저층의 작동원리보다는<br>무엇을 의미하고 추상적인 의미는 무엇인지 체계를 배우는 것이 더 의미있다..<br>= 작동원리보다는 근본적인 부분을 배우자.</p></blockquote><ul><li>자바스크립트 엔진에서 Record를 부르는 말은 굉장히 많다. 언어의 버전마다 다르다 </li></ul><h4 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h4><ul><li>우리가 문을 작성하면 문을 하나의 Record로 바꿔준다는 것.</li><li>자바스크립트는 이런 Record를 모아서 Record를 처리해가면서 작동한다는 사실만 알면 된다.</li></ul><hr><p><a name="0-2"></a></p><h3 id="0-2-Flow-Control-Statement-Completion-record"><a href="#0-2-Flow-Control-Statement-Completion-record" class="headerlink" title="0.2 Flow Control Statement, Completion record"></a>0.2 Flow Control Statement, Completion record</h3><p>if문이라서 분기를 할 수 있다던지, loop구분이라서 계속 flow를 돌릴 수 있는<br><strong>flow 제어</strong>를 하면 레코드를 선택하거나 레코드를 순환시킬 수 있는 권한을 갖게 된다.</p><p>flow 제어를 할 수 있는 문을 record로 바꿀때는<br><strong>Completion record</strong>로 바뀐다.<br>completion record은 record를 뭘 선택할 수 있는지 flow에 관여할 수 있다.</p><img src="/images/2019/05/flow_02.png"><p>자바스크립트 엔진은 우리가 작성한 문을<br>Record와 Completion record로 나누고,<br>Completion record들이 어떤 레코드를 선택할지 결정하는데 사용한다.</p><ul><li>문은 컴파일러에게 주는 힌트일 뿐이라고 했었다.</li><li>if나 for문을 쓰면 값으로 환원되지 않고<br><strong>Completion record가 어떻게 작동할지를 자바스크립트에게 알려주는 힌트가 될 뿐.</strong></li><li>자바스크립트는 그 힌트를 받아서 내부적으로 이런 flow 흐름도를 만드는<br>completion record를 생성하게 된다.</li></ul><h4 id="정리-1"><a href="#정리-1" class="headerlink" title="정리"></a>정리</h4><ol><li>우리가 짜는 문 하나하나가 flow를 구성한다.</li><li>flow control하는 문들은 별도로 구성한다.</li></ol><hr><hr><p><a name="1"></a></p><h2 id="1-Direct-flow-control"><a href="#1-Direct-flow-control" class="headerlink" title="1. Direct flow control"></a>1. Direct flow control</h2><p>직접 flow control하는 명령어를 배워보자.</p><p><a name="1-1"></a></p><h3 id="1-1-label"><a href="#1-1-label" class="headerlink" title="1.1 label"></a>1.1 label</h3><p>자바스크립트에서 사용할 수 있는 <strong>직접 flow control</strong>에는 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Statements/label" target="_blank" rel="noopener">label</a>이 있다.</p><ul><li>다중 for문을 사용했을 때 바깥쪽 for문으로 빠져나오고 싶으면, break를 사용하면 된다.</li></ul><p><a name="1-1-1"></a></p><h4 id="1-1-1-Identifier-식별자"><a href="#1-1-1-Identifier-식별자" class="headerlink" title="1.1.1 Identifier (= 식별자)"></a>1.1.1 Identifier (= 식별자)</h4><blockquote><p>자바스크립트 변수 identifier<br>A JavaScript identifier must start with<br>a letter, underscore (_), or dollar sign ($);<br>subsequent characters can also be digits (0-9). Because JavaScript is case sensitive, letters include the characters “A” through “Z” (uppercase) and the characters “a” through “z” (lowercase). (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Declarations" target="_blank" rel="noopener">참고</a>)</p></blockquote><ul><li>$를 시작할수도, 포함할 수도없다. 나머지는 변수 식별자 규칙과 같다.</li><li>뒤에 <code>:</code>를 붙여주는 순간 label이 된다.</li></ul><hr><p><a name="1-1-2"></a></p><h4 id="1-1-2-Scope"><a href="#1-1-2-Scope" class="headerlink" title="1.1.2 Scope"></a>1.1.2 Scope</h4><ul><li>label의 이름은 같은 범위(scope)내에서 2개가 나올 수 없다.</li><li>런타임에 오류가 잡히지 않고<br>파싱하는 타임에 오류가 난다.<ul><li>에러를 사전에 잡을 수 있는 장점이 있다.</li></ul></li></ul><p>Label의 scope?</p><ul><li>label의 scope는 함수로 결정된다.</li><li>label scope라는 개념이 있다.<ul><li>label scope도 shadowing이 일어난다.</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  abc: &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"start"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="literal">true</span>) <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"end"</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Uncaught SyntaxError: Illegal break statement</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  abc: &#123;</span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"start"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="literal">true</span>) <span class="keyword">break</span> abc;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"end"</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">"test"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>start</code><br><code>test</code></p><ul><li>break뒤에 명시된 label 스코프의 마지막으로 jump할 수 있다는 의미이다.<br>=&gt; flow 수동 제어에 성공</li><li>label 스코프를 생성하게 되면<br>label 스코프 내에서는 label을 빠져나올 수 있는 권리가 주어진다.<ul><li>loop가 아니라서 continue는 사용하지 못하지만 <code>break</code>는 사용할 수 있다.</li></ul></li><li>가장 원초적인 flow control</li><li>이 방법을 통해서 label 섹션을 만들면 label 섹션에서 flow control이 가능하다.</li></ul><blockquote><p><strong>label 영역이 아닌곳도 될까?</strong><br>label 영역이 아는곳에서 되게 하려면 label 영역을 나눠줘야한다.</p></blockquote><hr><p><a name="1-1-3"></a></p><h4 id="1-1-3-Label-range"><a href="#1-1-3-Label-range" class="headerlink" title="1.1.3 Label range"></a>1.1.3 Label range</h4><ul><li>label range를 인식하려면 label set을 인식할 수 있어야한다.</li><li>어떻게 해서 label이 label영역을 확보하는지 알아야 한다.</li></ul><ol><li>이 label에서 다음 label까지가 하나의 label range를 이룬다.</li><li>label다음에<br>iteration이 오거나,<br>switch가 오면 이것들이 다시 label 범위를 한정짓게 된다.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">"0"</span>);</span></span><br><span class="line"><span class="javascript">  abc: <span class="keyword">if</span> (<span class="literal">true</span>) <span class="keyword">break</span> abc;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">"1"</span>);</span></span><br><span class="line"><span class="javascript">  bbb: <span class="built_in">console</span>.log(<span class="string">"2"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>0</code><br><code>1</code><br><code>2</code></p><ul><li>label range로 확정했지만, jump하지 못했다.</li><li>goto처럼 건너뛰려면<br>label 스코프를 선언하던지,<br>iteration label이 되던지,<br>switch label이 되던지 해야지 jump할 수 있다.</li><li>자바스크립트에는 goto 구문이 없다는 것에 주의.<br>break나 continue에서만 레이블을 사용할 수 있다.<ul><li>직접 레이블을 선택해서 goto는 안되고<br>break, continue로 <strong>아래로 내려가는 것만 가능하다.</strong></li></ul></li><li>왔다갔다 할 수 없다. label만 갖고 loop문을 만들 수 없다.</li><li>반복적인 실행만 할 수 없을 뿐 jump시킬 수 있다.</li></ul><ul><li>if문에서는 break 문 뒤에 label을 작성해야하는데,<br>while이나 for문에서는 label을 명시적으로 쓰지않고 break문만 쓸 수 있는 이유는 무엇일까</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (i === <span class="number">5</span>) <span class="keyword">break</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">"end"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>왜 error가 아닐까?</p><hr><p><a name="1-1-4"></a></p><h4 id="1-1-4-Auto-label"><a href="#1-1-4-Auto-label" class="headerlink" title="1.1.4 Auto label"></a>1.1.4 Auto label</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">temp38:</span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (i === <span class="number">5</span>) <span class="keyword">break</span> temp38;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">"end"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>자바스크립트 엔진이 우리 대신에 label을 삽입해준 셈. = auto label<ul><li>iteration(for문)이나 switch문 앞에서 발동된다.</li></ul></li><li>auto label이 만들어낸 이름 <strong>undefined named label</strong><br>(위 예시의 temp38같은)</li></ul><h5 id="cf-1-주석을-깨끗하게-쓰고-싶다면"><a href="#cf-1-주석을-깨끗하게-쓰고-싶다면" class="headerlink" title="cf__1 주석을 깨끗하게 쓰고 싶다면?"></a>cf__1 주석을 깨끗하게 쓰고 싶다면?</h5><ul><li>앞주석을 쓰기 위해서 앞에 쓰기도 한다.</li><li>오픈소스에 이렇게 쓰여있는 경우가 많다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ab: <span class="built_in">console</span>.log(<span class="string">'123'</span>)</span><br><span class="line">cd: <span class="built_in">console</span>.log(<span class="string">'123'</span>)</span><br><span class="line">dc: <span class="built_in">console</span>.log(<span class="string">'123'</span>)</span><br></pre></td></tr></table></figure><hr><p><a name="1-1-5"></a></p><h4 id="1-1-5-label은-호출됐을-때-처음으로가나요"><a href="#1-1-5-label은-호출됐을-때-처음으로가나요" class="headerlink" title="1.1.5 label은 호출됐을 때 처음으로가나요?"></a>1.1.5 label은 호출됐을 때 처음으로가나요?</h4><p>jump구문은 jump가 시작하는 문장 블럭의 가장 처음으로 가게 되어있다.</p><ul><li>for문이 루프돌면, 가장 처음으로 간다.</li><li>함수 호출하면 가장 처음으로 간다.<br>하지만 break의 label를 본다면.. 처음으로 가야하는 거 아닌가??<ul><li>break의 label은 블럭의 마지막으로 보낸다.</li></ul></li></ul><blockquote><p>자바스크립트의 label 스펙은 자바의 label 스펙과 동일히다<br>레이블은 자바스크립트의 3.1버전때부터 있었던 스펙</p></blockquote><hr><p><a name="1-2"></a></p><h3 id="1-2-Switch"><a href="#1-2-Switch" class="headerlink" title="1.2 Switch"></a>1.2 Switch</h3><p>switch의 문법적 요소를 확인해보자.</p><ul><li>switch라는 키워드가 나오고</li><li>괄호가 나오고 </li><li>괄호 안에 식이들어갈 수 있고, </li><li>중괄호가 나온다.<ul><li>for문 다음에 괄호는 단문이 나올 수 있고 중문이 나올 수 있는데, 중문때문에 중괄호를 쓴다.</li><li>switch문은 그럴 수 없다. 무조건 중괄호가 나와야한다.</li><li>문법적인 토큰이라는 뜻이다.</li><li>switch의 몸체를 나타내는 전용 토큰.<ul><li>언어 파서가 해석하기 위한 토큰으로서의 중괄호이다.</li></ul></li><li>왜 중괄호를 쓸까.<br>switch는 중괄호의 영역을 특별한 영역으로 만든다.<br>special label block으로 만든다.<ol><li>case</li><li>식</li><li>콜론 <code>:</code></li></ol></li></ul></li></ul><p><a name="1-2-1"></a></p><h4 id="1-2-1-Special-label-Block"><a href="#1-2-1-Special-label-Block" class="headerlink" title="1.2.1 Special label Block"></a>1.2.1 Special label Block</h4><p>switch는 특별한 레이블 영역을 사용할 수 있는 공간을 만들어주는 문법이라고 생각해도 된다.</p><ul><li>label과 완전히 일치하다.</li><li>컴파일타임에 해석되는 정적인 레이블을 만드는 것이 아니라<br>case 안의 식을 동적으로 해석할 수 있는 특수한 레이블로 만들었을 뿐이다.</li><li>switch는 case와 default label만 사용하도록 한다.</li></ul><p>우리는 switch 괄호안에 있는    값의 평가된 것을<br>런타임에 평가해서<br>case에 있는 값과 일치하는 label로 보낼 수 있는<br>특수한 레이블 구문을 만들 수 있는 switch문이라는 것을 알 수 있다.</p><p>그 안에 있는 label은 우리가 알고 있는 label과 동일하게 작동한다.</p><p><a name="1-2-2"></a></p><h4 id="1-2-2-Fall-Through"><a href="#1-2-2-Fall-Through" class="headerlink" title="1.2.2 Fall Through"></a>1.2.2 Fall Through</h4><p>case문 안에서 break를 안쓰면 그 다음 case문이 실행되는 현상</p><ul><li>break를 걸면, undefined name label로 빠져나오게 된다.</li><li>switch문 앞에 auto label을 만든다.</li></ul><p><a name="1-2-3"></a></p><h4 id="1-2-3-Auto-Label"><a href="#1-2-3-Auto-Label" class="headerlink" title="1.2.3 Auto Label"></a>1.2.3 Auto Label</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"c"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">case</span> <span class="literal">true</span>:</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"0"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">case</span> <span class="literal">false</span>:</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"1"</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>언어마다 스페셜 label block 해석 방식이 다르다.</p><ul><li>자바스크립트에서는 switch의 스페셜 label block을 위에서 아래로 처리한다.</li><li>자바나 c같은 언어는 switch를 쓸때 해석하는 방식이 자바스크립트와 다르다.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  temp17:</span><br><span class="line"><span class="javascript">  <span class="keyword">switch</span> (<span class="literal">true</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"c"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">case</span> <span class="literal">true</span>:</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"0"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">break</span> temp17;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">case</span> <span class="literal">false</span>:</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"1"</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">"end"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>자바스크립트 엔진이 break문 뒤에 auto label을 붙여준다고 생각하면 된다.</li><li>auto label이 발생되는 지점은<br>iteration(for문)이나 switch문 앞에서 발동된다.</li></ul><p><a name="1-2-4"></a></p><h4 id="1-2-4-Runtime-switch"><a href="#1-2-4-Runtime-switch" class="headerlink" title="1.2.4 Runtime switch"></a>1.2.4 Runtime switch</h4><p>자바스크립트에 case문은 runtime에 해석을 한다.</p><ul><li>runtime에 해석하는 기능때문에 자바스크립트를 2가지 방식으로 switch문을 쓸 수 있게 만든다.</li></ul><ol><li>값에 대한 routing으로 (mini router)<br>특정 값에 대한 routing table</li><li>조건 평가에 대한 분기</li></ol><p>값에 대한 routing이 정적인 경우 값에 대한 routing에 더 우선순위가 높다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 1. mini router</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> a = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">switch</span> (a) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">default</span>:</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"c"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">case</span> <span class="literal">true</span>:</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"0"</span>);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">break</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">case</span> <span class="literal">false</span>:</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">"1"</span>);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">"end"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 2. 조건 평가에 대한 분기</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 디자인패턴 chianable responsibility 패턴</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">switch</span> (<span class="literal">true</span>)&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">case</span> network() === <span class="string">'online'</span>:</span></span><br><span class="line"><span class="javascript">    <span class="keyword">case</span> network() === <span class="string">'wifi'</span>:</span></span><br><span class="line"><span class="javascript">    <span class="keyword">case</span> network() === <span class="string">'offline'</span>:</span></span><br><span class="line"><span class="javascript">    <span class="keyword">case</span> localcache():</span></span><br><span class="line"><span class="javascript">    <span class="keyword">default</span>: <span class="comment">// 안내문..</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a name="1-2-5"></a></p><h4 id="1-2-5-Reverse-case"><a href="#1-2-5-Reverse-case" class="headerlink" title="1.2.5 Reverse case"></a>1.2.5 Reverse case</h4><p>switch구문이 runtime에 해석된다는 것은 뭐냐?<br>한줄씩 순차적으로 실행된다.</p><ul><li>switch문을 라우터로 사용하지 않거나, 라우터로 사용하더라도 함수가 개입되거나, 증감현상처럼 상태를 바꾸는 코드가 들어가면 항상 주의해서 써야한다.</li><li>runtime에서 switch를 해석하는 모든 언어에서 발생한다.<ul><li>python, ruby, javaScript</li><li>유의깊에 사용하지 않으면 문제를 일으킨다.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;🌕🌑🌑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;코드스피츠 강의 정리록&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h3 id=&quot;복습&quot;&gt;&lt;a href=&quot;#복습&quot; class=&quot;headerlink&quot; title=&quot;복습&quot;&gt;&lt;/a&gt;복습&lt;/h3&gt;&lt;p&gt;Flow
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2018 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2018-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="flow control" scheme="http://feel5ny.github.io/tags/flow-control/"/>
    
  </entry>
  
  <entry>
    <title>Git Submodule로 공용로직 공유하기</title>
    <link href="http://feel5ny.github.io/2019/01/27/Git_01/"/>
    <id>http://feel5ny.github.io/2019/01/27/Git_01/</id>
    <published>2019-01-27T12:23:55.000Z</published>
    <updated>2019-10-31T13:06:11.610Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>잘못된 점이 있으면 댓글 부탁드립니다 :)</p></blockquote><p><strong>서론</strong><br>한 언어로 여러 프로젝트를 만들다 보면, 공용으로 사용되는 모듈들이 자연스럽게 생성된다. 비즈니스 코어를 모듈화할 수 있고, 또는 언어도 같고, api를 공유하는 프로젝트가 2벌 이상일 경우 http client만 모아있는 모듈을 따로 분리해서 공용화할 수도 있을 것이다. 이렇게 같은 공용 컴포넌트, 공용 모듈을 만들어서 공유할 수 있는 시스템이 구축된다면 공용으로 사용하고 있는 모듈에서 이슈가 생길 경우 작업은 한 번만 이루어 질 수 있기 때문에 생산성이 높아지고, 관리가 용이해진다.<br>git의 submodule을 사용하면 프로젝트 간 공용 모듈을 공유할 수 있다.<br>이 포스트에서는 submodule에 대해서 간단하게 다룰 것이다. 예시는 react + typeScript 기반이다.</p><img src="/images/2019/04/03.jpg"><hr><p>부모 프로젝트에서 자식프로젝트의<br><strong>validation class</strong>를 사용해 볼 것이다.</p><a name="1">## 1. 부모 프로젝트 셋팅하기 submodule_parent라는 이름의 react+TS 프로젝트를 셋팅한다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app submodule_parent --scripts-version=react-scripts-ts</span><br></pre></td></tr></table></figure><p>App.tsx파일에서 form을 생성하여, input의 글자가<br>Email 형식이 아니라면 fail, Email 형식이면 pass 워딩을 보여주는 UI를 만들 것이다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.tsx</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> App &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> IState &#123;</span><br><span class="line">    isEmail: <span class="built_in">boolean</span>;</span><br><span class="line">    text: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> App <span class="keyword">extends</span> React.Component&lt;&#123;&#125;, App.IState&gt; &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">prop: React.Component</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(prop);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      isEmail: <span class="literal">false</span>,</span><br><span class="line">      text: <span class="string">""</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// validation check </span></span><br><span class="line">  onCheckEmail = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">    <span class="literal">false</span> 👈👈</span><br><span class="line">      ? <span class="keyword">this</span>.setState(&#123; isEmail: <span class="literal">true</span> &#125;)</span><br><span class="line">      : <span class="keyword">this</span>.setState(&#123; isEmail: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">  handleChange = <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> </span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; text: e.target.value &#125;);</span><br><span class="line">    </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;input <span class="keyword">type</span>=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.onCheckEmail&#125;&gt;isEamil?&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &#123;this.state.isEmail ? (</span></span><br><span class="line"><span class="regexp">          &lt;h1 style=&#123;&#123; color: "green" &#125;&#125;&gt;Pass&lt;/</span>h1&gt;</span><br><span class="line">        ) : (</span><br><span class="line">          &lt;h1 style=&#123;&#123; color: <span class="string">"red"</span> &#125;&#125;&gt;Fail&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        )&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>email validation 로직은 공용 모듈로 분리해보자.</p><hr><a name="2">## 2. 자식 프로젝트 셋팅하기 부모 프로젝트에서 submodule로 추가하기 위해서는 자식 프로젝트를 remote repository에 올려야한다. > 예시를 위해 submodule_child라는 이름을 사용했지만, 실제 프로젝트에 넣어질 이름으로 짓는게 좋다. > ex. validation<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir submodule_child</span><br><span class="line"><span class="built_in">cd</span> submodule_child</span><br><span class="line"></span><br><span class="line"><span class="comment"># 자식 프로젝트</span></span><br><span class="line">git remote add origin &lt;repository 주소&gt;</span><br></pre></td></tr></table></figure><p>해당 폴더에 validation class를 만들었다.<br>현재 예시로 든 부모 프로젝트는 src 아래의 ts파일을 컴파일하도록 설정해놓았다. (src 밖의 ts파일은 컴파일하지 못함.) 만약 js파일로 공용 모듈을 만든다면 상관없지만, ts로 만든다면, src 하위에 submodule을 관리하는 폴더를 두도록 해야 한다. (혹은 경로에 상관없이 tsconfig파일에서 inlcude에 포함하면됨)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// validation.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Validation &#123;</span><br><span class="line">  email = (email: <span class="built_in">string</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> regexr = <span class="regexp">/^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*\.[a-zA-Z]&#123;2,3&#125;$/</span>;</span><br><span class="line">    <span class="keyword">return</span> regexr.test(email);</span><br><span class="line">  &#125;;</span><br><span class="line">  phone = (phone: <span class="built_in">string</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> regexr = <span class="regexp">/^\d&#123;3&#125;-\d&#123;3,4&#125;-\d&#123;4&#125;$/</span>;</span><br><span class="line">    <span class="keyword">return</span> regexr.test(phone);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>공용으로 사용할 class을 만들었고, push 한다.</p><ul><li>현재는 자식브랜치의 master 브랜치에서 작업 후 올렸지만, 부모프로젝트에서 자식프로젝트의 여러 브랜치에 접근할 수 있으므로, 전략적으로 사용해도 된다.</li><li>개인적으로는 꼬일 수 있기 때문에 공용모듈은 master만 받는 식으로..하는게 좋지 않을까..</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -am <span class="string">"first init"</span></span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><hr><a name="3">## 3. 부모 프로젝트에 자식 프로젝트 submodule로 추가하기 부모 프로젝트의 경로로 가서 아래의 명령어로 submodule을 추가할 수 있다.- 추가시 따로 submodule을 관리하는 폴더가 있다면 해당 경로로 이동 후 add하면된다.<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add &lt;자식 프로젝트 repository&gt;</span><br></pre></td></tr></table></figure><p>추가가 되면 자동으로 <code>.gitmodules</code>파일이 생성되고, 해당 경로에 submodule파일이 fetch된다.</p><ul><li>예시의 경우 src 하위에 submodule_child라는 서브모듈을 추가하였다.</li><li><code>.gitmodules</code> 파일에는 프로젝트에서 관리하고 있는 서브모듈 목록에 대한 정보가 들어있다.</li><li>이 파일도 <code>.gitignore</code> 파일처럼 버전 관리된다.</li><li>이 프로젝트를 Clone하는 사람은 .gitmodules 파일을 보고 어떤 서브모듈 프로젝트가 있는지 알 수 있다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[submodule &quot;src/submodule_child&quot;]</span><br><span class="line">path = src/submodule_child</span><br><span class="line">url = git@github.com:feel5ny/submodule_child.git</span><br></pre></td></tr></table></figure><p>깃 크라켄이라는 git client app을 사용하고 있는데, 해당 옵션에도 추가된 것을 확인할 수 있다.</p><img src="/images/2019/04/01.png"><img src="/images/2019/04/02.png" style="width:250px"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Validation &#125; <span class="keyword">from</span> <span class="string">"./submodule_child/validation"</span>;</span><br><span class="line"><span class="comment">/********* 👆👆👆 *********/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> App &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> IState &#123;</span><br><span class="line">    isEmail: <span class="built_in">boolean</span>;</span><br><span class="line">    text: <span class="built_in">string</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> App <span class="keyword">extends</span> React.Component&lt;&#123;&#125;, App.IState&gt; &#123;</span><br><span class="line">  validation: Validation;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">prop: React.Component</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(prop);</span><br><span class="line">    <span class="keyword">this</span>.validation = <span class="keyword">new</span> Validation();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      isEmail: <span class="literal">false</span>,</span><br><span class="line">      text: <span class="string">""</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  onCheckEmail = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">    <span class="keyword">this</span>.validation.email(<span class="keyword">this</span>.state.text) 👈👈</span><br><span class="line">      ? <span class="keyword">this</span>.setState(&#123; isEmail: <span class="literal">true</span> &#125;)</span><br><span class="line">      : <span class="keyword">this</span>.setState(&#123; isEmail: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">  handleChange = <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> <span class="keyword">this</span>.setState(&#123; text: e.target.value &#125;);</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;input <span class="keyword">type</span>=<span class="string">"text"</span> onChange=&#123;<span class="keyword">this</span>.handleChange&#125; /&gt;</span><br><span class="line">        &lt;button onClick=&#123;<span class="keyword">this</span>.onCheckEmail&#125;&gt;isEamil?&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &#123;this.state.isEmail ? (</span></span><br><span class="line"><span class="regexp">          &lt;h1 style=&#123;&#123; color: "green" &#125;&#125;&gt;Pass&lt;/</span>h1&gt;</span><br><span class="line">        ) : (</span><br><span class="line">          &lt;h1 style=&#123;&#123; color: <span class="string">"red"</span> &#125;&#125;&gt;Fail&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        )&#125;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><hr><a name="4">## 4. 자식 프로젝트 수정 후 부모 프로젝트에서 update하기공용 컴포넌트는 자주 바뀔 일을 없겠지만, 한번 add 된 이후 update가 있을면 기존 프로젝트에서 pull하는 방식과 마찬가지로 update하면된다.대신 pull을 이용해 최신 코드를 받길 원한다면 해당 경로로 이동하여 pull을 받아야 한다.- 공식 문서에는 서브 모듈사용 시 수정할 경우 (부모 프로젝트에서 자식 프로젝트 수정할 경우) 주의사항에 대해 자세히 작성되어있으니 읽어보길 권한다. [서브 모듈 사용할 때 주의할 점들](https://git-scm.com/book/ko/v1/Git-%EB%8F%84%EA%B5%AC-%EC%84%9C%EB%B8%8C%EB%AA%A8%EB%93%88#%EC%84%9C%EB%B8%8C%EB%AA%A8%EB%93%88-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%95%8C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90%EB%93%A4)<hr><p><strong>참고</strong><br><a href="https://git-scm.com/book/ko/v1/Git-%EB%8F%84%EA%B5%AC-%EC%84%9C%EB%B8%8C%EB%AA%A8%EB%93%88" target="_blank" rel="noopener">.6 Git 도구 - 서브모듈</a></p></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;잘못된 점이 있으면 댓글 부탁드립니다 :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;서론&lt;/strong&gt;&lt;br&gt;한 언어로 여러 프로젝트를 만들다 보면, 공용으로 사용되는 모듈들이 자연스럽게 생성된다. 비즈니스 코
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Git" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Git/"/>
    
    
      <category term="git" scheme="http://feel5ny.github.io/tags/git/"/>
    
      <category term="submodule" scheme="http://feel5ny.github.io/tags/submodule/"/>
    
  </entry>
  
  <entry>
    <title>CodeSpitz77 1회_Programming &amp; JS elementry</title>
    <link href="http://feel5ny.github.io/2019/01/22/JS_17/"/>
    <id>http://feel5ny.github.io/2019/01/22/JS_17/</id>
    <published>2019-01-22T13:20:19.000Z</published>
    <updated>2019-11-11T13:03:10.487Z</updated>
    
    <content type="html"><![CDATA[<p>🌕🌑🌑</p><blockquote><p>코드스피츠 강의 정리록</p></blockquote><hr><p><a name="1"></a></p><h2 id="1-왜-이렇게-짰니-개발-기본을-알아보자"><a href="#1-왜-이렇게-짰니-개발-기본을-알아보자" class="headerlink" title="1. 왜 이렇게 짰니. - 개발 기본을 알아보자."></a>1. 왜 이렇게 짰니. - 개발 기본을 알아보자.</h2><p>철학/가치/동기</p><h3 id="철학"><a href="#철학" class="headerlink" title="철학"></a><strong>철학</strong></h3><ul><li>상대주의적으로 바라보자.</li></ul><h3 id="기준-왜-이렇게-짰니-이것만-지켜도-비용절감"><a href="#기준-왜-이렇게-짰니-이것만-지켜도-비용절감" class="headerlink" title="기준 (: 왜 이렇게 짰니?.. 이것만 지켜도 비용절감.)"></a><strong>기준</strong> (: 왜 이렇게 짰니?.. 이것만 지켜도 비용절감.)</h3><ol><li>가치<br>: 이러이러한 가치를 추구했기 때문에 이렇게 작성하였다.<ul><li><strong>의사소통</strong><ul><li>A가 짠 코드를 아무도 못알아보면 비용낭비</li></ul></li><li><strong>단순함</strong><ul><li>A가 짠 코드가 복잡하여 요건 추가시 더 많은 시간낭비</li></ul></li><li><strong>유연함</strong><ul><li>A가 짠 코드에 요건추가시 다 뜯어고쳐야하면 비용낭비</li></ul></li></ul></li><li>원칙 (by <strong>Kent Beck</strong>)<ul><li><strong>지역화</strong><ul><li>A가 짠 코드를 고쳤더니 전체가 영향이 가면 &gt; 비용낭비</li></ul></li><li><strong>중복제거</strong><ul><li>A가 짠 코드를 고쳤더니 다른 곳은 그대로..&gt; 또 시간투자, 비용낭비</li></ul></li><li><strong>대칭성</strong><ul><li>예시_Get/Set</li><li>A가 짠 코드에 get은 있는데 set은 없다. 시간낭비</li></ul></li><li>추상적인 원칙도 있고, 컨벤션과같은 구체적인 원칙도 있다.</li></ul></li><li>패턴 (선배들의 경험기반..경험도 반복되면 진리에 가까워짐.)<ul><li>개발론</li><li>설계론</li><li>각종 적용 패턴</li></ul></li></ol><h3 id="동기"><a href="#동기" class="headerlink" title="동기"></a><strong>동기</strong></h3><ul><li>비용</li><li>시간</li></ul><hr><p><a name="2"></a></p><h2 id="2-program과-timing"><a href="#2-program과-timing" class="headerlink" title="2. program과 timing"></a>2. program과 timing</h2><blockquote><p>컴퓨터가 뭘까?<br>프로그램이 뭘까?</p></blockquote><h3 id="2-1-1-program"><a href="#2-1-1-program" class="headerlink" title="2-1-1. program"></a>2-1-1. program</h3><ol><li>language code<ul><li><strong>lint time</strong></li><li>컴파일 전에 많은 에러를 잡을 수 있다.</li><li><code>lint 타임에서 에러를 잡는게 제일 좋다!</code> 당근</li></ul></li><li>machine language(기계어)<ul><li><strong>compile time</strong></li></ul></li><li>file</li><li>load: file이 메모리에 올라가는 과정 <ul><li><strong>여기서부터 프로그램으로 불린다.</strong></li><li>load까지 프로그래머의 역할.</li></ul></li><li>run: 실행<ul><li><strong>run time</strong></li><li>run time에서도 잡지 못하는 에러<br>=&gt; context error<ul><li>개발자들끼리의 의사소통 문제 </li><li>기획서의 오류 </li></ul></li></ul></li><li>terminate: 종료</li></ol><hr><h3 id="2-1-2-script-program-😎"><a href="#2-1-2-script-program-😎" class="headerlink" title="2-1-2. script program 😎"></a>2-1-2. script program 😎</h3><ul><li>일반 프로그램과 다른점은, machine language가 4단계에 있다는 점.</li><li>자바스크립트도 이에 해당됨</li></ul><ol><li><strong>language code</strong>: 코드작성 후 </li><li><strong>file</strong>: js파일을</li><li><strong>load</strong>: 브라우저에 로드하면</li><li><strong>machine language</strong>(기계어): 기계어로 바꿔서</li><li><strong>run</strong>: 실행 (매번 기계어를 바꿀 수 없으니, <strong>캐시</strong>를 태워놓기도)</li><li>terminate: 종료</li></ol><hr><h3 id="2-2-1-program-runtime"><a href="#2-2-1-program-runtime" class="headerlink" title="2-2-1. program runtime"></a>2-2-1. program runtime</h3><p>컴파일 타임이 없어서 런타임이 중요<br>런타임은 메모리에 적재하여 실행하는 것</p><img src="/images/2019/02/01.png"><ol><li>loading</li><li>instruction fetch &amp; decoding(외부버스에서 명령을 가져와 해석)</li><li>execution (실행)</li></ol><blockquote><p>명령 하나당, 2번과 3번의 반복 </p></blockquote><p>메모리에 적재된 프로그램을 cpu가 소개한다. (<a href="https://www.slideshare.net/sunnykwak90/ss-43131241" target="_blank" rel="noopener">노이만 머신의 구조</a>)</p><hr><ul><li>컴파일 타임에는 실제 메모리를 갖고 있지 않는다.<br>메모리는 런타임때 올려짐.<ul><li>때문에 <strong>가짜 메모리 상에서 시뮬레이션 하며 만든다.</strong></li><li>컴파일 타임에 만들어진 파일 속의 코드들은 다 가짜 메모리에 올라가져있음.</li></ul></li><li>로드 시 *<em>가짜메모리 A와 진짜 메모리 A와 매핑해줘야한다. *</em><br>(virtual memory mapping table == VTable)<ul><li>컴파일러 언어들은 다 갖고있는 순서라고 생각하면된다.</li></ul></li></ul><ol><li>essential definition loading: 가장 중요한 것 부터 프로그램에 적재한다.</li><li>VTable에 매핑한다.</li><li>run</li><li>runtime definition loading<ul><li><strong>자바스크립트에서 런타임 중에 클릭 후 함수를 만들어 낼 수 있다.</strong></li><li>실행 후에도 정의물이 나오는 상황 </li><li>컴파일시점에 확정시키는 것이 아니라 runtime때 </li></ul></li></ol><hr><h3 id="2-2-2-script-program-runtime"><a href="#2-2-2-script-program-runtime" class="headerlink" title="2-2-2. script program runtime"></a>2-2-2. script program runtime</h3><img src="/images/2019/02/02.png"><ul><li>여러 레이어로 구성되어있다고 생각해도 된다.</li><li>스크립트 프로그램은 컴파일 단계가 없다보니, 런타임을 레이어로 나눠서 관리한다.</li></ul><hr><p><a name="3"></a></p><h2 id="3-Memory-Address-Pointer-Variables-Dispatch"><a href="#3-Memory-Address-Pointer-Variables-Dispatch" class="headerlink" title="3. Memory, Address, Pointer, Variables, Dispatch"></a>3. Memory, Address, Pointer, Variables, Dispatch</h2><p>프로그램 안에서 무슨일이 일어나는지 생각해보자.<br>데이터 부분의 메모리가 어떻게 움직이는지.<br><strong>참조의 참조를 왜 쓰는지를 배우는게 핵심</strong></p><ul><li>(linked list, decorator, …)</li><li>직접 알지 않고 다른 아이를 통해서 알려고 하지?</li></ul><h3 id="3-1-Memory"><a href="#3-1-Memory" class="headerlink" title="3-1. Memory"></a>3-1. Memory</h3><p>고유한 번호를 주소로 갖는 블럭체계로 되어있다.<br>블럭을 나타내는 주소는 몇자리일까? =&gt; 64bit인지 32bit인지</p><h3 id="3-2-메모리-모델"><a href="#3-2-메모리-모델" class="headerlink" title="3-2. 메모리 모델"></a>3-2. 메모리 모델</h3><p>(포인터 개념)</p><ol><li><p><code>A = &quot;TEST&quot;</code></p></li><li><p><code>&amp;A = 11</code> (C언어에서 주소값의 변수 앞에 <code>&amp;</code>를 사용한다.)</p></li><li><p><code>B = &amp;A</code></p></li><li><p><code>*B = &quot;TEST&quot;</code></p><blockquote><p><strong>직접참조의 위험성</strong></p><ul><li>어떤 변수를 외부에 공개할 때 </li><li>사용처를 확정지을 수 없다. </li><li>누가 어떻게 쓸지 모른다.</li><li>통제권을 벗어난다.</li></ul></blockquote></li><li><p><code>C = B, D = B, ...</code> : C와 D는 B를 바라보고있다.</p></li><li><p>B의 배신..<br><code>B = &amp;K</code> :  주소값이 바꾸었다.</p><ul><li>B가 변경되었기 때문에 당연히 C,D도 바뀔거라 생각하지만, 아니다.</li></ul></li></ol><ul><li>직접참조를 피하는 이유이다.</li><li>참조를 복사했을 때 꼭 이렇다.<ul><li>함수형 패러다임에서는 참조를 피하려고한다.</li></ul></li></ul><blockquote><p>double dispatch를 통해 해결할 수 있다.</p></blockquote><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">B = &#123; value: &amp;A, V: 3 &#125;</span><br><span class="line">C = B, D = B, ...</span><br></pre></td></tr></table></figure><p>B가 직접참조하지않고, 간접적으로 참조하게 만들었다.<br>Dispatch: 주소로부터 값을 얻는 행위</p><ul><li><strong>Double Dispatch</strong></li><li>자료구조에서 linked list의 원리</li><li>객체지향에서는 인터페이스와 클래스의 관계</li></ul><p>B가 배신을 때려도 대응할 수 있다.</p><hr><h3 id="3-3-Lexical-Grammar-어휘적인-측면의-문법"><a href="#3-3-Lexical-Grammar-어휘적인-측면의-문법" class="headerlink" title="3-3. Lexical Grammar (어휘적인 측면의 문법)"></a>3-3. Lexical Grammar (어휘적인 측면의 문법)</h3><ul><li>Control Character 제어문자 </li><li>White Space 공백문자 </li><li>Line Terminators 개행문자 </li><li>Comments 주석</li><li>Keyword 예약어 </li><li>Literals 리터럴<br>: 더이상 나눌 수 없는 객체나 값의 표현</li></ul><hr><h3 id="3-4-Language-Element"><a href="#3-4-Language-Element" class="headerlink" title="3-4. Language Element"></a>3-4. Language Element</h3><p>자바스크립트는 아래의 큰 3가지 카테고리로 나눌 수 있다.</p><h4 id="3-4-1-Statements-문"><a href="#3-4-1-Statements-문" class="headerlink" title="3-4-1. Statements: 문"></a>3-4-1. Statements: 문</h4><ul><li>컴파일러 혹은 실행기에게 주는 힌트이다.</li><li>메모리에 남는 개념이 아니다.</li><li>처리하고 끝낸다.</li><li><strong>Control Statement</strong></li><li>ex. If, For, While …<ul><li>ex. ruby는 <code>문</code>이라는 개념이 없다.</li></ul></li></ul><p>문을 나누는 기준에는 2가지가 있다.</p><ol><li><p>공문, 식문, 제어문, 선언문 </p><ul><li>공문: 아무것도 없는 문<ul><li><code>for(var i=0; i&lt;5; i++);</code> =&gt; 에러가 없다.</li><li>공문의 기준은 <code>;</code></li></ul></li><li>식문:</li><li>제어문:</li><li>선언문: 메모리 상의 변수를 할당하는 일 </li></ul></li><li><p>단문, 중문 </p><ul><li><code>if(true);</code></li><li><code>if(true) a = 3; else b = 5</code><ul><li>에러가 나지 않는 이유<br>if 절의 정의 : if(condition1) statement1 else statementN</li></ul></li><li><code>if (true) a=3; else if (a &gt; 2) b = 3; else b =5;</code><ul><li><code>if (true) a=3; else {if (a &gt; 2) b = 3; else b =5;}</code></li><li>암묵적으로 위처럼 줄괄호가 있다고 생각하는 것. else if절이 있는 것이 아니라,<br>앞부분의 if else절의 else가 갖고 있는 if else절이라고 생각하자.</li></ul></li><li>중괄호는 중문에서 많이 쓰인다.</li></ul></li></ol><h4 id="3-4-2-Expresssion-식"><a href="#3-4-2-Expresssion-식" class="headerlink" title="3-4-2. Expresssion: 식"></a>3-4-2. Expresssion: 식</h4><ul><li>식의 결과는 언제나 하나의 <strong>값으로 수렴되다.</strong></li><li>값식, 연산식, 호출식 </li><li><code>3;5;6;</code></li><li>하나의 값식을 식문으로 인지하기 때문에 에러나지 않는다.</li></ul><h4 id="3-4-3-Identifier-식별자"><a href="#3-4-3-Identifier-식별자" class="headerlink" title="3-4-3. Identifier 식별자"></a>3-4-3. Identifier 식별자</h4><ul><li>변수를 의미한다. </li><li>기본형, 참조형</li></ul><hr><p><a name="4"></a></p><h2 id="4-흐름"><a href="#4-흐름" class="headerlink" title="4. 흐름"></a>4. 흐름</h2><p>프로그래밍: 메모리에 적재되어있는 명령어의 연쇄(flow)<br>Sync Flow / Flow Control / Sub Flow </p><h3 id="4-1-Sync-Flow"><a href="#4-1-Sync-Flow" class="headerlink" title="4-1. Sync Flow"></a>4-1. Sync Flow</h3><ul><li>메모리에 적대되어있는 명령어를 실행하는 동안 우리는** 간섭을 못한다.** </li><li>동기화 흐름, 동기화 로직 이라고 한다.</li></ul><h3 id="4-2-흐름제어-flow-control"><a href="#4-2-흐름제어-flow-control" class="headerlink" title="4-2. 흐름제어 (flow control)"></a>4-2. 흐름제어 (flow control)</h3><ul><li>일자로 흐르는 sync flow를 제어할 수 있기 때문에 흐름제어라고 부른다.</li></ul><h3 id="4-3-sub-flow"><a href="#4-3-sub-flow" class="headerlink" title="4-3. sub flow"></a>4-3. sub flow</h3><ul><li>어떤 흐름은 반복적으로 쓰이기도 한다.</li><li><strong>함수</strong>나 <strong>클래스</strong>를 이용한다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;🌕🌑🌑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;코드스피츠 강의 정리록&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&quot;1&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-왜-이렇게-짰니-개발-기본을-알아보자&quot;&gt;&lt;a href=&quot;#1-왜-이렇게-
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2018 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2018-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="programming" scheme="http://feel5ny.github.io/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>안녕 2018, 안녕 2019</title>
    <link href="http://feel5ny.github.io/2019/01/13/Joylog_002/"/>
    <id>http://feel5ny.github.io/2019/01/13/Joylog_002/</id>
    <published>2019-01-13T12:23:55.000Z</published>
    <updated>2020-11-15T11:45:42.875Z</updated>
    
    <content type="html"><![CDATA[<!-- **TL;DR**정리해보니 회고가 더 길어졌다..2기 다짐의 핵심은 프로그래밍 의식적 연습하기!! --><hr><a name="1"><h2 id="1-전쟁같던-2018년"><a href="#1-전쟁같던-2018년" class="headerlink" title="1. 전쟁같던 2018년"></a>1. 전쟁같던 2018년</h2><img src="/images/2019/01/01.png">2018년 1월 개발자로서 처음 실무에서 일하기 시작하였다. **업무 적응, 비즈니스 로직을 이해, 부족한 실력을 올리기 위해** 정신없는 하루하루를 보냈다. 얼마나 달렸냐면 전환일 기준으로 사용할 수 있는 연차가 9개였는데, 12월에 확인해보니 8개나 남아있었다..(좀 쉬엄쉬엄할걸!) 그래도 이런 전쟁 같은 상황에서 달릴 수 있었던 이유는, 전쟁 속에서도 **배움**이 있었기 때문이다.<p>그밖에도 외부활동도 최소 1가지는 하였다. 사내분들 이외의 분들도 만나고 싶었고, 커뮤니티도 참여하고 싶었기 때문이다.</p><p>예전만큼은 아니지만, 종종 외주작업도 들어오곤 했는데, 이젠 점점 줄이는 추세로 갔다. 아무래도 지금은 선택과 집중을 해야 했기 때문에..</p><hr><a name="1-1"><h3 id="1-1-업무를-통해-배우다"><a href="#1-1-업무를-통해-배우다" class="headerlink" title="1.1 업무를 통해 배우다."></a>1.1 업무를 통해 배우다.</h3><p>업무는 다양하게 요청 들어왔다.<br>내가 잘 구현할 수 있는 부분도 있었고, 생소한 기술을 사용해야 하는 부분도 있었다. 생각지 못한 버그들을 맞닥드릴 때도 있었다. 혼자서 하고 싶은 작업만 했다면 이런 이슈들은 만나보지 못했을 것이다.<br>경험해보지 못했던 버그들을 고치거나, 기능을 구현해야 할 때, 그것을 공부하고 <strong>블로그에 정리하는 일은 뿌듯함과 성취감을 가져다 주곤 했다.</strong> 또한 아직 부족한 부분에 대해서도 인지할 수 있게 되는 계기가 되었다. </p><hr><a name="1-2"><h3 id="1-2-외부활동을-통해-나를-되돌아보다"><a href="#1-2-외부활동을-통해-나를-되돌아보다" class="headerlink" title="1.2 외부활동을 통해 나를 되돌아보다."></a>1.2 외부활동을 통해 나를 되돌아보다.</h3><img src="/images/2019/01/02.png"><p>일주일 중 70프로를 회사 동료들과 함께 보낸다.<br>부정적인 시선으로 본다면, 우물 안 개구리가 될 수도 있고, 커뮤니티의 영역이 좁아질 수 있었기 때문에 부담 없는 외부활동을 하고 싶었다. 꼭 오프라인 활동을 하지 않아도 말이다. 체력이 약해진 터라 외부활동은 최대한 자제하고 ㅎㅎ 시간을 많이 뺏을 것 같은 활동도 우선은 고려하지 않았다. 아직 공부에 투자를 많이 해야 할 시기이기 때문.. 온라인으로 활동할 수 있는 커뮤니티를 찾다가 우연히 개발자 글쓰기 모임을 알게 되어 지금까지 꾸준히 참여 중이다. </p><p>외부활동의 장점은 나를 되돌아볼 수 있다는 점이다. 회사에서 잠시 한발자국 물러나 나를 바라볼 수 있는 잠깐의 시간을 가질 수 있도록 도와주기 때문에, 일정 기간마다 자기 객관화를 할 수 있도록 도와준다. 그리고 글쓰기 습관이 붙은 덕분에 2018년에는 45개의 글을 작성할 수 있게 되었다. ( <a href="https://feel5ny.github.io/2018/11/11/Joylog_001/">글또 1기 회고글</a> )</p><hr><a name="1-3"><h3 id="1-3-취미활동"><a href="#1-3-취미활동" class="headerlink" title="1.3 취미활동"></a>1.3 취미활동</h3><img src="/images/2019/01/03.png">취미활동 취미활동.. 예전에는 기타치는걸 좋아했다! 예전이라 함은 디자인으로 수입이 있을때의 시기. 지금은 개발자가 되었기에 오히려 디자인작업이 리프레쉬할 수 있는 활동이 되었다. 아무래도 꾸준히 해왔던 커리어 중 하나였기 때문에 작업할 때 편안하고, 쉽게 놓지 못하는 부분도 있다. <img src="/images/2019/01/04.png">올해는 캐릭터 작업 외주, 간단한 인포그래픽 영상, 웹 디자인 작업이 들어왔다. 웹디자인 작업건이 제일 덩어리가 컸었는데, 시간을 너무 많이 들여야 해서 그 이후에는 정말 간단하게 작업할 수 있는 외주만 받았다. 작업물이 아까워서 드리블에 올렸는데 얼마 지나지 않아 바로 드리블에 초대되기도 했다. (예전엔 드리블 초대장 받으려고 그렇게 노력했건만!)<hr><a name="2"><h2 id="2-어떤-개발자가-되고-싶은건가"><a href="#2-어떤-개발자가-되고-싶은건가" class="headerlink" title="2. 어떤 개발자가 되고 싶은건가?"></a>2. 어떤 개발자가 되고 싶은건가?</h2><p>2018년도는 여러 면에서의 적응을 위해 내면을 깊게 들여다보지 못했다. 때문에 힘들 때 자주 흔들리곤 했는데, 그때마다 <strong>why</strong>를 외쳤다. 초심을 되돌아보고, 앞으로 어떤 방향으로 나아갈지 간략하게라도 정리를 하곤 했다. 자, 그래서 난 어떤 개발자가 되고 싶은가. 사실 제일 core는 <strong>내가 만든 기능으로 타인에게 도움 주기</strong>다. 한 번에 이룰 수 없다는 걸 알기 때문에 롱런을 위해서 재미있게 나아가려고 한다. 자연스럽게, 실력을 쌓으면서 재미와 흥미를 느낄 수 있는 부분은 뭐가 있을까로 고민하게 되었다.</p><hr><a name="2-1"><h3 id="2-1-UX를-잘-알고-디벨롭할-수-있는-개발자"><a href="#2-1-UX를-잘-알고-디벨롭할-수-있는-개발자" class="headerlink" title="2.1 UX를 잘 알고 디벨롭할 수 있는 개발자"></a>2.1 UX를 잘 알고 디벨롭할 수 있는 개발자</h3><img src="/images/2019/01/05.png">갑자기 ux이야기가 나왔다. 프론트엔드 개발자, 그리고 디자인에 관심 있는 사람으로서, 서비스의 첫인상과 신뢰성은 기능도 기능이지만, 사용성도 매우 중요하다고 생각한다. 지금까지 화려하고, 미적으로 아름다운 디자인들, ux가 잘 녹여있는 디자인들을 보았지만, 구현에서 실패하거나, 프론트엔드 개발자가 생각하는 디자인에 대한 중요성 정도 때문에 톤앤매너가 지켜지지 못한 구현물을 보곤 했다. 이런 상황의 해결을 위해서는 디자이너가 개발 친화적으로 디자인을 하거나, 개발자가 디자인시스템을 이해하여 디자이너에게 부족한 시안을 제안해야 한다는 점이다. 전자에 대한 관심도는 요즘 올라가고 있지만 후자는 아직 잘 모르겠다. ux관련 지식을 쌓아 유연하게 적용할 수 있도록 하여 서비스의 품질을 높이는 개발자가 되고 싶다!<hr><a name="2-2"><h3 id="2-2-배려심이-있는-믿음을-주는-동료"><a href="#2-2-배려심이-있는-믿음을-주는-동료" class="headerlink" title="2.2 배려심이 있는 믿음을 주는 동료"></a>2.2 배려심이 있는 믿음을 주는 동료</h3><img src="/images/2019/01/06.jpg">서비스는 작업자가 한 명이 혼자서 절대 작업할 수 없다. 협업이 필수인데, 바로 전후 단계에 밀접하게 붙어있는 작업자부터, 타 부서의 협력자들까지, 그들에게 믿음을 주는 동료가 되어야 한다고 생각한다. **이는 간단하게 보이면서도 디테일한 부분이라고 생각한다.** 배려심이라는 단어는 추상적이지만, 간단하게 말하자면 개발자는 비개발자들과 협업 시 최대한 그들이 이해하는 언어로 설명해주고, 문서화하는 것. 개발자들과는 나의 작업이 영향이 있을 협업자들과의 커뮤니케이션을 유연하게 하는 것. 진짜 진짜 기본적인 것인데 의외로 간과하는 사람들이 있는 것 같다. 서로 배려하는 문화는 좋은 서비스를 만드는 중요한 부분이라고 생각한다.<hr><a name="3"><h2 id="3-스스로에게-증명하는-해-2019년"><a href="#3-스스로에게-증명하는-해-2019년" class="headerlink" title="3. 스스로에게 증명하는 해, 2019년"></a>3. 스스로에게 증명하는 해, 2019년</h2><p>사실 이런 계획은 이렇게 글이나 혹은 다른 이에게 말로써 이렇게 할 것이다를 얘기하지만, 실제로 실행에 옮기기에는 많은 의지와 시간이 필요하다. 이렇게 정리하는 나도 ㅎㅎ 스스로에게 살짝 의구심은 들지만, 구체적으로 정리하는 것만으로도 실행의 동기를 구체화 시켜준다.<br>무튼, 서론이 길었지만, 올해는 앞으로의 계획 중 하나라도 성취할 수 있도록 실행에 옮겨 스스로에게 보여주고 싶고, <strong>잘 나아가고 있다고 말해주고 싶다.</strong></p><hr><a name="3-1"><h3 id="3-1-디자인-시스템-이해도-높이기"><a href="#3-1-디자인-시스템-이해도-높이기" class="headerlink" title="3.1 디자인 시스템 이해도 높이기"></a>3.1 디자인 시스템 이해도 높이기</h3><img src="/images/2019/01/07.png"><p>다른말로 antd 파해쳐보기.<br>최근들어 antd를 프로젝트에 적용해 보았는데, antd에서 정리해둔 디자인 시스템의 원칙에 대해서 이해하고 코드를 분석해볼 필요가 있다고 생각했다. 이는 추후 antd를 적용하지 않아도, 기본 뼈대를 잘 설계할 수 있도록 도와줄 수 있다고 생각한다. </p><hr><a name="3-2"><h3 id="3-2-기본-실력-키우기"><a href="#3-2-기본-실력-키우기" class="headerlink" title="3.2 기본 실력 키우기"></a>3.2 기본 실력 키우기</h3><p>두말하면 잔소리.. 커뮤니케이션도 중요하지만 실력도 당연히 중요..<br>올해는 알고리즘을 꾸준히 풀어보려고 한다!! </p><ul><li>자바스크립트</li><li>알고리즘 </li><li>…</li></ul><hr><a name="3-3"><h3 id="3-3-포티폴리오-작업하기"><a href="#3-3-포티폴리오-작업하기" class="headerlink" title="3.3 포티폴리오 작업하기"></a>3.3 포티폴리오 작업하기</h3><p><code>스스로에게 증명하는 해</code>라는 키워드에서 가장 중요한 할 일 중에 하나이다. 올해는 내가 재밌어하는 분야(마블, 해리포터, 반지의 제왕..)를 믹스하여 재밌는 서비스를 만들어 보고 싶다.<br>실제 사용할 수 있는 수준까지!</p><img src="/images/2019/01/08.png">> [포터모어](https://www.pottermore.com/)</a></a></a></a></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- **TL;DR**
정리해보니 회고가 더 길어졌다..
2기 다짐의 핵심은 프로그래밍 의식적 연습하기!! --&gt;

&lt;hr&gt;
&lt;a name=&quot;1&quot;&gt;

&lt;h2 id=&quot;1-전쟁같던-2018년&quot;&gt;&lt;a href=&quot;#1-전쟁같던-2018년&quot; class=&quot;h
      
    
    </summary>
    
      <category term="blog 🙆" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/"/>
    
      <category term="JoyStory" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/JoyStory/"/>
    
    
      <category term="Joy" scheme="http://feel5ny.github.io/tags/Joy/"/>
    
      <category term="blog" scheme="http://feel5ny.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>Typescript의 Generic을 사용해보자.</title>
    <link href="http://feel5ny.github.io/2018/12/09/Typescript_14/"/>
    <id>http://feel5ny.github.io/2018/12/09/Typescript_14/</id>
    <published>2018-12-09T06:13:22.000Z</published>
    <updated>2019-10-31T13:06:22.179Z</updated>
    
    <content type="html"><![CDATA[<p><strong>TL;DR</strong><br>*<em>제네릭은 선언 시점이 아니라 생성 시점에 타입을 명시하여 하나의 타입만이 아닌 다양한 타입을 사용할 수 있도록 하는 기법이다. *</em>한 번의 선언으로 다양한 타입에 재사용이 가능하다는 장점이 있다.</p><hr><p>리액트 + 타입스크립트로 프로젝트를 진행하면서 재밌는 이슈에 많이 부딪하고 있다. 그래도 재밌다고 느낀 이유는 부딪힐 때마다 해결 방법을 타입스크립트에서 제공해줬기 때문..<br>이슈 중에 하나는, 비동기 처리를 <code>promise</code>와 <code>async</code> <code>await</code>를 사용하여 작업하고 있는데, 리턴값의 타입을 명시하기가 시점에 따라 달랐기 때문에 실행 시점에 타입을 명시하고 싶었다. 처음에는 예상되는 타입을 await를 받는 변수에 타입을 명시했는데 제네릭은 이를 해결할 수 있는 방법이었다.</p><hr><a name="1"><h2 id="1-제네릭이란"><a href="#1-제네릭이란" class="headerlink" title="1. 제네릭이란."></a>1. 제네릭이란.</h2><p>*<em>제네릭은 선언 시점이 아니라 생성 시점에 타입을 명시하여 하나의 타입만이 아닌 다양한 타입을 사용할 수 있도록 하는 기법이다. *</em>한 번의 선언으로 다양한 타입에 재사용이 가능하다는 장점이 있다.</p><p>즉, 선언 시점에서는 제네릭으로 타입을 받을 부분을 뚫어놓고(?) (템플릿화 <code>&lt;T&gt;</code>) 실행 시점에 제네릭으로 타입을 명시하는 것이다. 실행 시점에 제네릭으로 타입을 명시하게 되면, <code>&lt;T&gt;</code>로 뚫어놓은(?) 템플릿에 타입이 명시되면서, 실행 시점에 맞는 타입을 정의할 수 있다. <strong>마치 함수에서 인자를 받는 형태와 비슷하다.</strong></p><p>너무 나만의 언어로 설명한 거 같으니.. 코드를 봅시다!</p><blockquote><p><code>T</code>는 제네릭을 선언할 때 관용적으로 사용되는 식별자로 타입 파라미터(Type parameter)라 한다. T는 Type의 약자로 반드시 T를 사용하여야 하는 것은 아니다.</p></blockquote><hr><a name="2"><h2 id="2-제네릭-사용방법"><a href="#2-제네릭-사용방법" class="headerlink" title="2. 제네릭 사용방법"></a>2. 제네릭 사용방법</h2><blockquote><p>2번은 <a href="https://www.typescriptlang.org/docs/handbook/generics.html" target="_blank" rel="noopener">공식문서</a>에 있는 내용이니 넘어가도 된다.</p></blockquote><p>제네릭 없이 간단한 identity function을 만들어보자.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">arg: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>any 타입을 사용할 수도 있다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>any를 사용할 때는 arg가 모든 타입을 받을 수 있기 때문에 공용적으로 사용 가능하지만, 어떤 값을 반환 할지에 대한 정보는 알 수가 없다. 만약 인자와 반환자의 타입을 같게 하고, 이를 공용적으로 사용하고 싶을 경우 제네릭을 사용하면 된다. </p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 제네릭으로 넣은 타입을 인자와 반환 타입으로 공용적으로 사용하고 있다.</span></span><br></pre></td></tr></table></figure><p>호출 시 아래처럼 제네릭으로 명시하면 된다.<br>두 번째 줄은 제네릭으로 명시하지 않았는데, 이는 인자로 넣어지는 ‘myString’타입으로 인해 컴파일러가 자동으로 T의 타입을 정의하기 때문이다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> output = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">"myString"</span>); </span><br><span class="line"><span class="keyword">let</span> output = identity(<span class="string">"myString"</span>);</span><br></pre></td></tr></table></figure><p>identity 함수의 타입을 명시할 때도 제네릭을 명시할 수 있다.<br><code>&lt;T&gt;(arg: T) =&gt; T</code> </p><ul><li>알파벳은 표현을 위한 수단이기 때문에 알파벳이 달라져도 상관없다.</li><li>object 리터럴 타입으로도 명시 가능하다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myIdentity: &lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> T = identity;</span><br><span class="line"><span class="keyword">let</span> myIdentity: &#123;&lt;T&gt;(arg: T): T&#125; = identity;</span><br></pre></td></tr></table></figure><p>위의 코드를 인터페이스로 표현한다면?</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GenericIdentityFn &#123;</span><br><span class="line">  &lt;T&gt;(arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: GenericIdentityFn = identity;</span><br></pre></td></tr></table></figure><p>재밌게도!! 인터페이스에서 제네릭을 명시하게 할 수도 있다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GenericIdentityFn&lt;T&gt; &#123;</span><br><span class="line">  (arg: T): T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity: GenericIdentityFn&lt;<span class="built_in">number</span>&gt; = identity;</span><br><span class="line">myIdentity(<span class="string">"1"</span>);</span><br><span class="line"><span class="comment">// [ts] '"1"' 형식의 인수는 'number' 형식의 매개 변수에 할당될 수 없습니다. [2345]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity2: &#123;&lt;T&gt;(arg: T): T&#125; = identity;</span><br><span class="line">myIdentity2&lt;<span class="built_in">number</span>&gt;(<span class="string">"1"</span>);</span><br><span class="line"><span class="comment">// [ts] '"1"' 형식의 인수는 'number' 형식의 매개 변수에 할당될 수 없습니다. [2345]</span></span><br></pre></td></tr></table></figure><p>클래스에서도 제네릭을 명시할 수 있다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> GenericNumber&lt;T&gt; &#123;</span><br><span class="line">  zeroValue: T;</span><br><span class="line">  add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenericNumber&lt;<span class="built_in">number</span>&gt;();</span><br></pre></td></tr></table></figure><p>타입스크립트를 리액트와 함께 사용할 때 자주 볼 수 있는 패턴이다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Component <span class="keyword">extends</span> React.Component&lt;Props, State&gt;&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>제네릭은 인터페이스를 상속받을 수도 있는데, 제네릭을 명시한 함수에서 특정 타입이 들어올 것을 예상하고 로직을 작성해야 할 경우에 인터페이스를 상속받아 사용 가능하다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">  length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length); </span><br><span class="line">  <span class="comment">// Now we know it has a .length property, so no more error</span></span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><a name="3"><h2 id="3-제네릭은-이런-상황에서는-무의미한-사용이다"><a href="#3-제네릭은-이런-상황에서는-무의미한-사용이다" class="headerlink" title="3. 제네릭은 이런 상황에서는 무의미한 사용이다."></a>3. 제네릭은 이런 상황에서는 무의미한 사용이다.</h2><p><a href="https://basarat.gitbooks.io/typeScript/docs/types/generics.html" target="_blank" rel="noopener">typeScript deep dive</a> 문서를 보면, 사람들은 제네릭을 heck스러운 방법으로 사용할 때가 있다고 한다.<br>개발자가 제네릭을 사용할 때! <strong>어떤 부분을 강제할 것인지에 대해 제대로 설명하지 못한다면 제네릭을 사용할 필요가 없다고 한다.</strong></p><h3 id="🙅-1"><a href="#🙅-1" class="headerlink" title="🙅 #1"></a>🙅 #1</h3><p>아래 코드를 보면, 제네릭을 명시했지만, 인자 하나에서만 사용되고 있다.<br>이렇게 하나의 인자를 위해서 제네릭으로 받는 상황에서는 제네릭은 쓸모없는 무의미한 명시다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg: T</span>): <span class="title">void</span></span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="title">void</span></span>;</span><br></pre></td></tr></table></figure><h3 id="🙅-2"><a href="#🙅-2" class="headerlink" title="🙅 #2"></a>🙅 #2</h3><p>아래의 상황에서는 제네릭의 T가 리턴 값으로 한 번만 사용되었다.<br>type assertion 방법과 딱히 다르지 않다.<br>오직 리턴 값 한 번만 사용하기 위한 제네릭은 타입 안정성 측면에서 어셜션보다 나은 방법은 아니다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span>&lt;<span class="title">T</span>&gt;(<span class="params">name: <span class="built_in">string</span></span>): <span class="title">T</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">parse</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="title">any</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> something = parse(<span class="string">'something'</span>) <span class="keyword">as</span> TypeOfSomething;</span><br></pre></td></tr></table></figure><p>그렇다면 어떤 상황에 사용해야 제네릭을 적합하게 사용하는 것일까.<br>api로 응답 값을 받을 때 제네릭을 사용하면 굉장히 편리하게 사용할 수 있다. </p><hr><a name="4"><h2 id="4-ajax콜-이후의-응답-타입을-명시할-때"><a href="#4-ajax콜-이후의-응답-타입을-명시할-때" class="headerlink" title="4. ajax콜 이후의 응답 타입을 명시할 때"></a>4. ajax콜 이후의 응답 타입을 명시할 때</h2><p>fetch로 github 정보를 받아오는 함수가 있다고 가정하자. (async, await 사용)</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> githubUser = <span class="keyword">await</span> fetchGithubInfo()</span><br><span class="line"><span class="keyword">const</span> fetchGithubInfo = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> rep = <span class="keyword">await</span> fetch(<span class="string">'https://api.github.com/users/feel5ny'</span>,&#123;</span><br><span class="line">      method: <span class="string">"GET"</span>,</span><br><span class="line">      <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,\</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="keyword">return</span> rep.status &gt;= <span class="number">500</span> ? <span class="literal">null</span>: rep.jsoin()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>제네릭을 몰랐을 때는 아래처럼 써주었다…</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> githubUser: GithubRep | <span class="literal">undefined</span> | <span class="literal">null</span> = <span class="keyword">await</span> fetchGithubInfo()</span><br></pre></td></tr></table></figure><p>이런 말도 안 되는 8ㅅ8<br>githubUser에는 await 함수가 할당되어있는 상황이기 때문에 Promise 타입을 명시해야 맞는 상황.</p><p>때문에 아예 fetchGithubInfo에서 제네릭으로 타입을 받게 변경하였다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchGithubInfo = <span class="keyword">async</span> &lt;T&gt;(): <span class="built_in">Promise</span>&lt;T | <span class="literal">null</span>&gt; =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> rep = <span class="keyword">await</span> fetch(<span class="string">'https://api.github.com/users/feel5ny'</span>,&#123;</span><br><span class="line">      method: <span class="string">"GET"</span>,</span><br><span class="line">      <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,\</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="keyword">return</span> rep.status &gt;= <span class="number">500</span> ? <span class="literal">null</span>: rep.json()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> githubUser= <span class="keyword">await</span> &lt;GithubRep&gt;fetchGithubInfo()</span><br></pre></td></tr></table></figure><p>깔끔! 추후에는 아예 ajax 콜 모듈화한 함수에서 제네릭을 자주 사용하게 되었다.</p><hr><p>참고</p><ol><li><a href="https://poiemaweb.com/typeScript-generic" target="_blank" rel="noopener">https://poiemaweb.com/typeScript-generic</a></li><li><a href="https://basarat.gitbooks.io/typeScript/docs/types/generics.html" target="_blank" rel="noopener">https://basarat.gitbooks.io/typeScript/docs/types/generics.html</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/generics.html" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/generics.html</a></li></ol></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;br&gt;*&lt;em&gt;제네릭은 선언 시점이 아니라 생성 시점에 타입을 명시하여 하나의 타입만이 아닌 다양한 타입을 사용할 수 있도록 하는 기법이다. *&lt;/em&gt;한 번의 선언으로 다양한 타입에 재사용이 가능하다는 
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="TypeScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/TypeScript/"/>
    
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>Redux-observable 예제 따라해보기 (feat. React + TypeScript)</title>
    <link href="http://feel5ny.github.io/2018/11/25/Async_05/"/>
    <id>http://feel5ny.github.io/2018/11/25/Async_05/</id>
    <published>2018-11-25T11:12:34.000Z</published>
    <updated>2019-10-31T13:06:22.174Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>오류가 있다면 언제든지 지적해주세요.<br>코드: <a href="https://github.com/feel5ny/redux-observable-practice" target="_blank" rel="noopener">https://github.com/feel5ny/redux-observable-practice</a></p></blockquote><hr><blockquote><p><a href="https://www.youtube.com/watch?v=AslncyG8whg" target="_blank" rel="noopener">https://www.youtube.com/watch?v=AslncyG8whg</a><br>Not familiar with Observables/RxJS v6?<br>redux-observable requires an understanding of Observables with RxJS v6. If you’re new to Reactive Programming with RxJS v6, head over to <a href="http://reactivex.io/rxjs/" target="_blank" rel="noopener">http://reactivex.io/rxjs/</a> to familiarize yourself first.</p></blockquote><blockquote><p>redux-observable (because of RxJS) truly shines the most for complex async/side effects. If you’re not already comfortable with RxJS you might consider using redux-thunk for simple side effects and then use redux-observable for the complex stuff. That way you can remain productive and learn RxJS as you go. redux-thunk is much simpler to learn and use, but that also means it’s far less powerful. Of course, if you already love Rx like we do, you will probably use it for everything!</p></blockquote><p>If you’re not already comfortable with RxJS you might consider using redux-thunk for simple side effects and then use redux-observable for the complex stuff.</p><p>“만약 당신이 아직 rxjs에 익숙하지 않다면, 간단한 사이드이팩트용으로는 redux-thunk를 사용하는 걸 고려하고, 복잡한 stuff에서는 redux-observable을 사용하는 것이 좋습니다.” <a href="https://redux-observable.js.org/docs/basics/Epics.html" target="_blank" rel="noopener">링크</a></p><p>그래서 한번 공부해보기로 했다.</p><hr><a name="1"> ## 1. Basic### 1.1 epic이라는 개념리덕스 옵저버블에는 epic이라는 구조를 사용한다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function (action$: Observable&lt;Action&gt;, state$: StateObservable&lt;State&gt;): Observable&lt;Action&gt;;</span><br></pre></td></tr></table></figure><p>It is a function which takes a stream of actions and returns a stream of actions. Actions in, actions out.<br>에픽함수는 액션스트림을 가져가고, 액션스트림을 반환하는 함수이다.<br>간단하게 말하자면, action 객체를 store에서 ActionObservable로 얻게되는데,<br>에픽에서는 액션 옵저버블을 스토어에서 받아서 추가적인 처리후 다시 옵저버블로 반환할 수 있다.<br>추가적인 처리에는 rxjs의 operator 등을 사용한다.</p><h3 id="1-2-미들웨어-셋팅"><a href="#1-2-미들웨어-셋팅" class="headerlink" title="1.2 미들웨어 셋팅"></a>1.2 미들웨어 셋팅</h3><ul><li><code>createEpicMiddleware</code>를 사용한다.<br>store로 들어오는 action객체를 옵저버블로 반환하는 역할을 한다. </li><li>redux 상태변화를 관찰하기 위해 logger 셋팅.</li><li>store에 리듀서와 미들웨어를 적용하면서 create한다.</li><li>epic을 모아둔 rootEpic을 등록한다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; applyMiddleware, createStore &#125; <span class="keyword">from</span> <span class="string">"redux"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createEpicMiddleware &#125; <span class="keyword">from</span> <span class="string">"redux-observable"</span>;</span><br><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">"redux-logger"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; rootReudcer &#125; <span class="keyword">from</span> <span class="string">"./reducers"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; rootEpic &#125; <span class="keyword">from</span> <span class="string">"./epics"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> epicMiddleware = createEpicMiddleware();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">configureStore</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> store = createStore(</span><br><span class="line">    rootReudcer,</span><br><span class="line">    applyMiddleware(epicMiddleware, logger)</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  epicMiddleware.run(rootEpic);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createEpicMiddleware : index.d.ts</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="keyword">interface</span> Epic&lt;Input <span class="keyword">extends</span> Action = any, Output <span class="keyword">extends</span> Input = Input, State = any, Dependencies = any&gt; &#123;</span><br><span class="line">  (action$: ActionsObservable&lt;Input&gt;, state$: StateObservable&lt;State&gt;, dependencies: Dependencies): Observable&lt;Output&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> EpicMiddleware&lt;T <span class="keyword">extends</span> Action, O <span class="keyword">extends</span> T = T, S = void, D = any&gt; <span class="keyword">extends</span> Middleware &#123;</span><br><span class="line">  run(rootEpic: Epic&lt;T, O, S, D&gt;): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">createEpicMiddleware</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Action</span>, <span class="title">O</span> <span class="title">extends</span> <span class="title">T</span> = <span class="title">T</span>, <span class="title">S</span> = <span class="title">void</span>, <span class="title">D</span> = <span class="title">any</span>&gt;(<span class="params">options?: Options&lt;D&gt;</span>): <span class="title">EpicMiddleware</span>&lt;<span class="title">T</span>, <span class="title">O</span>, <span class="title">S</span>, <span class="title">D</span>&gt;</span>;</span><br></pre></td></tr></table></figure><h3 id="1-3-액션-셋팅"><a href="#1-3-액션-셋팅" class="headerlink" title="1.3 액션 셋팅"></a>1.3 액션 셋팅</h3><p>깃헙에서 정보를 받아오는 ajax요청 처리를 해보자.</p><p>액션파일에는</p><ol><li>시작액션 <code>FETCH_USER</code></li><li>성공액션 <code>FETCH_USER_FULFILLED</code></li><li>실패액션 <code>FETCH_USER_REJECTED</code></li><li>취소액션 (이건 필요에 따라) <code>FETCH_USER_CANCELLED</code></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 액션 타입</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FETCH_USER = <span class="string">"FETCH_USER"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FETCH_USER_FULFILLED = <span class="string">"FETCH_USER_FULFILLED"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FETCH_USER_CANCELLED = <span class="string">"FETCH_USER_CANCELLED"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FETCH_USER_REJECTED = <span class="string">"FETCH_USER_REJECTED"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 액션 함수</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> cancelFetch = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  <span class="keyword">type</span>: FETCH_USER_CANCELLED</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchUser = <span class="function">(<span class="params">username: <span class="built_in">string</span></span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="keyword">type</span>: FETCH_USER,</span><br><span class="line">  payload: username</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchUserFulfilled = <span class="function">(<span class="params">payload: <span class="built_in">any</span></span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="keyword">type</span>: FETCH_USER_FULFILLED,</span><br><span class="line">  payload</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="1-4-reducer-셋팅"><a href="#1-4-reducer-셋팅" class="headerlink" title="1.4 reducer 셋팅"></a>1.4 reducer 셋팅</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = (</span><br><span class="line">  state = &#123;</span><br><span class="line">    joy: &#123;</span><br><span class="line">      avatar_url: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    error: <span class="string">""</span>,</span><br><span class="line">    isFetchingUser: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  action: ActionInterface</span><br><span class="line">) =&gt; &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> FETCH_USER:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, isFetchingUser: <span class="literal">true</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> FETCH_USER_FULFILLED:</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        ...state,</span><br><span class="line">        joy: action.payload,</span><br><span class="line">        isFetchingUser: <span class="literal">false</span></span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">case</span> FETCH_USER_REJECTED:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, error: action.payload, isFetchingUser: <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> FETCH_USER_CANCELLED:</span><br><span class="line">      <span class="keyword">return</span> &#123; ...state, isFetchingUser: <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> rootReudcer = combineReducers(&#123;</span><br><span class="line">  ping: pingReducer,</span><br><span class="line">  user: users</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><a name="2"> ## 2. epic 작업- epic이 여러개가 있을 경우 combineEpics를 사용한다.- 도트체이닝 없이 pipe를 사용하여 순차적으로 받아서 처리한다.  - action type에 따라 처리하기 위해 redux-observable의 `ofType` 메서드를 사용한다.- `mergeMap`: 내부 옵저버블이 방출되면, 해당 값을 바깥 옵저버블과 함께 병합한다.- `race`: 레이스 오퍼레이터. 인자로 들어온 옵저버블 중에 제일 빨리 처리된 옵저버블을 반환한다.- `delay`: 해당 초만큼 딜레이 이후 다음 오퍼레이터를 실행한다.- `takeUntil`:  특정 액션이 들어올 때 동작을 취소할 수 있다.- `catchError`: 에러 핸들링<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchUserEpic = (</span><br><span class="line">  action$: Observable&lt;Action&gt;,</span><br><span class="line">  state$: StateObservable&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">): Observable&lt;Action&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> action$.pipe(</span><br><span class="line">    ofType(FETCH_USER),</span><br><span class="line">    mergeMap(<span class="function">(<span class="params">action: ActionInterface</span>) =&gt;</span></span><br><span class="line">      race(</span><br><span class="line">        ajax.getJSON(<span class="string">`https://api.github.com/users/<span class="subst">$&#123;action.payload&#125;</span>`</span>).pipe(</span><br><span class="line">          delay(<span class="number">1000</span>),</span><br><span class="line">          map(<span class="function"><span class="params">response</span> =&gt;</span> fetchUserFulfilled(response)),</span><br><span class="line">          takeUntil(action$.pipe(ofType(FETCH_USER_CANCELLED))),</span><br><span class="line">          catchError(<span class="function"><span class="params">error</span> =&gt;</span></span><br><span class="line">            of(&#123;</span><br><span class="line">              <span class="keyword">type</span>: FETCH_USER_REJECTED,</span><br><span class="line">              payload: error.xhr.response,</span><br><span class="line">              error: <span class="literal">true</span></span><br><span class="line">            &#125;)</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">    )</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> rootEpic = combineEpics(fetchUserEpic, ...);</span><br></pre></td></tr></table></figure><hr><p>참고</p><ol><li><a href="https://redux-observable.js.org/docs/basics/Epics.html" target="_blank" rel="noopener">https://redux-observable.js.org/docs/basics/Epics.html</a></li><li><a href="https://blog.sapzil.org/2017/07/16/redux-observable/" target="_blank" rel="noopener">https://blog.sapzil.org/2017/07/16/redux-observable/</a></li><li><a href="https://wonism.github.io/redux-saga-vs-redux-observable/" target="_blank" rel="noopener">https://wonism.github.io/redux-saga-vs-redux-observable/</a></li></ol></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;오류가 있다면 언제든지 지적해주세요.&lt;br&gt;코드: &lt;a href=&quot;https://github.com/feel5ny/redux-observable-practice&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ht
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="React" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/React/"/>
    
    
      <category term="async" scheme="http://feel5ny.github.io/tags/async/"/>
    
      <category term="redux" scheme="http://feel5ny.github.io/tags/redux/"/>
    
      <category term="observable" scheme="http://feel5ny.github.io/tags/observable/"/>
    
      <category term="react" scheme="http://feel5ny.github.io/tags/react/"/>
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>2부/ chap01. RxJs란 무엇인가?</title>
    <link href="http://feel5ny.github.io/2018/11/18/Async_04/"/>
    <id>http://feel5ny.github.io/2018/11/18/Async_04/</id>
    <published>2018-11-18T11:12:34.000Z</published>
    <updated>2019-01-03T15:33:29.069Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>[📕 퀵스타트 Rxjs]</strong>를 보고 메모한 부분을 정리했습니다.</p></blockquote><hr><a name="1"> <h2 id="1-RxJS란"><a href="#1-RxJS란" class="headerlink" title="1. RxJS란?"></a>1. RxJS란?</h2><p>RxJS is a library for composing asynchronous and event-based programs by using observable sequences.<br>RxJS는 Observable를 사용하여 비동기 및 이벤트 기반 프로그램을 작성하기 위한 라이브러리이다.<br>(범용적인 데이터 플로우 솔류션을 지향하는 라이브러리라고 책 저자가 정의함)</p><a name="2"><h2 id="2-RxJS-시작하기"><a href="#2-RxJS-시작하기" class="headerlink" title="2. RxJS 시작하기"></a>2. RxJS 시작하기</h2><a name="2-1"> <h3 id="2-1-RxJS-첫번째-예제"><a href="#2-1-RxJS-첫번째-예제" class="headerlink" title="2.1 RxJS 첫번째 예제"></a>2.1 RxJS 첫번째 예제</h3><p>목표: 페이지를 클릭했을 경우 <code>event.currentTarget</code>정보를 콘솔로 출력해보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;fromEvent&#125; = rxjs;</span><br><span class="line"><span class="keyword">const</span> click$ = fromEvent(<span class="built_in">document</span>, <span class="string">'click'</span>);</span><br><span class="line"><span class="comment">// 1. fromEvent : 타겟의 이벤트를 옵저버블로 변환한다. </span></span><br><span class="line"><span class="keyword">const</span> observer = <span class="function"><span class="params">event</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(event.currentTarget)&#125;</span><br><span class="line">click$.subscribe(observer);</span><br></pre></td></tr></table></figure><p><code>fromEvent(target: EventTargetLike, eventName: string, selector: function): Observable</code><br>click 옵저버블을 구독하고, 옵저버블에서 데이터가 전달되면 옵저버함수가 받는다.<br>이는 addEventListener를 통한 이벤트 핸들러 등록과 유사하다.<br>둘의 차이점은 브라우저를 통해 전달되는 이벤트 정보를 Observable로 변환하는 작업을 추가로 한다는 점<br><a name="2-2"> </a></p><h3 id="2-2-RxJS-첫번째-예제-개선하기"><a href="#2-2-RxJS-첫번째-예제-개선하기" class="headerlink" title="2.2 RxJS 첫번째 예제 개선하기"></a>2.2 RxJS 첫번째 예제 개선하기</h3><p>실제 우리가 필요한 정보는 click이 아니라 click이후의 <code>currentTarget</code>정보</p><p>pluck 오퍼레이터를 이용하자.<br><code>pluck(properties: ...string): Observable</code><br>pluck은 사전적으로 ‘~을 뽑다’라는 의미이다. 추출할 속성들을 ‘문자열’로 지정할 수 있다.</p><p>pipe 오퍼레이터를 사용하여 파라미터로 전달된 오퍼레이터들이 적용된 새로운 Observable 인스턴스를 반환한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;fromEvnet&#125;= rxjs;</span><br><span class="line"><span class="keyword">const</span> &#123;pluck&#125; = rxjs.operators;</span><br><span class="line"><span class="keyword">const</span> currentTarget$ = fromEvent(<span class="built_in">document</span>, <span class="string">'click'</span>).pipe( pluck(<span class="string">'currentTarget'</span>) );</span><br><span class="line"><span class="keyword">const</span> observer = <span class="function"><span class="params">currentTarget</span> =&gt;</span> &#123;<span class="built_in">console</span>.log(currentTarget)&#125;</span><br><span class="line">currentTarget$.subscribe(observer)</span><br></pre></td></tr></table></figure><p>cf__1. RxJS에서 pipe 오퍼레이터를 적용하여서 도트 체이닝없이 오퍼레이터를 받는다.<br>pipe는 처리되어야할 작업들을 순차적으로 받아서 처리한다.<br><code>pipe(operations: ...): Observable</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 도트체이닝</span></span><br><span class="line">ajax$</span><br><span class="line">  .switchMap(<span class="function"><span class="params">data</span>=&gt;</span>...)</span><br><span class="line">  .filter(<span class="function"><span class="params">user</span> =&gt;</span> ...)</span><br><span class="line">  .map(<span class="function"><span class="params">user</span> =&gt;</span> ...)</span><br><span class="line"></span><br><span class="line"><span class="comment">// pipe 오프레이터</span></span><br><span class="line">ajax$</span><br><span class="line">  .pipe(</span><br><span class="line">    switchMap(<span class="function"><span class="params">data</span> =&gt;</span> ...),</span><br><span class="line">    filter(<span class="function"><span class="params">user</span> =&gt;</span> ...),</span><br><span class="line">    map(<span class="function"><span class="params">user</span> =&gt;</span> ...)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><ul><li>도트 체이닝을 구성하기 위해서는 옵저버블 객체가 모든 오퍼레이터를 가지고 있어야한다.</li><li><code>Observable.prototype</code>에 사용하는 모든 오퍼레이터가 추가된다.<ul><li>rxjs사용시 불필요한 오퍼레이터를 모두 가지고 있어야 하기 때문에 파일 사이즈를 증가시킨다.</li></ul></li><li>pipe오퍼레이터를 사용하면 트리세이킹(tree shaking: 사용하지 않는 모듈을 번들링할 때 제거하는 기능)을 자유롭게 할 수 있다.</li><li>pipe 오퍼레이터는 함수형태로만 오퍼레이터가 만들어지기 때문에<br><strong>Observable과의 결합도를 떨어뜨려</strong> 더더욱 쉽게 오퍼레이터를 작성할 수 있다.</li></ul><hr><a name="2-3"> <h3 id="2-3-RxJS-두번째-예제"><a href="#2-3-RxJS-두번째-예제" class="headerlink" title="2.3 RxJS 두번째 예제"></a>2.3 RxJS 두번째 예제</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [ </span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'유비'</span>, <span class="attr">nationality</span>: <span class="string">'촉'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'손권'</span>, <span class="attr">nationality</span>: <span class="string">'오'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'관우'</span>, <span class="attr">nationality</span>: <span class="string">'촉'</span>&#125;,</span><br><span class="line">].filter(<span class="function"><span class="params">user</span>=&gt;</span> user.nationality === <span class="string">'촉'</span>)</span><br><span class="line"><span class="keyword">const</span> log = <span class="function"><span class="params">user</span> =&gt;</span> <span class="built_in">console</span>.log(user);</span><br><span class="line">a.forEach(log)</span><br></pre></td></tr></table></figure><p><code>from(ish: ObservableInput, mapFn: function, thisArg: any, scheduler: Scheduler): Observable</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;<span class="keyword">from</span>&#125; = rxjs;</span><br><span class="line"><span class="keyword">const</span> &#123;filter&#125; = rxjs.operators;</span><br><span class="line"><span class="keyword">const</span> a$ = <span class="keyword">from</span>([ </span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'유비'</span>, <span class="attr">nationality</span>: <span class="string">'촉'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'손권'</span>, <span class="attr">nationality</span>: <span class="string">'오'</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">'관우'</span>, <span class="attr">nationality</span>: <span class="string">'촉'</span>&#125;,</span><br><span class="line">]).pipe(filter(<span class="function"><span class="params">user</span>=&gt;</span> user.nationality === <span class="string">'촉'</span>))</span><br><span class="line"><span class="keyword">const</span> oberver = <span class="function"><span class="params">user</span> =&gt;</span> <span class="built_in">console</span>.log(user);</span><br><span class="line">a$.subscribe(observer);</span><br></pre></td></tr></table></figure><a name="3"> ----## 3. RxJS 4대 천왕1. Observable2. 오퍼레이터3. Observer4. Subscription---5. Subject6. Scheduler> 다른장에서 설명<hr><a name="3-1"> <h3 id="3-1-Observable"><a href="#3-1-Observable" class="headerlink" title="3.1 Observable"></a>3.1 Observable</h3><p><strong>시간을 축</strong>으로 연속적인 데이터를 저장하는 컬렉션을 표현한 객체이다.<br>Observable은 데이터를 제공하는 소스를<br>Observer에게 전달한다.<br>이를 <strong>스트림(stream)</strong>이라고 부른다.<br><a name="3-2"> </a></p><h3 id="3-2-오퍼레이터"><a href="#3-2-오퍼레이터" class="headerlink" title="3.2 오퍼레이터"></a>3.2 오퍼레이터</h3><p><strong>Observable을 생성 및 조작하는 함수</strong>를 오퍼레이터(operator)라고 한다.<br>오퍼레이터는 Observable을 생성하기도 하고,<br>각각의 Observable을 연결하기도 한다.<br>Observable을 분리하거나 합치기도 한다. </p><p>오퍼레이터는 현재의 Observable 인스턴스를 기반으로 항상 새로운 Observable 인스턴스를 반환한다.<br><a name="3-4"> </a></p><h3 id="3-3-Observer"><a href="#3-3-Observer" class="headerlink" title="3.3 Observer"></a>3.3 Observer</h3><p>Observable에 의해 전달된 데이터를 소비하는 주체이다.<br>Observers는 next, error, complete함수를 가진 객체를 가리킨다.</p><p>Observable에 의해<br>데이터가 전달될 때는next함수가 호출되고<br>에러가 발생했을 때는 error함수,<br>데이터 전달이 완료되었을 때는 complete함수가 호출된다.</p><p>Observer과 Observable은 subscribe 메소드를 통해 연겨로딘다.</p><h4 id="Observable-prototype-subscribe-함수"><a href="#Observable-prototype-subscribe-함수" class="headerlink" title="Observable.prototype.subscribe 함수"></a>Observable.prototype.subscribe 함수</h4><p>subscrie는 Observer를 파라미터로 받는다.</p><ol><li><p>Observer객체를 전달하는 subscribe 사용 예</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = &#123;</span><br><span class="line">  next: <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Observer가 Observable로부터 받은 데이터: '</span> + x),</span><br><span class="line">  error: <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">'Observer가 Observable로부터 받은 에러 데이터: '</span> + err),</span><br><span class="line">  complete: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Observer가 Observable로부터 종료되었다는 알림을 받을 경우'</span>)</span><br><span class="line">&#125;;</span><br><span class="line">click$.subscribe(observer) <span class="comment">// observer객체를 파라미터로 받는다.</span></span><br></pre></td></tr></table></figure></li><li><p><span class="mint">next 콜백함수를 전달하는</span> subscribe 사용 예</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">click$.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'Observer가 Observable로 부터 받은 데이터: '</span> + x))</span><br></pre></td></tr></table></figure></li><li><p>next, error, complete 콜백 함수를 전달하는 subscribe 사용 예</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">click$.subscribe(</span><br><span class="line">  x =&gt; <span class="built_in">console</span>.log(<span class="string">'Observer가 Observable로 부터 받은 데이터: '</span> + err),</span><br><span class="line">  err =&gt; <span class="built_in">console</span>.error(<span class="string">'Observer가 Observable로부터 받은 에러 데이터: '</span> + err),</span><br><span class="line">  () =&gt; <span class="built_in">console</span>.log(<span class="string">'Observer가 Observable로부터 종료되었다는 알림을 받을 경우'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><hr><a name="3-4"><h3 id="3-4-Subscription"><a href="#3-4-Subscription" class="headerlink" title="3.4 Subscription"></a>3.4 Subscription</h3><p>Observable.prototype.subscribe의 반환값<br>Subscription은 자원의 해제를 담당<br>unsubscribe 메소드를 호출하여 자원해제 가능</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> subscription = currentTarget$.subscribe(observer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// subscription으로 자원 해제 가능</span></span><br><span class="line">subscription.unsubscribe();</span><br></pre></td></tr></table></figure><a name="4"> <h2 id="4-RxJS-개발-방법"><a href="#4-RxJS-개발-방법" class="headerlink" title="4. RxJS 개발 방법"></a>4. RxJS 개발 방법</h2><p>RxJS를 사용하여 개발할 경우 프로세스는 대부분 다음과 같은 과정</p><ol><li>첫째, 데이터 소스를 Observable로 변경한다.</li><li>둘째, 오퍼레이터를 통해 데이터를 변경하거나 추출한다. 또는 여러개의 Observable을 하나의 Observable로 합치거나 하나의 Observable로 만든다.</li><li>셋째, 원하는 데이터를 받아 처리하는 Observer를 만든다.</li><li>넷째, Observable의 subscribe를 통해 Observer를 등록한다.</li><li>다섯째, Observable 구독을 정지하고 자원을 해지한다.</li></ol></a></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[📕 퀵스타트 Rxjs]&lt;/strong&gt;를 보고 메모한 부분을 정리했습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;a name=&quot;1&quot;&gt; 

&lt;h2 id=&quot;1-RxJS란&quot;&gt;&lt;a href=&quot;#1-RxJS란
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Angular" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Angular/"/>
    
    
      <category term="async" scheme="http://feel5ny.github.io/tags/async/"/>
    
      <category term="rxjs" scheme="http://feel5ny.github.io/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>글또 2기_개발자는 어떤 글을 쓰게 될까?</title>
    <link href="http://feel5ny.github.io/2018/11/11/Joylog_001/"/>
    <id>http://feel5ny.github.io/2018/11/11/Joylog_001/</id>
    <published>2018-11-10T16:23:55.000Z</published>
    <updated>2019-01-03T15:41:31.886Z</updated>
    
    <content type="html"><![CDATA[<p><strong>TL;DR</strong><br>정리해보니 회고가 더 길어졌다..<br>2기 다짐의 핵심은 프로그래밍 의식적 연습하기!!</p><hr><a name="1">## 1. 1기 회고 2018년 2월부터 시작된 글쓰기 모임. [글또](https://www.facebook.com/groups/375431516259701/?ref=group_header)!(글쓰는 또라이) 글을 꾸준히, 성실하게! 쓰고 싶다는 생각이 들 즈음, [성윤](https://zzsza.github.io)님의  글또 모집 공고를 보고 바로 지원하게 되었었다. 1기 다짐은 [스팀잇](https://steemit.com/lets-writing/@joy.kim/2rmmkw?fbclid=iwar0u8fm-buus-ni5lx7nn9zn0wsrmcffjj94ayiutwvi-4q0twcpdnv7ses)에 엄청난 열정으로 썼었는데 ㅋㅋㅋ 다시 보니.. 뭐랄까 대학교 1학년 때 모든 수업을 1교시에 넣었던 무모한 열정이 느껴진다..<img src="/images/2018/42/01.png"><img src="/images/2018/42/02.jpg">> 아니야..!! <p>1기를 지내면서 느낀 건..2주동안 글 하나를 써야 하는 것은 생각보다 많은 노력이 필요하다는 것. 게다가 노출되는 글이기에 좋은 글을 써야겠다는 약간의 강박?이 생겨 글쓰기를 시작도 못한 때도 있었다.</p><hr><a name="1-1">### 1.1 어떤 글을 썼나? 글감 회고2018년 2월 초 ~ 8월 말<hr><ul><li><strong>2월</strong><ul><li>🙆 내가 알고 있는 부분을 정리해보자.<ol><li><strong>Airbnb - lottie - bodymovin 웹에서 사용해보기</strong> <a href="https://feel5ny.github.io/2018/02/25/interaction_01/"> ➔ </a><br>#라이브러리</li></ol></li></ul></li><li><strong>3월</strong><ul><li>🙆 내가 알고 있는 부분을 정리해보자<ol><li><strong>Angular 프로젝트에 prettier 코드포매터 세팅하기</strong> <a href="https://feel5ny.github.io/2018/03/11/angular_prettier/"> ➔ </a><br>#라이브러리</li></ol></li><li>🙄 어려운 개념 정리 글이 검색해도 잘 없는데 <strong>번역</strong>이라도 해서 익혀보자..<ol><li><strong>(번역) Angular의 observable을 이해하고, 생성하고, 구독해보기</strong> <a href="https://feel5ny.github.io/2018/03/25/angular_observable/"> ➔ </a><br>#비동기패턴</li></ol></li></ul></li><li><strong>4월</strong> <ul><li>❌ 인턴에서 정규직 전환 시기. 정신이 안드로메다로 가있어서 쓸 겨를이 없었다.</li></ul></li><li><strong>5월</strong><ul><li>💡 작업하다가 삽질해서 내 것이 된 지식을 정리하자.<ol><li><strong>(mobile) device-pixel-ratio계산</strong> <a href="https://feel5ny.github.io/2018/05/13/mediaQuery_01/">➔</a><br>#CSS</li><li><strong>12/ File Api와 이미지 용량 줄이기</strong> <a href="https://feel5ny.github.io/2018/05/27/JS_12/">➔</a><br>#자바스크립트, #HTML5API</li></ol></li><li>📚 공부하자! 내 스타일로 메모<ol><li><strong>브라우저와 렌더링 엔진</strong> <a href="https://feel5ny.github.io/2018/05/29/rendering_engine_0/">➔</a><br>#browser</li></ol></li></ul></li><li><strong>6월</strong><ul><li>📚 공부하자! 내 스타일로 메모<ol><li><strong>렌더링 엔진(1) - 파싱과 DOM트리 구축</strong> <a href="https://feel5ny.github.io/2018/06/06/rendering_engine_1/">➔</a><br>#browser</li><li><strong>렌더링 엔진(2) - 렌더 트리 구축</strong> <a href="https://feel5ny.github.io/2018/06/07/rendering_engine_2/">➔</a><br>#browser</li></ol><ul><li>아직 마무리 못 지었다. (브라우저 공부는 더 해야 함, 네트워크랑 같이)</li></ul></li><li>PASS 한번</li></ul></li><li><strong>7월</strong><ul><li>❌ 회사에서 큰 기능이 하나 런칭되었다. </li><li>첫 큰 작업이라 시간은 있었지만 글 쓸 여유가 없었다.. 야근 혹은 집에 가면 기절</li></ul></li><li><strong>8월</strong><ul><li>런칭 이후에 공부 뽐뿌가 오기 시작</li><li>📚 같이 일할 팀원이 많다 보니 코드를 클린 하게 짜고 싶었다..<ol><li><strong>📓 읽기 좋은 코드가 좋은 코드다.</strong> <a href="https://feel5ny.github.io/2018/08/01/Clean_code_1/">1번째글</a> / <a href="https://feel5ny.github.io/2018/08/02/Clean_code_2/">2번째글</a> / <a href="https://feel5ny.github.io/2018/08/03/Clean_code_3/">3번째글</a></li></ol><ul><li>지금 생각하니 관심사 분리, 적절한 네이밍도 중요하지만 <strong>설계를 잘하자.</strong><br>#CleanCode</li></ul></li><li>💡 작업하다가 삽질해서 내 것이 된 지식을 정리하자.<ol><li>*<em>13/ Image 업로드 시 회전에 대하여 (feat. exif 메타데이터 - Orientation) *</em><a href="https://feel5ny.github.io/2018/08/06/JS_13/">➔</a><br>#자바스크립트, #ImageAPI, #라이브러리</li></ol></li><li>📚 머리 식힐 겸 읽은 책<ol><li><strong>프로그래밍 정석</strong> <a href="https://feel5ny.github.io/2018/08/11/principle_01/">1번째글</a> / <a href="https://feel5ny.github.io/2018/08/12/principle_02/">2번째글</a><br>#프로그래밍</li></ol></li><li>📚 옵저버 패턴이 처음에 참 어려웠다..<ol><li><strong>퀵스타트 Rxjs(10%)</strong> <a href="https://feel5ny.github.io/2018/08/10/Async_00/">1번째글</a> / <a href="https://feel5ny.github.io/2018/08/15/Async_01/">2번째글</a> / <a href="https://feel5ny.github.io/2018/08/15/Async_02/">3번째글</a> / <a href="https://feel5ny.github.io/2018/08/15/Async_03/">4번째글</a> / <a href="https://feel5ny.github.io/2018/08/15/Async_04/">5번째글</a><br>#비동기패턴</li></ol></li></ul></li><li><strong>그 이후</strong><ul><li>📚 인사이드 자바스크립트<ol><li><strong>자바스크립트 데이터 타입과 연산자</strong> <a href="https://feel5ny.github.io/2018/08/23/JS_14/">➔</a></li><li><strong>함수와 프로토타입 체이닝</strong> <a href="https://feel5ny.github.io/2018/08/24/JS_15/">1번째글</a> / <a href="https://feel5ny.github.io/2018/08/25/JS_16/">2번째글</a></li><li><strong>객체지향</strong> <a href="https://feel5ny.github.io/2018/10/20/OOP_02/">➔</a></li><li><strong>함수형 프로그래밍</strong> <a href="https://feel5ny.github.io/2018/11/04/FP_01/">➔</a><br>#자바스크립트</li></ol></li><li>📚 코드스피츠 강의가 개설되어 듣기 시작<ol><li><strong>(강의메모) 코드스피츠 ES6+ 함수와 OOP</strong> <a href="https://feel5ny.github.io/2018/08/30/OOP_03/">1번째글</a> / <a href="https://feel5ny.github.io/2018/09/07/OOP_04/">2번째글</a> / <a href="https://feel5ny.github.io/2018/09/24/OOP_05/">3번째글</a> / <a href="https://feel5ny.github.io/2018/10/01/OOP_06/">4번째글</a> / <a href="https://feel5ny.github.io/2018/10/09/OOP_07/">5번째글</a></li></ol><ul><li>이 강의들은 무한 루프로 봐야 한다!!#자바스크립트, #OOP</li></ul></li></ul></li></ul><hr><p>글또 기간 동안 쓴 글을 분류해보니 이러했다.</p><p><strong>(기준: 목적)</strong></p><ol><li>🙆: 내가 알고 있는 부분을 정리해보자.</li><li>🙄: 어려운 개념 정리 글이 검색해도 잘 없는데 <strong>번역</strong>이라도 해서 익혀보자..</li><li>💡: 작업하다가 삽질해서 내 것이 된 지식을 정리하자.</li><li>📚: 공부하자! 내 스타일로 메모</li></ol><ul><li>글을 쓰고 제일 기억에 남는 글은 1번과 3번.<ul><li>1번은 내가 알고 있던 지식이었고 </li><li>3번은 삽질해서 정리까지 했기 때문에 머릿속에 더 잘 안착이 되었다. </li></ul></li><li>2번은 모르는 개념을 번역까지 하니.. 글 퀄리티도 좋지 않고, 좋은 글인지도 보장이 안되며, 머릿속에도 잘 안 남는 듯 하여서.. 번역 글은 개인적으로만 해야 할 듯하다.</li><li>4번은 제발 머릿속에 남았으면 하는데, 글만 정리해서 올리면 머릿속에 절대 안 남는다.. 그래서 2기 때는 다르게 글을 써보려고 한다.</li></ul><p><strong>(기준: 분야)</strong></p><ol><li>자바스크립트</li><li>OOP</li><li>비동기패턴</li><li>라이브러리 소개 및 사용법</li><li>CleanCode</li><li>browser</li><li>HTML5API</li><li>ImageAPI</li><li>CSS </li></ol><ul><li>기초 공부를 더 많이 하고 싶다는 생각이 드는 요즘이다.</li><li>다 중요하지만 그래도 자바스크립트!</li></ul><hr><p><a name="1-2"></a></p><h3 id="1-2-글쓰기-습관"><a href="#1-2-글쓰기-습관" class="headerlink" title="1.2 글쓰기 습관"></a>1.2 글쓰기 습관</h3><p>처음에는 습관들이기가 참 어려웠다. 나름 예전에 네이버 블로그를 했었는데도 말이다. 내 개인 일기장에 쓰는 글이 아닌 SNS에 글을 쓴다는 건 글을 잘 써서 올려야 한다는 강박에 사로잡히게 되는데, 글또 초반에도 그랬었다. 그러다 책 메모, 요약 글을 올리면서 서서히 글쓰기가 재밌어졌고, 출근 때도 블로그 글들을 복습하는 습관도 갖게 되었다. 내가 쓴 글에 작품처럼 애정이 간다고 해야 할까.<br>잘 정리한 건가? 잘 읽히나? 오타는 없나?</p><hr><p><a name="1-3"></a></p><h3 id="1-3-GA를-더-보게-되다"><a href="#1-3-GA를-더-보게-되다" class="headerlink" title="1.3 GA를 더 보게 되다"></a>1.3 GA를 더 보게 되다</h3><p>구글 애널리틱스에서 자연어 검색 메뉴를 자주 보게 된다. 어느 날 갑자기 pv가 늘어나면 메일로도 알려주기 때문에 보는 쏠쏠한 재미가 있었다.</p><img src="/images/2018/42/03.png">> 2018년 2월 ~ 2018년 8월 26일까지<p>순위별로 보면</p><ol><li>Airbnb - lottie - bodymovin 웹에서 사용해보기 🙆</li><li>(번역) Angular의 observable을 이해하고, 생성하고, 구독해보기 🙄</li><li>12/ File Api와 이미지 용량 줄이기 💡</li><li>(mobile) device-pixel-ratio계산 💡</li><li>Angular 프로젝트에 prettier 코드포매터 세팅하기 💡</li></ol><ul><li>💡: 삽질하고 작성한 글들이 상위권.</li><li>트렌드 있는 라이브러리 상위권.</li><li>알고만 있자.. 이걸 고려하면서까지는 글쓰기에 제약이 있을 듯 :)</li></ul><hr><p><a name="1-4"></a></p><h3 id="1-4-UI를-고민하게-됨"><a href="#1-4-UI를-고민하게-됨" class="headerlink" title="1.4 UI를 고민하게 됨"></a>1.4 UI를 고민하게 됨</h3><p>Hexo의 Humen이라는 테마인데, UI가 70%로 마음에 들고 30%는 고치고 싶은 곳이 있다. 우선 내가 쓰기에도 불편한 부분을 고침</p><ul><li>상단에 목차가 있었으면 좋겠다고 생각했다. 마크다운에 list 필드를 만들어서 json을 넣으면 타이틀과 본문 사이, floating 버튼으로 목차를 띄우게 만들었다. <ul><li>글이 길 때마다 헤매게 되기 때문</li></ul></li><li>모하비로 업데이트하면서 블로그도 다크 테마로 바꿨다!</li><li>폰트 네이버 스퀘어로 변경</li></ul><hr><p><strong>앞으로 추가하고 싶은 것</strong><br>블로그 꾸미기는 나의 소확행 ~</p><ul><li>글이 길 때마다 헤매게 되는건 확실하다.<ul><li>지금 몇 %읽었는지에 대한 ui를 하단 혹은 사이드에 프로그레스바 노출</li></ul></li><li>관련된 글 노출해서 체류시간 높이기?<ul><li>관련된 글 노출이 잘 안된다. tag기능을 사용해서 댓글 상단에 노출하쟈.</li><li>뭐 꼭 체류시간을 높일 목적은 아니지만 다른 글도 읽고 가시면 좋으니까 :)</li></ul></li><li>내가 무슨 글을 쓰고 있는지 한 번에 알게 해주기<ul><li>글 목록이 썸네일 + 타이틀 + 본문 형태인데 리스트로만 보일 수 있도록 만들긔.</li></ul></li></ul><hr><p><a name="2"></a></p><h2 id="2-2기-어떻게-진행해볼까"><a href="#2-2기-어떻게-진행해볼까" class="headerlink" title="2. 2기 어떻게 진행해볼까"></a>2. 2기 어떻게 진행해볼까</h2><p><a name="2-1"></a></p><h3 id="2-1-글의-방향"><a href="#2-1-글의-방향" class="headerlink" title="2.1 글의 방향"></a>2.1 글의 방향</h3><p><strong>(기준: 목적)</strong></p><ol><li>📚: 공부하자! 내 스타일로 메모</li><li>💡: 작업하다가 삽질해서 내 것이 된 지식을 정리하자.</li><li>🙆: 내가 알고 있는 부분을 정리해보자.</li><li>🏃: 세미나 다녀왔습니다.</li></ol><ul><li><code>1번 &gt; 2번, 3번</code> 비율로 쓸 예정이다.</li><li>1번의 경우는 메모 이후에도 머릿속에 들어와야 하는데, 이건 글쓰기에서 해결하는 것이 아니라, 책 전체 리뷰를 통해서 해결하려고 한다. <ul><li>때문에 글 정리를 하고, 문법을 배울 경우에는<br><strong>간단하게 코드 짜는 글을 따로 세트로 적던가, 해당 글의 하단에 적기로 함!!</strong></li></ul></li><li>11월에 거의 모든 세미나가 종료되었지만 ㅎㅎ 그동안 다녀왔던 세미나들이라도 정리해보자.</li></ul><hr><p><strong>(기준: 분야)</strong><br>현재 확실히 계획된 부분은 이렇다.</p><ol><li><p>📚: 공부하자! 내 스타일로 메모</p><ol><li>자바스크립트 - you don’t know JS / 코뿔소책</li><li>디자인패턴 - 코드스피츠 강의</li><li>browser - 저번 정리본 마무리 + 현시점에 나온 기능 추가로 살펴보기</li></ol></li><li><p>💡: 작업하다가 삽질해서 내 것이 된 지식을 정리하자.</p><ol><li>아마도 react</li></ol></li><li><p>🏃: 세미나 다녀왔습니다.</p><ol><li>그동안 다녀왔던 세미나 글 정리하기</li></ol></li></ol><hr><p><a name="2-2"></a></p><h3 id="2-2-그니까-2기-다짐"><a href="#2-2-그니까-2기-다짐" class="headerlink" title="2.2 그니까 2기 다짐"></a>2.2 그니까 2기 다짐</h3><ol><li>글 쓰는 것에 너무 스트레스를 받지 말자. 글감이 없다면 책 요약 가즈아.</li><li>그렇다고 너무 책 요약 글만 쓰지 말자.</li><li>📚, 💡, 🙆 골고루 잘 쓰자.</li><li>세미나가 다 끝나는 마당이지만, 그동안 다녀왔던 세미나 내용들 복습 겸 정리하자.</li></ol><hr><p>참고<br><a href="http://woowabros.github.io/experience/2017/12/11/how-to-study.html?fbclid=IwAR2pel2KmTXdeXq7vG8-ohhquaOGopNPhdU7NI0iZPf_hsebMzS-aHgUi8c" target="_blank" rel="noopener">의식적 연습하기</a></p></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;br&gt;정리해보니 회고가 더 길어졌다..&lt;br&gt;2기 다짐의 핵심은 프로그래밍 의식적 연습하기!!&lt;/p&gt;
&lt;hr&gt;
&lt;a name=&quot;1&quot;&gt;
## 1. 1기 회고 
2018년 2월부터 시작된 글쓰기 모임. [글또
      
    
    </summary>
    
      <category term="blog 🙆" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/"/>
    
      <category term="JoyStory" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/JoyStory/"/>
    
    
      <category term="글쓰기" scheme="http://feel5ny.github.io/tags/%EA%B8%80%EC%93%B0%EA%B8%B0/"/>
    
  </entry>
  
  <entry>
    <title>1/ 함수형 프로그래밍 (🙄)</title>
    <link href="http://feel5ny.github.io/2018/11/04/FP_01/"/>
    <id>http://feel5ny.github.io/2018/11/04/FP_01/</id>
    <published>2018-11-04T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📒 인사이드 자바스크립트 중 메모해야할 부분만 적었습니다.<br>함수형 프로그래밍에 대해서 더 깊게 배우길 원한다면 Lisp나 Haskell과 같은 언어를 공부하자.</p></blockquote><p>TL;DR</p><ul><li>Higher-Order Functions (고계 함수, 계산의 효율성)</li><li>Purity (순수성, 데이터 플로우의 취급)<ul><li>Immutable Data (불변성)</li><li><a href="https://ko.wikipedia.org/wiki/%EC%B0%B8%EC%A1%B0_%ED%88%AC%EB%AA%85%EC%84%B1" target="_blank" rel="noopener">Referential Transparency</a></li><li><a href="https://ko.wikipedia.org/wiki/%EC%B0%B8%EC%A1%B0_%ED%88%AC%EB%AA%85%EC%84%B1" target="_blank" rel="noopener">Lazy Evaluation</a> </li></ul></li><li>Recursion</li><li>커링</li><li>bind (with call/apply)</li><li>래퍼</li><li>반복함수</li></ul><hr><p><a name="1"></a></p><h2 id="1-함수형-프로그래밍의-개념"><a href="#1-함수형-프로그래밍의-개념" class="headerlink" title="1. 함수형 프로그래밍의 개념"></a>1. 함수형 프로그래밍의 개념</h2><p>함수의 조합으로 작업을 수행함을 의미한다.<br><strong>이 작업이 이루어지는 동안 작업에 필요한 데이터와 상태는 변하지 않는다는 점.</strong><br>함수가 바로 연산의 대상이 된다.</p><p><strong>FP의 목적</strong></p><ol><li>함수형 프로그래밍이 수학에서 출발한 문제 해결 방법론이므로 수학문제를 프로그래밍으로 해결하는 데 있어서 상당한 이득을 볼 수 있다.</li><li>상태 변경과 가변 데이터를 피하려는.<ul><li>FP의 목적은 상태 변경을 피하는 것이다.</li><li>FP에서는 변수를 모든 오류의 근본적인 원인으로 치부한다.누군가에 의해 변수의 값이 변경되기 때문에 이로 인해 오류가 더욱 빈번하게 발생한다고 생각한다. -</li><li>따라서 함수형 프로그래밍에서는 이런 변수가 외부에서 명확하게 드러나게 하여 통제 가능하게 만드는 것을 지향한다.</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f1 = encrypt1;</span><br><span class="line">f2 = encrypt2;</span><br><span class="line">f3 = encrypt3;</span><br><span class="line"></span><br><span class="line">pure_value = &apos;zzon&apos;;</span><br><span class="line">encrypted_value = get_encrypted(x);</span><br><span class="line"></span><br><span class="line">encrypted_value = get_encrypted(f1);</span><br><span class="line">encrypted_value = get_encrypted(f2);</span><br><span class="line">encrypted_value = get_encrypted(f3);</span><br></pre></td></tr></table></figure><img src="/images/2018/40/01.jpeg"><p><strong>순수함수 Pure fucntion</strong><br>외부에 영향을 미치지 않는 함수</p><ol><li>같은 입력이 주어지면, 항상 같은 출력을 반환한다.</li><li>부작용(side effect)를 발생시키지 않는다.</li><li>외부의 가변(mutable) 데이터에 의존하지 않는다.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCurrentValue</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> processAt(value, <span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 사이드 이팩트 없앰</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCurrentValue</span>(<span class="params">value, time</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> processAt(value, time)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>부원인과 부작용</strong></p><ul><li>new Date는 외부변수 </li><li>함수를 실행하는 시점에 따라 결과를 예측하기 어렵ㄴ다.</li><li><strong>함수의 정의만 보고 추측하기 어려운 함수를 <span class="mint">부원인(side cause)과 부작용(side effect)</span>이 존재하는 함수라고 한다.</strong></li><li>함수에 드러나지 않은 입력값 또는 출력값응ㄹ 부원인(side cause)라고 하고</li><li>이로인해 발생한 결과를 부작용(side effect)라고 한다.<ul><li>부작용은 부정적인 의미는 아니지만 프로그래머가 이를 고려하지 않고 사용했을 경우에는 오류를 유발할 수 있다.</li><li>함수형 프로그래밍에서는 이러한 상황이 궁극적으로 복잡성을 초래하기 때문에 복잡성을 표면으로 드러내도록 권장한다.</li></ul></li></ul><p><strong>고계 함수 Higher-order function</strong><br>함수를 또 하나의 값으로 간주하여 함수의 인자 혹은 반환값으로 사용할 수 있는 함수</p><h3 id="내부-데이터-및-상태는-그대로-둔-채-pure-value-제어할-함수를-변경-및-조합함으로써-encrypt1-2-3-원하는-결과를-얻어내는-것이-함수형-프로그래밍의-중요한-특성"><a href="#내부-데이터-및-상태는-그대로-둔-채-pure-value-제어할-함수를-변경-및-조합함으로써-encrypt1-2-3-원하는-결과를-얻어내는-것이-함수형-프로그래밍의-중요한-특성" class="headerlink" title="내부 데이터 및 상태는 그대로 둔 채 (pure_value) 제어할 함수를 변경 및 조합함으로써 (encrypt1,2,3) 원하는 결과를 얻어내는 것이 함수형 프로그래밍의 중요한 특성"></a>내부 데이터 및 상태는 그대로 둔 채 (pure_value) <span class="mint">제어할 함수를 변경 및 조합</span>함으로써 (encrypt1,2,3) 원하는 결과를 얻어내는 것이 함수형 프로그래밍의 중요한 특성</h3><ul><li>높은 수준의 모듈화가 가능하다.</li></ul><p><strong>주요키워드</strong></p><ul><li>Higher-Order Functions (고계 함수, 계산의 효율성)</li><li>Purity (순수성, 데이터 플로우의 취급)<ul><li>Immutable Data (불변성)</li><li><a href="https://ko.wikipedia.org/wiki/%EC%B0%B8%EC%A1%B0_%ED%88%AC%EB%AA%85%EC%84%B1" target="_blank" rel="noopener">Referential Transparency</a></li><li><a href="https://ko.wikipedia.org/wiki/%EC%B0%B8%EC%A1%B0_%ED%88%AC%EB%AA%85%EC%84%B1" target="_blank" rel="noopener">Lazy Evaluation</a> </li></ul></li><li>Recursion</li></ul><p><a name="cf__1"></a></p><h3 id="cf-명령형-프로그래밍"><a href="#cf-명령형-프로그래밍" class="headerlink" title="cf__명령형 프로그래밍"></a>cf__명령형 프로그래밍</h3><p>순수함수도 있지만,<br>특정 작업을 수행하는 여러가지 명령이 기술되어 있는 함수도 있다.<br>=&gt; <strong>프로시저</strong>라고 한다. Procedure</p><hr><hr><p><a name="2"></a></p><h2 id="2-자바스크립트에서-함수형-프로그래밍"><a href="#2-자바스크립트에서-함수형-프로그래밍" class="headerlink" title="2. 자바스크립트에서 함수형 프로그래밍"></a>2. 자바스크립트에서 함수형 프로그래밍</h2><p>자바스크립트는 다음을 지원하기때문에 함수형 프로그래밍이 가능</p><ol><li>일급객체로서의 함수 _ 함수의 인자로 함수를 넘길 수 있는 특징</li><li>클로저 _은닉화</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f1 = <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  result = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> f2 = <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  result = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> f3 = <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  result = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> get_encrypted = <span class="function"><span class="keyword">function</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> str  <span class="string">'zzoon'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> func.call(<span class="literal">null</span>, str);&#125; <span class="comment">// 클로저, 자유변수 str</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> encrypted_value = get_encrypted(f1)();</span><br><span class="line"><span class="built_in">console</span>.log(encrypted_value) <span class="comment">//1</span></span><br><span class="line"><span class="keyword">const</span> encrypted_value = get_encrypted(f2)();</span><br><span class="line"><span class="built_in">console</span>.log(encrypted_value) <span class="comment">//2</span></span><br><span class="line"><span class="keyword">const</span> encrypted_value = get_encrypted(f3)();</span><br><span class="line"><span class="built_in">console</span>.log(encrypted_value) <span class="comment">//3</span></span><br></pre></td></tr></table></figure><hr><p><a name="2-1"></a></p><h3 id="2-1-배열의-각-원소-총합-구하기-reduce"><a href="#2-1-배열의-각-원소-총합-구하기-reduce" class="headerlink" title="2-1. 배열의 각 원소 총합 구하기(reduce)"></a>2-1. 배열의 각 원소 총합 구하기(reduce)</h3><p>명령형 프로그래밍으로 작성된 코드.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = arr.length;</span><br><span class="line">  <span class="keyword">let</span> i =<span class="number">0</span>, sum =<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(; i&lt;len; i++)&#123;</span><br><span class="line">    sum += arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(sum(arr))</span><br></pre></td></tr></table></figure><p>함수형 프로그래밍</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reduce</span>(<span class="params">func, arr, memo</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// memo: cache 값</span></span><br><span class="line">  <span class="keyword">const</span> len = arr.length;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>, accum = memo;</span><br><span class="line">  <span class="keyword">for</span>(; i&lt;len; i++)&#123;</span><br><span class="line">    accum = func(accum, arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> accum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>) </span>&#123; <span class="keyword">return</span> x+y; &#125;</span><br><span class="line"><span class="keyword">const</span> multiply = <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>) </span>&#123; <span class="keyword">return</span> x*y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reduce(sum, arr, <span class="number">0</span>);)</span><br><span class="line"><span class="built_in">console</span>.log(reduce(multiply, arr, <span class="number">1</span>);)</span><br></pre></td></tr></table></figure><hr><p><a name="2-2"></a></p><h3 id="2-2-팩토리얼"><a href="#2-2-팩토리얼" class="headerlink" title="2-2. 팩토리얼"></a>2-2. 팩토리얼</h3><p>명령형 프로그래밍</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fact</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> val = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">2</span>; i&lt;=num; i++) val = val*i;</span><br><span class="line">  <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>혹은 재귀호출</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fact</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> num*fact(num<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>앞서 연산한 결과를 캐시에 저장하여 사용하여 함수를 작성한다면 성능 향상에 도움이 된다.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fact = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cache = &#123;<span class="string">'0'</span>: <span class="number">1</span>&#125;</span><br><span class="line">  <span class="keyword">const</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123; <span class="comment">// 클로저</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(cache[n] === <span class="string">'number'</span>))&#123;</span><br><span class="line">      result = cache[n];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = cache[n] = n * func(n<span class="number">-1</span>); <span class="comment">// 10 * 9 * 8 * ... * 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> func;</span><br><span class="line">&#125;();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fact(<span class="number">10</span>));</span><br><span class="line"><span class="built_in">console</span>.log(fact(<span class="number">20</span>));</span><br></pre></td></tr></table></figure><hr><p><a name="cf__2"></a></p><h3 id="cf-2-메모이제이션-패턴-memoization-패턴"><a href="#cf-2-메모이제이션-패턴-memoization-패턴" class="headerlink" title="cf__2 메모이제이션 패턴 memoization 패턴"></a>cf__2 메모이제이션 패턴 memoization 패턴</h3><p><strong>memoize</strong></p><ul><li>계산 결과를 저장해 놓아 이후 다시 계산할 필요 없이 사용할 수 있게 한다는 컴퓨터 용어</li></ul><p><strong>메모이제이션 패턴</strong></p><ul><li>기본적으로 계산된 결과를 함수 프로퍼티값으로 담아 놓고 나중에 사용한다.</li><li>jQuery에는 data()라는 메모이제이션 패턴을 사용하는 메서드가 있다.<blockquote><p>data : 해당 엘리먼트에 JavaScript Type의 value를 저장할 수 있으며, 값으로 저장되어 있는 데이터를 읽습니다.<br>data-XXX</p></blockquote></li><li>함수의 성능향상을 위해 <code>Function.prototype</code>에 메모이제이션 패턴을 사용할 수 있는 함수를 넣으면 사용가능하다.<br>주의할 점은 한 번 값이 들어간 경우 계속 유지되므로 이를 <strong>초기화</strong>하는 방법 역시 제공돼야 한다.<blockquote><p>jQuery에서는 cleanData라는 메서드를 제공한다.</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Calculate</span>(<span class="params">key, input, func</span>)</span>&#123;</span><br><span class="line">  Calculate.data = Calculate.data || &#123;&#125;; <span class="comment">//cache</span></span><br><span class="line">  <span class="keyword">if</span>(!Calculate.data[key])&#123;</span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    result = func(input);</span><br><span class="line">    Calculate.data[key] = result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Calculate.data[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = Calculate(<span class="number">1</span>, <span class="number">5</span>, <span class="function"><span class="keyword">function</span>(<span class="params">input</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> input * input;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line">result = Calculate(<span class="number">2</span>, <span class="number">5</span>, <span class="function"><span class="keyword">function</span>(<span class="params">input</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> input*input/<span class="number">4</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="built_in">console</span>.log(Calculate(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(Calculate(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>Function 프로토타입에 <code>memoization()</code>함수 넣기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.memoization = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arg = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>,<span class="number">1</span>); </span><br><span class="line">  <span class="comment">// key에 들어온 인자값의 2번째인자</span></span><br><span class="line">  <span class="keyword">this</span>.data = <span class="keyword">this</span>.data || &#123;&#125;; <span class="comment">// data객체 있으면 그대로, 없으면 초기화</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.data[key] !== <span class="literal">undefined</span> ? </span><br><span class="line">    <span class="keyword">this</span>.data[key] : </span><br><span class="line">    <span class="keyword">this</span>.data[key] = <span class="keyword">this</span>.apply(<span class="keyword">this</span>,arg); <span class="comment">// 해당함수를 인자값을 넘기며 호출, arg는 input으로 들어감</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCalculate1</span>(<span class="params">input</span>)</span>&#123; <span class="keyword">return</span> input * input &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCalculate2</span>(<span class="params">input</span>)</span>&#123; <span class="keyword">return</span> input * input/<span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">myCalculate1.memoization(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">myCalculate1.memoization(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">myCalculate2.memoization(<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line">myCalculate2.memoization(<span class="number">2</span>,<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myCalculate1.memoization(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(myCalculate1.memoization(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(myCalculate2.memoization(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">console</span>.log(myCalculate2.memoization(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><img src="/images/2018/40/2.jpg" style="width:100%"><hr><p><a name="2-3"></a></p><h3 id="2-3-피보나치-수열"><a href="#2-3-피보나치-수열" class="headerlink" title="2-3. 피보나치 수열"></a>2-3. 피보나치 수열</h3><p>메모이제이션 기법 사용한 함수형 프로그래밍</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fibo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> cache = &#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>&#125;;</span><br><span class="line">  <span class="keyword">const</span> func = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(cache[n]) === <span class="string">'number'</span>)&#123;</span><br><span class="line">      result = cache[n];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = cache[n] = func(n<span class="number">-1</span>) + func(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> func;</span><br><span class="line">&#125;();</span><br><span class="line"><span class="built_in">console</span>.log(fibo(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p>팩토리얼 함수와 패턴과 거의 비슷하다.<br><code>cache의 초기값</code>과 함수를 재귀 호출할 때 <code>산술식</code>만 다르다.<br>=&gt; 팩토리얼과 피보나치 수열을 계산하는 함수를 인자로 받는 함수를 모듈화할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cacher = <span class="function"><span class="keyword">function</span>(<span class="params">cache, func</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> calculate = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(cache[n]) === <span class="string">'number'</span>)&#123;</span><br><span class="line">      result = cache[n];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result = cache[n] = func(calculate, n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cacluate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fact = cacher(&#123;<span class="string">'0'</span>: <span class="number">0</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">func,n</span>)</span>&#123; <span class="keyword">return</span> n* func(n<span class="number">-1</span>); &#125;)</span><br><span class="line"><span class="keyword">const</span> fibo = cacher(&#123;<span class="string">'0'</span>: <span class="number">0</span>, <span class="string">'1'</span>: <span class="number">1</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">func,n</span>)</span>&#123; <span class="keyword">return</span> func(n<span class="number">-1</span>) + func(n<span class="number">-2</span>); &#125;)</span><br></pre></td></tr></table></figure><hr><hr><p><a name="3"></a></p><h2 id="3-자바스크립트에서의-함수형-프로그래밍을-활용한-주요-함수"><a href="#3-자바스크립트에서의-함수형-프로그래밍을-활용한-주요-함수" class="headerlink" title="3. 자바스크립트에서의 함수형 프로그래밍을 활용한 주요 함수"></a>3. 자바스크립트에서의 함수형 프로그래밍을 활용한 주요 함수</h2><p><a name="3-1"></a></p><h3 id="3-1-함수-적용"><a href="#3-1-함수-적용" class="headerlink" title="3-1. 함수 적용"></a>3-1. 함수 적용</h3><p><code>Function.prototype.apply</code><br><strong>왜 이름이 apply?</strong></p><ul><li>함수 적용(Applying functions)는 함수형 프로그래밍에서 사용되는 용어다.</li><li>함수형 프로그래밍에서는 <strong>특정 데이터를 여러가지 함수를 적용시키는 방식으로 작업을 수행한다.</strong><br>여기서 함수는 단순히 입력을 넣고 출력을 받는 기능을 수행하는것 뿐만 아니라,<br>인자 혹은 반환값으로 전달된 함수를 <strong>특정 데이터에 적용시키는 개념으로 이해해야한다.</strong></li><li><code>func.apply(Obj, Args)</code>와 같은 함수 호출을 <strong>‘func 함수를 Obj객체와 Args인자 배열에 적용시킨다’</strong>라고 표현할 수 있다.</li></ul><p><a name="cf__3"></a><br>cf__3. 함수 호출<br>괄호 연산자 대비 call/apply를 사용할 때의 장점은<br><strong>함수가 실행되는 컨텍스트를 지정할 수 있다는 점</strong>이다(this의 값).<br>이러한 형태는 고차 함수, 특히 이러한 고차 함수가 나중에 실행되는 함수를 소비할 때 볼 수 있다.<br>Function 프로토타입에서 bind 메소드의 내부는 call/apply의 훌륭한 예다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Possible implementation of bind using apply</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">func, context</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  func.apply(context, <span class="built_in">Array</span>.prototype.slice.apply(<span class="built_in">arguments</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a name="3-2"></a></p><h3 id="3-2-커링"><a href="#3-2-커링" class="headerlink" title="3-2. 커링"></a>3-2. 커링</h3><p>특정 함수에서 정의된 인자의 일부를 넣어 고정시키고,<br>나머지를 인자로 받는 새로운 함수를 만드는 것을 의미한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params">a,b,c</span>)</span>&#123; <span class="keyword">return</span> a*b+c &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">func</span>) </span>&#123; <span class="comment">// 클로저 반환 </span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>); <span class="comment">// 배열의 2번째 인덱스 이후의 값의 배열</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> func.apply(</span><br><span class="line">              <span class="literal">null</span>, </span><br><span class="line">              args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)) <span class="comment">// 익명함수의 인자</span></span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> new_func1 = curry(calculate, <span class="number">1</span>); <span class="comment">// a를 먼저 받음</span></span><br><span class="line"><span class="built_in">console</span>.log(new_func1(<span class="number">2</span>,<span class="number">3</span>)); <span class="comment">// a를 인자와 합치면서(concat)</span></span><br><span class="line"><span class="comment">// === console.log(curry(calculate,1)(2,3));</span></span><br><span class="line"><span class="keyword">const</span> new_func2 = curry(calculate, <span class="number">1</span>, <span class="number">3</span>); <span class="comment">// a,b를 먼저 받음</span></span><br><span class="line"><span class="built_in">console</span>.log(new_func2(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>자바스크립트에서 기본으로 제공하지 않기 때문에 Function.prototype에 정의하여 사용할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.curry = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="keyword">this</span>, args = <span class="built_in">Array</span>.prototype.slice.claa(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a name="cf__4"></a></p><h4 id="cf-4-slice-메서드"><a href="#cf-4-slice-메서드" class="headerlink" title="cf__4 slice 메서드"></a>cf__4 slice 메서드</h4><p>커링에서 함수의 인자를 arguments 객체로 조작할 때 이 메서드를 이용하여 배열로 만든 후 손쉽게 조작 가능</p><hr><p><a name="3-3"></a></p><h3 id="3-3-bind"><a href="#3-3-bind" class="headerlink" title="3-3. bind"></a>3-3. bind</h3><ul><li>커링기법을 활용한 함수이다.</li><li>사용자가 고정시키고자 하는 인자를<br>bind()함수를 호출할 때 인자로 넘겨주고<br>반환받은 함수를 호출하면서<br>나머지 가변 인자를 넣어줄 수 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params">thisArg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="keyword">this</span>,</span><br><span class="line">  slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">  args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> fn.apply(thisArg, args.concat(slice.call(<span class="built_in">arguments</span>)))&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> print_all = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="keyword">this</span>) <span class="built_in">console</span>.log(i + <span class="string">':'</span> + <span class="keyword">this</span>[i]);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> <span class="built_in">arguments</span>) <span class="built_in">console</span>.log(i + <span class="string">':'</span> + <span class="built_in">arguments</span>[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myobj = &#123;<span class="attr">name</span>: <span class="string">'zzoon'</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> myfunc = print_all.bind(myobj);</span><br><span class="line">myfunc(); <span class="comment">// name: zzoon</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myfunc1 = print_all.bind(myobj, <span class="string">'iamjoy'</span>, <span class="string">'others'</span>);</span><br><span class="line">myfunc1(<span class="string">'insidejs'</span>);</span><br><span class="line"><span class="comment">/* name: zzoon</span></span><br><span class="line"><span class="comment">   0: iamjoy</span></span><br><span class="line"><span class="comment">   1: others</span></span><br><span class="line"><span class="comment">   2: insidejs</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>특정 함수에 원하는 객체를 바인딩시켜 새로운 함수를 사용할 때 bind()함수가 사용된다.</li></ul><hr><p><a name="3-4"></a></p><h3 id="3-4-래퍼-클로저를-절묘하게-사용한-함수형-프로그래밍-🙄"><a href="#3-4-래퍼-클로저를-절묘하게-사용한-함수형-프로그래밍-🙄" class="headerlink" title="3-4. 래퍼 (클로저를 절묘하게 사용한 함수형 프로그래밍) 🙄"></a>3-4. 래퍼 (클로저를 절묘하게 사용한 함수형 프로그래밍) 🙄</h3><p>특정함수를 자신의 함수로 덮어쓰는 것</p><blockquote><p>OOP에서 다형성을 위해 오버라이드를 지원하는것과 유사하다.</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrap</span>(<span class="params">object: <span class="built_in">Object</span>, method: <span class="built_in">string</span>, wrapper</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> fn = object[method]; <span class="comment">// 덮여질 함수</span></span><br><span class="line">  <span class="keyword">return</span> object[method] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> wrapper.apply(<span class="keyword">this</span>, </span><br><span class="line">                         [fn.bind(<span class="keyword">this</span>)].concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>))</span><br><span class="line">                         <span class="comment">// fn: original 함수</span></span><br><span class="line">                        )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.original = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = value;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'value : '</span> + <span class="keyword">this</span>.value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mywrap = wrap(<span class="built_in">Function</span>.prototype, <span class="string">'original'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">orig_func, value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.value = <span class="number">20</span>;</span><br><span class="line">  orig_func(value);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'wrapper value : '</span> + <span class="keyword">this</span>.value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> mywrap(<span class="string">'joy'</span>);</span><br></pre></td></tr></table></figure><hr><p><a name="3-5"></a></p><h3 id="3-5-반복-함수"><a href="#3-5-반복-함수" class="headerlink" title="3-5. 반복 함수"></a>3-5. 반복 함수</h3><h4 id="3-5-1-each"><a href="#3-5-1-each" class="headerlink" title="3-5-1. each"></a>3-5-1. each</h4><p>jQuery 1.0의 each()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">obj, fn, args</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.length === <span class="literal">undefined</span>) <span class="comment">// 객체로 넘어올 때</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj)</span><br><span class="line">      fn.apply(obj[i], args || [i, obj[i]]);</span><br><span class="line">  <span class="keyword">else</span> <span class="comment">// 배열로 넘어올 때 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;obj.length; i++)</span><br><span class="line">      fn.apply(obj[i], args || [i, obj[i]])</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">each([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="function"><span class="keyword">function</span>(<span class="params">idx, num</span>)</span>&#123; <span class="built_in">console</span>.log(idx + <span class="string">':'</span> + num)&#125;)</span><br><span class="line"><span class="keyword">const</span> joy = &#123;</span><br><span class="line">  name: <span class="string">'joy'</span>,</span><br><span class="line">  company: <span class="string">'goodoc'</span>,</span><br><span class="line">  hasBoyfriend: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">each(joy, <span class="function"><span class="keyword">function</span>(<span class="params">idx, value</span>)</span>&#123;<span class="built_in">console</span>.log(idx + <span class="string">':'</span> + value)&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-5-2-map"><a href="#3-5-2-map" class="headerlink" title="3-5-2. map"></a>3-5-2. map</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">  <span class="comment">// this가 null인지, 배열인지 체크</span></span><br><span class="line">  <span class="comment">// callback이 함수인지 체크</span></span><br><span class="line">  <span class="keyword">const</span> obj = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> value, mapped_value;</span><br><span class="line">  <span class="keyword">const</span> A = <span class="keyword">new</span> <span class="built_in">Array</span>(obj.length); <span class="comment">//[undefined, undefined, undefined]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;obj.length; i++) &#123;</span><br><span class="line">    value = obj[i];</span><br><span class="line">    mapped_value = callback.call(<span class="literal">null</span>, value);</span><br><span class="line">    A[i] = mapped_value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> new_arr = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; <span class="keyword">return</span> value * value; &#125;)</span><br><span class="line">consoel.log(new_arr);</span><br></pre></td></tr></table></figure><h4 id="3-5-3-reduce"><a href="#3-5-3-reduce" class="headerlink" title="3-5-3. reduce"></a>3-5-3. reduce</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.reduce = <span class="function"><span class="keyword">function</span>(<span class="params">callback, memo</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//this가 null인지, 배열인지 체크</span></span><br><span class="line">  <span class="comment">// callback이 함수인지 체크</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> obj = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> value, accumulated_value = <span class="number">0</span>; <span class="comment">//accumulated 뜻* : 축적되다.</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;obj.length; i++)&#123;</span><br><span class="line">    value = obj[i];</span><br><span class="line">    accumulated_value = callback.call(<span class="literal">null</span>, accumulated_value, value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> accumulated_value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> accumulated_val = arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123; <span class="keyword">return</span> a + b*b; &#125;)</span><br><span class="line">consoel.log(accumulated_val);</span><br></pre></td></tr></table></figure><hr><p><strong>참고</strong></p><ol><li><a href="https://dave42blog.wordpress.com/2016/08/13/functional%EB%B6%80%ED%84%B0-reactive%EA%B9%8C%EC%A7%80-3-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84%EC%9D%98-%EB%B3%80%ED%99%94-oop%EC%99%80-fp/" target="_blank" rel="noopener">프로그래밍 패러다임의 변화</a> </li><li><a href="http://www.itworld.co.kr/news/84870#csidx096c46214e29fe8990fa281c60f968e" target="_blank" rel="noopener">‘제다이급’ 자바스크립트 고수들이 전하는 6가지 개발팁</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;📒 인사이드 자바스크립트 중 메모해야할 부분만 적었습니다.&lt;br&gt;함수형 프로그래밍에 대해서 더 깊게 배우길 원한다면 Lisp나 Haskell과 같은 언어를 공부하자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TL;DR&lt;/p&gt;
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="FP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/FP/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>6/ OOP (ES5 기준)</title>
    <link href="http://feel5ny.github.io/2018/10/20/OOP_02/"/>
    <id>http://feel5ny.github.io/2018/10/20/OOP_02/</id>
    <published>2018-10-20T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📒 인사이드 자바스크립트 중 메모해야할 부분만 적었습니다.</p></blockquote><hr><p><a name="0"></a></p><h2 id="0-클래스-기반의-언어-프로토타입기반의-언어"><a href="#0-클래스-기반의-언어-프로토타입기반의-언어" class="headerlink" title="0. 클래스 기반의 언어 - 프로토타입기반의 언어"></a>0. 클래스 기반의 언어 - 프로토타입기반의 언어</h2><h4 id="클래스-기반의-언어"><a href="#클래스-기반의-언어" class="headerlink" title="클래스 기반의 언어"></a>클래스 기반의 언어</h4><ul><li>클래스로 객체의 기본적인 형태와 기능을 정의하고, 생성자로 인스턴스를 만들어서 사용할 수 있다.</li><li>런타임에 바꿀 수 없다.</li><li>정확성, 안전성, 예측성등의 관점에서는 프로토타입기반의 언어보다 좀더 나은 결과를 보장.</li><li>JAVA, C++</li></ul><h4 id="프로토타입-기반의-언어"><a href="#프로토타입-기반의-언어" class="headerlink" title="프로토타입 기반의 언어"></a>프로토타입 기반의 언어</h4><ul><li>객체의 자료구조, 메서드 등을 동적으로 바꿀 수 있다.</li><li>자바스크립트</li></ul><hr><p><a name="1"></a></p><h2 id="1-클래스-생성자-메서드"><a href="#1-클래스-생성자-메서드" class="headerlink" title="1. 클래스, 생성자, 메서드"></a>1. 클래스, 생성자, 메서드</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">arg</span>) </span>&#123; <span class="comment">// 클래스이자, 생성자의 역할을 함. </span></span><br><span class="line">  <span class="keyword">this</span>.name = arg;</span><br><span class="line">  <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>):<span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person(<span class="string">"Kim"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(me.getName()); <span class="comment">// Kim</span></span><br><span class="line">me.setName(<span class="string">"Joy"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(me.getName()) <span class="comment">// Joy</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> you = <span class="keyword">new</span> Person(<span class="string">"Gray"</span>);</span><br><span class="line"><span class="keyword">const</span> him = <span class="keyword">new</span> Person(<span class="string">"Lee"</span>);</span><br></pre></td></tr></table></figure><ul><li>공통적으로 사용될 수 있는 setName과 getName 메서드가 중복으로 메모리에 올려놓게 된다.</li><li>setName과 getName을 재사용하쟈!</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.setName = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> you = <span class="keyword">new</span> Person(<span class="string">"Gray"</span>);</span><br><span class="line"><span class="keyword">const</span> him = <span class="keyword">new</span> Person(<span class="string">"Lee"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(you.getName()) <span class="comment">// this는 자신을 호출한 객체에 바인딩된다.</span></span><br><span class="line"><span class="built_in">console</span>.log(him.getName()) <span class="comment">// 프로토타입 체인으로 접근할 수 있다.</span></span><br></pre></td></tr></table></figure><p><strong>프로토타입 메서드를 만드는 루틴을<br>함수체인의 더 상위인 Function 프로토타입에 method라는 이름으로 만들어놓고<br>재사용하는 방법도 있다.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.method = <span class="function"><span class="keyword">function</span>(<span class="params">name, function</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!<span class="keyword">this</span>.prototpye[name]) &#123;</span><br><span class="line">    <span class="keyword">this</span>.prototype[name] = <span class="function"><span class="keyword">function</span>;</span></span><br><span class="line"><span class="function">  &#125;// 프로토타입에 같은 이름의 메서드가 없다면</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">Person</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = arg;</span><br><span class="line">&#125;</span><br><span class="line">Person.method(<span class="string">'setName'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = value;</span><br><span class="line">&#125;)</span><br><span class="line">Person.method(<span class="string">'getName'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person(<span class="string">"me"</span>);</span><br><span class="line"><span class="keyword">const</span> you = <span class="keyword">new</span> Person(<span class="string">"you"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(me.getName());</span><br><span class="line"><span class="built_in">console</span>.log(you.getName());</span><br></pre></td></tr></table></figure><hr><hr><p><a name="2"></a></p><h2 id="2-상속"><a href="#2-상속" class="headerlink" title="2. 상속"></a>2. 상속</h2><ul><li>자바스크립트는 클래스를 기반으로 하는 전통적인 상속을 지원하지 않는다.</li><li>자바스크립트 특성 중 <strong>객체 프로토타입 체인</strong>을 이용하여 상속을 구현해낼 수 있다.</li></ul><h4 id="상속-구현방법"><a href="#상속-구현방법" class="headerlink" title="상속 구현방법"></a>상속 구현방법</h4><ol><li>클래스 기반 전통적인 상속 방식을 흉내냄 (컨텍스트 자체를 상속받음)</li><li>클래스 개념 없이 객체의 프로토타입으로 상속을 구현하는 방식 =&gt; <strong>Prototypeal inheritance</strong></li></ol><hr><p><a name="2-1"></a></p><h3 id="2-1-프로토타입을-이용한-상속"><a href="#2-1-프로토타입을-이용한-상속" class="headerlink" title="2-1. 프로토타입을 이용한 상속"></a>2-1. 프로토타입을 이용한 상속</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125; <span class="comment">// Object.create() 함수로 제공된다.</span></span><br></pre></td></tr></table></figure><p>인자로 들어온 객체(o)를 부모로 하는<br>자식 객체(F)를 생성하여<br>반환한다.<br>=&gt; 프로토타입의 특성을 활용하여 상속을 구현하는것 = 프로토타입 기반의 상속</p><p>예시</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Joy"</span></span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// ES6의 getter 개념</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  setName: <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123; <span class="comment">// ES6의 setter 개념</span></span><br><span class="line">    <span class="keyword">this</span>.name = arg;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> me = create_object(person)</span><br><span class="line">me.name <span class="comment">// Joy</span></span><br><span class="line">me.getName() <span class="comment">// Joy</span></span><br><span class="line">me.setName(<span class="string">"Kim"</span>)</span><br><span class="line">me.name <span class="comment">// Kim</span></span><br><span class="line">me.getName() <span class="comment">// Kim</span></span><br></pre></td></tr></table></figure><ul><li>클래스에 해당하는 생성자 함수를 만들지도 않았고,</li><li>그 클래스의 인스턴스를 따로 생성하지도 않았다.</li><li>person 객체와 이 객체를 프로토타입 체인으로 참조할 수 있는 자식 객체 me를 만들어서 사용함.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">me.setAge = <span class="function"><span class="keyword">function</span>(<span class="params">age</span>) </span>&#123;...&#125;</span><br><span class="line">me.getAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>위의 방식으로 확장할 수 있지만, 코드가 지저분해질 수 있다.<br><strong><span class="mint">extend()</span></strong>라는 이름의 함수로 객체에 자신이 원하는 객체 혹은 함수를 추가시킨다.</p><p>__jQuery의 extend 함수</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params">obj: 자식, prop: 부모</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!prop) &#123;</span><br><span class="line">    prop = obj; <span class="comment">// 부모가 없으면 자식이 부모</span></span><br><span class="line">    obj = <span class="keyword">this</span>; <span class="comment">// this를 자식에게 할당</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i <span class="keyword">in</span> prop ) &#123; <span class="comment">// deep copy</span></span><br><span class="line">    ob[i] = prop[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>jQuery.fn</code>은 jQuery의 프로토타입</li><li>$.extend()나 <code>var elem = new jQuery(...); elem.extend()</code>형태로 호출가능</li><li><code>ob[i] = prop[i];</code>은 얕은 복사 (shallow copy) =&gt; 참조값을 복사하는 경우 영향이 생긴다.<br>이를 방지하기 위해 깊은 복사를 해야함.</li><li>깊은 복사를 위해서<br><strong>빈 객체를 만들어서 extend 함수를 재귀적으로 호출</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jQuery extend 함수 중 일부</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> (; i &lt; length; i++)&#123;</span><br><span class="line">  <span class="keyword">if</span>( (options = <span class="built_in">arguments</span>[i]) != <span class="literal">null</span>) &#123; </span><br><span class="line">    <span class="comment">/* 인자로 넘어온 객체의 프로퍼티를 options로 참조시키고, </span></span><br><span class="line"><span class="comment">      그 프로퍼티가 null이 아닌 경우 블록 안으로 진입한다. */</span></span><br><span class="line">    <span class="keyword">for</span> (name <span class="keyword">in</span> options)&#123; <span class="comment">// options를 deep 카피한다.</span></span><br><span class="line">      src = target[name]; <span class="comment">// src는 반활될 복사본 target을 가리킴</span></span><br><span class="line">      copy = options[name]; <span class="comment">// copy는 복사할 원본 프로퍼티를 가리킴</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (target === copy)&#123; <span class="comment">// 무한루프 방지</span></span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// continue는 루프의 실행을 완전히 종료하지 않고 for 루프에서는 업데이트 표현식으로 점프함.</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (deep &amp;&amp; copy &amp;&amp; (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy))) )&#123;</span><br><span class="line">        <span class="comment">// deep 플래그:boolean: extend에서 인자로 받음 : 깊은 복사를 할 것인지 선택 할 수 있게 한다.</span></span><br><span class="line">        <span class="comment">// copy: 참조형식인 경우 (객체나 배열인 경우) 무조건 deep copy 시작</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> ( copyIsArray ) &#123;</span><br><span class="line">          copyIsArray = <span class="literal">false</span>;</span><br><span class="line">          clone = src &amp;&amp; jQuery.isArray(src) ? src : []; </span><br><span class="line">          <span class="comment">// 배열 복사일 경우 빈 배열 생성</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          clone = src &amp;&amp; jQuery.isPlainObject(src) ? src : &#123;&#125;;</span><br><span class="line">          <span class="comment">// 객체 복사일 경우 빈 객체 생성</span></span><br><span class="line">        &#125;</span><br><span class="line">        target[name] = jQuery.extend(deep, clone, copy); <span class="comment">// 재귀..</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (copy !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        target[name] = copy;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">'joy'</span>,</span><br><span class="line">  getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.name; &#125;,</span><br><span class="line">  setName: <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;<span class="keyword">this</span>.name = arg;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create_object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">obj, prop</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!prop) &#123;prop = obj; obj = <span class="keyword">this</span>;&#125; </span><br><span class="line">  <span class="comment">/* 인자가 하나만 들어오는 경우, </span></span><br><span class="line"><span class="comment">    prop 인자에 obj를 할당하고, </span></span><br><span class="line"><span class="comment">    현재객체(this)에 객체의 프로퍼티를 복사한다.... */</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> prop) obj[i] = prop[i]; <span class="comment">// 얕은 복사임.</span></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> student = create_object(person);</span><br><span class="line"><span class="keyword">const</span> added = &#123;</span><br><span class="line">  setAge: <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line">  getAge: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.age;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">extend(student, added); <span class="comment">// 1</span></span><br><span class="line">student.setAge(<span class="number">25</span>);</span><br><span class="line"><span class="built_in">console</span>.log(student.getAge());</span><br></pre></td></tr></table></figure><ol><li>person객체를 갖고있는 프로토타입을 갖고있는 student 인스턴스(컨텍스트)가 added를 상속받는다. (deep copy함)</li><li>student 인스턴스에는 added 객체가 복사된다.</li></ol><hr><p><a name="2-2"></a></p><h3 id="2-2-클래스-기반의-상속"><a href="#2-2-클래스-기반의-상속" class="headerlink" title="2-2. 클래스 기반의 상속"></a>2-2. 클래스 기반의 상속</h3><p>1번은 객체의 상속이었고, 지금은 클래스의 역할을 하는 함수를 상속하는 것을 설명한다. (컨텍스트 상속)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">arg</span>) </span>&#123; <span class="keyword">this</span>.name = arg;&#125;</span><br><span class="line">Person.prototype.setName = <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; <span class="keyword">this</span>.name = value; &#125;;</span><br><span class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.name; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">arg</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> you = <span class="keyword">new</span> Person(<span class="string">'JoyKim'</span>); </span><br><span class="line">Student.prototype = you;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Student(<span class="string">'NaYoung'</span>);</span><br><span class="line">me.setName(<span class="string">'Kim'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(me.getName());</span><br></pre></td></tr></table></figure><ol><li><p>you는 Person의 인스턴스 (name: JoyKim)</p></li><li><p>Student의 프로토타입은 you를 가리킨다.</p></li><li><p>me는 Student의 인스턴스</p><ul><li>Student에는 인자를 받을 name이 없으므로 ‘NaYoung’을 넣어줘도 아무런 적용 안됨</li><li>이를 위해서 인스턴스가 생성될때 부모함수가 바로 실행될 수 있도록 Student에 실행코드를 넣는다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">arg</span>)</span>&#123; </span><br><span class="line">  Person.apply(<span class="keyword">this</span>, arg) <span class="comment">// 부모함수 Pseron을 실행하고 this는 arg에 바인딩!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>me객체에서 setName을 호출하면 프로토타입체이닝에 의해서 Person까지올라간다.</p></li></ol><p>이 로직의 단점은 me의 prototype이 Student.prototype이고, 이는 곳 you를 가리킨다는 것인데,<br>이렇게 되면 me가 you의 자식 개념이 되면서 잘못된 설계가 된다.</p><p>me와 you의 독립성을 위해서 중간 역할을 해주는 프로토콜 빈 함수 F()를 추가한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">arg</span>) </span>&#123; <span class="keyword">this</span>.name = arg;&#125;</span><br><span class="line"><span class="built_in">Function</span>.prototype.method = <span class="function"><span class="keyword">function</span>(<span class="params">name, func</span>) </span>&#123; <span class="keyword">this</span>.prototype[name] = func &#125;;</span><br><span class="line">Person.method(<span class="string">'setName'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123; <span class="keyword">this</span>.name = value; &#125;;)</span><br><span class="line">Person.method(<span class="string">'getName'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.name; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">arg</span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">F.prototype = Person.prototype;</span><br><span class="line">Student.prototype = <span class="keyword">new</span> F();</span><br><span class="line">Student.prototype.constructor = Student;</span><br><span class="line">Student.super = Person.prototype; </span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Student(<span class="string">'NaYoung'</span>);</span><br><span class="line"><span class="keyword">const</span> you = <span class="keyword">new</span> Person(<span class="string">'YoungRan'</span>);</span><br><span class="line">me.setName(<span class="string">'Kim'</span>);</span><br></pre></td></tr></table></figure><ol><li>Function 프로토타입에 프로토타입 함수를 만들어주는, 재사용할 수 있는 method라는 메서드를 추가한다. (아오 네이밍 예시 헷갈)</li><li>F의 프로토타입을 Person의 프로토타입을 참조하게 함으로써 중간역할을 하게함</li><li>그 중간역할을 하는 F의 인스턴스를 Student의 프로토타입이 참조하도록 함.<br>(현재 Student =&gt; F =&gt; Person)<ul><li>프로토타입 체인을 위해서 Student 프로토타입의 생성자를 Student로 할당.</li></ul></li><li>Student가 Person.prototype에도 접근하기 위해서 super라는 메서드 생성</li></ol><p>me는 Person을 상속받은 Student의 인스턴스이고<br>you는 Person의 인스턴스.</p><p>위 로직을 모듈화 시키면..(by.스토얀 스테파노프[JavaScript Pattersn])</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inherit = <span class="function"><span class="keyword">function</span>(<span class="params">Parent, Child</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">Paretn, Child</span>)</span>&#123;</span><br><span class="line">    F.prototype = Parent.prototype;</span><br><span class="line">    Child.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    Child.prototype.constructor = Child;</span><br><span class="line">    Child.super = Parent.prototype;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클로저는 F()함수를 지속적으로 참조한다.<br>F()는 가비지 컬렉션의 대상이 되지 않고 계속 남아 있다.<br>이를 이용해 함수 F()의 생성은 단 한 번 이루어지고 inherit함수가 계속해서 호출되어도 함수 F()의 생성을 새로 할 필요가 없다.</p><hr><hr><p><a name="3"></a></p><h2 id="3-캡슐화-feat-클로저"><a href="#3-캡슐화-feat-클로저" class="headerlink" title="3. 캡슐화 (feat. 클로저)"></a>3. 캡슐화 (feat. 클로저)</h2><ul><li>정보 공개의 여부. 정보 은닉 개념<br>(Typescript에서는 <code>public</code>, <code>private</code>, <code>protected</code> 멤버를 선언함으로써 해당 정보를 외부로 노출시킬지 여부를 결정)</li><li>자바스크립트 es6에서는 get, set 키워드로 외부에서 해당 클래스 혹은 함수 내부에 접근 할 수 있다.<br>(get은 readonly)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = arg? arg: <span class="string">"joy"</span>;</span><br><span class="line">  <span class="keyword">this</span>.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.setName = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    name = arg;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> me = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(me.getName());</span><br><span class="line">me.setName(<span class="string">'NaYoung'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(me.getName());</span><br><span class="line"><span class="built_in">console</span>.log(me.name);</span><br></pre></td></tr></table></figure><ul><li>Person의 내부 public 함수들은 <strong><a href="'https://feel5ny.github.io//2017/12/07/JS_06/#closure'">클로저</a></strong>역할을 하면서 name에 접근하고 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 모듈패턴</span></span><br><span class="line"><span class="keyword">const</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = arg? arg: <span class="string">'joy'</span>; </span><br><span class="line">  <span class="comment">// name은 private 멤버</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> name;&#125;,</span><br><span class="line">    setName: fucntion(arg)&#123; name = arg;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> me = Person()</span><br><span class="line"><span class="built_in">console</span>.log(me.getName())</span><br></pre></td></tr></table></figure><ul><li>접근하는 private 멤버가 <strong>객체나 배열</strong>이면(레퍼런스) <strong>얕은 복사로 참조만을 반환</strong>하므로 사용자가 이후 이를 쉽게 변경할 수 있다. (Deep copy, Shallow copy)</li><li>객체만을 반환하기 때문에 Person 함수의 프로토타입에 접근할 수 없다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Person3 = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> name = arg? arg: <span class="string">'joy'</span>; </span><br><span class="line">  <span class="keyword">var</span> Func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">  Func.prototype = &#123;</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> name; &#125;,</span><br><span class="line">    setName: <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;name = arg;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> Func;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></li></ul><hr><hr><p><a name="4"></a></p><h2 id="4-객체지향-프로그래밍-응용-예제"><a href="#4-객체지향-프로그래밍-응용-예제" class="headerlink" title="4. 객체지향 프로그래밍 응용 예제"></a>4. 객체지향 프로그래밍 응용 예제</h2><blockquote><p>함수의 프로토타입 체인<br>extend 함수<br>인스턴스를 생성할 때 생성자 호출을 이용해서 자바스크립트로 클래스 기능을 하는 함수 만들기</p></blockquote><h3 id="4-1-1-subClass-함수-구조"><a href="#4-1-1-subClass-함수-구조" class="headerlink" title="4-1-1. subClass 함수 구조"></a>4-1-1. subClass 함수 구조</h3><p>subClass함수는<br>변수 및 메서드가 담긴 객체를 인자로 받은<br>부모 함수를 상속받는 자식 클래스를 만든다.</p><p>부모함수는 subClass() 함수를 호출할 때 this 객체를 의미한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SuperClass = subClass(obj); <span class="comment">// 상속받을 클래스</span></span><br><span class="line"><span class="keyword">const</span> SubClass = SuperClass.subClass(obj); <span class="comment">// SubClass는 SuperClass를 상속받는다.</span></span><br></pre></td></tr></table></figure><p>이처럼 SuperClass를 상속받는 subClass를 만들고자 할 때,<br>SuperClass.subClass()의 형식으로 호출하게 구현한다.<br>참고로 최상위 클래스인 SuperClass는 자바스크립트의 Fucntion을 상속받게 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subClass</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 자식 클래스 (함수객체) 생성</span></span><br><span class="line"><span class="comment">    2. 생성자 호출 (클래스 함수를 생성하기 위해서)</span></span><br><span class="line"><span class="comment">    3. 프로토타입 체인을 활용한 상속 구현</span></span><br><span class="line"><span class="comment">    4. obj를 통해 들어온 변수 및 메서드를 자식 클래스에 추가</span></span><br><span class="line"><span class="comment">    5. 자식 함수 객체 반환</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-1-2-자식-클래스-생성-및-상속"><a href="#4-1-2-자식-클래스-생성-및-상속" class="headerlink" title="4-1-2. 자식 클래스 생성 및 상속"></a>4-1-2. 자식 클래스 생성 및 상속</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subClass</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> parent = <span class="keyword">this</span>; <span class="comment">// 부모클래스를 가리키는 parent는 this를 그대로 참조</span></span><br><span class="line">  <span class="keyword">const</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">// 중간역할</span></span><br><span class="line">  <span class="keyword">const</span> child = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; <span class="comment">// 자식객체</span></span><br><span class="line">  F.prototype = parent.prototype; </span><br><span class="line">  child.prototype = <span class="keyword">new</span> F(); <span class="comment">// 부모의 프로토타입을 참조하는 프로토타입을 갖고있는 F로부터 만들어진 생성자 함수를 child 프로토타입이 참조하도록한다.ㅇ</span></span><br><span class="line">  child.prototype.constructor = child;</span><br><span class="line">  child.parent = parent.prototype;</span><br><span class="line">  child.parent_constructor = parent;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> child;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자식 클래스는 child 라는 이름의 함수 객체를 생성함으로써 만들어졌다.</p><img src="/images/2018/39/01.jpeg"><hr><h3 id="4-1-3-자식-클래스-확장"><a href="#4-1-3-자식-클래스-확장" class="headerlink" title="4-1-3. 자식 클래스 확장"></a>4-1-3. 자식 클래스 확장</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.hasOwnProperty(i))&#123;</span><br><span class="line">    child.prototype[i] = obj[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>hasOwnProperty</code><br>인자로 넘기는 이름에 해당하는 프로퍼티가 객체 내에 있는지를 판다.</p><blockquote><p>프로토타입 체인을 타고 올라가지 않고 해당객체 내에서만 찾는다는 것에 유의<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o.prop = <span class="string">'exists'</span>;</span><br><span class="line">o.hasOwnProperty(<span class="string">'prop'</span>); <span class="comment">// true</span></span><br><span class="line">o.hasOwnProperty(<span class="string">'toString'</span>); <span class="comment">// false</span></span><br><span class="line">o.hasOwnProperty(<span class="string">'hasOwnProperty'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p></blockquote><hr><h3 id="4-1-4-생성자-호출"><a href="#4-1-4-생성자-호출" class="headerlink" title="4-1-4. 생성자 호출"></a>4-1-4. 생성자 호출</h3><p>클래스의 인스턴스가 생성될 때, 클래스 내에 정의된 생성자가 호출돼야하다.<br>부모 클래스의 생성자 역시 호출되어야한다. (초기화를 위해서)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> child = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (parent.hasOwnProperty(<span class="string">'_init'</span>))&#123; parent._init.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); &#125;</span><br><span class="line">  <span class="keyword">if</span> (child.prototype.hasOwnProperty(<span class="string">'_init'</span>))&#123;child.prototype._init.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> SuperClass = subClass();</span><br><span class="line"><span class="keyword">const</span> SubClass = SuperClass.subClass();</span><br><span class="line"><span class="keyword">const</span> Sub_SubClass = SubClass.subClass();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> Sub_SubClass();</span><br></pre></td></tr></table></figure><p>instance 생성시 SuperClass 생성자가 호출되지 않는다.<br>=&gt; 부모클래스의 생성자를 호출하는 코드를 재귀적으로 구현하여 해결한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> child = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> _parent = child.parent_constructor;</span><br><span class="line">  <span class="keyword">if</span> (_parent &amp;&amp; _parent !== <span class="built_in">Function</span>)&#123; _parent.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); &#125;</span><br><span class="line">  <span class="keyword">if</span> (child.prototype.hasOwnProperty(<span class="string">'_init'</span>))&#123;child.prototype._init.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>현재 클래스의 부모 생성자가 있으면, 그 함수를 호출하다. 다만 부모가 Function이 경우는 최상위 클래스에 도달했으므로 실행하지 않는다.</li></ul><p><strong>최종</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subClass</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 자식 클래스 (함수객체) 생성</span></span><br><span class="line"><span class="comment">    2. 생성자 호출 (클래스 함수를 생성하기 위해서)</span></span><br><span class="line"><span class="comment">    3. 프로토타입 체인을 활용한 상속 구현</span></span><br><span class="line"><span class="comment">    4. obj를 통해 들어온 변수 및 메서드를 자식 클래스에 추가</span></span><br><span class="line"><span class="comment">    5. 자식 함수 객체 반환</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">const</span> parent = <span class="keyword">this</span> === <span class="built_in">window</span> ? <span class="built_in">Function</span> : <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">const</span> F = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> child = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _parent = child.parent;</span><br><span class="line">    <span class="keyword">if</span>(_parent &amp;&amp; _parent !== <span class="built_in">Function</span>)&#123; </span><br><span class="line">      parent.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(child.prototype._init))&#123;</span><br><span class="line">        child.prototype._init.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  F.prototype = parent.prototype; </span><br><span class="line">  child.prototype = <span class="keyword">new</span> F();</span><br><span class="line">  child.prototype.constructor = child;</span><br><span class="line">  child.parent = parent;</span><br><span class="line">  child.subClass = <span class="built_in">arguments</span>.callee;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(i))&#123;</span><br><span class="line">      child.prototype[i] = obj[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> child</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>By Joy.</p><ul><li>내부함수를 선언할때와 this로 바인딩된 함수를 선언하는 것의 차이점? 기준?</li><li>프로토타입 체이닝을 만든 이유<br>객체지향 프로그래밍을 지원하기 위해<br>부모객체를 가리키는 참조링크 형태로 숨겨진 프로퍼티.</li><li>(Naming)<br>복사시 복사할 대상을 copy, 복사의 결과물을 clone</li><li>shallow copy와 다르게<br>deep copy는 재귀적으로 호출해야함.<br><strong>(다시 정리)</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;📒 인사이드 자바스크립트 중 메모해야할 부분만 적었습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&quot;0&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;0-클래스-기반의-언어-프로토타입기반의-언어&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="OOP" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/OOP/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="OOP" scheme="http://feel5ny.github.io/tags/OOP/"/>
    
      <category term="closure" scheme="http://feel5ny.github.io/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title>CodeSpitz78 5/ OOAD와 테트리스 (2)</title>
    <link href="http://feel5ny.github.io/2018/10/09/OOP_07/"/>
    <id>http://feel5ny.github.io/2018/10/09/OOP_07/</id>
    <published>2018-10-09T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<p>🌕🌑🌑</p><blockquote><p>🔥 코드스피츠 수업을 수강하면서 복습한 내용을 정리했습니다.<br>아직 정리중..</p></blockquote><hr><p><a name="1"></a></p><h2 id="1-Stage"><a href="#1-Stage" class="headerlink" title="1. Stage"></a>1. Stage</h2><h3 id="Stage-클래스는-뭘-필요로-할까"><a href="#Stage-클래스는-뭘-필요로-할까" class="headerlink" title="Stage 클래스는 뭘 필요로 할까?"></a>Stage 클래스는 뭘 필요로 할까?</h3><ol><li><p>판마지막 판이 몇 판일까? = 몇 판까지 있을까?</p></li><li><p>속도<br>** 판마다 속도가 증가한다.**</p><ul><li>최소 속도</li><li>최대 속도</li></ul><p>** 속도는 어떤 객체가 가져가야할까?**</p><ul><li>Game보다는 Stage가 적합.</li><li>캡슐화와 은닉화의 속성을 이용하여,<br>속도의 처리는 stage내에서만 처리하게 한 후,<br>외부에서는 최종 속도만 받을 수 있도록 한다. (getter)<ul><li>초기 속도</li></ul></li></ul></li></ol><ul><li>자기의 변화를 listener한테 통보하는 것으로 처리만 하고 <ul><li>listner의 형태를 직접 알 필요는 없게 한다.</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.assign 쓰기 번거로워서 함수 만들긔</span></span><br><span class="line"><span class="keyword">const</span> prop = <span class="function">(<span class="params">target, v</span>) =&gt;</span> <span class="built_in">Object</span>.assign(target, v);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Stage = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(last, min, max, listener)&#123;</span><br><span class="line">    <span class="comment">// last는 마지막 판</span></span><br><span class="line">    <span class="comment">// min,max는 속도</span></span><br><span class="line">    <span class="comment">// listener: 다른 객체와 관계를 맺지 않게 해주는 역할</span></span><br><span class="line">    <span class="comment">// 게임 패널들의 스테이지 그래픽이 갱신을 위해서 listener를 달아줌.</span></span><br><span class="line">    prop(<span class="keyword">this</span>, &#123;last, min, max, listener&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  clear() &#123; </span><br><span class="line">    <span class="comment">//초기화</span></span><br><span class="line">    <span class="keyword">this</span>.curr = <span class="number">0</span>; <span class="comment">// 현재 스테이지 넘버</span></span><br><span class="line">    <span class="keyword">this</span>.next();</span><br><span class="line">  &#125;</span><br><span class="line">  next() &#123;</span><br><span class="line">    <span class="comment">// 속도 비율 = 현재판 - 1 / 마지막 판 - 1</span></span><br><span class="line">    <span class="comment">// 블럭 내려올 때 딜레이 속도 = (this.max - this.min) * (1 - rate); </span></span><br><span class="line">    <span class="comment">// =&gt; 점점 작아진다. =&gt; 최종 속도는 빨라짐</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.curr++ <span class="xml"><span class="tag">&lt; <span class="attr">Stage.last</span>) &#123;</span></span></span><br><span class="line"><span class="xml">      const rate = (this.curr - 1) / (this.last - 1);</span></span><br><span class="line"><span class="xml">      this.speed = this.min + (this.max - this.min) * (1 - rate);</span></span><br><span class="line"><span class="xml">      this.listener();</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><hr><p><a name="2"></a></p><h2 id="2-Score"><a href="#2-Score" class="headerlink" title="2. Score"></a>2. Score</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Score = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(listener)&#123;</span><br><span class="line">    prop(<span class="keyword">this</span>, &#123;listener&#125;);</span><br><span class="line">    <span class="comment">// 스코어의 그래픽을 갱신시키기 위해서 통보용으로 listener 추가</span></span><br><span class="line">  &#125;</span><br><span class="line">  clear()&#123;</span><br><span class="line">    <span class="keyword">this</span>.curr = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">this</span>.total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  add(line, stage)&#123;</span><br><span class="line">    <span class="comment">// line이 지워지는 갯수를 포인트 증가율</span></span><br><span class="line">    <span class="comment">// stage 마다 line하나 지울때마다 점수가 다름</span></span><br><span class="line">    <span class="keyword">const</span> score = ???;</span><br><span class="line">    <span class="keyword">this</span>.curr += score; <span class="comment">// 현재 점수값에도 반영</span></span><br><span class="line">    <span class="keyword">this</span>.total += score; <span class="comment">// 전체 점수값에도 반영</span></span><br><span class="line">    <span class="keyword">this</span>.listener();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h3 id="cf-1-역할-책임-협력"><a href="#cf-1-역할-책임-협력" class="headerlink" title="cf__1 역할, 책임, 협력"></a>cf__1 역할, 책임, 협력</h3><p>프로그래밍의 실체는 <strong>수행해야하는 job이 누구의 역할과 책임으로 넘어가야하는지를 의사결정하는 행위.</strong></p><h4 id="🍡-객체지향"><a href="#🍡-객체지향" class="headerlink" title="🍡 객체지향"></a>🍡 객체지향</h4><p>객체지향에서는 <strong>컨텍스트</strong>라는 방법이 있다.<br>인스턴스별로 컨텍스트라는 유지한다. (컨텍스트: 인스턴스마다 고유하게 부여되어 있는 메모리). </p><p>*<em>함수에서 값을 가져오는 방법 2가지. *</em></p><ol><li>내가 인자로 값을 가져올지, </li><li>컨텍스트로 가져올지.</li></ol><hr><h4 id="🍢-함수형-프로그래밍과-객체지향-프로그래밍의-차이점"><a href="#🍢-함수형-프로그래밍과-객체지향-프로그래밍의-차이점" class="headerlink" title="🍢 함수형 프로그래밍과 객체지향 프로그래밍의 차이점."></a>🍢 함수형 프로그래밍과 객체지향 프로그래밍의 차이점.</h4><ul><li>함수형 프로그래밍에서는 <strong>자유변수를 통해서 함수를 유지한다.</strong></li><li>자유변수를 유지하기 위해서는 새로운 함수 생성이 필요하다. (클로저)</li><li>why? 함수가 태어날때 마다 자유변수로 인지하기 때문에.</li></ul><hr><h4 id="🍭-객체지향을-통해서-클래스의-인스턴스를-만드는-행위를-함수형으로-바꾸면"><a href="#🍭-객체지향을-통해서-클래스의-인스턴스를-만드는-행위를-함수형으로-바꾸면" class="headerlink" title="🍭 객체지향을 통해서 클래스의 인스턴스를 만드는 행위를 함수형으로 바꾸면?"></a>🍭 객체지향을 통해서 클래스의 인스턴스를 만드는 행위를 함수형으로 바꾸면?</h4><ul><li>필요한 자유변수를 함수를 만들어서 리턴하는 행위와 같다.  </li><li>그 함수가 컨텍스트 대신 <strong>자유변수로 해당 상태를 기억하고 있을테니까.</strong></li><li><span class="mint"><strong>객체지향</strong></span>에서 인스턴스의 수만큼 =&gt;  함수를 생성하는 걸로 <span class="orange"><strong>함수지향</strong></span>으로 바꿀 수 있다. </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Score = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(listener)&#123;</span><br><span class="line">    prop(<span class="keyword">this</span>, &#123;listener&#125;);</span><br><span class="line">    <span class="comment">// 스코어의 그래픽을 갱신시키기 위해서 통보용으로 listener 추가</span></span><br><span class="line">  &#125;</span><br><span class="line">  clear()&#123;</span><br><span class="line">    <span class="keyword">this</span>.curr = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">this</span>.total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  add(line, stage)&#123;</span><br><span class="line">    <span class="comment">// score 계산을 위해서는 stage만 알 수 있는 값을 이용해야하기 때문에</span></span><br><span class="line">    <span class="comment">// stage 내부에 score를 계산하는 책임을 주고,(위임)</span></span><br><span class="line">    <span class="comment">// Score의 add함수에서는 score를 호출, 점수만 더하는 책임만 준다.(협력) </span></span><br><span class="line">    <span class="keyword">const</span> score = stage.score(line);</span><br><span class="line">    <span class="keyword">this</span>.curr += score; <span class="comment">// 현재 점수값에도 반영</span></span><br><span class="line">    <span class="keyword">this</span>.total += score; <span class="comment">// 전체 점수값에도 반영</span></span><br><span class="line">    <span class="keyword">this</span>.listener();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Stage = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  score(line) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="keyword">this</span>.curr * <span class="number">5</span>) * (<span class="number">2</span> ** line))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="스코어와-스테이지-간의-coupling-관계"><a href="#스코어와-스테이지-간의-coupling-관계" class="headerlink" title="스코어와 스테이지 간의 coupling 관계"></a>스코어와 스테이지 간의 coupling 관계</h4><p>현재는 <strong>약한 바인딩.</strong><br>add 함수 호출시에만 임시적으로 외부 인자로 들어오기때문에</p><p>But,<br>하나의 게임 안에서는<br>스테이지와 스코어를 동시에 소유하고 바뀌지 않는다.</p><ul><li><strong>게임에서의 스테이지 관리자와 스코어 관리자는 관계가 항구적.</strong> 즉, 게임이 진행되는 동안. 즉 매번 인자로 보내면 안된다. </li><li>맥락상 맞지 않다는 말. stage를 add함수의 인자로 보낸다는 것은 스코어를 더 할때마다 임시적으로 바인딩한다는 것인데 이는 위의 항구적인 관계와 맞지 않음. (코드의 의미가 맞지 않음.)</li><li>때문에 add의 인자가 아니라 컨텍스트 변수로 옮겨줘야한다.</li></ul><p><strong>도메인을 바라보고 어디 쪽의 역할이 맞는지 항상 의사결정을 해야한다.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Score = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(👉stage, listener)&#123;</span><br><span class="line">    prop(<span class="keyword">this</span>, &#123;stage, listener&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  clear()&#123;</span><br><span class="line">    <span class="keyword">this</span>.curr = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">this</span>.total = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  add(line)&#123;</span><br><span class="line">    <span class="keyword">const</span> score = 👉<span class="keyword">this</span>.stage.score(line);</span><br><span class="line">    <span class="keyword">this</span>.curr += score; <span class="comment">// 현재 점수값에도 반영</span></span><br><span class="line">    <span class="keyword">this</span>.total += score; <span class="comment">// 전체 점수값에도 반영</span></span><br><span class="line">    <span class="keyword">this</span>.listener();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> Stage = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  score(line) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseInt</span>((<span class="keyword">this</span>.curr * <span class="number">5</span>) * (<span class="number">2</span> ** line))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/2018/38/01.png" style="width:100%">score와 stage간의 의존성이 생김<blockquote><p>코드는 여러분들이 모국어로 쓰지 않기 때문에<br>동작만 하면 다 똑같은 코드로 보인다.<br>코드도 언어이기 때문에 한국어의 미묘한 늬앙스를 다양한 형사와 동사로 표현하는 것처럼,<br><strong>코드도 동작해도 표현방법에 따라서 늬앙스를 다 표현할 수 있다.</strong></p></blockquote><hr><p><a name="3"></a></p><h2 id="3-Block"><a href="#3-Block" class="headerlink" title="3. Block"></a>3. Block</h2><h4 id="클래스일까-인스턴스일까"><a href="#클래스일까-인스턴스일까" class="headerlink" title="클래스일까 인스턴스일까."></a>클래스일까 인스턴스일까.</h4><ul><li>찍어낼 수 있어야 한다. =&gt; 클래스 </li><li>부모클래스 &gt;&gt; 자식클래스</li></ul><h4 id="블럭-정의"><a href="#블럭-정의" class="headerlink" title="블럭 정의"></a>블럭 정의</h4><ul><li>테트리스 블럭은 회전을 할 수 있다.<br><strong>회전축, 회전점</strong>을 정의하자.<img src="/images/2018/38/02.png" style="width: 120px; margin: 0">세로와 가로의 모습을 보면 **2차원 배열**로 구현할 수 있다는 것이 보인다. (행과 열)</li></ul><p>cf__2 연산은 데이터로 바꿀 수 있다.<br><code>데이터 하나로 연산화 시킴</code> or <code>데이터 2개로 연산비용을 낮춤.</code></p><ul><li>예전에는 머신이 낮고 메모리가 낮았기 때문에 연산을 중심으로 움직이고 메모리 비용을 낮추는 방향으로 갔음.</li><li>cpu 비용을 아끼고(연산비용을 줄이고) 메모리 비용을 사용하는 방향이 요즘 추세 </li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Block 클래스 : 카테고라이제이션 하는 중.. </span></span><br><span class="line"><span class="comment">// =&gt; 모든 자식 블럭들이 공통으로 가져야하는 속성들 </span></span><br><span class="line"><span class="keyword">const</span> Block = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(color) &#123;</span><br><span class="line">    prop(<span class="keyword">this</span>, &#123;color, <span class="attr">rotate</span>:<span class="number">0</span>&#125;;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// rotate: CW, CCW (시계방향, 시계반대방향 개념)</span></span><br><span class="line">  left() &#123;</span><br><span class="line">    <span class="keyword">if</span>(--<span class="keyword">this</span>.rotate &lt; <span class="number">0</span>) <span class="keyword">this</span>.rotate = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  right() &#123;</span><br><span class="line">    <span class="keyword">if</span>(++<span class="keyword">this</span>.rotate &gt; <span class="number">3</span>) <span class="keyword">this</span>.rotate = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  getBlock()&#123;<span class="keyword">throw</span> <span class="string">'override!'</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line">const blocks = [class extends Block, ...]</span><br></pre></td></tr></table></figure><img src="/images/2018/38/02.png" style="width: 120px; margin: 0"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'#f8cbad'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  getBlock()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.rotate % <span class="number">2</span> ?</span><br><span class="line">      [[<span class="number">1</span>], [<span class="number">1</span>], [<span class="number">1</span>], [<span class="number">1</span>]] : </span><br><span class="line">      [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">      <span class="comment">// [[1], [1], [1], [1]] 컬럼이 하나만 있는 row가 4개인 배열 : |</span></span><br><span class="line">      <span class="comment">// [[1,1,1,1]] row가 하나만 있는 컬럼이 4개인 배열: ----</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/2018/38/03.png" style="width: 150px; margin: 0"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">'#f8cbad'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  getBlock()&#123;</span><br><span class="line">    <span class="keyword">switch</span>(<span class="keyword">this</span>.rotate)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">0</span>: <span class="keyword">return</span> [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>], [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> [[<span class="number">1</span>,<span class="number">0</span>], [<span class="number">1</span>,<span class="number">1</span>], [<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>], [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> [[<span class="number">0</span>,<span class="number">1</span>], [<span class="number">1</span>,<span class="number">1</span>], [<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="충분히-추상화가-되었을까"><a href="#충분히-추상화가-되었을까" class="headerlink" title="충분히 추상화가 되었을까?"></a>충분히 추상화가 되었을까?</h3><p>rotation은 부모클래스인 Block에서 관리<br>자식이 부모의 속성을 갖는 것은 <strong>은닉을 깨고 있는 것</strong></p><ul><li>부모 자식간에도 캡슐화와 은닉화가 성립해야한다.</li><li><code>this.rotate</code>로 접근하고 있다.</li><li><code>this.rotate % 2</code> 부모의 rotate 정의에 자식이 맞추고 있다.<blockquote><p>코드의 책임, 역할을 의인화 시켜서 생각하는 것이 좋다.</p></blockquote></li></ul><p>getBlcok()을 호출할 때마다 <strong>배열을 매번 생성하고 있다.</strong></p><ul><li>컨텍스트 데이터가 되어야한다.</li></ul><p>다시 개선</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Block = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(color, ✨✨...blocks) &#123;</span><br><span class="line">    prop(<span class="keyword">this</span>, &#123;</span><br><span class="line">      color, </span><br><span class="line">      rotate:<span class="number">0</span>, </span><br><span class="line">      ✨✨blocks, </span><br><span class="line">      ✨✨count: blocks.length - <span class="number">1</span> <span class="comment">// 회전 카운트</span></span><br><span class="line">    &#125;;)</span><br><span class="line">  &#125;</span><br><span class="line">  left() &#123;</span><br><span class="line">    <span class="keyword">if</span>(--<span class="keyword">this</span>.rotate &lt; <span class="number">0</span>) <span class="keyword">this</span>.rotate = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  right() &#123;</span><br><span class="line">    <span class="keyword">if</span>(++<span class="keyword">this</span>.rotate &gt; ✨✨count) <span class="keyword">this</span>.rotate = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  getBlock()&#123; ✨✨</span><br><span class="line">    <span class="comment">// 클래스를 반환</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.blocks[<span class="keyword">this</span>.rotate];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> blocks = [</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Block</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123; </span><br><span class="line">      <span class="keyword">super</span>(<span class="string">'#f8cbad'</span>, </span><br><span class="line">        [[<span class="number">1</span>], [<span class="number">1</span>], [<span class="number">1</span>], [<span class="number">1</span>]], </span><br><span class="line">        [[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><a name="4"></a></p><h2 id="4-Renderer"><a href="#4-Renderer" class="headerlink" title="4. Renderer"></a>4. Renderer</h2><p>렌더러는 stage, score, block을 몰라도, data만 알아도 되는 구조<br><img src="/images/2018/38/04.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Renderer = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(col, row)&#123;</span><br><span class="line">    prop(<span class="keyword">this</span>, &#123;col, row, <span class="attr">blocks</span>:[]&#125;);</span><br><span class="line">    <span class="keyword">while</span>(row--) <span class="keyword">this</span>.blocks.push([]);</span><br><span class="line">  &#125;</span><br><span class="line">  clear()&#123;<span class="keyword">throw</span> <span class="string">'override'</span>;&#125; </span><br><span class="line">  <span class="comment">// 자식이 클리어 해야한다.</span></span><br><span class="line">  <span class="comment">// 대체가능성(상속성)과 내적동질성(다형성). </span></span><br><span class="line">  <span class="comment">// 자식을 다 부모로 보게 하고 싶다.</span></span><br><span class="line">  <span class="comment">// 어떤 자식이 와도 clear를 호출할 수 있다.</span></span><br><span class="line">  <span class="comment">// 부모의 clear를 호출해도 내적동질성때문에 자식의 clear가 호출된다.</span></span><br><span class="line">  <span class="comment">// 명시적으로 clear라는 method를 부모에 할당해주지만, 자식들이 렌더링 하는 방식이 다르기 때문에 실제 clear는 다형성에 의해서 자식들의 clear 메서드가 호출된다. == 무의미한 코드가 아니다.</span></span><br><span class="line">  render(data)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!(data <span class="keyword">instanceof</span> Data)) <span class="keyword">throw</span> <span class="string">'invalid data'</span>;</span><br><span class="line">    <span class="comment">// 프로토콜 확인만 해준다.</span></span><br><span class="line">    <span class="keyword">this</span>._render(data);</span><br><span class="line">    <span class="comment">// 내적동질성(다형성)에 의해서 자식의 _render가 호출된다.</span></span><br><span class="line">    <span class="comment">// 디자인 패턴 중: 템플릿 메서드 패턴 (객체지향 언어가 내적동질성을 보장해주어야한다)</span></span><br><span class="line">    <span class="comment">// 템플릿 메서드를 사옹하는 이유</span></span><br><span class="line">    <span class="comment">// 부모쪽에 있는 메서드가 많은 서비스를 제공하고 실제 할 일을 후킹하고 있는 자식클래스에게 위임하기 위해</span></span><br><span class="line">  &#125;</span><br><span class="line">  _render(data)&#123;<span class="keyword">throw</span> <span class="string">'override!'</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Template Method Pattern</strong><br>어떤 작업 알고리즘의 골격을 정의한다. 일부 단계는 서브 클래스에서 구현하도록 할 수 있다. 템플릿 메서드를 이용하면 알고리즘의 구조는 그대로 유지하면서 특정 단계만 서브 클래스에서 새로 정의하도록 할 수 있다.</p></blockquote><p><a name="4-0"></a></p><h2 id="4-0-Data-protocol"><a href="#4-0-Data-protocol" class="headerlink" title="4-0. Data(protocol)"></a>4-0. Data(protocol)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array를 상속 받는 이유는 형을 확인하기 위해 강제로 만듦.</span></span><br><span class="line"><span class="comment">// 마크업 클래스</span></span><br><span class="line"><span class="comment">// Array객체를 베이스로 하는 객체가 만들어진다.</span></span><br><span class="line"><span class="keyword">const</span> Data = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123; </span><br><span class="line">  <span class="keyword">constructor</span>(row, col)&#123;prop(<span class="keyword">this</span>, &#123;row, col&#125;);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>es6는 클래스 내부에서 this를 바꿔 줄 수 있다.</p></blockquote><p><a name="4-1"></a></p><h2 id="4-1-Table-Renderer"><a href="#4-1-Table-Renderer" class="headerlink" title="4-1. Table Renderer"></a>4-1. Table Renderer</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utility</span></span><br><span class="line"><span class="keyword">const</span> el = <span class="function"><span class="params">el</span> =&gt;</span> <span class="built_in">document</span>.createElement(el);</span><br><span class="line"><span class="keyword">const</span> back = <span class="function">(<span class="params">s: pixel, v: color</span>) =&gt;</span> s.backgroundColor = v;</span><br><span class="line"><span class="comment">// 배경 색 변경으로 움직임을 표현한다.</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> TableRenderer = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Renderer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// base: 테이블 element</span></span><br><span class="line">  <span class="comment">// back: background 칼라</span></span><br><span class="line">  <span class="keyword">constructor</span>(base, back, col, row)&#123;</span><br><span class="line">    <span class="keyword">super</span>(col, row);</span><br><span class="line">    <span class="keyword">this</span>.back = back;</span><br><span class="line">    white(row--)&#123;</span><br><span class="line">      <span class="keyword">const</span> tr = base.appendChild(el(<span class="string">'tr'</span>)), curr = []; <span class="comment">// row만큼 tr을 만들어서 넣기.</span></span><br><span class="line">      <span class="keyword">this</span>.blocks.push(curr); <span class="comment">// 빈 블럭 배열을 blocks에 넣어준다. this.blocks는 Renderer의 blocks</span></span><br><span class="line">      <span class="keyword">let</span> i = col;</span><br><span class="line">      <span class="keyword">while</span>(i--) curr.push(tr.appendChild(<span class="string">'td'</span>).style); </span><br><span class="line">      <span class="comment">// 스타일 객체만 넣는다.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.clear();</span><br><span class="line">  &#125;</span><br><span class="line">  clear()&#123;</span><br><span class="line">    <span class="keyword">this</span>.blocks.forEach(</span><br><span class="line">      curr =&gt; curr.forEach(<span class="function"><span class="params">s</span> =&gt;</span> back(s, <span class="keyword">this</span>.back))</span><br><span class="line">    ) </span><br><span class="line">    <span class="comment">// back함수는 utility의 back</span></span><br><span class="line">    <span class="comment">// back함수에 현재 back 칼라를 전부 할당한다.</span></span><br><span class="line">  &#125;</span><br><span class="line">  _render(v: Data)&#123;</span><br><span class="line">    <span class="keyword">this</span>.blocks.forEach(</span><br><span class="line">      (curr, row) =&gt; curr.forEach(<span class="function">(<span class="params">s, col</span>) =&gt;</span> back(s, v[row][col]))</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>변수 사용시 한 번 밖에 사용되지 않는데 변수로 잡는 것은 사실은 중복</strong></p></blockquote><hr><blockquote><p><span class="mint"><strong>for와 forEach 중 어떤걸 사용할까?</strong></span><br>언어스팩에서 정의되어있는 메서드를 사용하자. <strong>forEach</strong><br>성능문제는 우선 고려하지 말자.</p></blockquote><p><a name="4-2"></a></p><h2 id="4-2-Canvas-Renderer"><a href="#4-2-Canvas-Renderer" class="headerlink" title="4-2. Canvas Renderer"></a>4-2. Canvas Renderer</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CanvasRenderer = <span class="class"><span class="keyword">class</span> <span class="keyword">extends</span> <span class="title">Renderer</span></span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(base, back, col, row)&#123;</span><br><span class="line">    suepr(col, row);</span><br><span class="line">    prop(<span class="keyword">this</span>, &#123;</span><br><span class="line">      width: base.width = <span class="built_in">parseInt</span>(base.style.width),</span><br><span class="line">      height: base.height = <span class="built_in">parseInt</span>(base.style.height),</span><br><span class="line">      cellSize: [base.width/col, base.height/row],</span><br><span class="line">      ctx: base.getContext(<span class="string">'2d'</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  _render(v)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;ctx, <span class="attr">cellSize</span>:[w, h]&#125; = <span class="keyword">this</span>;</span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);</span><br><span class="line">    <span class="keyword">let</span> i = <span class="keyword">this</span>.row;</span><br><span class="line">    <span class="keyword">while</span>(i--)&#123;</span><br><span class="line">      <span class="keyword">let</span> j = <span class="keyword">this</span>.col;</span><br><span class="line">      <span class="keyword">while</span>(j--)&#123;</span><br><span class="line">        ctx.fillStyle = v[i][j];</span><br><span class="line">        ctx.fillRect(j *w, j*h, w, h);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong>참고자료</strong><br><a href="https://www.bsidesoft.com/?p=2827" target="_blank" rel="noopener">https://www.bsidesoft.com/?p=2827</a><br><a href="https://github.com/abhbtbb/tetris1" target="_blank" rel="noopener">https://github.com/abhbtbb/tetris1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;🌕🌑🌑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🔥 코드스피츠 수업을 수강하면서 복습한 내용을 정리했습니다.&lt;br&gt;아직 정리중..&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&quot;1&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-Stage&quot;
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2018 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2018-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="OOP" scheme="http://feel5ny.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>CodeSpitz78 4/ OOAD와 테트리스 (1)</title>
    <link href="http://feel5ny.github.io/2018/10/01/OOP_06/"/>
    <id>http://feel5ny.github.io/2018/10/01/OOP_06/</id>
    <published>2018-10-01T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<p>🌕🌑🌑</p><blockquote><p>🔥 코드스피츠 수업을 수강하면서 복습한 내용을 정리했습니다.<br>OOA, OOD까지만의 내용만 다루었습니다. 강의와 추가로 찾아본 자료와 섞여있습니다.</p></blockquote><hr><p><a name="1"></a></p><h2 id="1-개요"><a href="#1-개요" class="headerlink" title="1. 개요"></a>1. 개요</h2><h3 id="1-1-OOAD-개념-Object-Oriented-Analysis-and-Design"><a href="#1-1-OOAD-개념-Object-Oriented-Analysis-and-Design" class="headerlink" title="1-1 OOAD? 개념 (Object-Oriented Analysis and Design)"></a>1-1 OOAD? 개념 (Object-Oriented Analysis and Design)</h3><p>소프트웨어를 개발하는 하나의 방법론으로<br>모든 소프트웨어 시스템의 주요 기본요소를<br>사물을 가리키는 <strong>객체</strong>와 그 객체들을 하나의 <strong>집합</strong>으로 묶은 클래스로 구성하는<br><strong>객체지향적인 분석과 설계 방법</strong>을 말한다.<br>객체지향적이란 것은 현실세계에 실재하는 사물, 즉 객체들을 지향한다는 것이다. </p><ul><li>OOA: 분석하자</li><li>OOD: 설계하자</li><li>OOP: 프로그래밍 하자</li></ul><hr><hr><p><a name="1-2"></a></p><h3 id="1-2-객체-지향의-키워드"><a href="#1-2-객체-지향의-키워드" class="headerlink" title="1-2 객체 지향의 키워드"></a>1-2 객체 지향의 키워드</h3><h4 id="1-2-1-클래스-class-gt-추상-abstract"><a href="#1-2-1-클래스-class-gt-추상-abstract" class="headerlink" title="1-2-1 클래스 class =&gt; 추상 (abstract)"></a>1-2-1 클래스 class =&gt; 추상 (abstract)</h4><p>클래스는 추상,<br>오브젝트는 클래스가 실체로 만들어진 것</p><p><strong>클래스</strong><br>클래스는 표현 대상들의 공통적인 <strong>특징에 대한 서술</strong>(추상)을 말한다</p><p><strong><a href="#2">추상</a></strong><br>추상은 사용자가 구체적인 내용을 생각하지 않고도 사용할 수 있는 기능</p><ul><li>프로시져 추상화 Procedural abstraction : 함수</li><li>데이터 추상화 Data abstraction : 구조체, 배열, 포인터</li></ul><hr><h4 id="1-2-2-오브젝트-object-gt-실체-instance"><a href="#1-2-2-오브젝트-object-gt-실체-instance" class="headerlink" title="1-2-2 오브젝트 object =&gt; 실체 (instance)"></a>1-2-2 오브젝트 object =&gt; 실체 (instance)</h4><p>오브젝트는 클래스의 인스턴스이다.<br>오브젝트는 instance of class =&gt; <strong>클래스가 실체로 만들어진 것.</strong></p><ul><li>오브젝트는 데이터와 데이터에 대한 조작의 묶은 것</li><li>오브젝트 모양은 클래스에 서술되어 있다. </li></ul><p>cf__ <strong>다양한 용어지만 같은 뜻</strong></p><ul><li>attribute = data = member variables = state = field</li><li>behavior = operation = member function = method</li><li>클래스 class = 개념 concept = 타입 type</li><li>객체 object = 실체 instance = 변수 variable</li></ul><hr><h4 id="1-2-3-캡술화-encapsulation"><a href="#1-2-3-캡술화-encapsulation" class="headerlink" title="1-2-3 캡술화 encapsulation"></a>1-2-3 캡술화 encapsulation</h4><p>데이터와 (data)<br>데이터를 다루는 방법을 (operation on data)<br>묶는 것</p><ul><li><p>관련 있는 것을 묶어서 이름을 부여한 것 =&gt; 추상화</p></li><li><p>객체지향에서 객체끼리 지켜야할 최소한의 룰</p></li></ul><p><strong>은닉</strong>: 숨기다.</p><ul><li>어디까지 안보여주는 거지?</li><li>이상적인 은닉: 아무것도 안보여주겠어!</li><li>언어 차원에서도 강제로 뜯어볼 수 없는 장치를 마련했으면 좋겠다.</li><li>옵셔널하게 지원하는 기능: 데이터 하이딩을 직접 지원에서 내부를 볼 수 없게 한다. (언어마다 다르다.)<br><strong>캡슐화</strong></li><li>은닉과 상관없다.</li><li><strong>몰라도 되게 만들고 싶은 것.</strong></li><li>자세히 알면 독이 되기 때문.</li><li><strong>가장 모르는 수준까지만 알려준다.</strong></li><li>추상화된 행위만 알려준다.</li><li>예_ ATM 기계</li></ul><p>최대한 은닉하고<br>최대한 캡슐화해서 상대방과 대화한다.</p><ul><li>솔리드 원칙</li><li>헐리우드 원칙 (<a href="https://m.blog.naver.com/premiummina/220632744186" target="_blank" rel="noopener">참고</a>)</li><li>드라이 원칙</li><li>…</li></ul><hr><h4 id="1-2-4-상속성-inheritance"><a href="#1-2-4-상속성-inheritance" class="headerlink" title="1-2-4 상속성 inheritance"></a>1-2-4 상속성 inheritance</h4><p>하나의 클래스가 가지고 있는 특징들(데이터 + 조작)을 그대로 다른 클래스가 물려 받는 것</p><ul><li>상속성은 계보(계층의 의미도 있다.)</li><li>재사용과 유연성 </li><li>대체 가능성</li><li>자식이 부모를 대체할 수 있다.</li><li>자바스크립트 : prototype chain을 이용해 상속 ⇒ 대체 가능성을 구현한다. (<code>__proto__</code>)</li><li>Chaining 시스템으로 대체가능성을 구현할 수 있기 때문에 자바스크립트도 객체지향을 지원한다고 얘기할 수 있다.</li></ul><hr><h4 id="1-2-5-다형성-polymorphism-내적-동질성"><a href="#1-2-5-다형성-polymorphism-내적-동질성" class="headerlink" title="1-2-5 다형성 polymorphism == 내적 동질성"></a>1-2-5 다형성 polymorphism == 내적 동질성</h4><p>상속성의 계층을 따라서 각각의 클래스에 한가지 이름을 줄 수 있다.</p><ul><li><p>같은 명령을 각기 다른 오브젝트에 줄 수 있다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Dog d;</span><br><span class="line">d = <span class="keyword">new</span> Poodle()</span><br><span class="line">d.bark()</span><br><span class="line"></span><br><span class="line">d = <span class="keyword">new</span> Bulldog()</span><br><span class="line">d.bark()</span><br><span class="line"></span><br><span class="line">d = <span class="keyword">new</span> Husky()</span><br><span class="line">d.bark()</span><br></pre></td></tr></table></figure></li><li><p>처음 만들어졌을 때 원형이 누구냐에 따라서 오버라이드 되어있거나 오버라이딩 된 속성을 반드시 만들어진 구상객체를 사용하도록 되어있다.</p></li></ul><p>cf__ <strong>메세지 전달 message passing</strong><br>객체지향관점에서 프로그램은 오브젝트에 message를 보내는 것으로 실행</p><ul><li>실제 구체적 동작과 관계없이 객체와 객체에 대한 상호작용 관점을 제공..</li></ul><hr><h3 id="객체지향-프로그래밍은-패러다임-관점-중-하나이다"><a href="#객체지향-프로그래밍은-패러다임-관점-중-하나이다" class="headerlink" title="객체지향 프로그래밍은 패러다임(관점) 중 하나이다."></a>객체지향 프로그래밍은 패러다임(관점) 중 하나이다.</h3><ul><li>구조적 프로그래밍 (파스칼, C)</li><li>객체지향 프로그래밍 (자바, C++)</li><li>명령형 프로그래밍 (파스칼, C, …)</li><li>선언형 프로그래밍 (SQL, 프롤로그)</li><li>함수형 프로그래밍 (하스켈, 리스프)</li><li>객체기반 (자바스크립트, 에이다,)</li><li>이벤트 드리븐 프로그래밍</li><li>절차적 프로그래밍</li><li>…</li></ul><hr><hr><p><a name="1-3"></a></p><h3 id="1-3-객체지향-분석-및-설계"><a href="#1-3-객체지향-분석-및-설계" class="headerlink" title="1-3. 객체지향 분석 및 설계"></a>1-3. 객체지향 분석 및 설계</h3><ol><li>문제영역에서 배우(actor)를 찾아내고</li><li>각 배우들의 책임과 역할을 정의하고</li><li>배우들간의 관계를 지정하고</li><li>각 배우들에 대한 대본(script)를 쓴다.</li></ol><p>👇</p><ol><li>식별하고 </li><li>일반화하고(object, class),</li><li>대상들 간의 관계 (inheritance, embedded)를 설정하고,</li><li>상호작용 하도록(behavior)한다.</li></ol><p>👇</p><p><strong>도메인 =&gt; 도메인 개념의 시각화 =&gt; 설계 객체를 구현</strong></p><ol><li>use case 정의<ul><li>요구분석</li></ul></li><li>도메인 모델 정의<ul><li>문제영역 분석 및 표현</li><li>객체지향분석은 영역객체를 분류하는 관점에서 관심영역을 기술하는 것과 연관</li><li>도메인 : 해결하고자 하는 대상 영역<br>=&gt; <div class="mint"><strong>소프트웨어는 도메인의 문제를 해결하기 위한 수단</strong></div></li><li>추상화</li></ul></li><li>인터렉션 다이어그램 정의<ul><li>상호협력 관계 표현</li></ul></li><li>설계 클래스 정의</li></ol><p>난감한 도메인을 만났을때 우리는 어떻게 데이터 분석을 해서 처리할 수 있는가<br>⇒ 데이터 분석의 결과가 <strong>객체지향이 될 수 있게 하는 것이 우리의 목표</strong></p><hr><hr><p><a name="2"></a></p><h2 id="2-추상화-Abstraction"><a href="#2-추상화-Abstraction" class="headerlink" title="2. 추상화 Abstraction"></a>2. 추상화 Abstraction</h2><dl><dt>: 대상에서 특징만 뽑아낸 것</dt><dd>사람은 상징체계를 만들고, 발전시켜 다음 세대애 물려준다. (=&gt; 추상화 능력)<br>객체지향은 기본적으로 추상화 라는 영역에 속해 있다.</dd></dl><hr><p><a name="2-1"></a></p><h3 id="2-1-Categraization"><a href="#2-1-Categraization" class="headerlink" title="2-1. Categraization"></a>2-1. Categraization</h3><p>분류를 일정한 기준으로 묶어 놓는 것.<br>디테일을 숨기고 카테고리의 특징만 뽑아내서 이해하게 된다.</p><hr><p><a name="2-2"></a></p><h3 id="2-2-모델링"><a href="#2-2-모델링" class="headerlink" title="2-2. 모델링"></a>2-2. 모델링</h3><p>현실세계에 있는 실물에서 내가 기억해야할 것들을 모아 놓은 것.</p><p><strong>모델링에서 가장 중요한 것</strong></p><ul><li>이 도메인에서 꼭 기억해야할 게 모지? 를 먼저 정해야한다.</li><li>how? 도메인에서 <div class="mint">데이터 분석</div>을 통해서 반드시 기억해야만 하는 후보를 정하는 행위 ⇒ <strong>모델링</strong></li><li>기억해야만 할 특징을 정의하는 행위</li></ul><hr><p><a name="2-3"></a></p><h3 id="2-3-집합"><a href="#2-3-집합" class="headerlink" title="2-3. 집합"></a>2-3. 집합</h3><ul><li>가장 기초적인 추상화</li><li>그냥 모아놨기 때문에 카테고라이제이션이라고 하지 않는다.</li><li>무작위 적인 그룹핑을 시킬 수 있다.</li></ul><hr><hr><p><a name="3"></a></p><h2 id="3-테트리스-OOAD"><a href="#3-테트리스-OOAD" class="headerlink" title="3. 테트리스 OOAD"></a>3. 테트리스 OOAD</h2><p>카테고라이제이션으로 관리할 수 있나? 그냥 그룹화해서 관리할 수 있나?<br>본인이 <strong>역할(role)과 책임</strong>이 있나?<br>권한과 책임을 일치하게 나눌 수 있냐..</p><p>cf__설계시 유의해야할 점</p><ul><li>simplex: 의존성이 한쪽 (단방향 참조)</li><li>multiplex: 의존성이 양쪽 (양방향 참조)</li></ul><img src="/images/2018/37/02.png">- 혹시나 하는 의존성을 찾기 위해서 전체 그림을 그려본다.- UML- 설계시에는 simplex를 유지하자.<h3 id="인지하기-쉬운-객체-찾기"><a href="#인지하기-쉬운-객체-찾기" class="headerlink" title="인지하기 쉬운 객체 찾기"></a>인지하기 쉬운 객체 찾기</h3><p><strong>DATA</strong> (프로토콜)</p><ul><li><p>Render와 게임정보 사이의 프로토콜 역할</p></li><li><p>상호 간에 약속한 형태(프로토콜)를 끠어넣으면 둘 사이의 <strong>의존성이 줄어들게 된다.</strong></p></li><li><p>프로토콜 = 의정서, 합의서, 약정서</p></li><li><p>게임본체와 렌더러는 서로 몰라도 되고, 프로토콜만 알면 된다.</p><ol><li><p>Game 게임본체: stage + score + block + 범용패널 을 포함한다.</p><ul><li>Stage: 현재 스테이지 정보 </li><li>Score: 점수 및 계산법</li><li>Block: 다양한 타입의 블록</li><li>범용패널<ul><li>시작화면</li><li>종료화면</li><li>죽음</li><li>클리어</li><li>결과화면</li></ul></li></ul></li><li><p>범용 렌더링 처리기 Renderer : 데이터를 받아서 그리는 역할</p><ul><li>Table 렌더러</li><li>Canvas 렌더러</li></ul></li></ol></li></ul><h3 id="프로토콜을-적용하냐-마냐는"><a href="#프로토콜을-적용하냐-마냐는" class="headerlink" title="프로토콜을 적용하냐 마냐는?"></a>프로토콜을 적용하냐 마냐는?</h3><p><strong>변화율</strong>에 따라서!변화율이 극심한 경우에는 중간에 반드시 <strong>프로토콜</strong>을 넣어주어야한다!</p><hr><p><strong>참고자료</strong><br>OOAD : <a href="http://dollipolly.tistory.com/entry/OOAD-Object-Oriented-Analysis-Design" target="_blank" rel="noopener">http://dollipolly.tistory.com/entry/OOAD-Object-Oriented-Analysis-Design</a><br><a href="http://egloos.zum.com/nom3203/v/2502870" target="_blank" rel="noopener">http://egloos.zum.com/nom3203/v/2502870</a><br>객체지향 :  <a href="https://www.slideshare.net/plusjune/ss-46109239" target="_blank" rel="noopener">https://www.slideshare.net/plusjune/ss-46109239</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;🌕🌑🌑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🔥 코드스피츠 수업을 수강하면서 복습한 내용을 정리했습니다.&lt;br&gt;OOA, OOD까지만의 내용만 다루었습니다. 강의와 추가로 찾아본 자료와 섞여있습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;

      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2018 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2018-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="OOP" scheme="http://feel5ny.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>CodeSpitz78 3/ (stack 구조) HTML parser ✨✨</title>
    <link href="http://feel5ny.github.io/2018/09/24/OOP_05/"/>
    <id>http://feel5ny.github.io/2018/09/24/OOP_05/</id>
    <published>2018-09-24T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<p>🌕🌑🌑</p><blockquote><p>🔥 코드스피츠 수업을 수강하면서 복습한 내용을 정리했습니다.<br>참고 : 렌더링 엔진 - <a href="https://feel5ny.github.io/2018/06/06/rendering_engine_1/#html_parser">파싱</a></p></blockquote><hr><p><a name="1"></a></p><h2 id="1-개요"><a href="#1-개요" class="headerlink" title="1. 개요"></a>1. 개요</h2><p>어떤 상황을 보고 구조적이고 재귀적인 형태로 파악을 할 수 있느냐,<br>데이터 분석을 할 수 있느냐..</p><h3 id="BNF"><a href="#BNF" class="headerlink" title="BNF"></a>BNF</h3><p>&lt;기호&gt; ::= &lt;표현식&gt;</p><ul><li>내부 구성요소로부터 응용구성요소 확장하는 것을 BNF 정의방식</li><li>언어의 구성요소를 정의하는 여러 문법들이 있다 (lex, yak)</li></ul><h3 id="html-기본-패턴"><a href="#html-기본-패턴" class="headerlink" title="html 기본 패턴"></a>html 기본 패턴</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A = &lt;tag&gt;body&lt;/tag&gt;</span><br><span class="line">B = &lt;tag /&gt;</span><br><span class="line">C = text</span><br><span class="line">body = (A|B|C)N</span><br></pre></td></tr></table></figure><img src="/images/2018/36/01.png">> 위의 그림을 파싱할 수 있는 파서를 만들고 싶다!> 케이스가 재귀면서 복합적인 상황을 짤 수 있다면 **중급개발자**<h3 id="파서의-기본-구조"><a href="#파서의-기본-구조" class="headerlink" title="파서의 기본 구조"></a>파서의 기본 구조</h3><ul><li>함수의 목표, 인자값과 리턴값이 무엇인지 정의한다.</li><li>무슨 인자를 받아서 무엇을 리턴하지?</li></ul><p><strong>문자열을 읽어서 구조적으로 객체화 시켜 리턴하게 하고 싶다.</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Result &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>,</span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">string</span>, <span class="comment">// text, node</span></span><br><span class="line">  children: Result[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> StackItem &#123;</span><br><span class="line">  tag: Result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = (input: <span class="built_in">string</span>): Result[] =&gt; &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="comment">// 초기화</span></span><br><span class="line">  <span class="keyword">const</span> result = &#123;name: <span class="string">'ROOT'</span>, <span class="keyword">type</span>: <span class="string">'node'</span>, children: []&#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123;tag: result&#125;];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> curr, i = <span class="number">0</span>, j = input.length;</span><br><span class="line">  <span class="keyword">while</span>(curr = stack.pop())&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i; <span class="comment">// 헷갈리기때문에 조회용으로 따로</span></span><br><span class="line">      <span class="keyword">if</span>(input[cursor] === <span class="string">'&lt;'</span>)&#123;</span><br><span class="line">        <span class="comment">// '&lt;'로 시작하면 태그: A,B의 경우</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 텍스트 타입: C의 경우</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="중첩루프"><a href="#중첩루프" class="headerlink" title="중첩루프"></a>중첩루프</h3><ul><li>첫번째 loop는 동적 루프<ul><li>루프를 결정하는 요인이 안의 루프를 돌다가 변할 수도 있다. </li><li>이런 루프가 기본이다. 익숙해지자 ~</li><li>조건이 <code>false</code>가 될때까지 loop</li></ul></li><li>두번째 loop는 정해져있는 루프<ul><li><strong>스캐너 루프</strong>라고 한다. </li></ul></li><li>계획되지 않은 loop는 위험하다는 생각을 버리자.</li><li>스택수준으로 loop를 돌아야한다. <strong>때문에 스택구조 루프 아래에 알고리즘이 있는 상황이다</strong></li></ul><hr><p><a name="2"></a></p><h2 id="2-텍스트-노드"><a href="#2-텍스트-노드" class="headerlink" title="2. 텍스트 노드"></a>2. 텍스트 노드</h2><p>C타입: 텍스트</p><h3 id="2-1-순서"><a href="#2-1-순서" class="headerlink" title="2-1. 순서"></a>2-1. 순서</h3><p><strong>다음 태그</strong>까지를 파악</p><ul><li><strong>name</strong>: 현재 커서 ~ 다음 태그까지의 텍스트 추출</li><li><strong>type</strong>: ‘text’</li><li><strong>children</strong>은 없다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Result &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>,</span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">string</span>, <span class="comment">// text, node</span></span><br><span class="line">  children: Result[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> StackItem &#123;</span><br><span class="line">  tag: Result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = (input: <span class="built_in">string</span>): Result[] =&gt; &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123;name: <span class="string">'ROOT'</span>, <span class="keyword">type</span>: <span class="string">'node'</span>, children: []&#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123;tag: result&#125;];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> curr, i = <span class="number">0</span>, j = input.length;</span><br><span class="line">  <span class="keyword">while</span>(curr = stack.pop())&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i;</span><br><span class="line">      <span class="keyword">if</span>(input[cursor] === <span class="string">'&lt;'</span>)&#123;</span><br><span class="line">        <span class="comment">// '&lt;'로 시작하면 태그: A,B의 경우</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 텍스트 타입: C의 경우</span></span><br><span class="line">        👇👇👇</span><br><span class="line">        <span class="keyword">const</span> idx = input.indexOf(<span class="string">'&lt;'</span>, cursor); </span><br><span class="line">        <span class="comment">// cursor위치에서부터 &lt; 위치: 다음 태그 전까지</span></span><br><span class="line">        curr.tag.children.push(&#123;</span><br><span class="line">          <span class="keyword">type</span>: <span class="string">'text'</span>, </span><br><span class="line">          text: input.substring(cursor, idx);</span><br><span class="line">        &#125;); <span class="comment">// children이 없기 때문에 children은 패스</span></span><br><span class="line">        i = idx; <span class="comment">// 다음 시작지점을 옮김</span></span><br><span class="line">        👆👆👆</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-분리"><a href="#2-2-분리" class="headerlink" title="2-2. 분리"></a>2-2. 분리</h3><ul><li>로직이 독립적이다.</li><li>따로 분리 가능 !</li><li><strong><code>curr</code></strong> 때문에 결합도가 올라가지만 어쩔 수 없는 부분</li></ul><blockquote><p><strong>역할을 인식하자마자!! 분리하자.</strong><br>나중에 분리할 때는 이미 오염되어있어서 분리시키기 어렵다. </p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> textNode = (input: <span class="built_in">string</span>, cursor: <span class="built_in">number</span>, curr: StackItem): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> idx = input.indexOf(<span class="string">'&lt;'</span>, cursor);</span><br><span class="line">  curr.tag.children.push(&#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">'text'</span>, </span><br><span class="line">    text: input.substring(cursor, idx);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> idx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Result &#123;</span><br><span class="line">  name?: <span class="built_in">string</span>,</span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">string</span>, <span class="comment">// text, node</span></span><br><span class="line">  children: Result[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> StackItem &#123;</span><br><span class="line">  tag: Result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123;name: <span class="string">'ROOT'</span>, <span class="keyword">type</span>: <span class="string">'node'</span>, children: []&#125;; </span><br><span class="line">  <span class="keyword">const</span> stack = [&#123;tag: result&#125;];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> curr, i = <span class="number">0</span>, j = input.length;</span><br><span class="line">  <span class="keyword">while</span>(curr = stack.pop())&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i; <span class="comment">// 헷갈리기때문에 조회용으로 따로</span></span><br><span class="line">      <span class="keyword">if</span>(input[cursor] === <span class="string">'&lt;'</span>)&#123;</span><br><span class="line">        <span class="comment">// '&lt;'로 시작하면 태그: A,B의 경우</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        👇👇👇</span><br><span class="line">        i = textNode(input, cursor, curr)</span><br><span class="line">        👆👆👆</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 목표: textNode를 생성 + result 배열에 추가 =&gt; idx값(텍스트 노드의 마지막 순서값) 반환</span></span><br><span class="line"><span class="keyword">const</span> textNode = (input: <span class="built_in">string</span>, cursor: <span class="built_in">number</span>, curr: StackItem): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> idx = input.indexOf(<span class="string">'&lt;'</span>, cursor);</span><br><span class="line">  curr.tag.children.push(&#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">'text'</span>, </span><br><span class="line">    text: input.substring(cursor, idx);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> idx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="코드를-짤-때는-무조건-쉬운-것-부터-처리한다"><a href="#코드를-짤-때는-무조건-쉬운-것-부터-처리한다" class="headerlink" title="코드를 짤 때는 무조건 쉬운 것 부터 처리한다."></a><strong>코드를 짤 때는 무조건 쉬운 것 부터 처리한다.</strong></h4><ul><li>why? 쉬운것의 특징은 : <ol><li>의존성이 낮다. </li><li>독립된 기능일 경우가 높다.</li></ol></li><li><strong>의존성이 낮은 모듈부터 높은 모듈로 올라가자.</strong></li></ul><hr><p><a name="3"></a></p><h2 id="3-태그-노드"><a href="#3-태그-노드" class="headerlink" title="3. 태그 노드"></a>3. 태그 노드</h2><h4 id="lt-가-발동-트리거로-쓰이고-있다"><a href="#lt-가-발동-트리거로-쓰이고-있다" class="headerlink" title="&lt;가 발동 트리거로 쓰이고 있다."></a><span class="mint">&lt;</span>가 발동 트리거로 쓰이고 있다.</h4><ul><li>이렇게 week하게 ?</li><li>파서를 만들 때는 이렇게 seperator, token 형태의 트리거가 만들어진다.</li></ul><h4 id="트리거가-발동되는-케이스가-3가지-종류가-있다"><a href="#트리거가-발동되는-케이스가-3가지-종류가-있다" class="headerlink" title="트리거가 발동되는 케이스가 3가지 종류가 있다."></a><strong>트리거가 발동되는 케이스가 3가지 종류가 있다.</strong></h4><ol><li>시작태그</li><li>닫는태그</li><li>완료태그</li></ol><img src="/images/2018/36/03.png" style="width: 100px"><ul><li><strong>공통점</strong><br>시작태그로 시작해서 닫는태그로 끝난다.</li></ul><blockquote><p>공통점을 찾아서 코드를 중복시키는 것을 피해야한다.<br>눈을 훈련해서 먼저 공통요소를 추상화 할 수 있는 능력을 키워야한다.</p></blockquote><p><a name="3-1"></a></p><h3 id="3-1-empty-element-lt-img-gt-open-tag-lt-div-gt"><a href="#3-1-empty-element-lt-img-gt-open-tag-lt-div-gt" class="headerlink" title="3.1 empty element &lt;img /&gt;, open tag &lt;div&gt;"></a>3.1 empty element <code>&lt;img /&gt;</code>, open tag <code>&lt;div&gt;</code></h3><p>empty element가 더 간단해 보이므로 먼저짜긔</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123;<span class="attr">name</span>: <span class="string">'ROOT'</span>, <span class="attr">type</span>: <span class="string">'node'</span>, <span class="attr">children</span>: []&#125;; <span class="comment">// 리턴값 : 이름이 뭐고, 타입이 뭐고, children을 뭘 갖고 잇는지.</span></span><br><span class="line">  <span class="keyword">const</span> stack = [&#123;<span class="attr">tag</span>: result&#125;]; <span class="comment">// DOM 객체</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> curr, i = <span class="number">0</span>, j = input.length;</span><br><span class="line">  <span class="keyword">while</span>(curr = stack.pop())&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i; <span class="comment">// 헷갈리기때문에 조회용으로 따로</span></span><br><span class="line">      <span class="keyword">if</span>(input[cursor] === <span class="string">'&lt;'</span>)&#123;</span><br><span class="line">        <span class="comment">// '&lt;'로 시작하면 태그: A,B의 경우</span></span><br><span class="line">        <span class="comment">// 현재 cursor |&lt;</span></span><br><span class="line">        <span class="keyword">const</span> idx = input.indexOf(<span class="string">'&gt;'</span>, cursor);</span><br><span class="line">        <span class="comment">// 현재 idx |&gt;</span></span><br><span class="line">        i = idx + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(input[cursor + <span class="number">1</span>] === <span class="string">'/'</span>)&#123;</span><br><span class="line">          <span class="comment">// close 태그</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        👇👇👇</span><br><span class="line">          <span class="keyword">if</span>(input[idx - <span class="number">1</span>] === <span class="string">'/'</span>)&#123;</span><br><span class="line">            <span class="comment">// empty 태그</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// open 태그</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        👆👆👆</span><br><span class="line">      &#125; <span class="keyword">else</span> i = textNode(input, cursor, curr)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> textNode = <span class="function">(<span class="params">input, cursor, curr</span>) =&gt;</span> &#123;...&#125;;</span><br></pre></td></tr></table></figure><p><a name="cf__1"></a></p><h4 id="cf-1-코드-설계를-잘하자"><a href="#cf-1-코드-설계를-잘하자" class="headerlink" title="cf__1 코드 설계를 잘하자"></a>cf__1 코드 설계를 잘하자</h4><p>좋은 코드를 짜는 비밀은</p><ul><li>테스트 주도 개발에 있는 것이 아니라,</li><li>데이터를 이해하고 재귀적인 로직을 찾아내거나</li><li>추상화된 공통점을 찾아내거나</li><li>역할을 이해하거나에 있다.</li></ul><p>머릿속에 맨톨모델이 그려지면 코드로 똑같이 표현되어야지 정상이다.</p><ul><li>그래야 나중에 유지보수가 된다.</li><li>그러기 때문에 주석이 필요없다.</li></ul><p>바른 데이터 모델링이 돼었으면</p><ul><li>코드는 그냥 매핑용이다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name, isClose; <span class="comment">// 👈 공통 준비사항 층 </span></span><br><span class="line"><span class="keyword">if</span>(input[idx - <span class="number">1</span>] === <span class="string">'/'</span>)&#123; <span class="comment">// 👈 공통 처리사항 층 ~</span></span><br><span class="line">  <span class="comment">// empty element 태그</span></span><br><span class="line">  <span class="comment">// name은 '&lt;'와 '&gt;'사이</span></span><br><span class="line">  name = input.substring(cursor + <span class="number">1</span>, idx - <span class="number">1</span>);</span><br><span class="line">  isClose = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// open 태그</span></span><br><span class="line">  name = input.substring(cursor + <span class="number">1</span>, idx);</span><br><span class="line">  isClose = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tag = &#123;name, <span class="attr">type</span>: <span class="string">'node'</span>, <span class="attr">children</span>: []&#125;; <span class="comment">// 👈 흡수하는? 층</span></span><br><span class="line">curr.tag.children.push(tag);</span><br></pre></td></tr></table></figure><p>케이스는 다 값으로 바꿀 수 있다.</p><ul><li>케이스의 차이를 값으로 흡수해서 하나의 알고리즘으로 만듦.</li><li>메모리(name, isClose)와 연산(조건문)은 교환된다.</li><li>연산을 메모리로 바꿈 =&gt; 메모리를 가리키는 하나의 연산만 기술하면 된다.</li></ul><p>위의 코드 형태</p><ol><li>공통 준비사항 층</li><li>공통 처리사항 층</li><li>다른점을 기술하는 부분을 흡수하는 층</li></ol><p><a name="cf__2"></a></p><h4 id="cf-2-화이트리스"><a href="#cf-2-화이트리스" class="headerlink" title="cf__2 화이트리스"></a>cf__2 화이트리스</h4><p><strong>화이트리스 whitelist</strong><br>‘안전’이 증명된 것만을 허용하는 것으로 ‘악의성’이 입증된 것을 차단하는 블랙리스트 보안과 상반되는 보안 방식 이다.<br>화이트리스트, 블랙리스트라는 용어 대신 ‘positive’와 ‘nagative’ 보안 방법으로 불려지기도 합니다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> idx = input.indexOf(<span class="string">'&gt;'</span>, cursor);</span><br><span class="line"><span class="comment">// 현재 idx |&gt;</span></span><br><span class="line">i = idx + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(input[cursor + <span class="number">1</span>] === <span class="string">'/'</span>)&#123;</span><br><span class="line">  <span class="comment">// close 태그</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> name, isClose;</span><br><span class="line">  <span class="keyword">if</span>(input[idx - <span class="number">1</span>] === <span class="string">'/'</span>)&#123;</span><br><span class="line">    <span class="comment">// empty element 태그</span></span><br><span class="line">    <span class="comment">// name은 '&lt;'와 '&gt;'사이</span></span><br><span class="line">    name = input.substring(cursor + <span class="number">1</span>, idx - <span class="number">1</span>);</span><br><span class="line">    isClose = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// open 태그</span></span><br><span class="line">    name = input.substring(cursor + <span class="number">1</span>, idx);</span><br><span class="line">    isClose = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tag = &#123;name, <span class="attr">type</span>: <span class="string">'node'</span>, <span class="attr">children</span>: []&#125;;</span><br><span class="line">  curr.tag.children.push(tag);</span><br><span class="line">  </span><br><span class="line">  👇👇👇</span><br><span class="line">  <span class="keyword">if</span>(!isClose)&#123;</span><br><span class="line">    stack.push(&#123;tag, <span class="attr">back</span>:curr&#125;);</span><br><span class="line">    <span class="comment">// ✨✨ 리턴포인트를 수동으로 정의하는 상황.</span></span><br><span class="line">    <span class="keyword">break</span>; <span class="comment">// while문의 break</span></span><br><span class="line">  &#125; </span><br><span class="line">  👆👆👆</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>분리 ~</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> idx = input.indexOf(<span class="string">'&gt;'</span>, cursor);</span><br><span class="line"><span class="comment">// 현재 idx |&gt;</span></span><br><span class="line">i = idx + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(input[cursor + <span class="number">1</span>] === <span class="string">'/'</span>)&#123;</span><br><span class="line">  <span class="comment">// close 태그</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(elementNode(input, cursor, idx, curr, stack)) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> elementNode = (</span><br><span class="line">  input: <span class="built_in">string</span>, </span><br><span class="line">  cursor: <span class="built_in">number</span>, </span><br><span class="line">  idx: <span class="built_in">number</span>, </span><br><span class="line">  curr: StackItem, </span><br><span class="line">  stack: StackItem[]): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> name, isClose;</span><br><span class="line">  <span class="keyword">if</span>(input[idx - <span class="number">1</span>] === <span class="string">'/'</span>)&#123;</span><br><span class="line">    <span class="comment">// empty element 태그</span></span><br><span class="line">    <span class="comment">// name은 '&lt;'와 '&gt;'사이</span></span><br><span class="line">    name = input.substring(cursor + <span class="number">1</span>, idx - <span class="number">1</span>);</span><br><span class="line">    isClose = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// open 태그</span></span><br><span class="line">    name = input.substring(cursor + <span class="number">1</span>, idx);</span><br><span class="line">    isClose = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tag = &#123;name, <span class="keyword">type</span>: <span class="string">'node'</span>, children: []&#125;;</span><br><span class="line">  curr.tag.children.push(tag);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(!isClose)&#123;</span><br><span class="line">    stack.push(&#123;tag, back:curr&#125;);</span><br><span class="line">    <span class="comment">// 리턴포인트를 수동으로 정의하는 상황.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="cf__3"></a></p><h4 id="cf-3-가독성이-높은-코드"><a href="#cf-3-가독성이-높은-코드" class="headerlink" title="cf__3 가독성이 높은 코드?"></a>cf__3 가독성이 높은 코드?</h4><p>(변수명을 이쁘게 쓰던, 컨벤션을 지키던)<br><strong>코드가 리더블하다?</strong> Readable</p><ul><li><strong>적절한 역할모델</strong>로 위임되서<br>그들간의 <strong>통신과 협업만 볼 수 있는 코드</strong>가 가독성이 높은 코드이다.</li></ul><p><a name="3-2"></a></p><h3 id="3-2-close-tag"><a href="#3-2-close-tag" class="headerlink" title="3.2 close tag"></a>3.2 close tag</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack.push(&#123;tag, <span class="attr">back</span>:curr&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> idx = input.indexOf(<span class="string">'&gt;'</span>, cursor);</span><br><span class="line"><span class="comment">// 현재 idx |&gt;</span></span><br><span class="line">i = idx + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(input[cursor + <span class="number">1</span>] === <span class="string">'/'</span>)&#123;</span><br><span class="line">  👇👇👇</span><br><span class="line">  <span class="comment">// close 태그</span></span><br><span class="line">  curr = curr.back;</span><br><span class="line">  👆👆👆</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(elementNode(input, cursor, idx, curr, stack)) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> elementNode = <span class="function">(<span class="params">input, cursor, idx, curr, stack</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> name, isClose;</span><br><span class="line">  <span class="keyword">if</span>(input[idx - <span class="number">1</span>] === <span class="string">'/'</span>)&#123;</span><br><span class="line">    <span class="comment">// empty element 태그</span></span><br><span class="line">    <span class="comment">// name은 '&lt;'와 '&gt;'사이</span></span><br><span class="line">    name = input.substring(cursor + <span class="number">1</span>, idx - <span class="number">1</span>);</span><br><span class="line">    isClose = <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// open 태그</span></span><br><span class="line">    name = input.substring(cursor + <span class="number">1</span>, idx);</span><br><span class="line">    isClose = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tag = &#123;name, <span class="attr">type</span>: <span class="string">'node'</span>, <span class="attr">children</span>: []&#125;;</span><br><span class="line">  curr.tag.children.push(tag);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(!isClose)&#123;</span><br><span class="line">    stack.push(&#123;tag, <span class="attr">back</span>:curr&#125;);</span><br><span class="line">    <span class="comment">// 리턴포인트를 수동으로 정의하는 상황.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="cf__4"></a></p><h4 id="cf-4"><a href="#cf-4" class="headerlink" title="cf__4"></a>cf__4</h4><p>css압축이나 javascript압축보다<br><strong>html압축이 브라우저의 부하를 줄이는 방법</strong><br>쓸데없는 노드생성을 줄인다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementNode = <span class="function">(<span class="params">input, cursor, idx, curr, stack</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isClose = input[idx - <span class="number">1</span>] === <span class="string">'/'</span>;</span><br><span class="line">  <span class="keyword">const</span> tag = &#123;<span class="attr">name</span>: input.substring(cursor + <span class="number">1</span>, idx - (isClose ? <span class="number">1</span>: <span class="number">0</span>)), <span class="attr">type</span>: <span class="string">'node'</span>, <span class="attr">children</span>: []&#125;</span><br><span class="line">  curr.tag.children.push(tag);</span><br><span class="line">  <span class="keyword">if</span>(!isClose)&#123;</span><br><span class="line">    stack.push(&#123;tag, <span class="attr">back</span>:curr&#125;);</span><br><span class="line">    <span class="comment">// ✨✨ 리턴포인트를 수동으로 정의하는 상황.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a name="4"></a></p><h2 id="4-최종"><a href="#4-최종" class="headerlink" title="4. 최종"></a>4. 최종</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="function"><span class="params">input</span> =&gt;</span> &#123;</span><br><span class="line">  input = input.trim();</span><br><span class="line">  <span class="keyword">const</span> result = &#123;<span class="attr">name</span>: <span class="string">'ROOT'</span>, <span class="attr">type</span>: <span class="string">'node'</span>, <span class="attr">children</span>: []&#125;;</span><br><span class="line">  <span class="keyword">const</span> stack = [&#123;<span class="attr">tag</span>: result&#125;]; <span class="comment">// DOM 객체</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> curr, i = <span class="number">0</span>, j = input.length;</span><br><span class="line">  <span class="keyword">while</span>(curr = stack.pop())&#123;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; j)&#123;</span><br><span class="line">      <span class="keyword">const</span> cursor = i; <span class="comment">// 헷갈리기때문에 조회용으로 따로</span></span><br><span class="line">      <span class="keyword">if</span>(input[cursor] === <span class="string">'&lt;'</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> idx = input.indexOf(<span class="string">'&gt;'</span>, cursor);</span><br><span class="line">        i = idx + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(input[cursor + <span class="number">1</span>] === <span class="string">'/'</span>)&#123;</span><br><span class="line">          <span class="comment">// 닫는태그</span></span><br><span class="line">          curr = curr.back;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span>(elementNode(input, cursor, idx, curr, stack)) <span class="keyword">break</span>; <span class="comment">// 두번째 루프 break</span></span><br><span class="line">        &#125; </span><br><span class="line">      &#125; <span class="keyword">else</span> i = textNode(input, cursor, curr)</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> textNode = <span class="function">(<span class="params">input, cursor, curr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> idx = input.indexOf(<span class="string">'&lt;'</span>, cursor);</span><br><span class="line">  curr.tag.children.push(&#123;</span><br><span class="line">    type: <span class="string">'text'</span>, </span><br><span class="line">    text: input.substring(cursor, idx),</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> idx;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> elementNode = <span class="function">(<span class="params">input, cursor, idx, curr, stack</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> isClose = input[idx - <span class="number">1</span>] === <span class="string">'/'</span>;</span><br><span class="line">  <span class="keyword">const</span> tag = &#123;<span class="attr">name</span>: input.substring(cursor + <span class="number">1</span>, idx - (isClose ? <span class="number">1</span>: <span class="number">0</span>)), <span class="attr">type</span>: <span class="string">'node'</span>, <span class="attr">children</span>: []&#125;</span><br><span class="line">  curr.tag.children.push(tag);</span><br><span class="line">  <span class="keyword">if</span>(!isClose)&#123;</span><br><span class="line">    stack.push(&#123;tag, <span class="attr">back</span>:curr&#125;);</span><br><span class="line">    <span class="comment">// ✨✨ 리턴포인트를 수동으로 정의하는 상황.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;🌕🌑🌑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🔥 코드스피츠 수업을 수강하면서 복습한 내용을 정리했습니다.&lt;br&gt;참고 : 렌더링 엔진 - &lt;a href=&quot;https://feel5ny.github.io/2018/06/06/rendering_en
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2018 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2018-CodeSpitz/"/>
    
    
      <category term="web" scheme="http://feel5ny.github.io/tags/web/"/>
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="OOP" scheme="http://feel5ny.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>CodeSpitz78 2/ 루틴 심화</title>
    <link href="http://feel5ny.github.io/2018/09/07/OOP_04/"/>
    <id>http://feel5ny.github.io/2018/09/07/OOP_04/</id>
    <published>2018-09-07T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.464Z</updated>
    
    <content type="html"><![CDATA[<p>🌕🌑🌑</p><blockquote><p>🔥 코드스피츠 수업을 수강하면서 복습한 내용을 정리했습니다.<br>공부 후에는 풀어서 쉬운 언어로 설명할 수 있도록 연습하자.</p></blockquote><hr><p><a name="1"></a></p><h1 id="1-참조-전파의-문제"><a href="#1-참조-전파의-문제" class="headerlink" title="1. 참조 전파의 문제"></a>1. 참조 전파의 문제</h1><img src="/images/2018/35/03.png"><ul><li>LA는 간접적으로 B를 물고 있다.<ul><li>상호 참조(연쇄참조)가 되어서 서로 오염이 된다..</li><li>디버깅이 어려워진다.</li></ul></li><li>참조값은 전체를 오염시키기 쉽다.</li><li><span class="mint"><strong>복사본</strong>을 넘겨야한다.</span></li></ul><hr><p><a name="2"></a></p><h1 id="2-서브루틴의-체인"><a href="#2-서브루틴의-체인" class="headerlink" title="2. 서브루틴의 체인"></a>2. 서브루틴의 체인</h1><img src="/images/2018/35/04.png"><img src="/images/2018/35/05.png"><img src="/images/2018/35/06.png">> keep의 정확한 대상<ul><li>인자와 지역변수를 포함하는 곳: 실행컨택스트</li></ul><img src="/images/2018/35/07.png">- 함수 콜을 return 이후로 옮겼다.<img src="/images/2018/35/08.png">- 메모리를 유지할 필요가 없으니, 리턴포인트를 다른 곳으로 지정해주면 어떨까?- 리턴포인트는 언어 수준에서 정해져있다.- 리턴포인트를 처음 호출한 함수로 옮긴다 => tail recursion - 언어수준에서 리턴포인트를 지정하기 때문에 언어마다 재귀꼬리 최적화를 지원하는 언어도 있고, 없기도 하다.- 제어문의 loop 처럼 옮긴다.  - 처리하고 => 해제하고  - 제어문은 for문을 돌때마다 메모리를 유지하지 않는다.  - index 변수만 남아 있다.  - 제어문의 **`stack clear`** 구문.  - for문은 처음 loop돌리는 블럭에 대해서 스택영역에 대해서 실행한 다음에 점프시, 앞의 stack 메모리를 전부 해제한다.<hr><p><a name="3"></a></p><h1 id="3-재귀-꼬리-최적화-Tail-Recursion"><a href="#3-재귀-꼬리-최적화-Tail-Recursion" class="headerlink" title="3. 재귀 꼬리 최적화 Tail Recursion"></a>3. 재귀 꼬리 최적화 <code>Tail Recursion</code></h1><ul><li>for문의 도움을 받지 않고도 고성능의 루프를 만들어 낼 수 있다.</li><li>사파리가 지원하고 있다. 크롬 X, 엣지 X</li><li>tail recursion을 지원한다. <ul><li>script time out만 난다.</li><li>stack over flow는 일어나지 않는다. </li></ul></li><li>언어마다 tail recursion이 이뤄지는 조건을 정의해 둔다.</li><li>효율적인 재귀함수를 짤 수 있다.</li></ul><p>** <em>예시 *</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="params">v</span> =&gt;</span> v + (v ? sum(v<span class="number">-1</span>) : <span class="number">0</span>);</span><br><span class="line">sum(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 3 + sum(2)</span></span><br><span class="line"><span class="comment">// 2. 2 + sum(1)</span></span><br><span class="line"><span class="comment">// 3. 1 + 0</span></span><br></pre></td></tr></table></figure><ul><li>더하기 <span class="mint"><strong>연산자</strong>는 꼬리물기 최적화를 방해한다.</span></li><li>모든 연산자는 스택메모리를 유뱔한다.</li></ul><blockquote><p>인자로 옮겨서 스택메모리가 생기지 않도록 하였다.</p></blockquote><h2 id="연산을-인자로-옮긴다"><a href="#연산을-인자로-옮긴다" class="headerlink" title="연산을 인자로 옮긴다!!"></a>연산을 <span class="mint">인자</span>로 옮긴다!!</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">v, prev = <span class="number">0</span></span>) =&gt;</span> &#123;</span><br><span class="line">  prev += v;</span><br><span class="line">  <span class="keyword">return</span> (v &gt; <span class="number">1</span> ? sum(v<span class="number">-1</span>, prev) : prev);</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 1. sum(v:3, prev:0) return sum(2,3)</span></span><br><span class="line"><span class="comment">// 2. sum(v:2, prev:3) return sum(1,5)</span></span><br><span class="line"><span class="comment">// 3. sum(v:1, prev:5) reutrn 6</span></span><br><span class="line"><span class="comment">// 3번째 return값이 첫번째 sum(3)의 리턴포인트로 리턴된다.</span></span><br></pre></td></tr></table></figure><h3 id="자바스크립트에서-tail-recursion-안-일으키는-연산자-언어수준에서-정의되어있음"><a href="#자바스크립트에서-tail-recursion-안-일으키는-연산자-언어수준에서-정의되어있음" class="headerlink" title="자바스크립트에서 tail recursion 안 일으키는 연산자 (언어수준에서 정의되어있음)"></a>자바스크립트에서 tail recursion 안 일으키는 연산자 (언어수준에서 정의되어있음)</h3><ul><li>삼항연산자</li><li><code>&amp;&amp;</code>연산자</li><li><code>||</code>연산자</li></ul><blockquote><p>자바스크립트는 이미 ES6에서는 tail recursive를 지원하게끔 스펙으로 지정해놓았다.<br>JVM은 지원하지 않는다.</p></blockquote><ul><li>내 메모리는 다 해제하고 다음쪽 함수메모리의 인자메모리를 사용함으로써 해결한다.</li><li>함수 외적 메모리를 알 수 있다.<ul><li>위의 prev는 외적 메모리라는 것을 알 수 있다.</li><li>for문의 지역변수도 외적 메모리라고 볼 수 있다.</li><li>for문의 지역변수에 갱신하는 로직과 같은개념이다.</li></ul></li></ul><p><a name="4"></a></p><h1 id="4-🚀🚀-재귀를-루프로-Tail-Recursion-to-loop"><a href="#4-🚀🚀-재귀를-루프로-Tail-Recursion-to-loop" class="headerlink" title="4. 🚀🚀 재귀를 루프로 Tail Recursion to loop"></a>4. 🚀🚀 재귀를 루프로 Tail Recursion to loop</h1><ul><li>자유롭게 변환할 수 있어야 한다.</li><li>자동으로 변환할 수 있어야 한다..</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">v, prev = <span class="number">0</span> </span>) =&gt;</span> &#123;</span><br><span class="line">  prev += v;</span><br><span class="line">  <span class="keyword">return</span> (v &gt; <span class="number">1</span> ? sum(v<span class="number">-1</span>, prev) : prev);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(v &gt; <span class="number">1</span>)&#123;</span><br><span class="line">    prev += v;</span><br><span class="line">    v--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a name="5"></a></p><h1 id="5-✨클로저✨"><a href="#5-✨클로저✨" class="headerlink" title="5. ✨클로저✨"></a>5. ✨클로저✨</h1><ul><li>언어적인 장치라고 생각하자.</li></ul><p><a name="5-1"></a></p><h2 id="5-1-Static-state"><a href="#5-1-Static-state" class="headerlink" title="5-1. Static state"></a>5-1. Static state</h2><img src="/images/2018/35/03.png">- 이렇게 작동하는 대표적인 언어가 C언어이다.- 루틴을 만드는 것이 **문**으로 되어있다. 자바스크립트처럼 변수에 대입할 수 있는 값이 아니다.   - 서브루틴을 값의 형태로 만들어내는 언어가 있고, 문으로 만들어내는 언어가 있다.   - 자바의 메소드는 문이다. 클래스 내부에서만 선언되어야한다. 외부에서 대입될 수 없다.- 값으로 만들 수 있으면 실행 중간에 루틴을 만들어 낼 수 있다.- 람다  - 루틴을 람다로 볼래.   - c언어의 함수포인터에서 발전해온 개념.  - 런타임에 서브루틴을 만들 수 있다.<img src="/images/2018/35/01.png">**클로저는 오직 런타임 중에 루틴을 만들 수 있는 언어에서 생겨난다.**- c에서는 static 메모리- 그렇다고 이런상황에서 모든 언어가 클로저를 생산하진 않는다..  - 언어 디자이너가 어떻게 결정했냐에 따라 다르다.- 함수를 문으로 만드는 언어의 특성<p><a name="5-2"></a></p><h2 id="5-2-Runtime-state"><a href="#5-2-Runtime-state" class="headerlink" title="5-2. Runtime state"></a>5-2. Runtime state</h2><img src="/images/2018/35/09.png"> => 우리가 짠 코드를 만나면 =><img src="/images/2018/35/10.png">- 실행 중간(런타임)에 루틴의 정의 자체가 태어난다.<img src="/images/2018/35/02.png">- 자기가 태어났을 때의 **자기가 갇혀있던 박스**를 바라볼 수 있는 여지가 생긴다.- 런타임에 루틴을 만들 수 있는 언어들은 루틴을 만들면 루틴정보 안에 자기가 어디서 태어났는지를 기록한다. => 자바스크립트에서는 **스코프**라고 정의한다.- **메인 루틴의 flow를 기억한다.** main flow가 흘러가는 상황을 알고 있다.  - flow상에 있는 아이들을 기억하게 된다.  - 노란박스에 등장하지 않는 모든 변수를 **자유변수**라고 한다.- 자유변수들은 routine과 무관하게 존재하지만 routine에서 참조할 수 있다.  - routine이 한번이라도 자유변수를 갖고오게 되면 자유변수들은 마음대로 해지되거나 조작되지 못한다. **=> routine이 물고 있기 때문**  - routine을 자유변수가 갇히는 공간이라고 할 수 있다.   - free variables close => closure- 만약 이 상황에서 F 메소드가 외부로 유출될 경우 main flow의 메모리가 다 해지되지 못한다.- 클로저는 자유변수의 클로저이다.<hr><p><a name="6"></a></p><h1 id="6-중첩-클로저-nested-closure"><a href="#6-중첩-클로저-nested-closure" class="headerlink" title="6. 중첩 클로저 nested closure"></a>6. 중첩 클로저 nested closure</h1><ul><li>클로저는 루틴만이 만들어 내는 것이 아니다.</li><li>ES6에서는 block만 주어도 스코프가 생성된다.</li><li>스코프 생성은 클로저를 만드는 행위이다.</li><li>block만 주어도 클로저가 생성된다.</li></ul><img src="/images/2018/35/11.png"><img src="/images/2018/35/12.png">- 연속적인 클로저가 탄생한다.- 중첩되어 있는 클로저를 마구마구 생성된다.<blockquote><p>위 그림을 코드로 표현한다면..</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.a = <span class="number">3</span>; <span class="comment">// main flow의 전역: global</span></span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">3</span>) &#123; <span class="comment">// 첫번째 block</span></span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="function"><span class="params">v</span> =&gt;</span> &#123; <span class="comment">// 첫번째 routine</span></span><br><span class="line">    <span class="keyword">const</span> c = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">if</span> (a +b &gt; c)&#123; <span class="comment">// 두번째 block</span></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">p</span> =&gt;</span> v + p  + a + b; </span><br><span class="line">      <span class="comment">// 두번째 routine</span></span><br><span class="line">      <span class="comment">// 자유변수를 물고 있음 =&gt; 클로저</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="params">p</span> =&gt;</span> v + p  + a + b; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><a name="7"></a> </p><h1 id="7-쉐도잉"><a href="#7-쉐도잉" class="headerlink" title="7. 쉐도잉"></a>7. 쉐도잉</h1><img src="/images/2018/35/13.png">- 층층이 중첩되어있는 클로저가 있는데 각각의 클로저에서 똑같은 이름의 변수를 소유하고 있을때 일어난다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">3</span>; <span class="comment">// main flow에 A</span></span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">3</span>)&#123; <span class="comment">// block scope</span></span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">5</span>; <span class="comment">// ?! a가 또 있음.</span></span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> a = <span class="number">7</span>; <span class="comment">// ???!! a가 또있음!!</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>쉐도잉을 지원하는 언어는 가장 가까이에 있는 클로저를 사용한다.</li><li>서브루틴이 밖에 있는 자유변수를 안건드리게 하기 위해서는(보호하기 위해서는) 쉐도잉 방식을 사용한다.<ul><li>유일한 방법은 변경하고픈 스코프의 상위에 지키고픈 변수명을 같은 변수명을 사용하여 지킨다.</li><li>위의 코드는 서브루틴에서 더 상위로 못가도록 막음<img src="/images/2018/35/14.png"></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">3</span>; <span class="comment">// main flow에 A</span></span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">3</span>)&#123; <span class="comment">// block scope</span></span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">5</span>; <span class="comment">// 보호막을 만든 개념</span></span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 서브루틴 상위의 a에 접근</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/2018/35/15.png"><hr><p><a name="8"></a></p><h1 id="8-코루틴"><a href="#8-코루틴" class="headerlink" title="8. 코루틴"></a>8. 코루틴</h1><ul><li>커맨드 패턴</li><li><strong>실행하다가 중간에 멈출 수 있지 않을까?</strong> 라는 생각에 도달함</li><li>실행하다가 중간에 멈추고 =&gt; 리턴포인트로 보내자!</li><li>main flow에서 sub routine에 갔다가 20번째에서 멈춤 =&gt; 다시 main flow로 흐름 =&gt; 또 다시 sub routine의 21번째에서 시작 =&gt; 다시 main flow로 흐름 =&gt; 또 다시 sub routine의 50번째에서 멈춤 </li><li>작성한 모든 문을 record라는 객체로 감싸서 메모리에 저장한다.</li><li>co routine &lt;-&gt; single routine</li><li>자바스크립트에서는 ES6의 제너레이터에서 가능하다.</li></ul><h3 id="일반적인-루틴"><a href="#일반적인-루틴" class="headerlink" title="일반적인 루틴"></a>일반적인 루틴</h3><ul><li>싱글루틴은 루틴이 끝까지 실행되는 것을 보장한다.</li></ul><h3 id="코루틴"><a href="#코루틴" class="headerlink" title="코루틴"></a>코루틴</h3><ul><li><p>리턴말고 <strong>yield</strong>를 사용한다. (언어마다 키워드가 다르다.) </p><blockquote><p>자바스크립트에는 C# 문법이 많이 반영되어있다. (async await도..)</p></blockquote></li><li><p>yield에서 끊어지고 리턴포인트로 돌아간다.</p></li></ul><img src="/images/2018/35/16.png"><ul><li>yield에서는 suspension(일시정지)가 일어난다.</li><li><strong>suspension</strong>: 코루틴에 의해서 멈춰있는 상태</li></ul><img src="/images/2018/35/17.png"><img src="/images/2018/35/18.png"><ul><li>suspension을 이용해서 몇번이나 진입했다가 나갔다가를 반복할 수 있다.</li><li>문인데도 불구하고 <strong><code>suspension</code></strong>를 걸 수 있다.</li></ul><h4 id="코루틴을-이용해서-좋은-점"><a href="#코루틴을-이용해서-좋은-점" class="headerlink" title="코루틴을 이용해서 좋은 점"></a>코루틴을 이용해서 좋은 점</h4><ul><li>위의 그림의 경우 3개의 함수를 콜해야하기 때문에 R2의 3가지 버전이 필요했을 것이다.<ul><li>3가지 버전의 함수들이 값을 공유해야했다면 서로 받은 값들을 인자로 넘겨줘야했을 것이다.</li><li>넘겨줘야할 인자가 많을 경우 점점 더 복잡한 로직이 되었을 것이다.</li></ul></li><li>코루틴을 이용하면 같은 메모리 내에서 <span class="mint"><strong>지역변수가 상태</strong></span>를 관리한다.<ul><li>코드가 훨씬 더 쉬워진다.</li></ul></li></ul><h4 id="루프에서-코루틴"><a href="#루프에서-코루틴" class="headerlink" title="루프에서 코루틴"></a>루프에서 코루틴</h4><ul><li>루프 내부에 yield가 있을 경우 루프가 조건이 만족할때까지 반복하는 것이 아니라 yield에서 멈추고 반환한다.</li><li>두번째로 다시 함수를 호출하면 이전에 멈췄던 반복문에서 다시 반복문이 시작하게 된다. </li><li>루프가 돌때마다 진행하게 된다.</li><li>드디어 루프를 멈출 수 있게 할 방법이 생김.</li></ul><img src="/images/2018/35/19.png"><img src="/images/2018/35/20.png"><h4 id="제너레이터"><a href="#제너레이터" class="headerlink" title="제너레이터"></a>제너레이터</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> generator = <span class="function"><span class="keyword">function</span>*(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  a++;</span><br><span class="line">  <span class="keyword">yield</span> a;</span><br><span class="line">  a++;</span><br><span class="line">  <span class="keyword">yield</span> a;</span><br><span class="line">  a++;</span><br><span class="line">  <span class="keyword">yield</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> coroutine = generator(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>제너레이터 자체는 코루틴이 아니다.</strong></li><li>제너레이터 함수는 제너레이팅 하는 함수이기 때문에 코루틴이 아니고, <span class="mint"><strong>제너레이터를 호출하는 함수의 결과값이!!</strong></span> 코루틴이다. </li><li>3은 상수인 것 처럼 코루틴이 만들어진다. 코루틴은 인자가 3인 것을 기억하고 태어난다. </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">result += coroutine().value;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><ul><li>코루틴은 iterator result object를 반환한다.<ul><li>이 오브젝트에는 <strong>done</strong>키와 <strong>result</strong>키값이 존재한다.</li><li>value에 값이 존재한다. <ul><li>yield로 출력된 값</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">result += coroutine.next().value;</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><ul><li>next()라는 메서드를 통해 전진을 시켜야한다. </li></ul><hr><p><a name="9"></a></p><h3 id="과제"><a href="#과제" class="headerlink" title="과제"></a>과제</h3><p>다음의 코드는 구구단을 출력한다.<br>이를 만족하는 제네레이터를 작성하시오.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> generator_Joy = <span class="function"><span class="keyword">function</span>*(<span class="params">i, j</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">1</span>; a &lt; i+<span class="number">1</span>; a++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> b = <span class="number">1</span>; b &lt; j+<span class="number">1</span>; b++)&#123;</span><br><span class="line">      <span class="keyword">const</span> c = a * b</span><br><span class="line">      <span class="keyword">yield</span> [ a, b, c ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> [i, j, k] <span class="keyword">of</span> generator_Joy(<span class="number">9</span>,<span class="number">9</span>))&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;i&#125;</span> x <span class="subst">$&#123;j&#125;</span> = <span class="subst">$&#123;k&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 어떤 분의 의식의 흐름</span></span><br><span class="line"><span class="keyword">const</span> generator_Aus1 = <span class="function"><span class="keyword">function</span>*(<span class="params">i, j</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">1</span>; a &lt; i ; b++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(b === j)&#123;</span><br><span class="line">      a++;</span><br><span class="line">      b=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">yield</span> [ a, b, a * b ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generator_Aus2 = <span class="function"><span class="keyword">function</span>*(<span class="params">i, j</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">1</span>; a &lt;= i ; b++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(b === j)&#123;</span><br><span class="line">      a++;</span><br><span class="line">      b=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">yield</span> [ a, b, a * b ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generator_Aus3 = <span class="function"><span class="keyword">function</span>*(<span class="params">i, j</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">1</span>; </span><br><span class="line">      a &lt;= i ; </span><br><span class="line">      b &gt;= j ? b = <span class="number">0</span> + !!(a++) : b++)&#123;</span><br><span class="line">    <span class="keyword">yield</span> [ a, b, a * b ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;🌕🌑🌑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🔥 코드스피츠 수업을 수강하면서 복습한 내용을 정리했습니다.&lt;br&gt;공부 후에는 풀어서 쉬운 언어로 설명할 수 있도록 연습하자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&quot;1&quot;&gt;
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2018 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2018-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="OOP" scheme="http://feel5ny.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>CodeSpitz78 1/ 루틴과 결합도-응집도 모델</title>
    <link href="http://feel5ny.github.io/2018/08/30/OOP_03/"/>
    <id>http://feel5ny.github.io/2018/08/30/OOP_03/</id>
    <published>2018-08-30T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.738Z</updated>
    
    <content type="html"><![CDATA[<p>🌕🌑🌑</p><blockquote><p>🔥 코드스피츠 수업을 수강하면서 복습한 내용을 정리했습니다.<br>공부 후에는 풀어서 쉬운 언어로 설명할 수 있도록 연습하자.</p></blockquote><hr><p><a name="1"></a></p><h1 id="1-Sub-Routine"><a href="#1-Sub-Routine" class="headerlink" title="1. Sub Routine"></a>1. Sub Routine</h1><p><a name="1-1"></a></p><h2 id="1-1-sub-routine-flow"><a href="#1-1-sub-routine-flow" class="headerlink" title="1-1. sub routine flow"></a>1-1. sub routine flow</h2><h3 id="flow"><a href="#flow" class="headerlink" title="flow"></a>flow</h3><ul><li>메모리에 적재되어있는 명령이 순차적으로 실행되는 과정을 의미한다.</li><li>sync라고도 한다.</li></ul><h3 id="routine"><a href="#routine" class="headerlink" title="routine"></a>routine</h3><ul><li>메모리에 적재되어있는 명령어 세트</li><li>명령어 세트를 한번만 부를 수 있으면 routine이라고 하지 않는다.</li><li>여러번 실행할수 있는 방법이 갖춰졌으면 루틴.</li></ul><h3 id="sub-rotine"><a href="#sub-rotine" class="headerlink" title="sub rotine"></a>sub rotine</h3><ul><li>main routine과 상대되는 개념</li><li>절대적인 개념이 아니다.</li><li>자식클래스 &lt;-&gt; 부모클래스</li></ul><img src="/images/2018/34/01.png" width="500"><ul><li>서브루틴을 부를 때부터 어느 포인트로 반환되는지 지정하고 부른다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routineA = <span class="function"><span class="params">b</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = b * <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routineB = <span class="function"><span class="params">d</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> result = d * <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">  <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">10</span>, d = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> a = routineA(b);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="keyword">const</span> c = routineB(d);</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br></pre></td></tr></table></figure><ul><li>루틴이 개입하게 되면 프로그램의 흐름을 일자로 읽을 수 없다.</li><li><span class="mint">루틴에 대한 개념이 flow의 통제를 다른 곳에 줬다 뺏는 거라는 사실</span></li></ul><h3 id="왜-함수라고-안하고-서브루틴-이라고-할까"><a href="#왜-함수라고-안하고-서브루틴-이라고-할까" class="headerlink" title="왜 함수라고 안하고 서브루틴 이라고 할까?"></a>왜 함수라고 안하고 서브루틴 이라고 할까?</h3><ul><li><strong>함수는 수학적인 개념에 가깝다.</strong></li><li>flow를 컨트롤할 때 어떤 일이 일어나는지 알고 싶은 것.</li><li>이 관점에서는 함수를 function이라고 하지 않고 <code>routine</code>이라고 부른다.</li></ul><h3 id="Arrow-function"><a href="#Arrow-function" class="headerlink" title="Arrow function"></a>Arrow function</h3><blockquote><p>참고 : <a href="http://webframeworks.kr/tutorials/translate/arrow-function/" target="_blank" rel="noopener">http://webframeworks.kr/tutorials/translate/arrow-function/</a></p></blockquote><p><a name="1-2"></a></p><h2 id="1-2-communicate-with-routine"><a href="#1-2-communicate-with-routine" class="headerlink" title="1-2. communicate with routine"></a>1-2. communicate with routine</h2><ul><li>main flow와 routine사이에 통신이라는 것을 한다.</li><li>통신을 할 수 있는 매커니즘이 존재하는데, 이 매커니즘은 <code>인자</code>와 <code>리턴</code>이라고 알고 있다.</li><li>자바스크립트에서는 return 없는 루틴은 없다.</li></ul><img src="/images/2018/34/02.png" width="500">### 자바스크립트는 LR 파서를 사용한다.- 자바스크립트로 작성된 파일을 파싱할 때 사용하는 방법- 왼쪽에서 오른쪽, 위에서 아래로 파싱- 할당은 RL 파서이다.  - 수학적인 컨텍스트로 정의되어있다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routineA= <span class="function"><span class="params">arg</span> =&gt;</span> &#123; </span><br><span class="line">  <span class="keyword">const</span> result = arg * <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">10</span>, c = <span class="number">20</span>, d = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> a = routineA(b) + routineA(c) + routineA(d);</span><br></pre></td></tr></table></figure><h3 id="덧셈-연산자에는-메모리가-필요하다"><a href="#덧셈-연산자에는-메모리가-필요하다" class="headerlink" title="덧셈 연산자에는 메모리가 필요하다."></a>덧셈 연산자에는 메모리가 필요하다.</h3><ul><li>갔다와서 들온 값을 기억하지 못하면 그다음 값이 들어올때까지 연산을 진행시킬 수 없다.</li><li>연산은 메모리를 만들어내고, 메모리가 연산이 해소될때까지 해제되지 않는다.</li><li>더하기 제거와 연산자 제거가 꼬리물기 최적화의 핵심이 된다.</li><li>연산이 꼬리물기 최적화에 방해를 된다.</li><li>연산이 계속 스택 메모리를 생산해 낸다.</li></ul><p><a name="1-3"></a></p><h2 id="1-3-sub-routine-in-sub-routine"><a href="#1-3-sub-routine-in-sub-routine" class="headerlink" title="1-3. sub routine in sub routine"></a>1-3. sub routine in sub routine</h2><img src="/images/2018/34/03-0.png" width="500">- 루틴A에서 루틴B가 호출될때 루틴A에서는 <span class="mint">keep</span>이 이루어진다. 메모리를 기억하는 행위. 스냅샷으로 기억해둔다.- 루틴B가 진행되고 루틴A로 반환되면 keep은 사라진다.<img src="/images/2018/34/03-1.png" width="500"><p>코드로 표현하면</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routineA = <span class="function"><span class="params">arg</span> =&gt;</span> routineB(arg * <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> routineB = <span class="function"><span class="params">arg</span> =&gt;</span> arg * <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> a = routineA(b);</span><br></pre></td></tr></table></figure><h3 id="스택메모리-콜스택"><a href="#스택메모리-콜스택" class="headerlink" title="스택메모리, 콜스택"></a>스택메모리, 콜스택</h3><p>극단적인 예<br><img src="/images/2018/34/04.png" width="500"></p><ul><li>R6에 도달하기위해 5개의 메모리를 기억해야한다.</li><li>콜스택, 함수의 스택메모리라고 부른다.</li><li>자바에서는 메모리를 1000개까지 잡을 수 있도록 도와주고, 자바스크립트에서는 100번만 하라고..</li><li>브라우저마다 콜스택 지원이 다르다. </li><li>스택이 너무 넘처서 죽는 상황 : stackoverflow</li></ul><p>코드로 표현하면</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> r1 = <span class="function"><span class="params">a</span> =&gt;</span> r2(a * <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> r2 = <span class="function"><span class="params">a</span> =&gt;</span> r3(a * <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> r3 = <span class="function"><span class="params">a</span> =&gt;</span> r4(a * <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> r4 = <span class="function"><span class="params">a</span> =&gt;</span> r5(a * <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> r5 = <span class="function"><span class="params">a</span> =&gt;</span> r6(a * <span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> r6 = <span class="function"><span class="params">a</span> =&gt;</span> a * <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> a = r1(b);</span><br></pre></td></tr></table></figure><img src="/images/2018/34/05.png" width="500"><img src="/images/2018/34/06.png" width="500"><blockquote><p><strong>서브루틴 안에 서브루틴이 들어가면 기본적으로 이런 일이 일어난다.</strong></p></blockquote><p><a name="1-4"></a></p><h2 id="1-4-Value-vs-Reference-값과-참조"><a href="#1-4-Value-vs-Reference-값과-참조" class="headerlink" title="1-4. Value vs Reference 값과 참조"></a>1-4. Value vs Reference 값과 참조</h2><p>값은 메모리상에서 전달할 때마다 <strong>복사되는 형태</strong>,참조는 메모리상에서 공유된 객체의 <strong>포인터만 전달되는 형식</strong></p><img src="/images/2018/34/07.png" width="500"><span class="mint">POINT</span>- 값이 넘어가면 복사된 값이 넘어가기 때문에 해당 루틴에서 값이 변화가 일어나도 main flow에서는 값에 영향을 주지 않는다.- 루틴에서 return 되는 값도 복사본이 넘어가기 때문에 main flow는 새로운 복사본을 받게 되는 개념이다.- 즉, main flow와 루틴 사이에는 **의존성이 낮아진다.**- **값의 정의는 언어마다 다르다.**  - 문자열은 자바스크립트에서 값이지만 자바에서는 참조로 정의되고 있다.  - 자바스크립트는 6개(es6 기준: number, string, boolean, undefined, null, symbol)<img src="/images/2018/34/08.png" width="500">- 하나의 루틴이 여러 flow를 상대하고 있어도 아무 문제가 생기지 않는다.   - 복사본만 주고받기 때문에> 상태안정이라고 부른다. **State safe**  - 수학적 프로그래밍의 기반이 된다.  - 값을 컨택스트로 해서 함수형 프로그래밍을 하려고 한다.  - 어디에서 누가 몇번을 부르던 상관없다.  - 완전 수학적 함수라고 한다. - 때문에 처음 함수를 작성할 때 인자를 값으로 넘기는지부터 확인해보면 안전한 함수를 짤 수 있다. <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routine = <span class="function"><span class="params">a</span> =&gt;</span> a*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> flow1 = <span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">10</span>, d = <span class="number">20</span>;</span><br><span class="line">  <span class="keyword">const</span> a = routine(b);</span><br><span class="line">  <span class="keyword">const</span> c = routine(c);</span><br><span class="line">  <span class="keyword">return</span> a + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> flow2 = <span class="function"><span class="params">_</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">30</span>, d = <span class="number">40</span>;</span><br><span class="line">  <span class="keyword">const</span> a = routine(b);</span><br><span class="line">  <span class="keyword">const</span> c = routine(c);</span><br><span class="line">  <span class="keyword">return</span> a + c;</span><br><span class="line">&#125;</span><br><span class="line">flow1();</span><br><span class="line">flow2();</span><br></pre></td></tr></table></figure><h3 id="상황1-참조로-넘겼을-때-참조값을-바꾸는-상황"><a href="#상황1-참조로-넘겼을-때-참조값을-바꾸는-상황" class="headerlink" title="상황1: 참조로 넘겼을 때 참조값을 바꾸는 상황"></a>상황1: 참조로 넘겼을 때 참조값을 바꾸는 상황</h3><img src="/images/2018/34/10.png" width="500"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routine = <span class="function"><span class="params">ref</span> =&gt;</span> [<span class="string">'a'</span>,<span class="string">'b'</span>].reduce(</span><br><span class="line">  (p,c) =&gt; &#123; </span><br><span class="line">    <span class="comment">// p는 콜백의 반환값, 초기값이 있을 경우 그값, 또는 콜백의 마지막 호출에서 이전에 반환된 누적값,</span></span><br><span class="line">    <span class="comment">// c는 배열 내 현재 처리되고 있는 요소.</span></span><br><span class="line">  <span class="keyword">delete</span> p[c];</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;, ref);</span><br><span class="line"><span class="keyword">const</span> ref = &#123;<span class="attr">a</span>:<span class="number">3</span>, <span class="attr">b</span>:<span class="number">4</span>, <span class="attr">c</span>:<span class="number">5</span>, <span class="attr">d</span>:<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> a = routine(ref);</span><br><span class="line">ref === a <span class="comment">// true </span></span><br><span class="line"><span class="comment">// 하나의 객체를 참조하고 있으므로.</span></span><br></pre></td></tr></table></figure><ul><li>잘 통제할 수 없으면 복잡해지는 로직이다.</li></ul><h3 id="상황2-참조로-넘겼을-때-참조값을-readOnly로만"><a href="#상황2-참조로-넘겼을-때-참조값을-readOnly로만" class="headerlink" title="상황2: 참조로 넘겼을 때 참조값을 readOnly로만"></a>상황2: 참조로 넘겼을 때 참조값을 readOnly로만</h3><img src="/images/2018/34/11.png" width="500"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routine = <span class="function">(<span class="params">&#123;a, b, ...rest&#125;</span>) =&gt;</span> rest; </span><br><span class="line"><span class="comment">// spread 문법</span></span><br><span class="line"><span class="comment">// 새로운 객체가 반환된다.</span></span><br><span class="line"><span class="keyword">const</span> ref = &#123;<span class="attr">a</span>:<span class="number">3</span>, <span class="attr">b</span>:<span class="number">4</span>, <span class="attr">c</span>:<span class="number">5</span>, <span class="attr">d</span>:<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> a = routine(ref);</span><br><span class="line">ref !== a <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>spread 문법 (참고: <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Operators/Spread_syntax</a>)</p></blockquote><ul><li><span class="mint">웬만하면 <strong>reference를 인자로 넘기지 말고</strong>, 넘길수 밖에 없다면 readonly로 사용해라!! </span></li><li>그래야 함수의 side effect 효과를 줄일 수 있다.</li></ul><h3 id="상황3-지역변수에-객체가-있거나-리턴값이-객체인-경우"><a href="#상황3-지역변수에-객체가-있거나-리턴값이-객체인-경우" class="headerlink" title="상황3: 지역변수에 객체가 있거나, 리턴값이 객체인 경우"></a>상황3: 지역변수에 객체가 있거나, 리턴값이 객체인 경우</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routine = <span class="function"><span class="params">ref</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> local = ref; <span class="comment">// 지역변수에 참조본을 담았다.</span></span><br><span class="line">  local.e = <span class="number">7</span>; <span class="comment">// ref 객체의 e에 7이 할당됨, 변화됨..</span></span><br><span class="line">  <span class="keyword">return</span> local;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ref = &#123;<span class="attr">a</span>:<span class="number">3</span>, <span class="attr">b</span>:<span class="number">4</span>, <span class="attr">c</span>:<span class="number">5</span>, <span class="attr">d</span>:<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> a = routine(ref);</span><br><span class="line">ref === a <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>로컬이나 리턴할때도 <strong>새로운 객체를 만들어서 반환해주자!!!</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routine = <span class="function"><span class="params">ref</span> =&gt;</span> (&#123;...ref, <span class="attr">e</span>:<span class="number">7</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> ref = &#123;<span class="attr">a</span>:<span class="number">3</span>, <span class="attr">b</span>:<span class="number">4</span>, <span class="attr">d</span>:<span class="number">5</span>, <span class="attr">d</span>:<span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> a = routine(ref);</span><br><span class="line">ref !== a <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>spread연산자는 순서에 영향이 있다.<br>이전에는 hash map이였는데, linked hash map이됨.<br>객체를 넣는 순서가 보장이 된다.</p></blockquote><hr><p><a name="2"></a></p><h1 id="2-Structured-design"><a href="#2-Structured-design" class="headerlink" title="2. Structured design"></a>2. Structured design</h1><h2 id="높은-응집도-낮은-결합도-High-Cohesion-Loose-Coupling"><a href="#높은-응집도-낮은-결합도-High-Cohesion-Loose-Coupling" class="headerlink" title="높은 응집도, 낮은 결합도 High Cohesion, Loose Coupling"></a>높은 응집도, 낮은 결합도 High Cohesion, Loose Coupling</h2><p>Larry constantine_ Structured design</p><ul><li>어떤 함수 내부의 코드가 높은 응집도를 갖는다?<ul><li>하나의 함수로 여러가지 처리를 할 수 있다.</li></ul></li><li>결합도가 높다?<ul><li>의존성이 높다.</li></ul></li></ul><blockquote><p><strong>좋은 서브루틴이란 높은 응집도와 낮은 결합도를 갖도록 짜야한다!</strong></p></blockquote><img src="/images/2018/34/12.jpg" width="500"><p><a name="2-1"></a></p><h2 id="2-1-결합도-coupling-👎👌👍"><a href="#2-1-결합도-coupling-👎👌👍" class="headerlink" title="2-1. 결합도 coupling 👎👌👍"></a>2-1. 결합도 coupling 👎👌👍</h2><h3 id="Content-👎-초강결합"><a href="#Content-👎-초강결합" class="headerlink" title="Content (👎 초강결합)"></a>Content (👎 초강결합)</h3><p>A클래스 속성v가 변경되면 즉시 B클래스가 깨짐</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(v)&#123;</span><br><span class="line">    <span class="keyword">this</span>.v = v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> B = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(a)&#123;</span><br><span class="line">    <span class="keyword">this</span>.v = a.v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> B(<span class="keyword">new</span> A(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><ul><li>A와 B는 content coupling하고 있다. </li></ul><h3 id="Common-👎-초강결합"><a href="#Common-👎-초강결합" class="headerlink" title="Common (👎 초강결합)"></a>Common (👎 초강결합)</h3><p>Common클래스 변경 시 즉시 A,B클래스가 깨짐</p><ul><li>Common은 전역객체 혹은 공유객체</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Common = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(v)&#123;</span><br><span class="line">    <span class="keyword">this</span>.v = v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> A = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(c)&#123;</span><br><span class="line">    <span class="keyword">this</span>.v = c.v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> B = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(c)&#123;</span><br><span class="line">    <span class="keyword">this</span>.v = c.v;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> A(<span class="keyword">new</span> Common(<span class="number">3</span>));</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> B(<span class="keyword">new</span> Common(<span class="number">5</span>));</span><br></pre></td></tr></table></figure><h3 id="External-👎-초강결합"><a href="#External-👎-초강결합" class="headerlink" title="External (👎 초강결합)"></a>External (👎 초강결합)</h3><p>A, B 클래스는 외부의 정의에 의존함.<br>member의 json 구조가 변경되면 깨짐.</p><ul><li>나쁘지만 회피할 방법이 없다.</li><li>주로 외부에서 주어지는 객체</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(member)&#123;</span><br><span class="line">    <span class="keyword">this</span>.v = member.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> B = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(member)&#123;</span><br><span class="line">    <span class="keyword">this</span>.v = member.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fetch(<span class="string">'/memger'</span>)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> res.json())</span><br><span class="line">.then(<span class="function"><span class="params">member</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="keyword">new</span> A(member);</span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">new</span> B(member);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>A와 B 클래스는 member json 스팩에 의존해있다.<ul><li>때문에 api 문서들이 존재한다.</li></ul></li><li>방법은 관리를 잘해야한다…<ul><li>분기를 잘 태워주는 방법..</li></ul></li></ul><h3 id="Control-👎-초강결합"><a href="#Control-👎-초강결합" class="headerlink" title="Control (👎 초강결합)"></a>Control (👎 초강결합)</h3><p>A클래스 내부의 변화는 B 클래스의 오작동을 유발</p><ul><li>회피할 수 있는 방법이 생겼다.</li><li>루틴에게 직접적인 대상을 주지 않고 힌트를 주는 현상.</li><li>class A가 변경될 경우 B가 깨진다. </li><li>control 변수들 때문에..(case의 값들)</li><li><strong>팩토리 패턴</strong>이 이런 이슈가 자주 일어난다.</li><li><strong>전략패턴으로 바꾸면 해결 가능</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  process(flag, v)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(flag)&#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> <span class="keyword">this</span>.run1(v);</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> <span class="keyword">this</span>.run2(v);</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> <span class="keyword">this</span>.run3(v);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> B = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(a)&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a;</span><br><span class="line">  &#125;</span><br><span class="line">  noop() &#123;</span><br><span class="line">    <span class="keyword">this</span>.a.process(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  echo(data)&#123;</span><br><span class="line">    <span class="keyword">this</span>.a.process(<span class="number">2</span>, data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> B(<span class="keyword">new</span> A());</span><br><span class="line">b.noop();</span><br><span class="line">b.echo(<span class="string">"test"</span>);</span><br></pre></td></tr></table></figure><h3 id="Stamp-👎👌-유사약결합"><a href="#Stamp-👎👌-유사약결합" class="headerlink" title="Stamp (👎👌 유사약결합)"></a>Stamp (👎👌 유사약결합)</h3><ul><li>A와 B는 ref로 통신함.</li><li>ref에 의한 모든 문제가 발생할 수 있음.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  add(data)&#123;</span><br><span class="line">    data.count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// data 전체를 받을 필요가 없고 count만 받았어야 한다.</span></span><br><span class="line">  <span class="comment">// 넓은 범위로 받게 됨.</span></span><br><span class="line">  <span class="comment">// count라는 변수명이 바뀌면 다 바뀌어야한다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> B = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(counter)&#123;</span><br><span class="line">    <span class="keyword">this</span>.counter = counter;</span><br><span class="line">    <span class="keyword">this</span>.data = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">count</span>:<span class="number">0</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  count() &#123;</span><br><span class="line">    <span class="comment">// 필요한 값만 내려주자.</span></span><br><span class="line">    <span class="keyword">this</span>.counter.add(<span class="keyword">this</span>.data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> B(<span class="keyword">new</span> A());</span><br><span class="line"></span><br><span class="line">b.count();</span><br><span class="line">b.count();</span><br></pre></td></tr></table></figure><h3 id="Data-👌-약결합"><a href="#Data-👌-약결합" class="headerlink" title="Data (👌 약결합)"></a>Data (👌 약결합)</h3><ul><li>A와 B는 value로 통신함 (값)</li><li>모든 결합문제에서는 자유로워짐</li><li>data coupling만 생김.</li><li><span class="mint"><strong>reference</strong>로 대화하게 되면 coupling이 높아진다.</span></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  add(count)&#123;</span><br><span class="line">    <span class="keyword">return</span> count + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> B = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(counter)&#123;</span><br><span class="line">    <span class="keyword">this</span>.counter = counter;</span><br><span class="line">    <span class="keyword">this</span>.data = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">count</span>:<span class="number">0</span>&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  count()&#123;</span><br><span class="line">    <span class="keyword">this</span>.data.count = <span class="keyword">this</span>.counter.add(<span class="keyword">this</span>.data.count)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> B(<span class="keyword">new</span> A())</span><br><span class="line">b.count();</span><br><span class="line">b.count();</span><br></pre></td></tr></table></figure><p><a name="2-2"></a></p><h2 id="2-2-응집도-cohesion-👎👌👍"><a href="#2-2-응집도-cohesion-👎👌👍" class="headerlink" title="2-2. 응집도 cohesion 👎👌👍"></a>2-2. 응집도 cohesion 👎👌👍</h2><h3 id="Coincidental-우연히-👎"><a href="#Coincidental-우연히-👎" class="headerlink" title="Coincidental 우연히 👎"></a>Coincidental 우연히 👎</h3><ul><li>우연히 모여 있는..</li><li>아무런 관계가 없음.</li><li>다양한 이유로 수정됨</li><li>있는줄 모르고 또 만들게 된다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Util = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> isConnect()&#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> log()&#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> isLogin()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Logical-👌"><a href="#Logical-👌" class="headerlink" title="Logical 👌"></a>Logical 👌</h3><ul><li><strong>사람이 인지할 수 있는</strong> 논리적 집합.</li><li>언제나 일부만 사용됨.</li><li>주관적인 묶음..</li><li>도메인이 더 일반적이거나, 특수할 경우만!!</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Math</span> = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> sin(r)&#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> cos(r)&#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> random()&#123;&#125;</span><br><span class="line">  <span class="keyword">static</span> sqrt(v)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Temporal-시간의-순서-👌"><a href="#Temporal-시간의-순서-👌" class="headerlink" title="Temporal 시간의 순서 👌"></a>Temporal 시간의 순서 👌</h3><ul><li>시점을 기준으로 관계없는 로직을 묶음.</li><li>관계가 아니라 <strong>코드의 순서가 실행</strong>을 결정.</li><li>역할에 맞는 함수에게 위임해야 함.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> App = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  init()&#123;</span><br><span class="line">    <span class="keyword">this</span>.db.init();</span><br><span class="line">    <span class="keyword">this</span>.net.init();</span><br><span class="line">    <span class="keyword">this</span>.asset.init();</span><br><span class="line">    <span class="keyword">this</span>.ui.start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Procedural-👌"><a href="#Procedural-👌" class="headerlink" title="Procedural 👌"></a>Procedural 👌</h3><ul><li>절차적 순서</li><li>외부에 반복되는 흐름을 대체하는 경우.</li><li>순서 정책 변화에 대응불가.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Account = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  login()&#123;</span><br><span class="line">    p = <span class="keyword">this</span>.ptoken(); <span class="comment">// permanet token</span></span><br><span class="line">    s = <span class="keyword">this</span>.stoken(p); <span class="comment">// session token</span></span><br><span class="line">    <span class="keyword">if</span>(!s) <span class="keyword">this</span>.newLogin();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">this</span>.auth(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Communicational-👌"><a href="#Communicational-👌" class="headerlink" title="Communicational 👌"></a>Communicational 👌</h3><ul><li>하나의 구조에 대해 다양한 작업이 모여있음.</li><li>역할에 맞게 묶음. </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Array</span> = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  push(v)&#123;&#125;</span><br><span class="line">  pop()&#123;&#125;</span><br><span class="line">  shift()&#123;&#125;</span><br><span class="line">  unshift(v)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sequential"><a href="#Sequential" class="headerlink" title="Sequential"></a>Sequential</h3><ul><li>실행순서가 밀접하게 관계되며 같은 자료를 공유하거나 출력결과가 연계됨</li><li>chaining 되고 있는 함수 메서드.</li><li>Procedural + Communicational 개념</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Account = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  ptoken()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.pk || (<span class="keyword">this</span>.pk = IO.cookie.get(<span class="string">"ptoken"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  stoken()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.sk) <span class="keyword">return</span> <span class="keyword">this</span>.sk;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.pk)&#123;</span><br><span class="line">      <span class="keyword">const</span> sk = Net.getSessionFromPtoken(<span class="keyword">this</span>.pk);</span><br><span class="line">      sk.then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="keyword">this</span>.sk);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  auth()&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.isLogin) <span class="keyword">return</span>;</span><br><span class="line">    Net.auth(<span class="keyword">this</span>.sk).then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="keyword">this</span>.isLogin);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Functional-👍"><a href="#Functional-👍" class="headerlink" title="Functional 👍"></a>Functional 👍</h3><ul><li>역할모델에 충실하게 단일한 기능이 의존성 없이 생성된 경우</li><li>앞으로 수업시간에 배워야할 부분</li></ul><h2 id="결합도와-응집도의-조화"><a href="#결합도와-응집도의-조화" class="headerlink" title="결합도와 응집도의 조화"></a>결합도와 응집도의 조화</h2><p>높은 응집성을 갖게 되면 높은 커플링은 갖게된다.<br><strong>결합도와 응집도의 조화</strong>를 목표로 로직을 짜야한다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;🌕🌑🌑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🔥 코드스피츠 수업을 수강하면서 복습한 내용을 정리했습니다.&lt;br&gt;공부 후에는 풀어서 쉬운 언어로 설명할 수 있도록 연습하자.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&quot;1&quot;&gt;
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2018 CodeSpitz" scheme="http://feel5ny.github.io/categories/02-WorkShop/2018-CodeSpitz/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="OOP" scheme="http://feel5ny.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>4/ 함수와 프로토타입 체이닝 (2)</title>
    <link href="http://feel5ny.github.io/2018/08/25/JS_16/"/>
    <id>http://feel5ny.github.io/2018/08/25/JS_16/</id>
    <published>2018-08-25T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.464Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📒 인사이드 자바스크립트 중 메모해야할 부분만 적었습니다.</p></blockquote><hr><p><a name="4"></a></p><h1 id="4-함수-호출과-this"><a href="#4-함수-호출과-this" class="headerlink" title="4. 함수 호출과 this"></a>4. 함수 호출과 this</h1><ul><li>함수호출시 암묵적으로 arguments 객체와 this인자가 전달된다.</li></ul><p><a name="4-1"></a></p><h2 id="4-1-arguments-객체"><a href="#4-1-arguments-객체" class="headerlink" title="4.1 arguments 객체"></a>4.1 arguments 객체</h2><ul><li><span class="mint">유사배열 <strong>객체</strong></span></li><li>정의된 함수의 인자보다 적게 함수를 호출할 경우 넘겨지지 않은 인자는 <strong>undefined</strong></li><li>함수 코드를 작성할 때, 런타임 시에 호출된 인자의 개수를 확인하고 이에 따라 동작을 다르게 해줘야 할 경우가 있다. arguments 객체가 그 역할을 한다. </li><li>함수가 호출될 당시의 인자들에 배열 형태로 접근할 수 있다.</li></ul><img src="/images/2018/32/arguments.png">- 함수 호출할 때 넘겨진 인자 (배열형태)- length : 인자갯수- callee : 현재 실행 중인 함수의 참조값<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">    result += <span class="built_in">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">// 6</span></span><br><span class="line">sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>); <span class="comment">// 45</span></span><br></pre></td></tr></table></figure><p><a name="4-2"></a></p><h2 id="4-2-호출패턴과-this-바인딩"><a href="#4-2-호출패턴과-this-바인딩" class="headerlink" title="4.2 호출패턴과 this 바인딩"></a>4.2 호출패턴과 this 바인딩</h2><p>함수가 호출되는 방식<span class="mint">(호출패턴)</span>에 따라 this가 다른 객체를 참조한다.(this 바인딩)</p><ul><li>객체의 메서드 호출할 때 this바인딩</li><li>함수 호출할 때 this바인딩</li><li>생성자 함수를 호출할 때 this 바인딩</li><li></li></ul><h3 id="4-2-1-객체의-메서드-호출할-때-this바인딩"><a href="#4-2-1-객체의-메서드-호출할-때-this바인딩" class="headerlink" title="4.2.1 객체의 메서드 호출할 때 this바인딩"></a>4.2.1 객체의 메서드 호출할 때 this바인딩</h3><p><span class="mint"><strong>자신을 호출한 객체</strong>에 바인딩된다!</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = &#123;</span><br><span class="line">  name: <span class="string">'foo'</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// sayName은 function()&#123;console.log(this.nmae)&#125;을 가리킴</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> otherObject = &#123;</span><br><span class="line">  name: <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">otherObject.sayName = myObject.sayName;</span><br><span class="line"><span class="comment">// myObject.sayName의 참조값을 할당함.</span></span><br><span class="line"><span class="comment">// otherObject.sayName은 생성과 동시에 function()&#123;console.log(this.nmae)&#125;을 가리킴</span></span><br><span class="line"><span class="comment">// this는 자신을 호출한 객체에 바인딩되므로, 결과값이 다름</span></span><br><span class="line">myObject.sayName(); <span class="comment">// foo</span></span><br><span class="line">otherObject.sayName(); <span class="comment">//bar</span></span><br></pre></td></tr></table></figure><h3 id="4-2-2-함수-호출할-때-this바인딩"><a href="#4-2-2-함수-호출할-때-this바인딩" class="headerlink" title="4.2.2 함수 호출할 때 this바인딩"></a>4.2.2 함수 호출할 때 this바인딩</h3><p>자바스크립트의 모든 전역 변수는 전역 객체의 프로퍼티들이다.<br>(브라우저는 window, node는 global)</p><ul><li>함수 내부에서의 this는 전역 객체를 가리킨다.</li><li>내부 함수에서도 this는 전역 객체를 가리킨다. </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> myObject = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  func1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'func1()'</span> + <span class="keyword">this</span>.value); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    func2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.value += <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'func2()'</span> + <span class="keyword">this</span>.value); <span class="comment">// 101</span></span><br><span class="line"></span><br><span class="line">      func3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value += <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'func3()'</span> + <span class="keyword">this</span>.value); <span class="comment">// 102</span></span><br><span class="line">      &#125;</span><br><span class="line">      func3();</span><br><span class="line">    &#125;</span><br><span class="line">    func2();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">myObject.func1();</span><br></pre></td></tr></table></figure><img src="/images/2018/32/02.jpeg"><p><span class="mint">부모함수의 this를 내부 함수가 접근 가능한 <strong>다른변수에 저장하는 방법이 사용된다.</strong></span></p><ul><li>보통 관례상 this값을 저장하는 변수의 이름을 <strong>that</strong>이라고 짓는다. </li><li>명시적으로 bind를 사용할 수도 있다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> myObject = &#123;</span><br><span class="line">  value: <span class="number">1</span>,</span><br><span class="line">  func1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.value += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'func1()'</span> + <span class="keyword">this</span>.value); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> _func2 = func2.bind(<span class="keyword">this</span>)</span><br><span class="line">    func2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      that.value += <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'func2()'</span> + that.value); <span class="comment">// 101</span></span><br><span class="line"></span><br><span class="line">      func3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        that.value += <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'func3()'</span> + that.value); <span class="comment">// 102</span></span><br><span class="line">      &#125;</span><br><span class="line">      func3();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// const _func2 = func2.bind(this)</span></span><br><span class="line">    <span class="comment">// _func2();</span></span><br><span class="line">    func2();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">myObject.func1();</span><br></pre></td></tr></table></figure><img src="/images/2018/32/03.jpeg"><h3 id="4-2-3-생성자-함수를-호출할-때-this-바인딩"><a href="#4-2-3-생성자-함수를-호출할-때-this-바인딩" class="headerlink" title="4.2.3 생성자 함수를 호출할 때 this 바인딩"></a>4.2.3 생성자 함수를 호출할 때 this 바인딩</h3><p>객체를 생성하는 방법</p><ul><li>객체 리터럴 방식</li><li>Object() 생성자 함수</li><li>생성자 함수 이용</li></ul><p><strong>기존 함수에 new 연산자를 붙여서 호출</strong>하면 해당 함수는 생성자 함수로 동작한다.<br>일반 함수에 new를 붙여 호출하면 원치 않는 생성자 함수처럼 동작할 수 있다.<br>특정함수가 생성자 함수로 정의되어 있음을 알리려고 <strong>함수 이름의 첫 문자를 대문자로 쓴다.</strong></p><p>생성자 함수에서의 this는 함수호출방식의 this 바인딩과 다르게 동작한다.<br>이를 이해하기 위해 생성자 함수의 동작방식을 이해하면 된다!</p><h4 id="1-생성자-함수가-동작하는-방식"><a href="#1-생성자-함수가-동작하는-방식" class="headerlink" title="1. 생성자 함수가 동작하는 방식"></a>1. 생성자 함수가 동작하는 방식</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Person(<span class="string">'foo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(foo.name); <span class="comment">// foo</span></span><br></pre></td></tr></table></figure><blockquote><p>위 의 예시를 토대로 설명</p></blockquote><ol><li>빈 객체 생성 및 this 바인딩</li></ol><ul><li>빈 객체가 생성된다.</li><li>new Person()을 통해서<ul><li>빈 객체는 this로 바인딩된다. 즉, 생성자 함수 내의 this는 빈 객체를 가리킨다.</li><li>빈 객체에는 기본적으로 [[Prototype]]이 생성된다.</li><li>이 <code>__proto__</code>는 <span class="mint">자신을 생성한 <strong>생성자 함수</strong><code>Person()</code>의 prototype 프로퍼티가 가리키는 객체를 </span><br>자신의 프로토타입 객체로 설정한다.</li></ul></li></ul><ol start="2"><li>this를 통한 프로퍼티 생성<ul><li>함수코드 내부에서 this를 통해 foo에 동적으로 프로퍼티나 메서드를 생성할 수 있다.</li></ul></li><li>생성된 객체 리턴<ul><li></li></ul></li></ol><img src="/images/2018/32/01.png"><h4 id="2-객체-리터럴-방식과-생성자-함수를-통한-객체-생성-방식의-차이"><a href="#2-객체-리터럴-방식과-생성자-함수를-통한-객체-생성-방식의-차이" class="headerlink" title="2. 객체 리터럴 방식과 생성자 함수를 통한 객체 생성 방식의 차이"></a>2. 객체 리터럴 방식과 생성자 함수를 통한 객체 생성 방식의 차이</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'foo'</span>,</span><br><span class="line">  age: <span class="number">35</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = <span class="keyword">new</span> Person(<span class="string">'bar'</span>, <span class="number">33</span>);</span><br><span class="line"><span class="keyword">const</span> baz = <span class="keyword">new</span> Person(<span class="string">'baz'</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure><img src="/images/2018/32/04.png" width="500"><h4 id="3-생성자-함수를-new를-붙이지-않고-호출할-경우"><a href="#3-생성자-함수를-new를-붙이지-않고-호출할-경우" class="headerlink" title="3. 생성자 함수를 new를 붙이지 않고 호출할 경우"></a>3. 생성자 함수를 new를 붙이지 않고 호출할 경우</h4><ul><li>객체 생성을 목적으로 작성한 생성자 함수를<br>new 없이 호출하거나 일반함수를 new를 붙여서 호출할 경우 오류 발생</li><li>일반 함수 호출과 생성자 함수를 호출할 때 this 바인딩 방식이 다르기 때문</li></ul><ul><li>일반함수의 경우 <span class="mint">this =&gt; <strong>window</strong></span><br>생성자함수의 경우 <span class="mint">this =&gt; <strong>새로 생성되는 빈 객체</strong></span></li></ul><p>대문자 표기 네이밍 규칙을 권장하나 휴먼에러가 발생 할 수 있기 때문에 다음과 같은 분기문이 있는 코드 패턴을 사용하기도 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 강제로 인스턴스 생성하기</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">arg</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> <span class="built_in">arguments</span>.callee))</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> A(arg);</span><br><span class="line">  <span class="keyword">this</span>.value = arg? arg : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-4-call과-apply-메서드를-이용한-명시적인-this-바인딩"><a href="#4-2-4-call과-apply-메서드를-이용한-명시적인-this-바인딩" class="headerlink" title="4.2.4 call과 apply 메서드를 이용한 명시적인 this 바인딩"></a>4.2.4 call과 apply 메서드를 이용한 명시적인 this 바인딩</h3><p>내부적인 this 바인딩 이외에도<br>this를 특정 객체에 명시적으로 바인딩 시키는 방법</p><ul><li>apply()</li><li>call()<blockquote><p>함수의 부모 객체인 Function.prototype 객체의 메서드들이다.</p></blockquote></li></ul><p><strong>apply()메서드를 호출하는 주체가 <span class="mint">함수</span>고,<br>apply() 메서드도 this를 특정 객체에 바인딩할 뿐<br>결국 본질적인 기능은 <span class="mint">함수호출</span>이라는 것이다.</strong></p><ul><li>Person()이라는 함수가 있고, Person.apply() 이렇게 호출한다면 이것의 기본적인 기능은 Person() 함수를 호출하는 것이다. </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function.apply(thisArg, argArray)</span><br><span class="line">function.call(thisArg, argItem1, argItem2, argItem3, ...)</span><br></pre></td></tr></table></figure><p><span class="mint"><code>function</code>을 호출하라, 이때 <strong>this</strong>는 <code>thisArg</code>에 바인딩해라.</span></p><ul><li>thisArg : apply를 호출한 함수 내부에서 사용한 this에 바인딩할 <strong>객체</strong></li><li>argArray: 인자배열</li><li>call : call은 인자를 각각 넘긴다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> foo = &#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.apply(foo, [<span class="string">'foo'</span>, <span class="number">30</span>, <span class="string">'main'</span>]);</span><br><span class="line"><span class="comment">// Person 메서드를 호출해라, 이때 this는 foo객체에 바인딩해라.</span></span><br><span class="line"><span class="comment">// 명시적인 바인딩</span></span><br></pre></td></tr></table></figure><p>유사배열 객체에서 사용하는 경우</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.dir(<span class="built_in">arguments</span>); <span class="comment">// __proto__는 Object</span></span><br><span class="line">  <span class="comment">// arguments.shift() // 에러</span></span><br><span class="line">  <span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.apply(<span class="built_in">arguments</span>);</span><br><span class="line">  <span class="built_in">console</span>.dir(args); <span class="comment">// __proto__는 Array</span></span><br><span class="line">&#125;</span><br><span class="line">A(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>Array.prototype.slice를 호출하라, 이때 Array.prototype.slice의 this는 arguments 객체로 바인딩하라.</p><p><a name="4-3"></a></p><h2 id="4-3-함수리턴"><a href="#4-3-함수리턴" class="headerlink" title="4.3 함수리턴"></a>4.3 함수리턴</h2><h3 id="일반-함수나-메서드는-리턴값을-지정하지-않을-경우-undefined-값이-리턴된다"><a href="#일반-함수나-메서드는-리턴값을-지정하지-않을-경우-undefined-값이-리턴된다" class="headerlink" title="일반 함수나 메서드는 리턴값을 지정하지 않을 경우, undefined 값이 리턴된다."></a>일반 함수나 메서드는 리턴값을 지정하지 않을 경우, undefined 값이 리턴된다.</h3><h3 id="생성자-함수에서-리턴값을-지정하지-않을-경우-생성된-객체가-리턴된다"><a href="#생성자-함수에서-리턴값을-지정하지-않을-경우-생성된-객체가-리턴된다" class="headerlink" title="생성자 함수에서 리턴값을 지정하지 않을 경우 생성된 객체가 리턴된다."></a>생성자 함수에서 리턴값을 지정하지 않을 경우 생성된 객체가 리턴된다.</h3><ul><li>생성자 함수에서 별도의 리턴값을 지정하지 않을 경우 this로 바인딩 된 새로 생성된 객체가 리턴된다.</li><li>때문에 <strong>생성자 함수에서는 일반적으로 리턴값을 지정하지 않는다.</strong></li><li>생성자 함수가 명시적으로 객체를 리턴할 경우 새로운 객체를 생성하더라도, 명시적으로 넘긴 객체나 배열이 리턴된다.</li><li>불린, 숫자, 문자열을 리턴할 경우 무시된다.</li></ul><hr><p><a name="5"></a></p><h1 id="5-프로토타입-체이닝"><a href="#5-프로토타입-체이닝" class="headerlink" title="5. 프로토타입 체이닝"></a>5. 프로토타입 체이닝</h1><p><a name="5-1"></a></p><h2 id="5-1-프로토타입의-두가지-의미"><a href="#5-1-프로토타입의-두가지-의미" class="headerlink" title="5.1 프로토타입의 두가지 의미"></a>5.1 프로토타입의 두가지 의미</h2><p>자바스크립트는 <strong>프로토타입기반의 객체지향 프로그래밍을 지원</strong><br>자바스크립트의 모든 객체는 자신의 부모인 프로토타입 객체를 가리키는 참조 링크 형태로 숨겨진 프로퍼티가 있다.<br>implicit prototype link : <span class="mint">[[Prototype]]</span></p><ul><li>prototype객체와 [[Prototype]]링크는 다른 개념이다.</li></ul><p><a name="5-2"></a></p><h2 id="5-2-객체-리터럴-방식으로-생성된-객체의-프로토타입-체이닝"><a href="#5-2-객체-리터럴-방식으로-생성된-객체의-프로토타입-체이닝" class="headerlink" title="5.2 객체 리터럴 방식으로 생성된 객체의 프로토타입 체이닝"></a>5.2 객체 리터럴 방식으로 생성된 객체의 프로토타입 체이닝</h2><p><strong>프로토타입 체이닝</strong><br>자바스크립트에서 특정 객체의 <strong>프로퍼티나 메서드에 접근</strong>하려고 할 때,<br>해당 객체에 접근하려는 프로퍼티 또는 메서드가 없다면<br><strong>[[Prototype]]링크를 따라 자신의 부모 역할을 하는 프로토타입 객체의 프로퍼티를 차례대로 검색하는 것</strong></p><p><a name="5-3"></a></p><h2 id="5-3-생성자-함수로-생성된-객체의-프로토타입-체이닝"><a href="#5-3-생성자-함수로-생성된-객체의-프로토타입-체이닝" class="headerlink" title="5.3 생성자 함수로 생성된 객체의 프로토타입 체이닝"></a>5.3 생성자 함수로 생성된 객체의 프로토타입 체이닝</h2><p>객체 리터럴 방식과 약간 다른 프로토타입 체이닝이 이뤄지지만 아래의 기본 원칙은 지킨다.</p><blockquote><p>자바스크립트에서 모든 객체는 자신을 생성한 생성자함수의 prototype 프로퍼티가 가리키는 객체를<br>  자신의 프로토타입객체(부모객체)로 취급한다.</p></blockquote><p><a name="5-4"></a></p><h2 id="5-4-프로토타입-체이닝의-종점"><a href="#5-4-프로토타입-체이닝의-종점" class="headerlink" title="5.4 프로토타입 체이닝의 종점"></a>5.4 프로토타입 체이닝의 종점</h2><p><span class="mint">Object.prototype</span>이 프로토타입 체이닝의 종점이다.</p><p><a name="5-5"></a></p><h2 id="5-5-기본-데이터-타입-확장"><a href="#5-5-기본-데이터-타입-확장" class="headerlink" title="5.5 기본 데이터 타입 확장"></a>5.5 기본 데이터 타입 확장</h2><p>자바스크립트는 Object.prtototype, String,prototype 등과 같이<br><strong>표준 빌트인 프로토타입 객체에도 사용자가 직접 정의한 메서드들을 추가하는 것을 허용한다.</strong></p><blockquote><p>공용적으로 사용하는 메서드의 경우 prototype에 선언하긔<br>angular에서 pipe의 성격으로 사용하는 함수들을 prototype에 넣어도 됨</p></blockquote><p><a name="5-6"></a></p><h2 id="5-6-프로토타입도-자바스크립트-객체다"><a href="#5-6-프로토타입도-자바스크립트-객체다" class="headerlink" title="5.6 프로토타입도 자바스크립트 객체다"></a>5.6 프로토타입도 자바스크립트 객체다</h2><p>프로토타입 객체 역시 자바스크립트 객체이므로, 일반 객체처럼 동적으로 프로퍼티를 추가/삭제하는 것이 가능하다.</p><p><a name="5-7"></a></p><h2 id="5-7-프로토타입-메서드와-this-바인딩"><a href="#5-7-프로토타입-메서드와-this-바인딩" class="headerlink" title="5.7 프로토타입 메서드와 this 바인딩"></a>5.7 프로토타입 메서드와 this 바인딩</h2><p>메서드 호출패턴에서의 this는 <strong>그 메서드를 호출한 객체에 바인딩된다.</strong><br>프로토타입 객체도 이 this바인딩 규칙이 적용된다.</p><p><a name="5-8"></a></p><h2 id="5-8-디폴트-프로토타입은-다른-객체로-변경이-가능하다"><a href="#5-8-디폴트-프로토타입은-다른-객체로-변경이-가능하다" class="headerlink" title="5.8 디폴트 프로토타입은 다른 객체로 변경이 가능하다"></a>5.8 디폴트 프로토타입은 다른 객체로 변경이 가능하다</h2><ul><li>이 특징을 이요해서 객체지향의 상속을 구현한다.</li></ul><p><a name="5-9"></a></p><h2 id="5-9-객체의-프로퍼티-읽기나-메서드를-실행할-때만-프로토타입-체이닝이-동작한다"><a href="#5-9-객체의-프로퍼티-읽기나-메서드를-실행할-때만-프로토타입-체이닝이-동작한다" class="headerlink" title="5.9 객체의 프로퍼티 읽기나 메서드를 실행할 때만 프로토타입 체이닝이 동작한다."></a>5.9 객체의 프로퍼티 읽기나 메서드를 실행할 때만 프로토타입 체이닝이 동작한다.</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;📒 인사이드 자바스크립트 중 메모해야할 부분만 적었습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&quot;4&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;4-함수-호출과-this&quot;&gt;&lt;a href=&quot;#4-함수-호출과-t
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>4/ 함수와 프로토타입 체이닝 (1)</title>
    <link href="http://feel5ny.github.io/2018/08/24/JS_15/"/>
    <id>http://feel5ny.github.io/2018/08/24/JS_15/</id>
    <published>2018-08-24T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📒 인사이드 자바스크립트 중 메모해야할 부분만 적었습니다.</p></blockquote><hr><p><a name="1"></a></p><h1 id="1-함수-정의"><a href="#1-함수-정의" class="headerlink" title="1. 함수 정의"></a>1. 함수 정의</h1><p><a name="1-1"></a></p><h2 id="함수-선언문"><a href="#함수-선언문" class="headerlink" title="함수 선언문"></a>함수 선언문</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수 선언문</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="1-2"></a></p><h2 id="함수-표현식"><a href="#함수-표현식" class="headerlink" title="함수 표현식"></a>함수 표현식</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수 표현식</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>add는 함수 변수</li><li>add는 함수의 참조값을 가진다.</li><li>함수이름이 없는 함수를 <strong>익명함수</strong>라고 부른다. anonymous function<ul><li><strong>익명 함수를 이용한 함수 표현식 방법(익명함수 표현식)</strong></li><li>익명함수의 호출은 호출연산자 <code>()</code>를 붙여서 기술한다.</li></ul></li></ul><h3 id="기명함수-표현식"><a href="#기명함수-표현식" class="headerlink" title="기명함수 표현식"></a>기명함수 표현식</h3><ul><li><p>함수 이름이 포함된 함수 표현식</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add 변수가 sum 함수를 참조한다. </span></span><br><span class="line"><span class="comment">// 때문에 외부에서 sum함수에 접근할 수 없고, add변수를 통해 접근가능하다.</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">//7</span></span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">3</span>,<span class="number">4</span>)) <span class="comment">//error</span></span><br></pre></td></tr></table></figure></li><li><p>함수를 재귀적으로 호출하거나, 디버거에서 함수를 구분할 때 사용</p></li><li><p><span class="mint">함수 선언문은 <strong>자바스크립트 엔진</strong>에 의해서 <strong>함수 표현식</strong> 형태로 변경되기 때문에 호출가능하다.</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 위 함수는 자바스크립트 엔진에 의해서 아래와 같은 형태로 변환되다.</span></span><br><span class="line"><span class="keyword">var</span> add =<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 팩토리얼 함수</span></span><br><span class="line"><span class="keyword">var</span> factorialVar = <span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n * factorial(n<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorialVar(<span class="number">3</span>); <span class="comment">// 6</span></span><br><span class="line">factorial(<span class="number">3</span>); <span class="comment">// error</span></span><br></pre></td></tr></table></figure></li><li><p>관습적으로 <span class="mint">함수 표현식 뒤에는 세미콜론을 붙인다.</span><br><a name="1-3"></a></p><h2 id="Function-생성자-함수"><a href="#Function-생성자-함수" class="headerlink" title="Function() 생성자 함수"></a>Function() 생성자 함수</h2><p>함수도 일반 객체처럼 값으로 취급된다. (일급객체)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'x'</span>,<span class="string">'y'</span>,<span class="string">'return x + y'</span>);</span><br></pre></td></tr></table></figure></li><li><p>자주 사용되지 않는다.<br><a name="1-4"></a></p><h2 id="함수-호이스팅"><a href="#함수-호이스팅" class="headerlink" title="함수 호이스팅"></a>함수 호이스팅</h2></li><li><p>함수 호이스팅은 함수를 사용하기 전에 반드시 선언해야 한다는 규칙을 무시하므로, 코드의 구조를 엉성하게 만들 수 있다.</p></li><li><p>함수 표현식을 권장한다.<br><span class="mint">이를 자세히 알기 위해서는 <strong>실행컨택스트</strong>를 이해하면 된다.</span></p></li><li><p>자바스크립트의 변수 생성과 초기화의 작업이 분리되서 진행되기 때문이다.</p></li></ul><hr><p><a name="2"></a></p><h1 id="2-함수-객체-함수도-객체다"><a href="#2-함수-객체-함수도-객체다" class="headerlink" title="2. 함수 객체: 함수도 객체다."></a>2. 함수 객체: 함수도 객체다.</h1><p><a name="2-1"></a></p><h2 id="2-1-자바스크립트에서는-함수도-객체다"><a href="#2-1-자바스크립트에서는-함수도-객체다" class="headerlink" title="2.1 자바스크립트에서는 함수도 객체다."></a>2.1 자바스크립트에서는 함수도 객체다.</h2><p>함수 자체가 <span class="mint">일반 객체처럼 프로퍼티들을 가질 수 있다.</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add.result = add(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line">add.status = <span class="string">'OK'</span>;</span><br></pre></td></tr></table></figure><p><a name="2-2"></a></p><h2 id="2-2-자바스크립트에서-함수는-값으로-취급된다-일급객체"><a href="#2-2-자바스크립트에서-함수는-값으로-취급된다-일급객체" class="headerlink" title="2.2 자바스크립트에서 함수는 값으로 취급된다. (일급객체)"></a>2.2 자바스크립트에서 함수는 값으로 취급된다. (일급객체)</h2><p>자바스크립트에서 함수는 <span class="mint">일급객체</span>이다.</p><ul><li>변수나 배열 요소, 객체의 프로퍼티 등에 할당 가능</li><li>함수의 인자로 전달가능</li><li>함수의 리턴값으로 리턴 가능</li><li>리터럴에 의해 성성</li><li>동적으로 프로퍼티를 생성 및 할당 가능</li></ul><p>이 특징때문에 함수형 프로그래밍이 가능하다.<br>자바스크립트의 함수를 제대로 이해하려면<br>함수가 일급 객체이며<br>이는 곧 함수가 일반 객체처럼 <span class="mint">값</span>으로 취급된다는 것을 이해해야한다.</p><h3 id="2-2-1-변수나-프로퍼티의-값으로-할당"><a href="#2-2-1-변수나-프로퍼티의-값으로-할당" class="headerlink" title="2.2.1 변수나 프로퍼티의 값으로 할당"></a>2.2.1 변수나 프로퍼티의 값으로 할당</h3><ul><li>변수나 <span class="mint">프로퍼티의 값</span>으로 할당될 수 있다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">const</span> bar = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">100</span>;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(bar()); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj.baz = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">200</span>;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.baz()) <span class="comment">// 200;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  obj = &#123;</span></span><br><span class="line"><span class="comment">    baz: function()&#123;reutrn 200&#125;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-2-함수-인자로-전달"><a href="#2-2-2-함수-인자로-전달" class="headerlink" title="2.2.2 함수 인자로 전달."></a>2.2.2 함수 인자로 전달.</h3><h3 id="2-2-3-리턴값으로-활용"><a href="#2-2-3-리턴값으로-활용" class="headerlink" title="2.2.3 리턴값으로 활용."></a>2.2.3 리턴값으로 활용.</h3><blockquote><p>클로저</p></blockquote><p><a name="2-3"></a></p><h2 id="2-3-함수-객체의-기본-프로퍼티"><a href="#2-3-함수-객체의-기본-프로퍼티" class="headerlink" title="2.3 함수 객체의 기본 프로퍼티"></a>2.3 함수 객체의 기본 프로퍼티</h2><p><span class="mint">함수 객체만의 표준 프로퍼티</span>가 정의되어 있다.<br><img src="/images/2018/31/add.png"></p><h3 id="ECMA5-스크립트-명세서에는-모든-함수가-length와-prototype프로퍼티를-가져야-한다도-기술되어있다"><a href="#ECMA5-스크립트-명세서에는-모든-함수가-length와-prototype프로퍼티를-가져야-한다도-기술되어있다" class="headerlink" title="ECMA5 스크립트 명세서에는 모든 함수가 length와 prototype프로퍼티를 가져야 한다도 기술되어있다."></a>ECMA5 스크립트 명세서에는 <span class="mint">모든 함수가 length와 prototype프로퍼티를 가져야 한다도 기술되어있다.</span></h3><p>length, prototype 이외의 프로퍼티는 ECMA 표준이 아니다.</p><ul><li>arguments</li><li>caller</li><li>name</li><li><code>__proto__</code></li></ul><ol><li>name<ul><li>함수의 이름</li><li>익명함수라면 빈배열</li></ul></li><li>caller<ul><li>자신을 호출한 함수를 나타낸다.</li></ul></li><li>arguments<ul><li>파라미터값을 모아둔 유사배열객체이다.</li></ul></li><li><code>__proto__</code></li></ol><h3 id="Function-prototype객체의-프로토타입-객체는"><a href="#Function-prototype객체의-프로토타입-객체는" class="headerlink" title="Function.prototype객체의 프로토타입 객체는?"></a><span class="mint">Function.prototype객체</span>의 프로토타입 객체는?</h3><blockquote><p>대박 처음에 프로토타입 공부할 때 한참 헷갈렸던 부분</p></blockquote><ul><li>모든 함수들의 부모 객체는 <strong>Function Prototype</strong>객체라고 했다.</li><li>ECMAScript 명세서에서는 Function.prototype은 <strong>함수</strong>라고 정의하고 있다.</li><li>Function.prototype 함수 객체도 결국 함수이니까,<br>Function.prototype객체, 즉 자기 자신을 부모가 갖는 것인가??</li></ul><p>ECMAScript 명세서에서는 <strong>예외적으로</strong> Function.prototype 함수 객체의 부모는 Object.prototype 객체라고 설명하고 있다.</p><p>Function.prototype 객체가 표준으로 가지는 프로퍼티나 메서드.</p><ul><li><code>constructor</code> 프로퍼티</li><li><code>toString()</code> 메서드 (Object.prototype에도 존재한다.)</li><li><code>apply(thisArg, argArray)</code> 메서드</li><li><code>call(thisArg, [, arg1 [,arg2,]])</code> 메서드</li><li><code>bind(thisArg, [, arg1 [,arg2,]])</code> 메서드</li></ul><h3 id="2-3-1-length"><a href="#2-3-1-length" class="headerlink" title="2.3.1 length"></a>2.3.1 length</h3><p>인자의 개수를 나타내고 있다.</p><h3 id="2-3-2-prototype-프로퍼티"><a href="#2-3-2-prototype-프로퍼티" class="headerlink" title="2.3.2 prototype 프로퍼티"></a>2.3.2 prototype 프로퍼티</h3><p>모든 함수는 객체로서 <strong>prototype 프로퍼티</strong>를 갖고 있다.</p><ul><li>함수 객체만 가지고 있는 프로퍼티이다.</li><li>내부 프로퍼티인 <code>__proto__</code>와 혼동되면 안된다.</li><li><code>__proto__</code>는 부모 역할을 하는 프로토타입 객체를 가리킨다.</li><li>prototype 프로퍼티는 이 함수가 생성자로 사용될 때,<br>이 함수를 통해 생성된 객체의 부모 역할을 하는 프로토타입 객체를 가리킨다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, gender</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.gender = gender;</span><br><span class="line">  <span class="keyword">this</span>.sayHello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hi! my name is '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Person(<span class="string">'Lee'</span>, <span class="string">'male'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(Person);</span><br><span class="line"><span class="built_in">console</span>.dir(foo);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(foo.__proto__ === Person.prototype);                <span class="comment">// ① true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype);   <span class="comment">// ② true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor === Person);           <span class="comment">// ③ true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.__proto__ === <span class="built_in">Function</span>.prototype);           <span class="comment">// ④ true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// ⑤ true</span></span><br></pre></td></tr></table></figure><img src="/images/2018/31/01.png">> (이미지출처 : https://poiemaweb.com/js-prototype)<hr><p><a name="3"></a></p><h1 id="3-함수의-다양한-형태"><a href="#3-함수의-다양한-형태" class="headerlink" title="3. 함수의 다양한 형태"></a>3. 함수의 다양한 형태</h1><p><a name="3-1"></a></p><h2 id="3-1-콜백함수"><a href="#3-1-콜백함수" class="headerlink" title="3.1 콜백함수"></a>3.1 콜백함수</h2><p>함수 표현식에서 함수이름은 꼭 붙이지 않아도 되는 선택사항이다. (익명함수)<br><span class="mint">익명함수의 대표적인 용도가 <strong>콜백함수.</strong></span></p><p>콜백함수는 코드를 통해 명시적으로 호출하는 함수가 아니라,<br>개발자는 단지 함수를 등록하기만 하고,<br><strong>어떤 이벤트가 발생하거나 <u>특정 시점</u>에 도달했을 때<br>시스템에서 호출되는 함수를 말한다.</strong></p><p>또한, 특정 함수의 인자로 넘겨서, 코드 내부에서 호출되는 함수 또한 콜백함수가 될 수 있다.</p><ul><li>대표적인 콜백함수는 이벤트 핸들러 처리.<ul><li>DOM 이벤트가 발생할 경우, 이벤트 핸들러를 발생시킨다.</li></ul></li></ul><p><a name="3-2"></a></p><h2 id="3-2-즉시실행함수"><a href="#3-2-즉시실행함수" class="headerlink" title="3.2 즉시실행함수"></a>3.2 즉시실행함수</h2><p>= 함수를 정의함과 동시에 바로 실행하는 함수</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="사용하는-곳"><a href="#사용하는-곳" class="headerlink" title="사용하는 곳"></a>사용하는 곳</h3><ol><li><p>초기화 코드</p><ul><li>같은 함수를 다시 호출할 수 없다.</li><li><span class="mint">최초 <strong>한번</strong>의 실행만을 필요로 하는 <strong>초기화 코드</strong> 부분</span> 등에 사용한다.</li></ul></li><li><p>자바스크립트 라이브러리나 프레임워크 소스들 (like Jquery)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(fucntion(<span class="built_in">window</span>, <span class="literal">undefined</span>)&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure><ul><li>변수 스코프를 위해서 사용한다. 함수 코드 내부에서만 유효할 수 있도록</li><li>라이브러리 내의 변수들은 함수 외부에서 접근할 수 없다.</li></ul></li></ol><p><a name="3-3"></a></p><h2 id="3-3-내부-함수"><a href="#3-3-내부-함수" class="headerlink" title="3.3 내부 함수"></a>3.3 내부 함수</h2><p>함수 코드 내부에서 함수 정의</p><ul><li><p>공용으로 쓰이지 않고 정말 내부에서만 쓰일때</p><blockquote><p>예_ html을 만드는 함수에서 받은 data에서 특정 추가작업을 해야하고, 공용함수로 쓰이지 않을 경우</p></blockquote></li><li><p>내부함수에서는 자신을 둘러싼 부모 함수의 변수에 접근이 가능하다.</p></li><li><p>내부 함수는 일반적으로 자신이 정의된 부모함수내부에서만 호출 가능하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">const</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">child</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> b = <span class="number">300</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="built_in">console</span>.log(b); <span class="comment">// 내부에서 참조가 시작하므로, 내부에서 참조가능했다면 부모스코프까지 가지 않는다.</span></span><br><span class="line">  &#125;</span><br><span class="line">  child();</span><br><span class="line">&#125;</span><br><span class="line">parent(); <span class="comment">// 100 300</span></span><br><span class="line">child(); <span class="comment">//error</span></span><br></pre></td></tr></table></figure></li></ul><img src="/images/2018/31/inner_function.jpeg" width="500"><ul><li>하지만, 함수 외부에서도 특정 함수 스코프 안에 선언된 내부 함수 호출이 가능하다. <span class="mint">(클로저)</span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">child</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> child</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> inner = parent(); <span class="comment">// inner에 child 함수변수가 리턴된다. </span></span><br><span class="line">inner(); <span class="comment">// 클로저</span></span><br></pre></td></tr></table></figure></li></ul><img src="/images/2018/31/closure.jpeg" width="500"><hr><p><a name="3-4"></a></p><h2 id="3-4-함수를-리턴하는-함수"><a href="#3-4-함수를-리턴하는-함수" class="headerlink" title="3.4 함수를 리턴하는 함수"></a>3.4 함수를 리턴하는 함수</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;📒 인사이드 자바스크립트 중 메모해야할 부분만 적었습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&quot;1&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-함수-정의&quot;&gt;&lt;a href=&quot;#1-함수-정의&quot; class=&quot;
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>3/ 자바스크립트 데이터 타입과 연산자</title>
    <link href="http://feel5ny.github.io/2018/08/23/JS_14/"/>
    <id>http://feel5ny.github.io/2018/08/23/JS_14/</id>
    <published>2018-08-23T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>📒 인사이드 자바스크립트 중 메모해야할 부분만 적었습니다.</p></blockquote><hr><p>목차 </p><ol><li>객체 프로퍼티 읽기/쓰기/갱신<ul><li>객체 프로퍼티에 접근하는 방법</li><li><code>for in</code>문 객체 프로퍼티 출럭</li><li>객체 <strong>프로퍼티</strong> 삭제 <code>delete</code></li></ul></li><li>배열과 객체<ul><li>배열과 객체의 유사점과 차이점</li><li>배열의 프로퍼티 동적생성</li><li>유사배열<strong>객체</strong></li></ul></li></ol><hr><h3 id="1-객체-프로퍼티-읽기-쓰기-갱신"><a href="#1-객체-프로퍼티-읽기-쓰기-갱신" class="headerlink" title="1. 객체 프로퍼티 읽기/쓰기/갱신"></a>1. 객체 프로퍼티 읽기/쓰기/갱신</h3><h4 id="1-1-객체-프로퍼티에-접근하는-방법"><a href="#1-1-객체-프로퍼티에-접근하는-방법" class="headerlink" title="1-1. 객체 프로퍼티에 접근하는 방법"></a>1-1. 객체 프로퍼티에 접근하는 방법</h4><ul><li><p>대괄호 표기법</p></li><li><p>마침표 표기법</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'foo'</span>,</span><br><span class="line">  major: <span class="string">'computer science'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체 프로퍼티 읽기</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.name) <span class="comment">// foo</span></span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="string">'name'</span>]) <span class="comment">// foo</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체 프로퍼티 갱신</span></span><br><span class="line">foo.major = <span class="string">'electronics engineering'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo.major);</span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="string">'major'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체 프로퍼티 동적 생성</span></span><br><span class="line">foo.age = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo.age);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 대괄호 표기법만을 사용해야 할 경우</span></span><br><span class="line">foo[<span class="string">'full-name'</span>] = <span class="string">'foo bar'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="string">'full-name'</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(foo.full-name);</span><br><span class="line"><span class="built_in">console</span>.log(foo.full);</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure></li><li><p><strong>대괄호 표기법만 사용해야하는 경우</strong> </p><ul><li>접근하려는 프로퍼티가 표현식이거나 예약어 일 경우.</li></ul></li></ul><h4 id="1-2-for-in문-객체-프로퍼티-출럭"><a href="#1-2-for-in문-객체-프로퍼티-출럭" class="headerlink" title="1-2. for in문 객체 프로퍼티 출럭"></a>1-2. <code>for in</code>문 객체 프로퍼티 출럭</h4><p>  for in 문을 사용하면 객체에 포함된 모든 프로퍼티에 대해 루프를 수행할 수 있다.</p><blockquote><p>키 값을 출력할 수 있음</p></blockquote>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">  name: <span class="string">'foo'</span>,</span><br><span class="line">  age: <span class="number">30</span>,</span><br><span class="line">  major: <span class="string">'computer science'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> prop;</span><br><span class="line"><span class="keyword">for</span>(prop <span class="keyword">in</span> foo)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prop, foo[prop]); </span><br><span class="line">  <span class="comment">// name foo</span></span><br><span class="line">  <span class="comment">// age 30</span></span><br><span class="line">  <span class="comment">// major 'computer science'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-객체-프로퍼티-삭제-delete"><a href="#1-3-객체-프로퍼티-삭제-delete" class="headerlink" title="1-3. 객체 프로퍼티 삭제 delete"></a>1-3. 객체 <strong>프로퍼티</strong> 삭제 <code>delete</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> foo.major</span><br><span class="line"><span class="built_in">console</span>.log(foo.major) <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-배열과-객체"><a href="#2-배열과-객체" class="headerlink" title="2. 배열과 객체"></a>2. 배열과 객체</h3><h4 id="2-1-배열과-객체의-유사점과-차이점"><a href="#2-1-배열과-객체의-유사점과-차이점" class="headerlink" title="2-1. 배열과 객체의 유사점과 차이점"></a>2-1. 배열과 객체의 유사점과 차이점</h4><p>  자바스크립트에서 배열 역시 객체인데, 배열과 일반객체와는 약간 차이가 있다.</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//colorsArray 배열</span></span><br><span class="line"><span class="keyword">const</span> colorsArray = [<span class="string">'orange'</span>, <span class="string">'yellow'</span>, <span class="string">'green'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(colorsArray[<span class="number">0</span>]); <span class="comment">// orange</span></span><br><span class="line"><span class="built_in">console</span>.log(colorsArray[<span class="number">1</span>]); <span class="comment">// yellow</span></span><br><span class="line"><span class="built_in">console</span>.log(colorsArray[<span class="number">2</span>]); <span class="comment">// green</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// colorsObj 객체</span></span><br><span class="line"><span class="keyword">const</span> colorsObj = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'orange'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'yellow'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'green'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(colorsObj[<span class="number">0</span>]); <span class="comment">// orange</span></span><br><span class="line"><span class="built_in">console</span>.log(colorsObj[<span class="number">1</span>]); <span class="comment">// yellow</span></span><br><span class="line"><span class="built_in">console</span>.log(colorsObj[<span class="number">2</span>]); <span class="comment">// green</span></span><br></pre></td></tr></table></figure><ul><li>대괄호 안에는 접근하려는 프로퍼티의 속성을 <strong>문자열 형태</strong>로 적어야 한다.<br>하지만 자바스크립트 엔진이 [] 연산자 내에 숫자가 사용될 경우,<br>해당 숫자를 자동으로 문자열 형태로 바꿔준다.</li><li></li></ul><h4 id="2-2-배열의-프로퍼티-동적-생성"><a href="#2-2-배열의-프로퍼티-동적-생성" class="headerlink" title="2-2. 배열의 프로퍼티 동적 생성"></a>2-2. 배열의 프로퍼티 동적 생성</h4>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'zero'</span>, <span class="string">'one'</span>, <span class="string">'two'</span>];</span><br><span class="line">arr.color = <span class="string">'white'</span>;</span><br><span class="line">arr.name = <span class="string">'number_array'</span>;</span><br></pre></td></tr></table></figure>  <img src="/images/2018/30/01.png"><blockquote><p>신기하다!!</p></blockquote><h4 id="2-3-유사배열객체-array-like-objects"><a href="#2-3-유사배열객체-array-like-objects" class="headerlink" title="2-3. 유사배열객체 array like objects"></a>2-3. 유사배열<strong>객체</strong> array like objects</h4><p>일반 객체에 length라는 프로퍼티가 있으면 어떻게 될까?<br>자바스크립트에서는 length라는 프로퍼티를 갖고 있는 객체를 <strong>유사배열객체</strong>라고 한다. </p><ul><li><code>apply()</code>메서드를 사용하여 객체지만 표준 배열 메서드를 활용하는 것이 가능하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'bar'</span>];</span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">name</span>: <span class="string">'foo'</span>, <span class="attr">length</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">arr.push(<span class="string">'baz'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// ['bar', 'baz']</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.push.apply(obj, [<span class="string">'baz'</span>]);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;📒 인사이드 자바스크립트 중 메모해야할 부분만 적었습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;목차 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;객체 프로퍼티 읽기/쓰기/갱신&lt;ul&gt;
&lt;li&gt;객체 프로퍼티에 접근하는 방법&lt;/li&gt;

      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>1부/ chap03. RxJs가 해결하려고 했던 문제(3)_로직 오류</title>
    <link href="http://feel5ny.github.io/2018/08/15/Async_03/"/>
    <id>http://feel5ny.github.io/2018/08/15/Async_03/</id>
    <published>2018-08-15T11:12:34.000Z</published>
    <updated>2019-01-03T15:33:29.248Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>[📕 퀵스타트 Rxjs]</strong>를 보고 메모한 부분을 정리했습니다.</p></blockquote><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li>웹 어플리케이션의 로직</li><li>로직의 복잡성 그리고 오류</li><li>자바스크립트의 솔루션</li></ol><hr><hr><hr><h2 id="1-웹-어플리케이션의-로직"><a href="#1-웹-어플리케이션의-로직" class="headerlink" title="1. 웹 어플리케이션의 로직"></a>1. 웹 어플리케이션의 로직</h2><p>데이터를 추출하고 변환하는 작업을 빈번하게 하고 있다.</p><ul><li>반복문 사용, 분기문 사용, 변수 사용</li></ul><hr><h2 id="2-로직의-복잡성-그리고-오류"><a href="#2-로직의-복잡성-그리고-오류" class="headerlink" title="2. 로직의 복잡성 그리고 오류"></a>2. 로직의 복잡성 그리고 오류</h2><p>반복문, 분기문, 변수는 우리 코드를 복잡하게 만든다.<br>반복문 : 가독성을 떨어뜨림<br>분기문 : 확인해야 할 프로그램의 흐름을 여러 개로 만듦<br>변수 : 누군가에 의해 변경 될 수 있다.<br>=&gt; 오류 발생 빈도를 높인다.</p><h3 id="2-1-반복문과-분기문"><a href="#2-1-반복문과-분기문" class="headerlink" title="2.1 반복문과 분기문"></a>2.1 반복문과 분기문</h3><p>로직의 복잡성을 줄이는 방법 : 기능을 쪼개기 (관심사 분리)<br>기능을 추상화</p><h3 id="2-3-변수는-오류의-시작"><a href="#2-3-변수는-오류의-시작" class="headerlink" title="2.3 변수는 오류의 시작"></a>2.3 변수는 오류의 시작</h3><p>변수의 사용은 오류를 발생시킬 수 잇는 확률을 높인다는 것.</p><hr><h2 id="3-자바스크립트의-솔루션"><a href="#3-자바스크립트의-솔루션" class="headerlink" title="3. 자바스크립트의 솔루션"></a>3. 자바스크립트의 솔루션</h2><p>함수형 프로그래밍의 특성을 가진 자바스크립트 함수를 이용하면<br>실제 로직과 상관없는 반복분, 분기문을 분리할 수 있다.</p><blockquote><p>자바스크립트는 일급객체!</p><ul><li>함수를 변수 혹은 데이터 구조에 저장할 수 있다.</li><li>파라미터로 함수를 전달 할 수 있다.</li><li>반환값으로 사용할 수 있다. </li></ul></blockquote><h3 id="3-1-로직의-분리"><a href="#3-1-로직의-분리" class="headerlink" title="3.1 로직의 분리"></a>3.1 로직의 분리</h3><p>고차함수 Higher-order function</p><ul><li>다른 함수를 인자로 받거나 그 결과로 함수를 반환하는 함수</li><li>고차 함수는 변경되는 주요 부분을 함수로 제공함으로써 동일한 패턴 내에 존재하는 문제를 손수비게 해결할 수 있는 고급 프로그래밍 기법이다.</li><li>고차 함수를 이용하면 함수의 합성, 변형과 같은 작업을 손쉽게 할 수 있다.<br>더불어 커링, 메모이제이션과 같은 기법도 사용할 수 있다. </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">people</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> html = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> user <span class="keyword">of</span> people.results) &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/male|female/</span>.test(user.gender)) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = logic(user.height, user.mass, user.gender);</span><br><span class="line">      <span class="built_in">Object</span>.assign(user,result);</span><br><span class="line">      html.push(makeHtml(user));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> html.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 고차 함수를 이용하여 개선</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">people</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> people.results</span><br><span class="line">      .filter(<span class="function"><span class="params">user</span> =&gt;</span> <span class="regexp">/male|femail/</span>.test(user.gender))</span><br><span class="line">      .map(<span class="function"><span class="params">user</span> =&gt;</span> <span class="built_in">Object</span>.assign(user, logic(user.height, user.mass, user.gender)))</span><br><span class="line">      .reduce(<span class="function">(<span class="params">acc,user</span>)=&gt;</span> &#123; </span><br><span class="line">        acc.push(makeHtml(user))</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">      &#125;, []).join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>개선된 process에서는 반복문, 분기문, 변수가 존재하지 않는다.<br>핵심로직은 분리되었고<br>코드의 흐름은 단일화 되었다.<br>변수를 사용하지 않음으로써 오류 발생 빈도도 크게 줄었다.</p><hr><h2 id="4-rxjs는-어떻게-개선하였나"><a href="#4-rxjs는-어떻게-개선하였나" class="headerlink" title="4. rxjs는 어떻게 개선하였나?"></a>4. rxjs는 어떻게 개선하였나?</h2><h3 id="4-1-rxjs가-제공하는-오퍼레이터"><a href="#4-1-rxjs가-제공하는-오퍼레이터" class="headerlink" title="4.1 rxjs가 제공하는 오퍼레이터"></a>4.1 rxjs가 제공하는 오퍼레이터</h3><p><a href="http://reactivex.io/rxjs/manual/index.html" target="_blank" rel="noopener">http://reactivex.io/rxjs/manual/index.html</a><br>rxjs에서 제공하는 오퍼레이터를 이용하면 observable을 생성할 수도 있고,<br>전달된 데이터를 변환하거나 필요한 데이터만을 추출할 수도 있다.</p><p><a href="https://tienne.gitbooks.io/learnrxjs/" target="_blank" rel="noopener">참고</a></p><h3 id="4-2-불변-객체-observable"><a href="#4-2-불변-객체-observable" class="headerlink" title="4.2 불변 객체 observable"></a>4.2 불변 객체 observable</h3><p>ES5 Array의 고차함수들이 반환값으로 새로운 Array 객체를 반환하여 각각에 영향을 미치지 않도록 하는 것과 같이,<br>rxjs의 오퍼레이터는 항상 <strong>새로운 observable</strong>을 반환함으로써 array의 고차 함수와 같이 <strong>불변 객체</strong>(immutable object)를 반환한다.</p><p>차이점 : Array의 리턴 객체는 새로운 레퍼런스 객체지만,observable과 달리 객체 자체가 불변객체는 아니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> mappedArr = arr.map(<span class="function"><span class="params">v</span> =&gt;</span> v);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr === mappedArr); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>Array의 경우 새로운 Array 객체 생성 작업만 함</li><li>Observable은 *<em>새로운 Observable을 만들고, *</em><br>그 Observable이 오퍼레이터를 호출한 원래의 Observable을 내부적으로 구독한다!!<ul><li>링크드 리스트 형태로 기존 Observable 객체와 새롭게 만든 Observable 객체를 오퍼레이터로 연결한다.</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">map = <span class="function"><span class="keyword">function</span>(<span class="params">transformationFn</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> source = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> rxjs.Observable(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">    source.subscribe(</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; observer.next(transformationFn(x))&#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123; observer.error(err)&#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; observer.complete()&#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ajax$.pipe(</span><br><span class="line">  switchMap(<span class="function"><span class="params">data</span> =&gt;</span> <span class="keyword">of</span>(...data.results)),</span><br><span class="line">  filter(<span class="function"><span class="params">user</span> =&gt;</span> <span class="regexp">/male|female/</span>.test(user.gender)),</span><br><span class="line">  map(<span class="function"><span class="params">user</span> =&gt;</span> <span class="built_in">Object</span>.assign(user, logic(user.height, user.mass, user.gender))),</span><br><span class="line">  reduce(<span class="function">(<span class="params">acc,user</span>)=&gt;</span> &#123;</span><br><span class="line">    acc.push(makeHtml(user));</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">  &#125;, []),</span><br><span class="line">  map(<span class="function"><span class="params">htmlArr</span> =&gt;</span> htmlArr.join(<span class="string">""</span>))</span><br><span class="line">).subscribe(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">"users"</span>).innerHtml = v;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="∴-rxjs의-오퍼레이터로-생성된-Observable은-항상-불변-객체를-반환한다-오퍼레이터의-인자로-순수함수를-받음으로써-함수형-프로그래밍에서-추구하는-부원인과-부작용을-제거한다"><a href="#∴-rxjs의-오퍼레이터로-생성된-Observable은-항상-불변-객체를-반환한다-오퍼레이터의-인자로-순수함수를-받음으로써-함수형-프로그래밍에서-추구하는-부원인과-부작용을-제거한다" class="headerlink" title="∴ rxjs의 오퍼레이터로 생성된 Observable은 항상 불변 객체를 반환한다. 오퍼레이터의 인자로 순수함수를 받음으로써, 함수형 프로그래밍에서 추구하는 부원인과 부작용을 제거한다."></a>∴ rxjs의 오퍼레이터로 생성된 Observable은 항상 불변 객체를 반환한다. 오퍼레이터의 인자로 순수함수를 받음으로써, 함수형 프로그래밍에서 추구하는 부원인과 부작용을 제거한다.</h3><hr><p>참고링크<br><a href="http://reactivex.io/rxjs/manual/index.html" target="_blank" rel="noopener">http://reactivex.io/rxjs/manual/index.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[📕 퀵스타트 Rxjs]&lt;/strong&gt;를 보고 메모한 부분을 정리했습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Angular" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Angular/"/>
    
    
      <category term="async" scheme="http://feel5ny.github.io/tags/async/"/>
    
      <category term="rxjs" scheme="http://feel5ny.github.io/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>1부/ chap02. RxJs가 해결하려고 했던 문제(2)_상태 전파 문제</title>
    <link href="http://feel5ny.github.io/2018/08/15/Async_02/"/>
    <id>http://feel5ny.github.io/2018/08/15/Async_02/</id>
    <published>2018-08-15T05:12:34.000Z</published>
    <updated>2019-01-03T15:33:29.259Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>[📕 퀵스타트 Rxjs]</strong>를 보고 메모한 부분을 정리했습니다.</p></blockquote><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li>웹 어플리케이션의 상태</li><li>웹 어플리케이션의 상태 변화로 인한 문제점</li><li>우리가 이미 알고 있는 솔류션</li><li>흔한 예</li><li>적용하기</li><li>rxjs는 무엇을 해결하고자 했는가?</li><li>rxjs는 어떻게 개선하였나?</li><li>observable은 리액티브하다.</li></ol><hr><hr><hr><h1 id="상태-전파-오류"><a href="#상태-전파-오류" class="headerlink" title="상태 전파 오류"></a>상태 전파 오류</h1><p>상태 전파. state propagation</p><h2 id="1-웹-어플리케이션의-상태"><a href="#1-웹-어플리케이션의-상태" class="headerlink" title="1. 웹 어플리케이션의 상태"></a>1. 웹 어플리케이션의 상태</h2><p>각각의 상태 머신들은 각자의 상태를 가지고 있고, 상태 머신들은 각자의 역할에 따라 서로 유기적으로 연결되어 있다.<br>모듈간의 의존성.<br>예_ 사용자정보(상태)를 System 클래스가 check()함수에서 사용하고 있는 예제</p><ul><li>변경에 대한 전파가 원활하게 이루어지지 않는다.</li></ul><hr><h2 id="3-우리가-이미-알고-있는-솔류션"><a href="#3-우리가-이미-알고-있는-솔류션" class="headerlink" title="3. 우리가 이미 알고 있는 솔류션"></a>3. 우리가 이미 알고 있는 솔류션</h2><h3 id="3-1-Loosely-Coupling"><a href="#3-1-Loosely-Coupling" class="headerlink" title="3.1 Loosely Coupling"></a>3.1 Loosely Coupling</h3><ul><li>옵저버 패턴에서는 상태가 변경될 대상을 Subject라고 한다.<br>그리고, 그 상태 변화를 관찰하는 대상을 Observer라고 한다.</li><li>subject와 observer는 서로 <strong>느슨하게 연결되어 있다.</strong> (낮은 결합도)<ul><li>여기서 <strong>느슨하게(Loosely Coupling)</strong>의 의미는 Subject와 Observer가 서로 상호작용을 하지만 <strong>서로 잘 모른다라는 뜻!!</strong></li><li>subject가 observer에 대해서 아는건 <strong>observer가 특정 인터페이스를 구현한다는 것 뿐.</strong></li><li>subject와 observer는 서로 <strong>독립적</strong>으로 사용할 수 있으며, observer가 바뀌더라도 서로에게 영향을 미치지 않는다.</li></ul></li></ul><h3 id="3-2-자동-상태-전파"><a href="#3-2-자동-상태-전파" class="headerlink" title="3.2 자동 상태 전파"></a>3.2 자동 상태 전파</h3><p><strong>pull 시나리오</strong></p><ul><li>기존 방식과 같이 데이터를 얻고자 하는 대상이<br>데이터를 직접 가져오는 방식은<br><strong>매번 요청을 하여 변경사항을 확인해야만 한다.</strong></li></ul><p><strong>push 시나리오</strong></p><ul><li>하지만 옵서버 패턴은 이와 다르게<br>의존 관계의 대상(Subject)으로 부터<br><strong>데이터를 제공받는 방식</strong>이다.</li></ul><p>push 방식으로 구성된 옵서버패턴은<br>subject의 상태가 변경되었을 경우<br>관찰하는 observer에게 자동으로 알려준다.(subscribe)</p><p>subject와 observer가 <code>1:n</code>의 상황에서는 더욱 효과적이다.<br><strong>다수의 observer를 subject에 등록하기만 하면</strong><br>subject의 변경사항이 등록된 다수의 observer에게 자동으로 전달된다.</p><h3 id="3-3-인터페이스의-단일화"><a href="#3-3-인터페이스의-단일화" class="headerlink" title="3.3 인터페이스의 단일화"></a>3.3 인터페이스의 단일화</h3><p>옵저버 패턴은 Observer.update만 존재하기 때문에 Subject에서는 옵저버 인터페이스에 대한 별도의 비용이 존재하지 않는다.</p><hr><h2 id="4-옵저버-패턴의-흔한-예"><a href="#4-옵저버-패턴의-흔한-예" class="headerlink" title="4. 옵저버 패턴의 흔한 예"></a>4. <span class="mint">옵저버 패턴</span>의 흔한 예</h2><p>뉴스를 발행하는 신문사와 이를 구독하는 고객</p><p>뉴스를 발행하는 신문사 = subject<br>고객 = observer</p><p>신문사는 고객을 등록하고 신문이 발행될 때 각각의 고객에게 신문이 발행되었다고 알려준다.(notify)</p><p>신문이 발행되면<br>어떤 고객은 뉴스를 스크랩하거나,<br>어떤 고객은 뉴스를 읽기 시작한다.</p><hr><h2 id="6-RxJS는-무엇을-해결하고자-했는가"><a href="#6-RxJS는-무엇을-해결하고자-했는가" class="headerlink" title="6. RxJS는 무엇을 해결하고자 했는가?"></a>6. RxJS는 무엇을 해결하고자 했는가?</h2><p>rxjs도 상태 변화에 대한 문제를 옵저버 패턴을 기반으로 해결하려고 하였다.</p><h3 id="6-1-상태-변화는-언제-종료되는가"><a href="#6-1-상태-변화는-언제-종료되는가" class="headerlink" title="6.1 상태 변화는 언제 종료되는가?"></a>6.1 상태 변화는 언제 종료되는가?</h3><p>옵저버 패턴에는 종료 flag가 없기 때문에 별도의 규칙을 정해야한다.</p><blockquote><p><span class="pink">rxjs</span>에서는 complete</p></blockquote><h3 id="6-2-상태-변화에서-에러가-발생하면"><a href="#6-2-상태-변화에서-에러가-발생하면" class="headerlink" title="6.2 상태 변화에서 에러가 발생하면?"></a>6.2 상태 변화에서 에러가 발생하면?</h3><p>옵저버 패턴은 에러 발생여부를 observer들에게 전달할 방법은 딱히 없다.</p><blockquote><p><span class="pink">rxjs</span>에서는 error</p></blockquote><h3 id="6-3-observer에-의해-subject의-상태가-변경되는-경우"><a href="#6-3-observer에-의해-subject의-상태가-변경되는-경우" class="headerlink" title="6.3 observer에 의해 subject의 상태가 변경되는 경우?"></a>6.3 observer에 의해 subject의 상태가 변경되는 경우?</h3><p>코드의 복잡도를 증가시키는 경우가 많다.</p><blockquote><p><span class="pink">rxjs</span>에서는 옵저버블은 오직 read-only</p></blockquote><hr><h2 id="7-rxjs는-어떻게-개선하였나"><a href="#7-rxjs는-어떻게-개선하였나" class="headerlink" title="7. rxjs는 어떻게 개선하였나?"></a>7. rxjs는 어떻게 개선하였나?</h2><p>rxjs에서 전달되는 데이터는 모두 observable형태로 변환된다.<br>observable은 구독과정(subscribe)후부터 데이터를 전달받기 시작한다.</p><blockquote><p>rxjs의 observable</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;fromEvent&#125; = rxjs;</span><br><span class="line"><span class="keyword">const</span> clikc$ = fromEvent(<span class="built_in">document</span>, <span class="string">'click'</span>);</span><br><span class="line">clikc$.subscribe(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">click$.subscribe(&#123;</span><br><span class="line">  next: <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>observer pattern</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newsPaper = <span class="keyword">new</span> Subject();</span><br><span class="line">newPaper.add(&#123;</span><br><span class="line">  update: <span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>subject와 observer</strong></p><blockquote><p>상태가 변경되는 아이 : subject, observable</p></blockquote><p>rxjs의 observable ≒ 옵서버 패턴의 Subject</p><blockquote><p>변경된 상태를 알아야 하는 아이 : observer</p></blockquote><p><span class="mint">옵서버 패턴</span>의 observer는 <strong>add</strong>라는 메소드를 통해 subject에게 전달된다.<br><span class="pink">rxjs</span>의 observer는 함수와 객체 둘 다 가능하며 <strong>subscribe</strong>라는 메소드를 통해 subject에게 전달된다.</p><p>rxjs가 기존 옵저버 패턴의 아쉬웠던 점을 개선하고자 했기 때문이다.</p><h4 id="cf-Rxjs의-Observable과-Subject"><a href="#cf-Rxjs의-Observable과-Subject" class="headerlink" title="cf_Rxjs의 Observable과 Subject"></a>cf_Rxjs의 Observable과 Subject</h4><p>Rxjs에는 observable도 있고 subject도 있다.</p><p>rxjs의 subject는 기능적으로 정확히 옵저버패턴의 subject와 일치한다.<br>rxjs의 subject는 다수의 observer에게 <strong>공통의 데이터</strong>를 전달하고, update와 같은 메소드가 존재하여 데이터 변경도 가능하다.</p><p>rxjs의 observable은 기능적으로 옵저버 패턴의 subject와는 엄격히 다르다.<br>observable은 하나의 observer에게 독립적인 데이터를 전달한다.</p><h3 id="7-1-인터페이스의-확장"><a href="#7-1-인터페이스의-확장" class="headerlink" title="7.1 인터페이스의 확장"></a>7.1 인터페이스의 확장</h3><ol><li><p><span class="mint">update</span> =&gt; <span class="pink">next</span><br>데이터의 연속적인 변화를 observer에서 표현할 수 있도록 기존 update메서드를 next로 바꾸었다.</p><blockquote><p>개인적으로는 update가 더 명시적이다 ..ㅜ</p></blockquote></li><li><p>종료시점, 에러시점<br>옵저버 패턴에는 없던 종료시점, 에러시점을 개선,<br>종료는 compleate<br>에러는 error</p></li></ol><img src="/images/2018/24/04.jpeg" width="500px">> rxjs<img src="/images/2018/24/03.jpeg" width="500px">> 옵저버패턴<h4 id="왜-객체가-아닌-함수를-사용하는-것인가"><a href="#왜-객체가-아닌-함수를-사용하는-것인가" class="headerlink" title="왜 객체가 아닌 함수를 사용하는 것인가?"></a>왜 객체가 아닌 함수를 사용하는 것인가?</h4><p>observable.subscribe는 객체, 함수 모든 형태로 전달 받을 수는 있다.<br>subscribe는 특별한 경우를 제외하고는 가급적 함수 형태를 사용한다.</p><p>객체는 상태를 가질 수 없기 때문이다.<br>객체가 상태를 가진다는 의미 =&gt; <strong>또다른 상태 머신</strong>이 될 수 있다는 의미.<br>반면 함수는 상태가 존재하지 않는 <strong>기능만을 담당하기 때문에</strong> 상태에 관한 문제에서는 보다 자유롭다.</p><h3 id="7-2-옵저버블은-Read-only"><a href="#7-2-옵저버블은-Read-only" class="headerlink" title="7.2 옵저버블은 Read-only"></a>7.2 옵저버블은 Read-only</h3><p>observable은 subscribe를 통해 데이터를 전달할 대상에게 데이터를 전달할 수는 있지만,<br>반대로 observer에게 데이터를 전달받을 수 없다.</p><ul><li>데이터 흐름을 단순화함으로 복잡도를 낮추고 오류 발생 빈도를 줄인다.</li></ul><hr><h2 id="8-Observable은-리액티브하다"><a href="#8-Observable은-리액티브하다" class="headerlink" title="8. Observable은 리액티브하다."></a>8. Observable은 리액티브하다.</h2><p>데이터가 발생하게 되면 옵저버에게 자동으로 빠르게 변경된 데이터를 전달한다.<br>이를 보고 리액티브하다고 이야기한다.</p><h4 id="리액티브-프로그래밍이란"><a href="#리액티브-프로그래밍이란" class="headerlink" title="리액티브 프로그래밍이란?"></a>리액티브 프로그래밍이란?</h4><p>데이터 흐름과 상태 변화 전파에 중점을 둔 프로그램 패러다임이다.<br>사용되는 프로그래밍 언어에서<br><strong>데이터 흐름</strong>을 쉽게 표현할 수 있어야 하며<br>기본 실행 모델이 변경 사항을 데이터 흐름을 통해 <strong>자동으로 전파</strong>한다는 것을 의미한다.</p><blockquote><p>예: 엑셀</p></blockquote><p>이런 고민의 해결책이 <span class="mint">옵저버 패턴</span>이고,<br><span class="pink">rxjs</span>는 이런 옵저버 패턴을 개선하여 애플리케이션에서 발생하는 모든 데이터를 리액티브하게 전달할 수 있게 해준다.</p><h3 id="∴-rxjs는-리액티브-프로그래밍을-지향하는-라이브러리이다"><a href="#∴-rxjs는-리액티브-프로그래밍을-지향하는-라이브러리이다" class="headerlink" title="∴ rxjs는 리액티브 프로그래밍을 지향하는 라이브러리이다"></a>∴ rxjs는 리액티브 프로그래밍을 지향하는 라이브러리이다</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[📕 퀵스타트 Rxjs]&lt;/strong&gt;를 보고 메모한 부분을 정리했습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Angular" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Angular/"/>
    
    
      <category term="async" scheme="http://feel5ny.github.io/tags/async/"/>
    
      <category term="rxjs" scheme="http://feel5ny.github.io/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>1부/ chap01. RxJs가 해결하려고 했던 문제(1)_입력데이터의 오류</title>
    <link href="http://feel5ny.github.io/2018/08/15/Async_01/"/>
    <id>http://feel5ny.github.io/2018/08/15/Async_01/</id>
    <published>2018-08-15T02:12:34.000Z</published>
    <updated>2019-01-03T15:33:29.065Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>[📕 퀵스타트 Rxjs]</strong>를 보고 메모한 부분을 정리했습니다.</p></blockquote><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li>웹 어플리케이션의 입력 데이터</li><li>입력 데이터의 <strong>전달 시점</strong>이 다양하다. - 동기/비동기</li><li>동기와 비동기를 함께 사용할 수 밖에 없는가?</li><li>rxjs는 어떻게 개선하였나? <ul><li>Observable</li><li>모든 데이터는 Observable 인스턴스로 만들 수 있다.</li></ul></li></ol><hr><hr><hr><h2 id="1-웹-어플리케이션의-입력-데이터"><a href="#1-웹-어플리케이션의-입력-데이터" class="headerlink" title="1. 웹 어플리케이션의 입력 데이터"></a>1. 웹 어플리케이션의 입력 데이터</h2><p>게시판을 예로 생각.<br>목록화면 : 서버에 저장된 글을 보여주는<br>상세화면 : 게시글의 내용을 보여주는 상세화면</p><ul><li>서버로부터 저장된 글에 대한 정보를 받아서 </li><li>화면과 관련 UI작업을 한다.</li><li>게시글 등록/수정하는 편집화면</li><li>수정이 끝나면 서버에 저장</li></ul><ol><li>게시글 / 서버 -&gt; 브라우저 / <strong>비동기</strong> / ajax통신으로 json데이터를 받는다.</li><li>게시글 / 브라우저 -&gt; 브라우저 UI객체 / <strong>동기</strong> / json 데이터를 ui에 반영한다.</li><li>사용자가 입력한 내용 / 사용자 -&gt; 브라우저 UI 객체 / <strong>비동기</strong> / <code>&lt;textarea&gt;</code>를 통해 사용자 입력을 받는다.</li><li>사용자가 입력한 내용 / 브라우저 UI객체 -&gt; 브라우저 -&gt; 서버 / <strong>동기, 비동기</strong> / <code>&lt;textarea&gt;</code>에 있는 데이터를 json객체로 저장 후, 서버로 ajax요청을 한다.</li></ol><hr><h2 id="2-입력-데이터의-전달-시점이-다양하다"><a href="#2-입력-데이터의-전달-시점이-다양하다" class="headerlink" title="2. 입력 데이터의 전달 시점이 다양하다."></a>2. 입력 데이터의 전달 시점이 다양하다.</h2><h3 id="동기-synchronous"><a href="#동기-synchronous" class="headerlink" title="동기 synchronous"></a>동기 synchronous</h3><p>: 작업이 들어온 순서에 맞게 차근차근 하나씩 진행되는 것을 의미한다.</p><ul><li>장점 : 개발이 쉬움</li><li>단점 : 속도가 느려짐.</li><li>웹 브라우저는 단일 UI 스레이드 이므로 해당 작업이 끝날때까지 브라우저는 대기해야한다.</li></ul><h3 id="비동기-asynchronous"><a href="#비동기-asynchronous" class="headerlink" title="비동기 asynchronous"></a>비동기 asynchronous</h3><p>: 작업이 들어온 순서에 상관없이 산발적으로 작업이 진행된다.</p><ul><li>별도의 이벤트나 콜백함수를 통해 결과를 전달하는 방식</li><li>장점 : 효율적인 작업 진행</li><li>개발은 복잡해지고 오류 확률이 높아질 우려가 있다.</li></ul><hr><h2 id="3-동기와-비동기를-함께-사용할-수-밖에-없는가"><a href="#3-동기와-비동기를-함께-사용할-수-밖에-없는가" class="headerlink" title="3. 동기와 비동기를 함께 사용할 수 밖에 없는가?"></a>3. 동기와 비동기를 함께 사용할 수 밖에 없는가?</h2><ul><li>동기 방식은 프로세스를 독점하기 때문에 효율적인 작업이 불가능.</li><li>비동기 방식은 효율적으로 작업할 수 있지만 <span class="mint"><strong>호출순서를 보장하기 어렵다.</strong></span></li><li>웹 브라우저는 단일 스레드 기반이기때문에 성능상 문제가 발생한다.</li></ul><hr><h2 id="4-rxjs는-어떻게-개선하였나"><a href="#4-rxjs는-어떻게-개선하였나" class="headerlink" title="4. rxjs는 어떻게 개선하였나?"></a>4. rxjs는 어떻게 개선하였나?</h2><p>입력데이터에 대한 구조적 문제를 개선하고자 하였다.<br>rxjs는 동기와 비동기의 차이점을 <span class="mint"><strong>시간</strong></span>이라는 개념을 도입함으로써 해결하려고 했다.</p><img src="/images/2018/24/01.png" width="300px" style="margin-left: 0;">> 비동기<img src="/images/2018/24/02.png" width="300px" style="margin-left: 0;">> 동기<p>동기와 비동기는 시간의 축으로 봤을 때는 같은 형태이다.<br>=&gt; <strong>시간을 인덱스로 둔 컬렉션으로 생각할 수 있다.</strong><br>=&gt; Rxjs는 이를 <strong>스트림</strong>이라고 표현한다.<br>=&gt; Rxjs는 이런 스트림($)을 표현하는 Observable 클래스를 제공한다.</p><h3 id="4-1-Observable"><a href="#4-1-Observable" class="headerlink" title="4.1 Observable"></a>4.1 Observable</h3><p><strong>시간을 인덱스로 둔 컬렉션을 추상화한 클래스이다.</strong><br>동기나 비동기 동작 방식으로 전달된 데이터를 하나의 컬렉션으로 바라볼 수 있게 해준다.<br>개발자는 데이터가 어떤 형태로 전달되는지에 대해 더이상 고민할 필요가 없어진다.<br>Observable을 통해 데이터를 전달받기만 하면된다.</p><blockquote><p>동기던 비동기던 옵저버블로 데이터를 받긔</p></blockquote><h3 id="4-2-모든-데이터는-Observable-인스턴스로-만들-수-있다"><a href="#4-2-모든-데이터는-Observable-인스턴스로-만들-수-있다" class="headerlink" title="4.2 모든 데이터는 Observable 인스턴스로 만들 수 있다."></a>4.2 모든 데이터는 Observable 인스턴스로 만들 수 있다.</h3><ul><li>키보드를 눌러서 입력된 데이터</li><li>마우스를 이동하거나 클릭해서 입력된 데이터</li><li>ajax/fetch 요청을 통해 얻은 데이터</li><li>web socket을 통해 전달된 데이터</li><li>messages를 통해 전달된 데이터<br>…</li></ul><p>rxjs는 observable을 만들기 위해 rxjs 네임스페이스에 다양한 함수를 제공한다.(오퍼레이터)<br>이벤트를 observable로 만들때 <code>fromEvent</code>를 사용한다.<br>단일데이터를 연속으로 전달하는 경우는 <code>of</code></p><p><strong>Observable 객체의 변수명은 관용적으로 접미사로 $를 붙인다.</strong><br>Observable 객체는 스트림(stream)이다. 따라서 Stream을 뜻하는 S와 유사한 $를 Stream의 약어로 사용한다.</p><hr><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[📕 퀵스타트 Rxjs]&lt;/strong&gt;를 보고 메모한 부분을 정리했습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Angular" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Angular/"/>
    
    
      <category term="async" scheme="http://feel5ny.github.io/tags/async/"/>
    
      <category term="rxjs" scheme="http://feel5ny.github.io/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>chap02.원칙 - 프로그래밍의 가이드라인</title>
    <link href="http://feel5ny.github.io/2018/08/12/principle_02/"/>
    <id>http://feel5ny.github.io/2018/08/12/principle_02/</id>
    <published>2018-08-12T03:12:34.000Z</published>
    <updated>2019-02-04T17:33:43.618Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>[프로그래밍의 정석]</strong>을 보고 메모한 부분을 정리했습니다.</p></blockquote><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li><a href="#first">KISS</a>   :: Keep It Simple, Stupid<ul><li>오컴의 면도날</li></ul></li><li><a href="#second">DRY</a>   :: Don’t Repeat Yourself</li><li><a href="#third">YAGNI</a>  :: You Aren’t Going to Need it</li><li><a href="#forth">PIE</a>    :: Program Intently and Expressively (의도를 표현해서 프로그래밍하라)</li><li><a href="#fifth">SLAP</a>   :: Single Level of Abstraction Principle (추상화 수준의 통일)</li><li><a href="#sixth">OCP</a>    :: Open-Closed Principle (개방-폐쇄의 원칙) </li></ol><hr><h4 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h4><hr><p><a id="first"></a></p><h2 id="1-KISS-Keep-It-Simple-Stupid"><a href="#1-KISS-Keep-It-Simple-Stupid" class="headerlink" title="1. KISS _Keep It Simple, Stupid"></a>1. KISS _Keep It Simple, Stupid</h2><h3 id="코드는-단순하게-유지한다"><a href="#코드는-단순하게-유지한다" class="headerlink" title="*코드는 단순하게 유지한다."></a>*코드는 단순하게 유지한다.</h3><h3 id="why-아무생각-없이-수정하게-되면-코드는-무질서로-향한다"><a href="#why-아무생각-없이-수정하게-되면-코드는-무질서로-향한다" class="headerlink" title="*why_아무생각 없이 수정하게 되면 코드는 무질서로 향한다."></a>*why_아무생각 없이 수정하게 되면 코드는 무질서로 향한다.</h3><p>함수의 경우 관심사 분리를 목표로 간결하게 유지한다.</p><ul><li>단순한 코드는 읽기 쉽고 수정이 용이하다.</li><li>의사소통 유지비용을 절약할 수 있다.</li></ul><h3 id="how-코드에-불필요한-것을-하지-않는다"><a href="#how-코드에-불필요한-것을-하지-않는다" class="headerlink" title="*how_코드에 불필요한 것을 하지 않는다."></a>*how_코드에 불필요한 것을 하지 않는다.</h3><p><u style="color:white"><strong>단순함</strong>을 프로그래밍의 <strong>나침반</strong>으로 삼자.</u></p><p>아래 상황을 경계하자.</p><ol><li>새롭게 배운 기술을 사용하고 싶다.</li><li>장래의 필요에 대비하고 싶다.<br>지금 필요할게 아니면 지금 작성할 것이 아니다.</li><li>멋대로 요구사항을 추가한다.<br>요구사항을 결정하는 쪽은 사용자다. 프로그래머가 요구사항을 결정해서는 안된다.<blockquote><p>케바케일듯</p></blockquote></li></ol><h3 id="Less-is-more-단순한-것이-더-아름답다"><a href="#Less-is-more-단순한-것이-더-아름답다" class="headerlink" title="*Less is more 단순한 것이 더 아름답다."></a>*Less is more 단순한 것이 더 아름답다.</h3><p>지금 작성하는 코드가 정말로 필요한지를 항상 자문자답해야한다.</p><h3 id="오컴의-면도날"><a href="#오컴의-면도날" class="headerlink" title="*오컴의 면도날"></a>*오컴의 면도날</h3><p>어떤 상황을 설명하는 데 필요 이상으로 많은 전제를 가정해서는 안된다는 사고방식.<br><u>= 뭔가에 관해 여러 가지 설명이 가능하다면 <strong>가장 단순한 방식이 옳다.</strong></u></p><hr><p><a id="second"></a></p><h2 id="2-DRY"><a href="#2-DRY" class="headerlink" title="2. DRY"></a>2. DRY</h2><h3 id="코드-복사는-금물"><a href="#코드-복사는-금물" class="headerlink" title="*코드 복사는 금물"></a>*코드 복사는 금물</h3><ul><li>로직 한 덩어리를 다른 부분에 복붙<ul><li>같은 로직이 여러 군데로 흩어진다.</li></ul></li><li>같은 조건을 다루는 제어문 블록이 여러군데 중복</li><li>같은 의미의 값(상수, 정수..)</li></ul><h3 id="why-코드를-개선할-수-없다"><a href="#why-코드를-개선할-수-없다" class="headerlink" title="*why_코드를 개선할 수 없다"></a>*why_코드를 개선할 수 없다</h3><ol><li><strong>코드를 읽는 작업이 어려워진다.</strong><br>양적으로 많아지고 질적으로 복잡해진다.</li><li><strong>코드를 수정하는 작업이 어려워진다.</strong><br>신중하게 수정하지 않으면 <strong>수정에 누락이 생길 위험성</strong>이 있다.<br>미세한 차이가 있다면 코드를 더욱 깊게 읽어야한다.</li><li><strong>테스트가 없다.</strong><br>열심히 수정하더라도 테스트가 없는 상태에서는 새로운 오류가 발생할 위험이 커진다.</li></ol><h3 id="how-코드를-추상화한다"><a href="#how-코드를-추상화한다" class="headerlink" title="*how_코드를 추상화한다."></a>*how_코드를 추상화한다.</h3><p>코드를 추상화함으로써 중복을 제거하자.<br>코드 로직을 추상화하려면<br><u style="color:white">처리하는 코드를 묶고 이름을 붙여 함수화, 모듈화한다.</u></p><h4 id="추상화의-장점"><a href="#추상화의-장점" class="headerlink" title="추상화의 장점"></a>추상화의 장점</h4><ul><li>코드의 양이 줄어 읽는 양을 줄일 수 있다.</li><li>이름을 붙였으므로 코드가 읽기 쉽다.</li><li>같은 코드를 한군데 집약했기 때문에 코드 수정이 용이, 품질을 담보하기 쉽다.</li><li>추상화한 부분은 재사용하기 쉬워진다.</li></ul><h3 id="DRY의-적용범위"><a href="#DRY의-적용범위" class="headerlink" title="*DRY의 적용범위"></a>*DRY의 적용범위</h3><h4 id="구체적으로-반복되는-작업은-자동화"><a href="#구체적으로-반복되는-작업은-자동화" class="headerlink" title="구체적으로 반복되는 작업은  자동화"></a>구체적으로 반복되는 작업은 <i class="fa fa-long-arrow-right"> <span style="color:white">자동화</span></i></h4><ul><li>자동화의 대표적인 작업 <i class="fa fa-long-arrow-right"> <strong>테스트, 빌드, 배포</strong> (지속적인 통합)</i></li><li>빌드, 테스트, 배포 등을 정확하고 빈번하게 자동 실행하는 것.</li><li>장점<ul><li>반복 수작업이 없어진다.</li><li>빌드 <strong>품질</strong>이 안정된다.</li><li>빌드가 속인화하지 않는다.</li><li>문제를 조기에 발견할 수 있다.</li></ul></li></ul><h3 id="DRY와-프로그래밍-기술"><a href="#DRY와-프로그래밍-기술" class="headerlink" title="*DRY와 프로그래밍 기술"></a>*DRY와 프로그래밍 기술</h3><p>코드 중복을 제거하는 것을 목적 중 하나로 삼고 있다.</p><ul><li><p>구조화 프로그래밍</p></li><li><dl><dt>객체지향 프로그래밍 기술</dt><dd>함수나 모듈 구성을 통해 중복을 제거하기 위한 기법이 내제되어있음.</dd></dl></li><li><dl><dt>디자인 패턴<br>: 코드를 재사용 가능(확장가능)하게 하려고 코드 구조 패턴을 제공한다.</dt><dd><strong>사고의 중복</strong>이 일어나지 않게 하는 기법이라고도 할 수 있다.</dd></dl></li><li><dl><dt><strong>일반적으로 기술이나 기법은 특정 목적을 갖고 고안된다.</strong><br>: 기법을 배울 때는 방식 자체만을 모방하지말고</dt><dd><span style="color:white"><strong>목적을 파악하는 것이 습득에 이르는 지름길이다.</strong><span></span></span></dd></dl></li></ul><h3 id="WET-Write-Every-Tiem-Write-EveryThing-Twice"><a href="#WET-Write-Every-Tiem-Write-EveryThing-Twice" class="headerlink" title="*WET (Write Every Tiem, Write EveryThing Twice)"></a>*WET (Write Every Tiem, Write EveryThing Twice)</h3><p>DRY가 되어 있지 않은 코드에 대해 비꼬는 표현이다.</p><h3 id="OFOP-One-Fact-in-One-Place"><a href="#OFOP-One-Fact-in-One-Place" class="headerlink" title="*OFOP (One Fact in One Place)"></a>*OFOP (One Fact in One Place)</h3><dl><dt>한 곳에는 하나의 사실</dt><dd>데이터베이스 논리 설계에서 테이블 설계의 핵심이 되는 원칙이다.</dd></dl><h3 id="OAOO-Once-and-Only-Once"><a href="#OAOO-Once-and-Only-Once" class="headerlink" title="*OAOO (Once and Only Once)"></a>*OAOO (Once and Only Once)</h3><p>한번만, 단 한번만<br>DRY와 유사한 의미</p><hr><p><a id="third"></a></p><h2 id="3-YAGNI-You-Are-Not-Going-to-Need-It"><a href="#3-YAGNI-You-Are-Not-Going-to-Need-It" class="headerlink" title="3. YAGNI You Are Not Going to Need It"></a>3. YAGNI You Are Not Going to Need It</h2><h3 id="코드는-필요할-때-최소한으로"><a href="#코드는-필요할-때-최소한으로" class="headerlink" title="*코드는 필요할 때 최소한으로!"></a>*코드는 필요할 때 최소한으로!</h3><h3 id="why-코드의-예측은-빗나간다"><a href="#why-코드의-예측은-빗나간다" class="headerlink" title="*why_코드의 예측은 빗나간다."></a>*why_코드의 예측은 빗나간다.</h3><p>시간이 지날수록 이렇게 사용하지도 않는 코드가 있는 것인지 영문을 알 수 없다. 오히려 방해물이 된다.</p><h3 id="코드는-지금-필요한-것만"><a href="#코드는-지금-필요한-것만" class="headerlink" title="*코드는 지금 필요한 것만"></a>*코드는 지금 필요한 것만</h3><p><strong>우선 사용할 수 있는 데 가치를 주자.</strong><br>범용성보다는 <strong>단순성</strong>이라는 가치에 기준을 두고 고른다.<br>단순한 방식이 사실 범용성이 더 높을 때가 많다.</p><hr><p><a id="forth"></a></p><h2 id="4-PIE"><a href="#4-PIE" class="headerlink" title="4. PIE"></a>4. PIE</h2><p>Program Intently and Expressively<br><strong>의도를 표현해서 프로그래밍하라</strong></p><h3 id="코드의-의도를-전한다"><a href="#코드의-의도를-전한다" class="headerlink" title="*코드의 의도를 전한다."></a>*코드의 의도를 전한다.</h3><p>블로그에 글을 쓰듯이 명확한 의도<br><i class="fa fa-long-arrow-right">사람이 읽기 위한 것이기 때문</i></p><h3 id="why-코드가-유일한-실마리"><a href="#why-코드가-유일한-실마리" class="headerlink" title="*why_코드가 유일한 실마리"></a>*why_코드가 유일한 실마리</h3><p>코드는 소프트웨어 동작을 정확하고 완벽하게 알기 위한 유일한 실마리</p><ul><li>요구사항 정의서 : 어떤 기능을 원하는지가 적혀 있을 뿐</li><li>기본 설계서 : 어떤 식의 소프트웨어로 요구사항을 실현할지 적혀있을 뿐</li><li>상세 설계서 : 어떤 식의 구조로 소프트웨어를 작서할지에 관한 예정</li></ul><p><i class="fa fa-long-arrow-right"> 코드와 가장 밀접하지만, 실시간으로 코드와 동기화되지 않는다.<br><i class="fa fa-long-arrow-right"> 결국 코드가 유일한 실마리</i></i></p><h3 id="코드는-읽기-쉬운-것이-최우선"><a href="#코드는-읽기-쉬운-것이-최우선" class="headerlink" title="*코드는 읽기 쉬운 것이 최우선"></a>*코드는 읽기 쉬운 것이 최우선</h3><p><strong>읽기 쉬움</strong>을 중시하자.<br>작성효율보다는 <strong>읽는 효율</strong>이 우선시된다.!!읽기 쉽다면 나중에 실행 효율을 높이기는 간단하다.</p><blockquote><p>다른 사람이 내 코드를 볼 때 이해가 잘 되도록 노력하자.</p></blockquote><h3 id="두더지-잡기식-개발은-피한다"><a href="#두더지-잡기식-개발은-피한다" class="headerlink" title="*두더지 잡기식 개발은 피한다."></a>*두더지 잡기식 개발은 피한다.</h3><p>읽기 쉽고<br>오류가 없으며<br>품질이 좋은 코드와<br>테스트를 작성하려면 시간이 걸린다.</p><p>이는 단기적으로 손실로 보이지만, 두더지 잡기식 개발이 되지 않으므로<br><span style="color:white">장기적으로 반드시 이익을 가져다 준다.</span></p><h3 id="주석을-작성한다"><a href="#주석을-작성한다" class="headerlink" title="*주석을 작성한다."></a>*주석을 작성한다.</h3><p>주석으로 설명하지 않아도 되는 이해하기 쉬운 코드를 지향하면서,<br>표현할 수 없는 부분에는 주석을 활용하는 식으로<br>균형잡힌 코드를 작성하도록 하자.</p><h3 id="문학적-프로그래밍"><a href="#문학적-프로그래밍" class="headerlink" title="*문학적 프로그래밍"></a>*문학적 프로그래밍</h3><p>literate programming<br>코드 자체를 문서화하는 기법<br>문서를 기술하기 위한 언어가 프로그래밍 언어와 결함되어 있다.<br>코드는 곧 문서이며, 문서는 곧 코드다.</p><blockquote><p><a href="http://nevir.github.io/groc/languages.html" target="_blank" rel="noopener">groc</a></p></blockquote><hr><p><a id="fifth"></a></p><h2 id="5-SLAP"><a href="#5-SLAP" class="headerlink" title="5. SLAP"></a>5. SLAP</h2><p>Single Level of Abstraction Principle :: 추상화 수준의 통일</p><h3 id="코드-수준을-맞춘다"><a href="#코드-수준을-맞춘다" class="headerlink" title="*코드 수준을 맞춘다."></a>*코드 수준을 맞춘다.</h3><p><strong>고수준 추상화</strong> 개념과 <strong>저수준 추상화</strong> 개념을 분리해야한다.<br>상하 2계층이 아니라 기능의 복잡도에 따라 여러 계층으로 분리한다.<br>각 계층에서는 추상화 수준을 일치시킨다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 고수준(<span class="params"></span>) </span>&#123; <span class="comment">//수준 1의 목차</span></span><br><span class="line">    중수준<span class="number">1</span>();</span><br><span class="line">    중수준<span class="number">2</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 중수준1(<span class="params"></span>) </span>&#123; <span class="comment">//수준2의 목차-1</span></span><br><span class="line">    저수준<span class="number">1</span>();</span><br><span class="line">    저수준<span class="number">2</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 저수준1(<span class="params"></span>) </span>&#123; <span class="comment">//본문 내용</span></span><br><span class="line">  <span class="comment">//처리</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 저수준2(<span class="params"></span>) </span>&#123; <span class="comment">//본문 내용</span></span><br><span class="line">  <span class="comment">//처리</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 중수준2(<span class="params"></span>) </span>&#123; <span class="comment">//수준2의 목차-2</span></span><br><span class="line">  저수준<span class="number">3</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 저수준3(<span class="params"></span>) </span>&#123; <span class="comment">//본문 내용</span></span><br><span class="line">  <span class="comment">//처리</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="why-코드에-요약성과-열람성을-가져다준다"><a href="#why-코드에-요약성과-열람성을-가져다준다" class="headerlink" title="*why_코드에 요약성과 열람성을 가져다준다"></a>*why_코드에 요약성과 열람성을 가져다준다</h3><ul><li>함수의 일람 : 목차, 요약성을 지님</li><li>분할된 함수 : 작은 코드 묶음, 열람성이 좋아짐.</li></ul><h3 id="how-함수를-구조화한다"><a href="#how-함수를-구조화한다" class="headerlink" title="*how_함수를 구조화한다."></a>*how_함수를 구조화한다.</h3><p><strong>함수를 구조화하자.</strong><br>함수를 구조화하면 각 함수는 자신보다 한 단계 낮은 수준의 함수를 호출하는 처리가 중심이 된다.<br><i class="fa fa-long-arrow-right"> 다른 함수를 호출하는 코드로 구성된 함수 : 복합함수 (composed method)</i></p><p>복합함수</p><ul><li>최대한 작게 만든다.</li><li>추상화 수준이 다른 함수를 호출하지 않도록 한다.</li></ul><h3 id="SLAP의-적용범위"><a href="#SLAP의-적용범위" class="headerlink" title="*SLAP의 적용범위"></a>*SLAP의 적용범위</h3><p>함수 뿐만 아니라 모듈 등에도 적용된다.</p><ul><li>개념을 저장할 저장소는 추상클래스와 해당 상속클래스가 된다.<ul><li>추상클래스 : 무엇인가 덜 구체화 된 것</li><li>객체 : 상태와 행동을 가진 것</li><li>클래스 : 객체를 만들기 위한 틀</li><li>초기화 : 클래스를 이용하여 객체를 생성</li></ul></li><li><strong>추상 클래스</strong>에 높은 수준의 개념을 갖게 하고</li><li><strong>상속 클래스</strong>에 낮은 수준의 개념을 갖게 한다.</li></ul><h3 id="SLAP의-순서"><a href="#SLAP의-순서" class="headerlink" title="*SLAP의 순서"></a>*SLAP의 순서</h3><p>글을 쓸때는<br><strong>내용을 쓰는 것</strong>과 <strong>내용을 이해하기 쉽게 전하기 위한 구성을 생각하는 것</strong>을 별개의 작업으로 본다.</p><ul><li>구체적인 처리를 작성하는 작업</li><li>추상화 수준을 일치시키는 작업은<br>모드를 전환해서 별개의 작업으로 수행하도록 하자.<br>그래야 작업이 쉬워지고 결과적으로 더 좋은 코드가 만들어진다.</li></ul><hr><p><a id="sixth"></a></p><h2 id="6-OCP"><a href="#6-OCP" class="headerlink" title="6. OCP"></a>6. OCP</h2><p>Open-Closed Principle : 개방-폐쇠의 원칙</p><h3 id="코드의-변경은-파급시키지-않는다"><a href="#코드의-변경은-파급시키지-않는다" class="headerlink" title="*코드의 변경은 파급시키지 않는다."></a>*코드의 변경은 파급시키지 않는다.</h3><p>코드는 확장에 대해서 열려 있고<br>수정에 대해서 닫혀 있는<br>2가지 속성을 동시게 충족하도록 설계한다.</p><ul><li>확장에 열려있다. : 코드의 동작을 확장할 수 있다</li><li>수정에 닫혀있다. : 코드의 동작을 확장하더라도 그 밖의 코드는 전혀 영향을 받지 않는다는 의미</li></ul><h3 id="why-코드의-변경에-유연하게-대응한다"><a href="#why-코드의-변경에-유연하게-대응한다" class="headerlink" title="*why_코드의 변경에 유연하게 대응한다."></a>*why_코드의 변경에 유연하게 대응한다.</h3><p>변경에 대해 유연하게 대응할 수 있는 유연한 설계가 요구된다.</p><h3 id="OCP의-적용-범위"><a href="#OCP의-적용-범위" class="headerlink" title="*OCP의 적용 범위"></a>*OCP의 적용 범위</h3><p>코드의 모든 부분에 OCP를 적용하는 것은 과한 방식이다.<br>코드의 단순함을 우지할 수 없다.</p><p>변경내용을 지나치게 예측하지 말아야 한다.<br><strong style="color:white">실제 변경이 발생하기를 기다리는 전략.</strong><br>첫번째 변경을 감수하고, 두번째부터 OCP를 적용한다.<br>기본적으로 예측 가능한 부분에는 확장성 있게 작업한다.</p><h3 id="OCP의-구현과-설계"><a href="#OCP의-구현과-설계" class="headerlink" title="*OCP의 구현과 설계"></a>*OCP의 구현과 설계</h3><p><strong>대표적인 기술 : 객체지향의</strong> <strong style="color:white">다향성</strong></p><ul><li>다향성(polymorphism)은 특정 기능을 <strong>선언(설계)부분</strong>(=인터페이스)과 <strong>구현(동작)부분</strong>으로 분리한 후 구현부분을 다양한 방법으로 만들어 선택해서 사용할 수 있게 하는 기능.</li><li>선언부분과 구현부분은 1:N의 다향성 관계가 형성</li><li>다향성 <strong>선언</strong>부분: 인터페이스(interface)와 추상클래스(abstract class)</li><li>다향성 <strong>구현</strong>부분: 클래스(class)</li></ul><p><strong>대표적인 디자인 패턴</strong></p><ul><li>strategy pattern<ul><li>교환 가능한 행동을 캡슐화하고 위임을 통해서 어떤 행동을 사용할지 결정한다.</li><li>애플리케이션에서 달라지는 부분을 찾아내고, 달라지지 않는 부분으로부터 분리 시킨다.</li><li>바뀌는 부분은 따로 뽑아서 <strong>캡슐화</strong> 시킨다.</li></ul></li><li>Observer<ul><li>한 객체의 상태가 바뀌면 그 객체에 의존하는 다른 객체들한테 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다 의존성을 정의한다.</li></ul></li><li>template method pattern</li><li>decorater pattern</li></ul><hr><hr><p>참고링크<br>객체지향의 다향성 : <a href="http://webclub.tistory.com/406" target="_blank" rel="noopener">http://webclub.tistory.com/406</a><br>strategy pattern : <a href="http://hyeonstorage.tistory.com/146" target="_blank" rel="noopener">http://hyeonstorage.tistory.com/146</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[프로그래밍의 정석]&lt;/strong&gt;을 보고 메모한 부분을 정리했습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Programing" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Programing/"/>
    
    
      <category term="programming" scheme="http://feel5ny.github.io/tags/programming/"/>
    
      <category term="principle" scheme="http://feel5ny.github.io/tags/principle/"/>
    
  </entry>
  
  <entry>
    <title>chap01.전제 - 프로그래밍 불변의 진실</title>
    <link href="http://feel5ny.github.io/2018/08/11/principle_01/"/>
    <id>http://feel5ny.github.io/2018/08/11/principle_01/</id>
    <published>2018-08-11T11:12:34.000Z</published>
    <updated>2019-02-04T17:33:43.618Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>[프로그래밍의 정석]</strong>를 보고 메모한 부분을 정리했습니다.</p></blockquote><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><p>1.1 프로그래밍에 은제탄환은 없다.<br>1.2 코드는 설계서다<br>1.3 코드는 반드시 변경된다.</p><hr><h4 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h4><hr><p><a id="third"></a></p><h2 id="1-1-프로그래밍에-은제-탄환은-없다"><a href="#1-1-프로그래밍에-은제-탄환은-없다" class="headerlink" title="1.1 프로그래밍에 은제 탄환은 없다."></a>1.1 프로그래밍에 은제 탄환은 없다.</h2><h3 id="WHY-소프트웨어는-본질적으로-난해하다"><a href="#WHY-소프트웨어는-본질적으로-난해하다" class="headerlink" title="*WHY_소프트웨어는 본질적으로 난해하다."></a>*WHY_소프트웨어는 본질적으로 난해하다.</h3><ol><li><strong>복잡성</strong></li><li><strong>동조성</strong> : 실세계와 계속 동조해야한다.</li><li><strong>가변성</strong> : 소프트웨어가 사용자의 인식에 영향을 미치며 새로운 요구사항이 생긴다.</li><li><strong>비가시성</strong> : 추상화해서 단순한 도면으로 만드는 작업은 가능하나, 이때의 정보가 사상되므로 모든 정보를 표현할 수 없다.</li></ol><h3 id="HOW-역사를-배워-복잡함에-맞선다"><a href="#HOW-역사를-배워-복잡함에-맞선다" class="headerlink" title="*HOW_역사를 배워 복잡함에 맞선다."></a>*HOW_<span style="color:white">역사를 배워 복잡함에 맞선다.</span></h3><p>소프트웨어 개발의 역사는 복잡함과 투쟁의 역사.</p><h3 id="소프트웨어의-우유적인-부분을-개선"><a href="#소프트웨어의-우유적인-부분을-개선" class="headerlink" title="*소프트웨어의 우유적인 부분을 개선"></a>*소프트웨어의 우유적인 부분을 개선</h3><ul><li>본질 : 어떤 대상에서 그것이 없으면 대상물이라고 할 수 없는 성질</li><li>비본질(우유) : 부차적이고 부수적이라는 의미로 그것이 없어도 대상물이라고 할 수 있는 성질</li></ul><ul><li>소프트웨어 개발 현장에서 필요한 기술이라고 알려진 것의 대부분은 우유적인 부분<br>빌드 환경, 프로그래밍언어, 라이브러리, 프레임워크 등등은 우유적..</li><li>우유적인 부분의 개선 중에서 큰 성과는 <strong>자동화</strong><br>(테스트, 빌드, 환경 설정 등을 자동화 <i class="fa fa-long-arrow-right"> 작업 품질 향상)</i></li><li>우유적인 부분을 <i class="fa fa-long-arrow-right"> 자동화<br><i class="fa fa-long-arrow-right"> <u>본질적인 부분에 시간을 할애하자.</u></i></i></li></ul><hr><h2 id="1-2-코드는-설계서다"><a href="#1-2-코드는-설계서다" class="headerlink" title="1.2 코드는 설계서다."></a>1.2 코드는 설계서다.</h2><h3 id="what-코드가-곧-설계서"><a href="#what-코드가-곧-설계서" class="headerlink" title="*what_코드가 곧 설계서"></a>*what_코드가 곧 설계서</h3><ul><li><p><strong>설계</strong></p><ul><li>상세설계</li><li>프로그래밍</li><li>테스트</li><li>디버깅</li></ul></li><li><p><strong>설계서</strong></p><ul><li>코드</li></ul></li><li><p><strong>공정(제조)</strong></p><ul><li>배포</li><li>컴파일러, 빌드시스템</li></ul></li></ul><h3 id="how-우수한-설계자-프로그래머-가-필요"><a href="#how-우수한-설계자-프로그래머-가-필요" class="headerlink" title="*how_우수한 설계자(프로그래머)가 필요"></a>*how_우수한 설계자(프로그래머)가 필요</h3><p>설계란 창조적이며 기예가 필요한 행위다.<br>(설계 = 기본설계 + 상세설계 + 프로그래밍 + 테스트 + 디버깅)<br>신입에게 맡길 첫 업무가 아니라 고도로 숙련된 프로그래머의 업무여야 한다.</p><h3 id="로제타-스톤"><a href="#로제타-스톤" class="headerlink" title="*로제타 스톤"></a>*로제타 스톤</h3><dl><dt><strong>장래의 유지보수 담당자에게 필요한 가이드북</strong><br>: 소프트웨어 개발 환경을 이해하기 위한 정보와</dt><dd>소프트웨어 아키텍처를 이해하기 위한 정보가 담겨 있다.</dd></dl><h4 id="소프트웨어-개발-환경을-이해하기-위한-정보"><a href="#소프트웨어-개발-환경을-이해하기-위한-정보" class="headerlink" title="소프트웨어 개발 환경을 이해하기 위한 정보"></a>소프트웨어 개발 환경을 이해하기 위한 정보</h4><ul><li>빌드와 테스트 프로세스를 수행하는 방법</li><li>소프트웨어를 파악할 때 함정에 빠지는 일을 방지해 준다.</li></ul><h4 id="소프트웨어-아키텍처"><a href="#소프트웨어-아키텍처" class="headerlink" title="소프트웨어 아키텍처"></a>소프트웨어 아키텍처</h4><ul><li>전체를 파악하기 위해 필요한 그림</li><li>코드로부터 파악할 수 없는 코드 전체를 부감(높은 곳에서 내려다봄)해서 본 그림을 기술한다.</li></ul><hr><h2 id="1-3-코드는-반드시-변경된다"><a href="#1-3-코드는-반드시-변경된다" class="headerlink" title="1.3 코드는 반드시 변경된다."></a>1.3 코드는 반드시 변경된다.</h2><ul><li>최초 배포만으로 요구사항을 완전히 망라한 소프트웨어를 만들어 내는 것은 불가능하다.</li><li>변경에 강한 코드를 작성한다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[프로그래밍의 정석]&lt;/strong&gt;를 보고 메모한 부분을 정리했습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Programing" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Programing/"/>
    
    
      <category term="programming" scheme="http://feel5ny.github.io/tags/programming/"/>
    
      <category term="principle" scheme="http://feel5ny.github.io/tags/principle/"/>
    
  </entry>
  
  <entry>
    <title>1부/ chap0. RxJs를 시작하기 전에</title>
    <link href="http://feel5ny.github.io/2018/08/10/Async_00/"/>
    <id>http://feel5ny.github.io/2018/08/10/Async_00/</id>
    <published>2018-08-10T11:12:34.000Z</published>
    <updated>2019-01-03T15:33:29.067Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>[퀵스타트 Rxjs]</strong>를 보고 메모한 부분을 정리했습니다.</p></blockquote><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li>웹 환경의 변화</li><li>웹 개발 복잡도 증가</li><li>웹 애플리케이션은 상태 머신이다. <a href="#third">=&gt;</a></li><li>웹 애플리케이션 오류가 발생하는 경우 <a href="#forth">=&gt;</a></li><li>RxJS는 무엇인가? 그리고 웹 어플리케이션과 무슨 관련이 있는가?</li></ol><hr><h4 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h4><p>대부분 처음 개발을 시작할 때는 <strong>요구사항</strong>을 어떻게 프로그래밍할 것인지를 고민하게 된다.<br><strong>즉, 구현 자체에만 초점을 맞추게 된다.</strong> 물론, 이는 개발에서 무엇보다 중요한 문제이다. 하지만, 시간이 지나 초급 개발자 딱지를 떼고 경험이 쌓이기 시작하면 구현보다는 <span class="mint"><strong>소프트웨어를 얼마나 효과적으로 유지보수할 수 있는지?</strong></span> 또는 얼마나 많은 문제점을 설계나 테스트 코드를 통해 사전에 해결할 수 있을지를 고민하게 된다.<br>그래서 우리는 자연스레 기존 문제들을 해결하기 위해 고심했던 라이브러리나, 디자인 패턴들을 하나둘씩 적용하게 되고,<br>결국에는 이런 고민들이 녹아들어 간 프레임워크에 관심을 갖게 된다.<br>…<br><strong>결과물(프레임워크)을 잘 사용하는 것도 중요하지만 그 기술의 결과물이 어떤 고민의 산물인지 아는 것이 더 중요하다.</strong></p><hr><p><a id="third"></a></p><h2 id="3-웹-어플리케이션은-상태-머신이다"><a href="#3-웹-어플리케이션은-상태-머신이다" class="headerlink" title="3. 웹 어플리케이션은 상태 머신이다."></a>3. 웹 어플리케이션은 상태 머신이다.</h2><h3 id="상태머신이란-state-machine"><a href="#상태머신이란-state-machine" class="headerlink" title="상태머신이란? state machine"></a>상태머신이란? state machine</h3><p>주어진 시간의 상태(state)가 존재하고,<br>어떤 한 사건(input)에 의해<br>다른 상태 (state)로 변할 수 있는<br>수학적 모델을 의미힌다.</p><img src="/images/2018/23/01.jpg" width="400px"><ol><li>시스템으로 input이 발생한다.</li><li>프로그램 로직은 input과 현재 프로그램 상태에 따라 행위를 결정한다.</li><li>프로그램 로직은 결정에 따라, 프로그램 상태를 변경한다.</li><li>경우에 따라서는 프로그램 로직은 output을 생산하기도 한다.</li></ol><p>웹 어플리케이션은 이런 기능들의 집합으로 구성되어있다.<br>크게 보면 웹 어플리케이션도 하나의 큰 상태 머신인 셈.</p><hr><p><a id="forth"></a></p><h2 id="4-웹-애플리케이션-오류가-발생하는-경우"><a href="#4-웹-애플리케이션-오류가-발생하는-경우" class="headerlink" title="4. 웹 애플리케이션 오류가 발생하는 경우**"></a>4. 웹 애플리케이션 오류가 발생하는 경우**</h2><p>웹 어플리케이션을 하나의 상태 머신으로 본다면<br>정확한 <strong>입력</strong>과 <strong>로직</strong>으로 상태를 관리하는 방법이 중요하다.<br>=&gt; 이에 따라 오류의 발생 여부가 결정된다.</p><p>∴ <strong>각 구성요소의 상태를 어떻게 관리하느냐</strong>에 따라 안정적인 어플리케이션을 만들 수 있다.</p><h3 id="4-1-입력-오류"><a href="#4-1-입력-오류" class="headerlink" title="4-1. 입력 오류"></a>4-1. 입력 오류</h3><p>서버로부터 전달받은 데이터를 입력값으로 사용하는 경우</p><ol><li>서버에서 전달받은 응답 결괏값이 정상적으로 왔을 경우에만 입력값을 전달해야 한다.<ul><li>입력값을 별도로 제어해야함.</li></ul></li><li>응답 데이터의 결과가 미처 오기도 전에 데이터를 입력값으로 전달하거나 응답 중에 에러가 발생하여 비정상적인 응답 데이터를 입력값으로 전달하면 오류가 발생할 수 있다.<ul><li>오류처리 필요</li></ul></li></ol><h3 id="4-2-상태-오류"><a href="#4-2-상태-오류" class="headerlink" title="4-2. 상태 오류"></a>4-2. 상태 오류</h3><p>상태 오류가 발생하는 이유는 상태 변화를 정확하게 전달하지 못하는 경우이다.</p><ol><li><strong>구성요소 간</strong>에 의존도가 있는 경우<br>구성요소 간 의존도가 있는 경우, 구성요소의 변경 상태는 적시에 다른 구성요소에 전달되어야 한다.</li><li>두번째 <strong>호출 순서</strong>에 의존도가 있는 경우<br>구성요소 간 호출 순서에 의존도가 있는 경우, 구성요소는 <strong>순서</strong>에 맞게 호출되어야만 한다.</li></ol><hr><p>cf__1. redux의 옵저버 패턴</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, initialState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> state = initialState; <span class="comment">// 상태 초기화</span></span><br><span class="line">  <span class="comment">// Setup listners to keep track of when the state is changed</span></span><br><span class="line">  <span class="comment">// to triger rerenders (observer pattern)</span></span><br><span class="line">  <span class="keyword">const</span> listeners = []; <span class="comment">// </span></span><br><span class="line">  <span class="keyword">const</span> subscribe = <span class="function">(<span class="params">listener</span>) =&gt;</span> listeners.push(listener); <span class="comment">// 구독함수. listener가 들어오면 listeners에 담는다.</span></span><br><span class="line">  <span class="keyword">const</span> getState = <span class="function"><span class="params">()</span> =&gt;</span> (state); <span class="comment">// get 함수</span></span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="function">(<span class="params">action</span>) =&gt;</span> &#123;  <span class="comment">// action을 가져다주는 아이..  </span></span><br><span class="line">    state = reducer(state, action); <span class="comment">// state에 초기값, 액션을 넣고 상태값 담겨있는 객체 반환</span></span><br><span class="line">    <span class="comment">// call each listener function when the state is changed</span></span><br><span class="line">    <span class="comment">// its just a notification that state is changed</span></span><br><span class="line">    listeners.forEach(<span class="function"><span class="params">l</span> =&gt;</span> l()); <span class="comment">// </span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    subscribe,</span><br><span class="line">    getState,</span><br><span class="line">    dispatch,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(action.type === <span class="string">'ADD_MESSAGE'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      messages: state.messages.concat(action.message),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">if</span>(action.type === <span class="string">'DELETE_MESSAGE'</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      messages: [</span><br><span class="line">        ...state.messages.slice(<span class="number">0</span>, action.index),</span><br><span class="line">        ...state.messages.slice(action.index + <span class="number">1</span>, state.messages.length),</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// set initial state to pass into to store</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">messages</span>: [] &#125;;</span><br><span class="line"><span class="comment">// initialize the store</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, initialState);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Messages</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.forceUpdate());</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> messages = store.getState().messages;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">'ui segment'</span>&gt;</span><br><span class="line">        &lt;MessageView messages=&#123;messages&#125; /&gt;</span><br><span class="line">        &lt;MessageInput /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[퀵스타트 Rxjs]&lt;/strong&gt;를 보고 메모한 부분을 정리했습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; title=&quot;목차&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Angular" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Angular/"/>
    
    
      <category term="async" scheme="http://feel5ny.github.io/tags/async/"/>
    
      <category term="rxjs" scheme="http://feel5ny.github.io/tags/rxjs/"/>
    
  </entry>
  
  <entry>
    <title>13/ Image 업로드 시 회전에 대하여 (feat. exif 메타데이터 - Orientation)</title>
    <link href="http://feel5ny.github.io/2018/08/06/JS_13/"/>
    <id>http://feel5ny.github.io/2018/08/06/JS_13/</id>
    <published>2018-08-06T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.466Z</updated>
    
    <content type="html"><![CDATA[<p>웹 브라우저에서 이미지를 업로드 할 때 type이 file인 input을 통해 이미지를 받고, file API를 사용하여 이미지를 read합니다. 이때 핸드폰을 세워서 촬영할 경우 사진 이미지가 멋대로 회전되서 read될때가 있습니다. 이를 잡기 위해서는 사진의 메타정보(exif)에 있는 orientation이라는 정보를 확인해야합니다.<br>exif가 무엇인지 간략하게 알아보고, 라이브러리를 사용하여 회전 버그를 픽스하는 방법에 대해서 정리해보았습니다.</p><hr><p>목차 </p><ol><li>exif란? <a href="https://ko.wikipedia.org/wiki/%EA%B5%90%ED%99%98_%EC%9D%B4%EB%AF%B8%EC%A7%80_%ED%8C%8C%EC%9D%BC_%ED%98%95%EC%8B%9D" target="_blank" rel="noopener">출처</a></li><li>JavaScript 로드 시 회전 픽스방법</li></ol><hr><h2 id="1-exif란"><a href="#1-exif란" class="headerlink" title="1. exif란?"></a>1. exif란?</h2><h3 id="교환-이미지-파일-형식-Exif-EXchangable-Image-File-format"><a href="#교환-이미지-파일-형식-Exif-EXchangable-Image-File-format" class="headerlink" title="교환 이미지 파일 형식 (Exif; EXchangable Image File format)"></a><strong>교환 이미지 파일 형식</strong> (Exif; EXchangable Image File format)</h3><p>디지털 카메라에서 이용되는 이미지 파일 포맷이다.<br>이 데이터는 JPEG, TIFF 6.0과 RIFF, WAV 파일 포맷에서 이용되며<br><strong><code>사진에 대한 정보를 포함하는 메타데이터</code></strong>를 추가한다.<br>Exif는 JPEG 2000, PNG나 GIF파일에서는 지원하지 않는다.</p><h3 id="EXIF의-메타데이터"><a href="#EXIF의-메타데이터" class="headerlink" title="EXIF의 메타데이터"></a>EXIF의 메타데이터</h3><p>EXIF 메타데이터는 다음 정보를 포함한다.</p><ul><li>날짜와 시간 정보</li><li>카메라 설정</li><li>저작권 정보에 대한 설명</li></ul><h3 id="지리정보-기록"><a href="#지리정보-기록" class="headerlink" title="지리정보 기록"></a>지리정보 기록</h3><p>교환 이미지 파일 형식은 <code>위치 정보</code>를 기록하는 <strong>표준</strong>을 갖고 있다.<br>기존에는 GPS 수신기를 내장한 극소수의 카메라만이 사진이 찍힌 장소의 정보를 저장할 수 있었다.<br>니콘 D300이나 니콘 D90, 파인픽스 S5 Pro, (캐논 EOS 6D 는 내부 장착)는 카메라 플래시 연결부에 별도의 GPS 수신기를 장착하여 지리 정보를 기록할 수 있다. 기록된 GPS 데이터는 컴퓨터에서 다른 디지털 사진에도 추가될 수 있다.</p><p><strong>그러나 최근에는 GPS 수신기를 장착하고 사진 촬영이 가능한 수많은 휴대폰과 태블릿PC 등이 있어<br>해당 기기로 사진 촬영을 할 경우 위치 정보를 같이 저장할 수 있는 옵션을 지원하여 위치 정보를 함께 기록하여 촬영하기 쉬워졌다.</strong></p><h3 id="Exif-이미지-정보"><a href="#Exif-이미지-정보" class="headerlink" title="Exif : 이미지 정보"></a>Exif : 이미지 정보</h3><p>Exif 데이터는 이미지 파일 자체에 끼워진다.<br>많은 그래픽 소프트웨어에서 Exif 데이터를 인식하고,<br>파일이 변경될 때에도 메타데이터를 보존한다.<br>단 구버전의 경우에는 해당되지 않는다.<br>많은 이미지 갤러리 프로그램 역시 Exif 데이터를 인식하고, 이미지 옆에 Exif 정보를 보여 준다.</p><p>Exif 메타데이터는 </p><ul><li>카메라 제조사 </li><li>카메라 모델</li><li><strong>회전 방향</strong></li><li>날짜와 시간 </li><li>색 공간</li><li>초점 거리 </li><li>플래시</li><li>ISO 속도</li><li>조리개</li><li>셔터 속도</li><li>gps<br>등의 정보를 제공한다.</li></ul><blockquote><p>포토샵이나 라이트룸에서 사진을 import한 후 info를 확인하면 사진 정보를 바로 확인할 수 있는데, 이 사진이 갖고 있는 exif데이터로 확인하는 듯 </p></blockquote><img src="/images/2018/22/Konqueror_Exif_data.jpg"><hr><hr><h2 id="2-JavaScript-로드-시-회전-픽스방법"><a href="#2-JavaScript-로드-시-회전-픽스방법" class="headerlink" title="2. JavaScript 로드 시 회전 픽스방법"></a>2. JavaScript 로드 시 회전 픽스방법</h2><p>전체 flow는 이렇습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> input file에서 image upload</span><br><span class="line"><span class="number">2.</span> File API중 FileReader를 사용하여 file의 data 확인</span><br><span class="line"><span class="number">3.</span> reader.onload 에서 Image 인스턴스 생성</span><br><span class="line"><span class="number">4.</span> read의 result값 == binary 데이터</span><br><span class="line"><span class="number">5.</span> img src에 result값 삽입</span><br><span class="line"><span class="number">6.</span> binary 데이터에서 orientation 관련 태그값 select =&gt; orientation 값 추출</span><br><span class="line"><span class="number">7.</span> orientation 값에 따라 img 회전 </span><br><span class="line"><span class="number">8.</span> canvas 생성, img를 canvas에서 다시 그림 (drawImage)</span><br><span class="line"><span class="number">9.</span> 해당 canvas의 toDataURL를 사용하여 dataUrl추출</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="exif-중-orientation-값"><a href="#exif-중-orientation-값" class="headerlink" title="exif 중 - orientation 값"></a>exif 중 - orientation 값</h3><img src="/images/2018/22/orientation.gif">fileList => file => binary Data => exif의 주소값을 찾아서 사진 정보를 get해오기(exif라는 라이브러리를 들춰보면 재밌는 것이!!많습니다.)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// Tiff : Tagged Image File Format</span></span><br><span class="line"><span class="keyword">var</span> TiffTags = EXIF.TiffTags = &#123;</span><br><span class="line">      <span class="number">0x0100</span> : <span class="string">"ImageWidth"</span>,</span><br><span class="line">      <span class="number">0x0101</span> : <span class="string">"ImageHeight"</span>,</span><br><span class="line">      <span class="number">0x8769</span> : <span class="string">"ExifIFDPointer"</span>,</span><br><span class="line">      <span class="number">0x8825</span> : <span class="string">"GPSInfoIFDPointer"</span>,</span><br><span class="line">      <span class="number">0xA005</span> : <span class="string">"InteroperabilityIFDPointer"</span>,</span><br><span class="line">      <span class="number">0x0102</span> : <span class="string">"BitsPerSample"</span>,</span><br><span class="line">      <span class="number">0x0103</span> : <span class="string">"Compression"</span>,</span><br><span class="line">      <span class="number">0x0106</span> : <span class="string">"PhotometricInterpretation"</span>,</span><br><span class="line">      <span class="number">0x0112</span> : <span class="string">"Orientation"</span>, &lt;==</span><br><span class="line">      <span class="number">0x0115</span> : <span class="string">"SamplesPerPixel"</span>,</span><br><span class="line">      <span class="number">0x011C</span> : <span class="string">"PlanarConfiguration"</span>,</span><br><span class="line">      <span class="number">0x0212</span> : <span class="string">"YCbCrSubSampling"</span>,</span><br><span class="line">      <span class="number">0x0213</span> : <span class="string">"YCbCrPositioning"</span>,</span><br><span class="line">      <span class="number">0x011A</span> : <span class="string">"XResolution"</span>,</span><br><span class="line">      <span class="number">0x011B</span> : <span class="string">"YResolution"</span>,</span><br><span class="line">      <span class="number">0x0128</span> : <span class="string">"ResolutionUnit"</span>,</span><br><span class="line">      <span class="number">0x0111</span> : <span class="string">"StripOffsets"</span>,</span><br><span class="line">      <span class="number">0x0116</span> : <span class="string">"RowsPerStrip"</span>,</span><br><span class="line">      <span class="number">0x0117</span> : <span class="string">"StripByteCounts"</span>,</span><br><span class="line">      <span class="number">0x0201</span> : <span class="string">"JPEGInterchangeFormat"</span>,</span><br><span class="line">      <span class="number">0x0202</span> : <span class="string">"JPEGInterchangeFormatLength"</span>,</span><br><span class="line">      <span class="number">0x012D</span> : <span class="string">"TransferFunction"</span>,</span><br><span class="line">      <span class="number">0x013E</span> : <span class="string">"WhitePoint"</span>,</span><br><span class="line">      <span class="number">0x013F</span> : <span class="string">"PrimaryChromaticities"</span>,</span><br><span class="line">      <span class="number">0x0211</span> : <span class="string">"YCbCrCoefficients"</span>,</span><br><span class="line">      <span class="number">0x0214</span> : <span class="string">"ReferenceBlackWhite"</span>,</span><br><span class="line">      <span class="number">0x0132</span> : <span class="string">"DateTime"</span>,</span><br><span class="line">      <span class="number">0x010E</span> : <span class="string">"ImageDescription"</span>,</span><br><span class="line">      <span class="number">0x010F</span> : <span class="string">"Make"</span>,</span><br><span class="line">      <span class="number">0x0110</span> : <span class="string">"Model"</span>,</span><br><span class="line">      <span class="number">0x0131</span> : <span class="string">"Software"</span>,</span><br><span class="line">      <span class="number">0x013B</span> : <span class="string">"Artist"</span>,</span><br><span class="line">      <span class="number">0x8298</span> : <span class="string">"Copyright"</span></span><br><span class="line">  &#125;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>번거로운 작업이기 때문에.. 아래 라이브러리를 사용합니다.</p><ul><li><a href="https://github.com/blueimp/JavaScript-Load-Image" target="_blank" rel="noopener">load-image-orientation.js</a></li><li><a href="https://github.com/exif-js/exif-js" target="_blank" rel="noopener">exif.js</a></li></ul><p>개인적으로는 <code>load-image-orientation</code>가 좋습니다 :)<br>orientation값에 따른 회전 이외에도 crop기능도 있습니다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load-image-orientation.js</span></span><br><span class="line"><span class="keyword">switch</span> (orientation) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="comment">// horizontal flip</span></span><br><span class="line">    ctx.translate(width, <span class="number">0</span>)</span><br><span class="line">    ctx.scale(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="comment">// 180° rotate left</span></span><br><span class="line">    ctx.translate(width, height)</span><br><span class="line">    ctx.rotate(<span class="built_in">Math</span>.PI)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="comment">// vertical flip</span></span><br><span class="line">    ctx.translate(<span class="number">0</span>, height)</span><br><span class="line">    ctx.scale(<span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="comment">// vertical flip + 90 rotate right</span></span><br><span class="line">    ctx.rotate(<span class="number">0.5</span> * <span class="built_in">Math</span>.PI)</span><br><span class="line">    ctx.scale(<span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="comment">// 90° rotate right</span></span><br><span class="line">    ctx.rotate(<span class="number">0.5</span> * <span class="built_in">Math</span>.PI)</span><br><span class="line">    ctx.translate(<span class="number">0</span>, -height)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="comment">// horizontal flip + 90 rotate right</span></span><br><span class="line">    ctx.rotate(<span class="number">0.5</span> * <span class="built_in">Math</span>.PI)</span><br><span class="line">    ctx.translate(width, -height)</span><br><span class="line">    ctx.scale(<span class="number">-1</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="comment">// 90° rotate left</span></span><br><span class="line">    ctx.rotate(<span class="number">-0.5</span> * <span class="built_in">Math</span>.PI)</span><br><span class="line">    ctx.translate(-width, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>라이브러리 내부를 보시면, orientation 값에 따라 image를 회전하는 것을 볼 수 있습니다.</p><p>이미지 resizing 함수도 따로 작업했었는데, 이번 이슈를 통해서 찾은 load-image 라이브러리에 리사이징관련된 메서드들도 있는 것을 확인했습니다. </p><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://ko.wikipedia.org/wiki/%EA%B5%90%ED%99%98_%EC%9D%B4%EB%AF%B8%EC%A7%80_%ED%8C%8C%EC%9D%BC_%ED%98%95%EC%8B%9D" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/%EA%B5%90%ED%99%98_%EC%9D%B4%EB%AF%B8%EC%A7%80_%ED%8C%8C%EC%9D%BC_%ED%98%95%EC%8B%9D</a></li><li><a href="https://magnushoff.com/jpeg-orientation.html" target="_blank" rel="noopener">https://magnushoff.com/jpeg-orientation.html</a></li><li><a href="http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javaScript-2/" target="_blank" rel="noopener">http://code.flickr.net/2012/06/01/parsing-exif-client-side-using-javaScript-2/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;웹 브라우저에서 이미지를 업로드 할 때 type이 file인 input을 통해 이미지를 받고, file API를 사용하여 이미지를 read합니다. 이때 핸드폰을 세워서 촬영할 경우 사진 이미지가 멋대로 회전되서 read될때가 있습니다. 이를 잡기
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="File API" scheme="http://feel5ny.github.io/tags/File-API/"/>
    
      <category term="EXIF" scheme="http://feel5ny.github.io/tags/EXIF/"/>
    
  </entry>
  
  <entry>
    <title>📓 읽기 좋은 코드가 좋은 코드다. || part3. 코드 재작성하기</title>
    <link href="http://feel5ny.github.io/2018/08/03/Clean_code_3/"/>
    <id>http://feel5ny.github.io/2018/08/03/Clean_code_3/</id>
    <published>2018-08-03T11:12:34.000Z</published>
    <updated>2019-01-03T15:33:29.063Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>[읽기 좋은 코드가 좋은 코드다.]</strong>를 보고 메모할 부분을 정리했습니다.</p></blockquote><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol start="10"><li>상관없는 하위문제 추출하기 ⇒ 관심사 분리 <a href="#first">⇒</a></li><li>한번에 하나씩 ⇒ 관심사 분리 방법 <a href="#scond">⇒</a></li><li>생각을 코드로 만들기 <a href="#third">⇒</a></li><li>코드 분량 줄이기 <a href="#forth">⇒</a></li></ol><p><strong>서론</strong><br>좋은 코드는 무슨 일이 일어나고 있는지를 빠르게 전달해준다.<br>사용하기에도 즐겁고, 자신에게도 더 좋은 코드를 만들어야 하겠다는 욕구를 불러일으키기도 한다.</p><hr><hr><h1 id="PART-3-코드-재작성하기"><a href="#PART-3-코드-재작성하기" class="headerlink" title="PART 3 ) 코드 재작성하기"></a>PART 3 ) 코드 재작성하기</h1><p>엔지니어링은 커다란 문제를<br>작은 문제들로 쪼갠 다음,<br>각각의 문제에 대한 해결책을 구하고,<br>다시 하나의 해결책으로 맞추는 일련의 작업을 한다.<br>이러한 원리를 코드에 적용하면 코드가 더 튼튼해지며 가독성도 좋아진다.</p><ol><li><p>주어진 함수나 코드 블록을 보고, 스스로에게 질문하라<br><strong>“상위수준에서 본 이 코드의 목적은 무엇인가?”</strong></p></li><li><p>코드의 모든 줄에 질문을 던져라<br><strong>“이 코드는 직접적으로 목적을 위해서 존재하는가?</strong><br>혹은 목적을 위해서 필요하긴 하지만 <strong>목적 자체와 직접적으로 상관없는 하위문제를 해결하는가?”</strong></p></li><li><p>상당히 원래의 목적과 직접적으로 관련되지 않은 하위문제를 해결하는 코드 분량이 많으면,<br><strong>이를 추출해서 별도의 함수로 만든다.</strong></p></li></ol><hr><p><a id="first"></a></p><h2 id="10-상관없는-하위문제-추출하기-⇒-관심사-분리"><a href="#10-상관없는-하위문제-추출하기-⇒-관심사-분리" class="headerlink" title="10. 상관없는 하위문제 추출하기 ⇒ 관심사 분리"></a>10. 상관없는 하위문제 추출하기 ⇒ 관심사 분리</h2><hr><p><a id="second"></a></p><h2 id="11-한번에-하나씩-⇒-관심사-분리-방법"><a href="#11-한번에-하나씩-⇒-관심사-분리-방법" class="headerlink" title="11. 한번에 하나씩 ⇒ 관심사 분리 방법"></a>11. 한번에 하나씩 ⇒ 관심사 분리 방법</h2><p>함수는 오직 한 가지 작업만 수행해야 한다.</p><ol><li>코드가 수행하는 모든 ‘작업’을 나열한다.</li><li>이러한 작업을 분리하여 서로 다른 함수로 혹은 적어도 논리적으로 구분되는 영역에 놓을 수 잇는 코드로 만들면 됟나.</li></ol><h3 id="11-1-작업은-작을-수-있다"><a href="#11-1-작업은-작을-수-있다" class="headerlink" title="11-1. **작업은 작을 수 있다."></a>11-1. **작업은 작을 수 있다.</h3><p>  예시 ) 투표**  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vote_changed(old_vote, new_vote); <span class="comment">// 각 투표는 '추천','반대' 혹은 ''이다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vote_changed = <span class="function"><span class="keyword">function</span>(<span class="params">old_vote, new_vote</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> scroe = get_score();</span><br><span class="line">  <span class="keyword">if</span>(new_vote !== old_vote)&#123;</span><br><span class="line">    <span class="keyword">if</span>(new_vote == <span class="string">'Up'</span>)&#123;</span><br><span class="line">      score += (old_vote === <span class="string">'Down'</span>? <span class="number">2</span> : <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (new_vote == <span class="string">'Down'</span>)&#123;</span><br><span class="line">      score -= (old_vote === <span class="string">'Up'</span> ? <span class="number">2</span> : <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (new_vote === <span class="string">''</span>)&#123;</span><br><span class="line">      score += (old_vote === <span class="string">'Up'</span> ? <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  set_score(score);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  위 코드의 <strong>흐름</strong></p><ol><li>old_vote와 new_vote가 수치 값으로 ‘해석’된다.</li><li>점수가 변경된다.<br>투표를 수치값으로 해석한다. <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vote_value = <span class="function"><span class="keyword">function</span>(<span class="params">vote</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vote === <span class="string">'Up'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> +<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vote === <span class="string">'Down'</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vote_changed = <span class="function"><span class="keyword">function</span>(<span class="params">old_vote, new_vote</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> score = get_score();</span><br><span class="line">score -= vote_value(old_vote);</span><br><span class="line">socre += vote_value(new_vote);</span><br><span class="line">set_score(score);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="11-2-객체에서-값-추출하기"><a href="#11-2-객체에서-값-추출하기" class="headerlink" title="11-2. 객체에서 값 추출하기!"></a>11-2. <strong>객체에서 값 추출하기!</strong></h3><ol><li>한번에 한 가지일 원리 적용하기<ol><li>작업의 흐름을 적고 한 함수당 한가지 일만 적용되도록 한다. </li></ol></li></ol><hr><p><a id="third"></a></p><h2 id="12-생각을-코드로-만들기"><a href="#12-생각을-코드로-만들기" class="headerlink" title="12. 생각을 코드로 만들기"></a>12. 생각을 코드로 만들기</h2><ol><li>코드가 할 일을 옆의 동료에게 말하듯이 평범한 영어로 묘사하라.</li><li>설명에 들어가는 <strong>핵심적인 단어와 문구를 포착</strong>하라.</li><li>설명과 부합하는 코드를 작성하라 </li></ol><hr><p><a id="forth"></a></p><h2 id="13-코드-분량-줄이기"><a href="#13-코드-분량-줄이기" class="headerlink" title="13. 코드 분량 줄이기"></a>13. 코드 분량 줄이기</h2><ol><li>요구사항에 질문을 던지고 질문을 잘게 나누어 분석하라</li><li>상점위치 추적기</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[읽기 좋은 코드가 좋은 코드다.]&lt;/strong&gt;를 보고 메모할 부분을 정리했습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="CleanCode" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/CleanCode/"/>
    
    
      <category term="cleanCode" scheme="http://feel5ny.github.io/tags/cleanCode/"/>
    
      <category term="refactoring" scheme="http://feel5ny.github.io/tags/refactoring/"/>
    
  </entry>
  
  <entry>
    <title>📓 읽기 좋은 코드가 좋은 코드다. || part2. 루프와 논리를 단순화하기</title>
    <link href="http://feel5ny.github.io/2018/08/02/Clean_code_2/"/>
    <id>http://feel5ny.github.io/2018/08/02/Clean_code_2/</id>
    <published>2018-08-02T11:12:34.000Z</published>
    <updated>2019-01-03T15:33:29.066Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>[읽기 좋은 코드가 좋은 코드다.]</strong>를 보고 메모할 부분을 정리했습니다.</p></blockquote><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol start="7"><li>읽기 쉽게 흐름제어 만들기 <a href="#first">⇒</a></li><li>거대한 표현을 잘게 쪼개기 <a href="#second">⇒</a></li><li>변수와 가독성 <a href="#third">⇒</a></li></ol><hr><p><strong>서론</strong><br>좋은 코드는 무슨 일이 일어나고 있는지를 빠르게 전달해준다.<br>사용하기에도 즐겁고, 자신에게도 더 좋은 코드를 만들어야 하겠다는 욕구를 불러일으키기도 한다.</p><hr><h1 id="PART-2-루프와-논리를-단순화하기"><a href="#PART-2-루프와-논리를-단순화하기" class="headerlink" title="PART 2 ) 루프와 논리를 단순화하기"></a>PART 2 ) 루프와 논리를 단순화하기</h1><blockquote><p>흐름제어 control flow 논리식 logical expression 변수 등에 대해서 알아보자.</p></blockquote><p>코드가 코드를 읽는 사람에게 정신적 부담을 더 많이 부과할 수록,<br>버그는 좀처럼 눈에 보이지 않고,<br>코드 수정 작업은 더 어려워지고,<br>결국 그런 코드로 작업하는 일이 즐겁지 못하게 된다.</p><p><a id="first"></a></p><h2 id="7-읽기-쉽게-흐름제어-만들기"><a href="#7-읽기-쉽게-흐름제어-만들기" class="headerlink" title="7. 읽기 쉽게 흐름제어 만들기"></a>7. 읽기 쉽게 흐름제어 만들기</h2><p>분기문과 점프문은 어려운 대상이며, 코드를 복잡하게 만드는 원인이다.</p><h3 id="7-1-조건문에서-인수의-순서"><a href="#7-1-조건문에서-인수의-순서" class="headerlink" title="7-1. 조건문에서 인수의 순서"></a><strong>7-1. 조건문에서 인수의 순서</strong></h3><p><code>A &gt; B</code></p><ul><li>왼쪽 : 값이 더 유동적인 질문을 받는 표현</li><li>오른쪽 : 더 고정적인 값, 비교대상으로 사용되는 표현</li></ul><p>cf_ 요다표기법 (옛날에 쓰던.. <code>NULL == obj</code> )</p><h3 id="7-2-if-else-블록의-순서"><a href="#7-2-if-else-블록의-순서" class="headerlink" title="7-2. if/else 블록의 순서"></a><strong>7-2. if/else 블록의 순서</strong></h3><ul><li>부정이 아닌 <strong>긍정을 다루어라.</strong> 즉 <code>if(!debug)</code>가 아니라 <code>if(debug)</code>를 선호하자.</li><li>간단한 것을 먼저 처리하라.</li><li>더 흥미롭고, 확실한 것을 먼저 다루어라.</li></ul><h3 id="7-3-삼항-연산자로-알려진-를-이용하는-조건문-표현"><a href="#7-3-삼항-연산자로-알려진-를-이용하는-조건문-표현" class="headerlink" title="7-3. (삼항 연산자로 알려진) ?:를 이용하는 조건문 표현"></a><strong>7-3. (삼항 연산자로 알려진) <code>?:</code>를 이용하는 조건문 표현</strong></h3><ul><li>줄 수를 최소화하는 일보다 다른 사람이 코드를 읽고 이해하는 데 걸리는 시간을 최소화하는 일이 더 중요하다.</li></ul><h3 id="7-4-do-while-루프를-피하라"><a href="#7-4-do-while-루프를-피하라" class="headerlink" title="7-4. do/while 루프를 피하라"></a>7-4. do/while 루프를 피하라</h3><h3 id="7-5-함수-중간에서-반환하기"><a href="#7-5-함수-중간에서-반환하기" class="headerlink" title="7-5. 함수 중간에서 반환하기"></a>7-5. 함수 중간에서 반환하기</h3><h3 id="7-7-중첩을-최소화하기"><a href="#7-7-중첩을-최소화하기" class="headerlink" title="7-7. 중첩을 최소화하기"></a>7-7. 중첩을 최소화하기</h3><p>루프와 조건문을 비롯한 그외 분기문을 읽기 쉽게 만드는 방법을 살펴본 것이다.<br>하지만 자신의 프로그램에 존재하는 ‘흐름’을 상위수준에서 조망해볼 필요가 있다.<br>프로그램의 전체 실행 경로를 쉽게 따라갈 수 있게 만드는 게 궁극의 목표다.</p><hr><p><a id="second"></a></p><h2 id="8-거대한-표현을-잘게-쪼개기"><a href="#8-거대한-표현을-잘게-쪼개기" class="headerlink" title="8. 거대한 표현을 잘게 쪼개기"></a>8. 거대한 표현을 잘게 쪼개기</h2><p>코드의 표현이 커지면 커질수록 이해하기 더 여렵다. ⇒ 예시: 대왕오징어 식도주변의 도넛뇌</p><ol><li>설명 변수<ul><li>커다란 표현을 쪼개는 가장 쉬운 방법은 작은 <strong>하위표현을 담을 ‘추가변수</strong>‘를 만드는 것이다.<br>( 추가변수 == 설명변수 )</li></ul></li><li>요약 변수<ul><li>의미를 쉽게 파악할 수 있어 별도의 설명을 요구하지 않는 표현이라고 해도, 새로운 변수로 담아두는 방법은 여전히 유용할 수 있다.</li></ul></li><li>드모르간의 법칙 사용하기 De Morgan’s Laws<ul><li><code>if (!(file_exists &amp;&amp; !is_protected))</code></li><li><code>if (!file_exists &amp;&amp; is_protected)</code></li></ul></li><li>쇼트 서킷 논리 오용 말기<ul><li><strong>if ( a || b ) a가 참이면 b는 평가하지 않는다.</strong></li></ul></li><li><strong>예; 복잡한 논리와 씨름하기</strong><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool Range:;OverlapsWith(Range other)&#123;</span><br><span class="line">  <span class="comment">// 'begin'dlsk 'end'가 'other'에 속하는지검사한다.</span></span><br><span class="line">  <span class="keyword">return</span> (begin &gt;= other.begin &amp;&amp; begin &lt; other.end) ||</span><br><span class="line">          (end &gt; other.begin &amp;&amp; end &lt;= other.end) ||</span><br><span class="line">          (begin &lt;= other.begin &amp;&amp; end &gt;= other.end);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>더 우아하게 접근하기<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool Range:;OverlapsWith(Range other)&#123;</span><br><span class="line">  <span class="keyword">if</span> (other.end &lt;= begin) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 우리가 시작하기 전에 끝난다.</span></span><br><span class="line">  <span class="keyword">if</span> (other.begin &gt;= begin) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 우리가 끝난 후에 시작한다.</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 마지막 가능성만 남았다. 즉 겹친다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li><p>거대한 구문 나누기<br>반복되는 부분을 ⇒ 요약변수로 추출할 때 (DRY : Don’t Repeat Yourself)</p><ul><li>타이핑 실수를 피할 수 있다.</li><li>코드를 한눈에 훓어보는게 용이하도록 코드의 길이를 조이라도 더 줄여준다.</li><li>클래스명을 변경해야 할 때 한 곳만 바꾸면 된다.</li></ul></li><li><p>표현을 단순화하는 다른 창의적인 방법들</p></li></ol><hr><p><a id="third"></a></p><h2 id="9-변수와-가독성"><a href="#9-변수와-가독성" class="headerlink" title="9. 변수와 가독성"></a>9. 변수와 가독성</h2><p>변수를 엉터리로 사용하면 코드를 이해하기가 얼마나 어려워지는지 살펴본다.</p><ul><li>변수의 수가 많을수록 기억하고 다루기 더 어려워진다.</li><li>변수의 범위가 넓어질수록 기억하고 다루는 시간이 더 길어진다.</li><li>변수 값이 자주 바뀔수록 현재 값을 기억하고 다루기가 더 어려워진다.</li></ul><h3 id="9-1-변수-제거하기"><a href="#9-1-변수-제거하기" class="headerlink" title="9-1. 변수 제거하기"></a>9-1. 변수 제거하기</h3><ul><li>불필요한 임시 변수들<br>이러한 변수가 구지 필요하지 않는 이유<ul><li>복잡한 표현을 잘게 나누지 않는다.</li><li>명확성에 도움이 되지 않는다.</li><li>한번만 사용되어 중복된 코드를 압축하지 않는다.</li></ul></li><li>중간 결과 삭제하기<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> remove_one = <span class="function"><span class="keyword">function</span> (<span class="params">array, value_to_remove</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index_to_remove = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i +=<span class="number">1</span> )&#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] === value_to_remove) &#123;</span><br><span class="line">      index_to_remove = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (index_to_remove !== <span class="literal">null</span>) &#123;</span><br><span class="line">    array.splice(index_to_remove, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 위의 방법보다는 아래방법 **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> remove_one = <span class="function"><span class="keyword">function</span> (<span class="params">array, value_to_remove</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index_to_remove = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i +=<span class="number">1</span> )&#123;</span><br><span class="line">    <span class="keyword">if</span> (array[i] === value_to_remove) &#123;</span><br><span class="line">      array.splice(i, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-2-흐름-제어-변수-제거하기"><a href="#9-2-흐름-제어-변수-제거하기" class="headerlink" title="9-2. 흐름 제어 변수 제거하기"></a>9-2. 흐름 제어 변수 제거하기</h3><ul><li>흐름제어 변수? : 프로그램의 실행과 관련된 방향을 설정하는 데 있다.</li></ul><h3 id="9-3-변수의-범위를-좁혀라"><a href="#9-3-변수의-범위를-좁혀라" class="headerlink" title="9-3. 변수의 범위를 좁혀라"></a>9-3. 변수의 범위를 좁혀라</h3><ul><li><p>‘전역변수를 피하라’는 조언을 한번쯤 들었을 것이다.</p><ul><li>전역 변수는 어디에서 어떻게 사용되는지 일일이 확인하기 어려우므로 이는 합당한 조언이다.</li><li>또한, 전역 변수의 이름과 지역 변수의 이름이 중복되어 이름공간이 더러워질 수도 있고, 어떤 코드가 지역 변수를 변경할 때 실수로 전역 변수를 변경하거나 혹은 그 반대의 경우가 일어날 수 있으므로 타당하다.</li></ul></li><li><p>사실 전역 변수 뿐만 아니라 <strong>모든 변수의 범위를 좁히는 일은 언제나 좋다.</strong></p></li><li><p>많은 프로그래밍 언어는 모듈, 클래스, 함수, 블록 범위 같은 다양한 범위/접근 수준을 제공한다.</p></li><li><p><strong>자바스크립트에서 프라이빗 변수 만들기</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">submitted = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> submit_form = <span class="function"><span class="keyword">function</span>(<span class="params">form_name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(submitted)&#123;</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// 폼을 두 번 제출하지 말라.</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  submitted = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>submit_form()</code>만이 전역변수 submitted를 사용하는 유일한 함수처럼 보이지만,<br>확실히 알 수 없다.<br>⇒ 다른 자바스크립트 파일에서 이와는 다른 목적으로 submitted라는 이름이 붙은 전역 변수를 사용할 지도 모르는 일이다!⇒ submitted 변수를 <strong><a href="https://feel5ny.github.io/2017/12/07/JS_06/">클로저</a> 내부에 집어 넣어서 이런 문제를 해결한다.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> submit_form = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> submitted = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">form_name</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(submitted)&#123;</span><br><span class="line"><span class="keyword">return</span>; <span class="comment">// 폼을 두 번 제출하지 말라.</span></span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">submitted = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>⇒ 프라이빗한 범위를 만드는 효과를 갖는다.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[읽기 좋은 코드가 좋은 코드다.]&lt;/strong&gt;를 보고 메모할 부분을 정리했습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="CleanCode" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/CleanCode/"/>
    
    
      <category term="cleanCode" scheme="http://feel5ny.github.io/tags/cleanCode/"/>
    
      <category term="refactoring" scheme="http://feel5ny.github.io/tags/refactoring/"/>
    
  </entry>
  
  <entry>
    <title>📓 읽기 좋은 코드가 좋은 코드다. || part1. 표면적 수준에서의 개선</title>
    <link href="http://feel5ny.github.io/2018/08/01/Clean_code_1/"/>
    <id>http://feel5ny.github.io/2018/08/01/Clean_code_1/</id>
    <published>2018-08-01T11:12:34.000Z</published>
    <updated>2019-01-03T15:33:29.260Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>[읽기 좋은 코드가 좋은 코드다.]</strong>를 보고 메모한 부분을 정리했습니다.</p></blockquote><h2 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h2><ol><li>코드는 이해하기 쉬워야 한다. <a href="#first">⇒</a></li><li>이름에 정보 담기 <a href="#second">⇒</a></li><li>오해할 수 없는 이름들 <a href="#third">⇒</a></li><li>미학 <a href="#forth">⇒</a></li><li>주석에 담아야 하는 대상 <a href="#fifth">⇒</a></li><li>명확하고 간결한 주석 달기 <a href="#sixth">⇒</a></li></ol><hr><p><strong>서론</strong><br>좋은 코드는 <strong>무슨 일이 일어나고 있는지</strong>를 빠르게 전달해준다.<br>사용하기에도 즐겁고,<br><strong>자신</strong>에게도 더 좋은 코드를 만들어야 하겠다는 욕구를 불러일으키기도 한다.</p><hr><hr><h1 id="PART-1-표면적-수준에서의-개선"><a href="#PART-1-표면적-수준에서의-개선" class="headerlink" title="PART 1 ) 표면적 수준에서의 개선"></a>PART 1 ) 표면적 수준에서의 개선</h1><p><a id="first"></a></p><h2 id="1-코드는-이해하기-쉬워야-한다"><a href="#1-코드는-이해하기-쉬워야-한다" class="headerlink" title="1. 코드는 이해하기 쉬워야 한다."></a>1. 코드는 이해하기 쉬워야 한다.</h2><ol><li>코드는 다른 사람이 그것을 이해하는 데 들이는 시간을 <strong>최소화</strong>하는 방식으로 작성되어야 한다.<br>⇒ 바로 인지 가능하도록<br>time-til-understanding</li><li>분량이 적으면 항상 더 좋은가?<br>더 분량이 적은 코드로 똑같은 문제를 해결할 수 있다면 그것이 더 낫다.</li><li>이해를 위한 시간은 다른 목표와 충돌되는가?<br><strong>정리가 되지 않은 코드를 고치고 싶을 때는<br>뒤로 한걸음 물러나서 스스로에게 물어보는 게 중요하다.</strong><br><strong>이 코드는 이해하기 쉬운가?</strong></li></ol><h3 id="1-1-표면적-수준"><a href="#1-1-표면적-수준" class="headerlink" title="1-1. 표면적 수준"></a>1-1. 표면적 수준</h3><ul><li>좋은 이름을 짓고,</li><li>좋은 설명을 달고</li><li>코드를 보기 좋게 정렬하는 따위를 의미</li></ul><p>⇒ 이런 수정은 코드를 리팩토링하거나 프로그램이 동작하는 방식을 바꾸지 않고 <code>그 자리에서</code> 곧바로 만들 수 있기 때문에 수정 반영이 쉽다.<br>⇒ 코드베이스를 흔드는 행위이므로 결과적으로 작성하는 모든 코드에 영향을 줄 수 있다.</p><hr><p><a id="second"></a></p><h2 id="2-이름에-정보-담기"><a href="#2-이름에-정보-담기" class="headerlink" title="2. 이름에 정보 담기"></a>2. 이름에 정보 담기</h2><p>변수, 함수, 혹은 클래스 명을 결정할 때<br>⇒ <strong>이름에 정보를 담아내라</strong></p><h3 id="2-1-특정한-단어-고르기"><a href="#2-1-특정한-단어-고르기" class="headerlink" title="2-1. 특정한 단어 고르기"></a>2-1. <strong>특정한 단어 고르기</strong></h3><h4 id="2-1-1-보편적인-단어-피하기"><a href="#2-1-1-보편적인-단어-피하기" class="headerlink" title="2-1.1 보편적인 단어 피하기"></a>2-1.1 보편적인 단어 피하기</h4><p><code>get</code>은 지나치게 보편적이다.</p><ul><li><code>fetch</code></li><li><code>download</code></li></ul><h4 id="2-1-2-더-화려한-단어-고르기"><a href="#2-1-2-더-화려한-단어-고르기" class="headerlink" title="2-1-2. 더 화려한 단어 고르기"></a>2-1-2. 더 <strong>화려한</strong> 단어 고르기</h4><p>send 보다는</p><ul><li>deliver</li><li>dispatch(보내다)</li><li>announce</li><li>distribute(분배하다)</li><li>route</li></ul><p>find 보다는</p><ul><li>search </li><li>extract </li><li>locate</li><li>recover</li></ul><p>start 보다는</p><ul><li>launch</li><li>create</li><li>begin </li><li>open</li></ul><p>make 보다는</p><ul><li>create</li><li>set up</li><li>build generate</li><li>compose</li><li>add</li><li>new</li></ul><h4 id="2-1-3-명확하고-간결한-이름이-더-좋다"><a href="#2-1-3-명확하고-간결한-이름이-더-좋다" class="headerlink" title="2-1-3. 명확하고 간결한 이름이 더 좋다."></a>2-1-3. 명확하고 간결한 이름이 더 좋다.</h4><hr><h3 id="2-2-tmp-retval-foo같은-보편적인-이름-피하기-혹은-언제-그런-이름을-사용해야-하는지-깨닫기"><a href="#2-2-tmp-retval-foo같은-보편적인-이름-피하기-혹은-언제-그런-이름을-사용해야-하는지-깨닫기" class="headerlink" title="2-2. (tmp, retval, foo같은)보편적인 이름 피하기 (혹은 언제 그런 이름을 사용해야 하는지 깨닫기)"></a>2-2. <strong>(tmp, retval, foo같은)보편적인 이름 피하기 (혹은 언제 그런 이름을 사용해야 하는지 깨닫기)</strong></h3><ul><li><p>tmp, retval(: 반환된 값), foo 같은 이름은<br><strong>내 머리로는 이름을 생각해낼수 없어요..</strong></p></li><li><dl><dt>더 좋은 이름은</dt><dd><strong>변수의 목적이나 담고 있는 값을 설명해주어야한다.</strong></dd></dl></li><li><p><code>tmp</code> : 변수 목적 자체가 코드 몇 줄에서만 사용하는<br> <strong>임시저장소</strong>의 역할을 할 경우에는 사용해도 ok</p></li><li><p><strong>루프반복자</strong></p><ul><li><p><code>i</code>, <code>j</code>, <code>iter</code>, <code>it</code> 인덱스나 루프 반복자로 사용된다.</p></li><li><p>배열이름과 + 인덱스를 합친 반복자로 사용하면 좋다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; clubs.size(); i++)</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; clubs[i].members.size(); j++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; users.size(); k++)</span><br><span class="line">      <span class="keyword">if</span>(clubs[i].members[k] == users[j])</span><br><span class="line">          cout &lt;&lt; <span class="string">"user["</span> &lt;&lt; j &lt;&lt; <span class="string">"] is in club["</span>&lt;&lt; i &lt;&lt;<span class="string">"]"</span> &lt;&lt;endl;</span><br></pre></td></tr></table></figure></li><li><p>i, j, k보다는 ⇒ <code>club_i</code>, <code>members_i</code>, <code>users_i</code></p></li><li><p>혹은 <code>ci</code>, <code>mi</code>, <code>ui</code></p></li></ul></li><li><p>tmp, it, retval 같은 보편적인 이름을 사용하려면,<br><strong>꼭 그러게 해야하는 이유가 있어야 한다.</strong></p></li></ul><hr><h3 id="2-3-추상적인-이름-대신-구체적인-이름-사용하기"><a href="#2-3-추상적인-이름-대신-구체적인-이름-사용하기" class="headerlink" title="2-3. 추상적인 이름 대신 구체적인 이름 사용하기"></a>2-3. <strong>추상적인 이름 대신 구체적인 이름 사용하기</strong></h3><hr><h3 id="2-4-접두사-혹은-접미사로-이름에-추가적인-정보-덧붙이기"><a href="#2-4-접두사-혹은-접미사로-이름에-추가적인-정보-덧붙이기" class="headerlink" title="2-4. 접두사 혹은 접미사로 이름에 추가적인 정보 덧붙이기"></a>2-4. <strong>접두사 혹은 접미사로 이름에 추가적인 정보 덧붙이기</strong></h3><h4 id="2-4-1-단위를-포함하는-값들-ex-밀리세컨즈-ms"><a href="#2-4-1-단위를-포함하는-값들-ex-밀리세컨즈-ms" class="headerlink" title="2-4-1. 단위를 포함하는 값들 (ex. 밀리세컨즈 : ~_ms)"></a>2-4-1. 단위를 포함하는 값들 (ex. 밀리세컨즈 : ~<code>_ms</code>)</h4><p>변수가 시간의 양이나 바이트의 수와 같은 측정치를 담고 있다면,<br>⇒ 변수명에 단위를 포함시키는 게 도움이 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> start = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> elapsed = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() - start;</span><br><span class="line"><span class="built_in">document</span>.writeIn(<span class="string">"Load time was: "</span> + elapsed + <span class="string">"seconds"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 위보다는 아래 **/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> start_ms = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();</span><br><span class="line">...</span><br><span class="line"><span class="keyword">const</span> elapsed_ms = (<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime() - start_ms;</span><br><span class="line"><span class="built_in">document</span>.writeIn(<span class="string">"Load time was: "</span> + elapsed_ms + <span class="string">"seconds"</span>);</span><br></pre></td></tr></table></figure><h4 id="2-4-2-다른-중요한-속성-포함하기-ex-인코딩된-data-data-urlenc"><a href="#2-4-2-다른-중요한-속성-포함하기-ex-인코딩된-data-data-urlenc" class="headerlink" title="2-4-2. 다른 중요한 속성 포함하기 (ex. 인코딩된 data : data_urlenc)"></a>2-4-2. 다른 중요한 속성 포함하기 (ex. 인코딩된 data : <code>data_urlenc</code>)</h4><ul><li><strong>보안 취약한, 불안전함을 인지하고 싶을 때</strong><ul><li>untrustedUrl / unsafeMessageBody …<br>⇒  안전하게 만드는 함수 호출 후에는<br>⇒ trustedUrl, safeMessageBody에 담는다.</li></ul></li><li>변수의 의미를 제대로 이해하는 것이 중요한 상황일때 사용하긔</li><li>예시<ol><li>패스워드가 plaintext에 담겨 있고, 추가적인 처리를 하기 전에 반드시 암호화되어야 한다.<ul><li>password 보다는 ⇒ <strong>plaintext_password</strong></li></ul></li><li>사용자에게 보여지는 설명문이 화면에 나타나기 전에 이스케이프 처리가 되어야한다.<ul><li>comment 보다는 ⇒ <strong>unescaped_comment</strong></li></ul></li><li>html의 바이트가 UTF-8으로 변환되었다.<ul><li>html ⇒ <strong>html_utf8</strong></li></ul></li><li>입력데이터가 url encoded 되었다.<ul><li>data 보다는  ⇒ <strong>data_urlenc</strong></li></ul></li></ol></li></ul><hr><h3 id="2-5-이름이-얼마나-길어져도-좋은지-결정하기"><a href="#2-5-이름이-얼마나-길어져도-좋은지-결정하기" class="headerlink" title="2-5. 이름이 얼마나 길어져도 좋은지 결정하기"></a>2-5. <strong>이름이 얼마나 길어져도 좋은지 결정하기</strong></h3><ul><li>좁은 범위에서는 짧은 이름이 괜찮다.</li></ul><h4 id="2-5-1-약어와-축약형"><a href="#2-5-1-약어와-축약형" class="headerlink" title="2-5-1. 약어와 축약형"></a>2-5-1. 약어와 축약형</h4><ul><li>특정 프로젝트에 국한된 의미를 가진 약어 사용은 좋은 생각이 아니다.</li><li><strong>팀에 새로 합류한 사람이 이름이 의미하는 바를 이해할 수 있을까?</strong></li></ul><ul><li>축약할 때는 보편적인 것은 괜찮다.</li><li>string 대신 <code>str</code>, evaluation 대신 <code>eval</code></li></ul><h4 id="2-5-2-불필요한-단어-제거하기"><a href="#2-5-2-불필요한-단어-제거하기" class="headerlink" title="2-5-2. 불필요한 단어 제거하기"></a>2-5-2. 불필요한 단어 제거하기</h4><ul><li>convertToString()보다는 <code>ToString()</code></li><li>DoServeLoop()보다는 <code>ServeLoop()</code></li></ul><hr><h3 id="2-6-추가적인-정보를-담을-수-있게-이름-구성하기"><a href="#2-6-추가적인-정보를-담을-수-있게-이름-구성하기" class="headerlink" title="2-6. 추가적인 정보를 담을 수 있게 이름 구성하기"></a>2-6. <strong>추가적인 정보를 담을 수 있게 이름 구성하기</strong></h3><p>&lt; 다른 포맷팅 <strong>관습</strong> &gt;</p><ol><li><p>jQuery 함수 호출시 jQuery의 결과를 저장하는 변수 앞에 <code>$</code> 붙이기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $all_images = $(<span class="string">"img"</span>);</span><br></pre></td></tr></table></figure></li><li><p>밑줄로 id안에는 단어를 구분하고, 대시로 클래스 안에 있는 단어를 구분 할 수 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"middle_column"</span> <span class="attr">class</span>=<span class="string">"main-content"</span>&gt;</span> ...</span><br></pre></td></tr></table></figure></li></ol><hr><hr><p><a id="third"></a></p><h2 id="3-오해할-수-없는-이름들"><a href="#3-오해할-수-없는-이름들" class="headerlink" title="3. 오해할 수 없는 이름들"></a>3. 오해할 수 없는 이름들</h2><p>본인이 지은 이름을<br><strong>‘다른 사람들이 다른 의미로 해석할 수 있을까?’</strong>라는 질문을 던져보며<br>철저하게 확인해야 한다. </p><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter()"></a>Filter()</h3><ul><li>고르는 행위인지 제거하는 행위인지 모호하다.<br>⇒ 보편적인 뜻을 갖고 있는 단어를 최대한 사용을 자제하자.</li><li><code>select()</code>나 <code>exclude()</code></li></ul><h3 id="접두어"><a href="#접두어" class="headerlink" title="접두어**"></a>접두어**</h3><ul><li>경계를 포함하는 <strong>한계값</strong>을 다룰 때는 <code>min</code>과 <code>max</code>를 사용하라</li><li>경계를 포함하는 <strong>범위</strong>에는 <code>first</code>와 <code>last</code>를 사용하라</li><li>경계를 포함하고/배제하는 범위에는 <code>begind</code>과 <code>end</code>를 사용하라</li><li>불리언 변수에 이름 붙이기<ul><li><code>is</code> / <code>has</code> / <code>can</code> / <code>should</code></li></ul></li><li>사용자의 기대에 부응하기<ul><li><code>get*()</code> : 가벼운접근자(lightweight accessors)로서 단순히 내부 멤버를 반환한다고 관행적으로 생각한다.</li></ul></li><li>이름을 짓기 위해서 복수의 후보를 평가하기<ul><li>예 ) template, reuse, copy, inherit</li></ul></li></ul><hr><hr><p><a id="forth"></a></p><h2 id="4-미학"><a href="#4-미학" class="headerlink" title="4. 미학"></a>4. 미학</h2><p><strong>좋은 소스 코드는 ‘눈을 편하게’ 해야한다.</strong></p><ul><li>코드의 열을 맞춰라</li><li>의미 있는 순서를 선택하고 일관성 있게 사용하라<br>⇒ 개인적인 기준이 있으면 좋을듯<br>⇒ 중요한 것 먼저 등등..</li></ul><ul><li><p>선언문을 블록으로 구성하라</p><ul><li><strong>우리의 뇌는 자연스럽게 그룹과 계층구조를 따라서 동작하므로,</strong><br>코드를 이런 방식으로 조작하면 코드를 읽는 데 도움을 준다.</li></ul></li><li><p>코드를 <strong><code>문단</code></strong>으로 쪼개라</p><ul><li>문단 첫줄에는 주석으로 사용한다.</li></ul></li><li><p><strong>핸들러, 헬퍼함수</strong></p><ul><li><p>핸들러<br>이벤트에 응답해서 호출되는 함수를 이벤트 핸들러(이벤트 리스너)라고 합니다.</p></li><li><p>헬퍼함수<br>함수를 재사용할 수 있는 헬퍼함수</p></li></ul></li></ul><hr><hr><p><a id="fifth"></a></p><h2 id="5-주석에-담아야-하는-대상"><a href="#5-주석에-담아야-하는-대상" class="headerlink" title="5. 주석에 담아야 하는 대상"></a>5. 주석에 담아야 하는 대상</h2><h3 id="5-1-설명하지-말아야-하는-것"><a href="#5-1-설명하지-말아야-하는-것" class="headerlink" title="5-1. 설명하지 말아야 하는 것"></a>5-1. <strong>설명하지 말아야 하는 것</strong></h3><ul><li>무가치한 주석은 달지 말자<ul><li>코드에서 빠르게 유추할 수 있는 내용은 주석으로 달지 말자</li><li>즉, 코드를 읽으면 무슨 일을 수행하는지 알 수 있으면..</li><li>설명 자체를 위한 설명은 달지 말자</li></ul></li><li>나쁜이름에 주석을 달지마라!! ⇒ <strong>대신 이름을 고쳐라</strong><ul><li><strong>좋은 코드 &gt; 나쁜코드 + 좋은 주석</strong></li></ul></li></ul><h3 id="5-2-코딩을-행하면서-머릿속에-있는-정보를-기록하기"><a href="#5-2-코딩을-행하면서-머릿속에-있는-정보를-기록하기" class="headerlink" title="5-2. 코딩을 행하면서 머릿속에 있는 정보를 기록하기"></a>5-2. <strong>코딩을 행하면서 머릿속에 있는 정보를 기록하기</strong></h3><ol><li><p><strong>감독의 설명</strong>을 포함하라<br><strong>중요한 통찰은 기록하자.</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이 클래스는 점점 엉망이 되어가고 있다. 어쩌면 'ResourceNode' </span></span><br><span class="line"><span class="comment">// 하위 클래스를 만들어서 정리해야할지도 모르겠다.</span></span><br></pre></td></tr></table></figure></li><li><p>코드에 있는 결함을 설명하라</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 더 빠른 알고리즘을 사용하라.</span></span><br><span class="line"><span class="comment">// TODO(더스틴): JPEG말고 다른 이미지 포맷도 처리할 수 있어야 한다.</span></span><br></pre></td></tr></table></figure><ul><li>코드가 불완전 할 때는 개선 아이디어를 설명하는 것도 좋다.</li><li>널리 사용되는 표시<ul><li><code>TODO:</code> 아직 하지 않은 일</li><li><code>FIXME:</code> 오작동을 일으킨다고 알려진 코드</li><li><code>HACK:</code> 아름답지 않은 해결책</li><li><code>XXX:</code> 위험! 여기 큰 문제가 있다</li><li><code>TextMate:</code> ESC</li></ul></li></ul></li><li><p>상수에 대한 설명</p><ul><li>그 상수가 무엇을 하는지, 그것이 왜 특정한 값을 갖게 되었는지 ‘사연’이 존재하기 마련</li><li>사연을 주석에 남기면 좋다. 명확한 변수명이면 구지 안붙여도 됨.</li></ul></li></ol><h3 id="5-3-코드읽는-사람의-입장에서-필요한-정보가-무엇인지-유추하기"><a href="#5-3-코드읽는-사람의-입장에서-필요한-정보가-무엇인지-유추하기" class="headerlink" title="5-3. 코드읽는 사람의 입장에서 필요한 정보가 무엇인지 유추하기"></a>5-3. <strong>코드읽는 사람의 입장에서 필요한 정보가 무엇인지 유추하기</strong></h3><ul><li>나올 것 같은 지문 예측하기</li><li>사람들이 쉽게 빠질 것 같은 함정을 경고하기</li></ul><h4 id="5-3-1-큰-그림에-대한-주석"><a href="#5-3-1-큰-그림에-대한-주석" class="headerlink" title="5-3-1. 큰 그림에 대한 주석"></a>5-3-1. 큰 그림에 대한 주석</h4><p><strong>팀에 새롭게 합류한 사람들은 ‘큰 그림’을 이해하는 데 어려움을 겪는다. 클래스들이 어떻게 상호작용하고, 전체 시스템에서 데이터가 어떻게 흘러 다니고, 출발점이 어디인지 등을 파악해야한다.</strong></p><ul><li>이는 <strong><a href="#upper_note">상위 수준 주석</a></strong>에 포함되어야 한다.</li><li>파일 수준의 주석의 설명은<ul><li>파일 시스템에 편리한 인터페이스를 제공하는 헬퍼 함수들을 담고 있다.</li><li>파일의 퍼미션과 다른 자세한 세부 사항을 처리한다.</li></ul></li></ul><h4 id="5-3-2-요약-주석"><a href="#5-3-2-요약-주석" class="headerlink" title="5-3-2. 요약 주석"></a>5-3-2. 요약 주석</h4><ul><li>함수가 수행하는 기능의 글머리 요약 역할을 수행할 수 있다.</li><li>주석을 보고 요점을 파악할 수 있다.<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GenerateUserReport</span><span class="params">()</span></span><span class="symbol">:</span></span><br><span class="line"><span class="comment"># 이 사용자를 위한 lock을 얻는다.</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># 데이터베이스에서 사용자의 정보를 읽는다.</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># 정보를 파일에 작성한다.</span></span><br><span class="line">...</span><br><span class="line"><span class="comment"># 사용자를 위한 lock을 되덜려 넣는다.</span></span><br></pre></td></tr></table></figure></li></ul><hr><p><a id="sixth"></a></p><h2 id="6-명확하고-간결한-주석-달기"><a href="#6-명확하고-간결한-주석-달기" class="headerlink" title="6. 명확하고 간결한 주석 달기"></a>6. 명확하고 간결한 주석 달기</h2><ul><li>주석을 간결하게 하라</li><li>모호한 대명사는 피하라</li><li>엉터리 문장을 다듬어라</li><li>함수의 동작을 명확하게 설명하라</li><li>코너케이스를 설명해주는 입/출력 예를 사용하라<ul><li>예시를 주석에 적는 것도 좋다.</li><li>인자로 어떤 데이터가 들어가고 (입력)<br>어떤 데이터를 반환하는지를 적으면 된다. (출력)</li></ul></li><li>코드의 <strong>의도</strong>를 명시하라 → 버그를 잡을 수 있다.</li><li>이름을 가진 함수 파라미터 주석</li><li>정보 축약형 단어를 사용하라<ul><li>경험적인, 주먹구구식, 순진한 해법과 같이 다양한 의미를 함축하는 단어나 표현이 많다.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[읽기 좋은 코드가 좋은 코드다.]&lt;/strong&gt;를 보고 메모한 부분을 정리했습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;목차&quot;&gt;&lt;a href=&quot;#목차&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="CleanCode" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/CleanCode/"/>
    
    
      <category term="cleanCode" scheme="http://feel5ny.github.io/tags/cleanCode/"/>
    
      <category term="refactoring" scheme="http://feel5ny.github.io/tags/refactoring/"/>
    
  </entry>
  
  <entry>
    <title>렌더링 엔진(2) - 렌더 트리 구축</title>
    <link href="http://feel5ny.github.io/2018/06/07/rendering_engine_2/"/>
    <id>http://feel5ny.github.io/2018/06/07/rendering_engine_2/</id>
    <published>2018-06-07T12:20:19.000Z</published>
    <updated>2019-01-03T15:33:29.070Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://d2.naver.com/helloworld/59361" target="_blank" rel="noopener">https://d2.naver.com/helloworld/59361</a> 를 읽고 정리했습니다.</p></blockquote><ol><li><a href="https://feel5ny.github.io/2018/05/29/rendering_engine_0/">브라우저의 주요 기능</a></li><li>브라우저의 기본 구조</li><li>렌더링 엔진 동작 과정<ol><li><a href="#html_parse">HTML 파싱</a> (for DOM트리 구축)</li><li><a href="#setting">렌더 트리 <strong>구축</strong></a></li><li><a href="#layout">렌더 트리 <strong>배치</strong></a></li><li><a href="#draw">렌더 트리 <strong>그리기</strong></a></li></ol></li></ol><hr><h1 id="렌더-트리-구축"><a href="#렌더-트리-구축" class="headerlink" title="렌더 트리 구축"></a>렌더 트리 구축</h1><ol><li>HTML 마크업을 처리하고 DOM 트리를 빌드합니다.</li><li>CSS 마크업을 처리하고 CSSOM 트리를 빌드합니다.</li><li>DOM 및 CSSOM을 결합하여 렌더링 트리를 형성합니다.</li></ol><ul><li>DOM 트리가 구축되는 동안 브라우저는 렌더 트리를 구축한다.</li><li>표시해야 할 순서와 문서의 시각적인 구성 요소로써 올바른 순서로 내용을 그려낼 수 있도록 하기 위한 목적이 있다.</li><li>파폭 : 형상 frames</li><li>웹킷 : 렌더러, 혹은 렌더 객체</li></ul><p><strong>&lt; DOM과 CSSOM을 결함 = 렌더링트리 &gt;</strong></p><ul><li>렌더러는 CSS2 명세에 따라 노드의 CSS박스에 부합하는 <strong>사각형을 표시</strong>한다.</li><li>렌더러는 너비, 높이 그리고 위치와 같은 <strong>기하학적 정보</strong>를 포함한다.</li><li>박스 유형은 노드와 관련된 display 스타일 속성의 영향을 받는다.<ul><li>렌더링 엔진에는 display 속성에 따른 DOM 노드를 위한 렌더러를 만드는 코드가 있다.</li></ul></li><li>렌더링 트리는 표시되는 각 요소의 레이아웃을 계산하는 데 사용되고 픽셀을 화면에 렌더링하는 페인트 프로세스에 대한 입력으로 처리됩니다.</li></ul><h2 id="1-DOM-트리와-렌더-트리의-관계"><a href="#1-DOM-트리와-렌더-트리의-관계" class="headerlink" title="1. DOM 트리와 렌더 트리의 관계"></a>1. DOM 트리와 렌더 트리의 관계</h2><ul><li>렌더러와 DOM 요소는 1:1 대응 관계가 아니다.<ul><li><code>head</code> 요소와 같은 비시각적 DOM 요소는 렌더 트리에 추가되지 않는다.</li><li>display 속성의 <code>none</code>값이 할당된 요소는 트리에 나타나지 않는다.</li></ul></li><li>여러 개의 시각 객체와 대응하는 DOM요소도 있는데 이것들은 보통 하나의 사각형으로 묘사할 수 없는 복잡한 구조다.<select name="job">      <option value>직업선택</option>      <option value="학생">학생</option>      <option value="회사원">회사원</option>      <option value="기타">기타</option>  </select>- 예1) select 요소 = 표시영역 + 드롭다운 목록 + 버튼 **(3개의 렌더러)**- 예2) 한 줄에 충분히 표시할 수 없는 문자가 여러 줄로 바뀔 때 새 줄은 별도로 렌더러로 추가- 예3) CSS 명세에 의하면 인라인 박스는 블록 박스만 포함하거나 인라인 박스만을 포함해야 하는데 **인라인과 블록 박스가 섞인 경우 인라인 박스를 감싸기 위한 익명의 블록 렌더러가 생성된다.**</li><li>어떤 렌더 객체는 DOM노드에 대응하지만 트리의 동일한 위치에 있지 않다.<ul><li>float처리된 요소는 position 속성값이 absolute로 처리된 요소는 흐름에서 벗어나 트리의 다른 곳에 배치된 상태로 형상이 그려진다.</li></ul></li></ul><img src="/images/2018/15/render-tree-construction.png"><h2 id="2-트리를-구축하는-과정"><a href="#2-트리를-구축하는-과정" class="headerlink" title="2. 트리를 구축하는 과정"></a>2. 트리를 구축하는 과정</h2><ol><li>DOM 트리의 루트에서 시작하여 표시되는 노드 각각을 트래버스합니다.<ul><li>일부 노드는 표시되지 않으며(예: 스크립트 태그, 메타 태그 등), 렌더링된 출력에 반영되지 않으므로 생략됩니다.</li><li>일부 노드는 CSS를 통해 숨겨지며 렌더링 트리에서도 생략됩니다. 예를 들어,—위의 예시에서—span 노드의 경우 ‘display: none’ 속성을 설정하는 명시적 규칙이 있기 때문에 렌더링 트리에서 누락됩니다.</li></ul></li><li>표시된 각 노드에 대해 적절하게 일치하는 CSSOM 규칙을 찾아 적용합니다.</li><li>표시된 노드를 콘텐츠 및 계산된 스타일과 함께 내보냅니다.</li></ol><ul><li>웹킷<br>: attachment =&gt; 렌더러를 만드는 과정<br>: RenderView =&gt; 렌더트리 루트</li><li>파폭<br>: 형상구축 =&gt; 렌더러를 만드는 과정<br>: ViewPortFrame =&gt; 렌더트리 루트</li></ul><hr><h2 id="3-스타일-계산"><a href="#3-스타일-계산" class="headerlink" title="3. 스타일 계산"></a>3. 스타일 계산</h2><ul><li>렌더 객체의 시각적 송성에 대한 계산이 필요하다.</li><li>최초의 스타일 시트 : 브라우저가 제공하는 기본 스타일 시트</li></ul><ol><li>메모리 문제가 생길 수 있다.<ul><li>스타일 데이터는 구성이 매우 광범위한데 수 많은 스타일 속성들을 수용하면서 메모리 문제를 야기할 수 있다.</li></ul></li><li>최적화의 필요성<ul><li>최적화되어 있지 않다면 각 요소에 할당된 규칙을 찾는 것은 성능 문제를 야기할 수 있다.</li><li>각 요소에 할당된 규칙 목록을 전체 규칙으로부터 찾아내는 것은 과중한 일이다.</li><li>맞는 규칙을 찾는 과정은 얼핏 보기에는 약속된 방식으로 순탄하게 시작하는 것 같지만 실상 쓸모가 없거나 다른 길을 찾아야만 하는 복잡한 구조가 될 수 있다.<br>예를 들어 이런 복합 선택자가 있다.<br>div div div div { … }</li><li>이 선택자는 3번째 자손 <code>&lt;div&gt;</code>에 규칙을 적용한다는 뜻이다.</li><li>규칙을 적용할 <code>&lt;div&gt;</code> 요소를 확인하려면 트리로부터 임의의 줄기를 선택하고 탐색하는 과정에서 규칙에 맞지 않는 줄기를 선택했다면 또 다른 줄기를 선택해야 한다.</li></ul></li><li>규칙을 적용하는 것은 계층 구조를 파악해야 하는 꽤나 복잡한 다단계 규칙을 수반한다.</li></ol><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://d2.naver.com/helloworld/59361" target="_blank" rel="noopener">https://d2.naver.com/helloworld/59361</a></li><li><a href="https://developers.google.com/web" target="_blank" rel="noopener">https://developers.google.com/web</a></li><li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=ko" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction?hl=ko</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://d2.naver.com/helloworld/59361&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://d2.naver.com/helloworld/59361&lt;/a&gt; 를 읽
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Web" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Web/"/>
    
    
      <category term="Web" scheme="http://feel5ny.github.io/tags/Web/"/>
    
      <category term="browser" scheme="http://feel5ny.github.io/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>렌더링 엔진(1) - 파싱과 DOM트리 구축</title>
    <link href="http://feel5ny.github.io/2018/06/06/rendering_engine_1/"/>
    <id>http://feel5ny.github.io/2018/06/06/rendering_engine_1/</id>
    <published>2018-06-06T12:20:19.000Z</published>
    <updated>2019-01-03T15:33:29.076Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://d2.naver.com/helloworld/59361" target="_blank" rel="noopener">https://d2.naver.com/helloworld/59361</a> 를 읽고 정리했습니다.</p></blockquote><ol><li><a href="https://feel5ny.github.io/2018/05/29/rendering_engine_0/">브라우저의 주요 기능</a></li><li>렌더링 엔진 동작 과정</li><li><a href="#html_parse">HTML 파싱</a> (for DOM 트리 구축)</li><li><a href="#setting">렌더 트리 <strong>구축</strong></a></li><li><a href="#layout">렌더 트리 <strong>배치</strong></a></li><li><a href="#draw">렌더 트리 <strong>그리기</strong></a></li></ol><hr><h1 id="파싱과-DOM-트리-구축"><a href="#파싱과-DOM-트리-구축" class="headerlink" title="파싱과 DOM 트리 구축"></a>파싱과 DOM 트리 구축</h1><ol><li><a href="https://feel5ny.github.io/2018/06/06/rendering_engine_1/#pasing_normal">파싱에 대하여</a><br>문법 / 파서-어휘 분석기 조합 / 변환 / 파싱 예 / 어휘와 구문에 대한 공식적인 정의 / 파서의 종류 / 파서 자동 생성</li><li><a href="https://feel5ny.github.io/2018/06/06/rendering_engine_1/#html_parser">HTML 파서 =&gt; DOM 트리</a><br>문맥자유문법이 아니다 / HTML DTD / DOM / 파싱 알고리즘 / 파싱이 끝난 이후의 동작 / 브라우저의 오류 처리</li><li><a href="https://feel5ny.github.io/2018/06/06/rendering_engine_1/#css_parsing">CSS 파서 =&gt; CSSOM 트리</a></li><li><a href="https://feel5ny.github.io/2018/06/06/rendering_engine_1/#script_stylesheet">스크립트와 스타일 시트의 진행 순서</a></li></ol><h2 id="1-파싱-일반"><a href="#1-파싱-일반" class="headerlink" title="1. 파싱 일반"></a>1. 파싱 일반</h2><ul><li><strong>문서 파싱</strong> : 브라우저가 코드를 이해하고 사용할 수 있는 구조로 변환하는 것</li><li><strong>파싱 트리</strong>(문법트리 syntax tree) : 파싱결과는 보통 문서 구조를 나타내는 노드 트리</li></ul><img src="/images/2018/14/parse.png">2 + 3 - 1<h3 id="1-1-문법"><a href="#1-1-문법" class="headerlink" title="1-1. 문법"></a>1-1. 문법</h3><ul><li>파싱은 문서에 작성된 언어 또는 형식의 규칙에 따른다.</li><li>파싱할 수 있는 모든 형식은 정해진 용어와 구문 규칙에 따라야 한다.</li><li><a href="http://ko.wikipedia.org/wiki/%EB%AC%B8%EB%A7%A5_%EC%9E%90%EC%9C%A0_%EB%AC%B8%EB%B2%95" target="_blank" rel="noopener">문맥 자유 문법</a> (Context-free grammar, CFG)</li><li>인간의 언어는 이런 모습과 다르기 때문에 기계적인 파싱이 불가능하다.</li></ul><h3 id="1-2-파서-어휘-분석기-조합"><a href="#1-2-파서-어휘-분석기-조합" class="headerlink" title="1-2. 파서-어휘 분석기 조합"></a>1-2. 파서-어휘 분석기 조합</h3><ul><li>파싱은 <code>어휘 분석</code>과 <code>구문 분석</code>으로 구분할 수 있다.<ul><li>어휘 분석 : 자료를 토큰으로 분해하는 과정 ( 사전에 등장하는 모든 단어를 말한다고 볼수 있다. )</li><li>구문 분석 : 언어의 구문 규칙을 적용하는 과정</li></ul></li></ul><img src="/images/2018/14/parse_1.png"><p>자료를 유효한 토큰으로 분해하는 <strong>어휘 분석기(lexical analysis)</strong>가 있고,<br>언어 구문 규칙에 따라 문서 구조를 분석함으로써 파싱 트리를 생성하는 <strong>파서</strong>가 있다.</p><ul><li>어휘 분석기는 공백과 줄 바꿈 같은 의미 없는 문자를 제거한다.</li></ul><img src="/images/2018/14/parsing.png" style="width: 100px"><ul><li>파싱과정은 반복됨</li><li>파서는 보통 어휘 분석기로부터 새 토큰을 받아서 구문 규칙과 일치하는지 확인 (언어 규칙들..)</li><li>규칙과 맞으면 토큰에 해당하는 노드가 파싱 트리에 추가되고 파서는 또 다른 토큰을 요청</li><li>규칙과 맞지 않으면 파서는 토큰을 내부적으로 저장, 토큰과 일치하는 규칙이 발견될 때까지 요청한다.</li><li>맞는 규칙이 없는 경우 예외로 처리하는데 =&gt; 문서가 유효하지 않고 구문 오류를 포함하고 있다는 의미</li></ul><h3 id="1-3-변환-컴파일"><a href="#1-3-변환-컴파일" class="headerlink" title="1-3. 변환 (컴파일!!)"></a>1-3. 변환 (컴파일!!)</h3><ul><li>파싱트리는 최종 결과물이 아니다.</li><li>파싱은 보통 문서를 다른 양식으로 변환하는데</li><li>컴파일이 하나의 예가 된다.</li><li>소스 코드를 기계 코드로 만드는 컴파일러는 <strong>파싱 트리 생성 후 이를 기계 코드 문서로 변환한다!</strong></li></ul><img src="/images/2018/14/compile.png" style="width: 100px"><h3 id="1-4-파싱-예"><a href="#1-4-파싱-예" class="headerlink" title="1-4. 파싱 예"></a>1-4. 파싱 예</h3><img src="/images/2018/14/parse_2.png"><ul><li>어휘 : 수학언어는 정수, 더하기 기호, 빼기 기호를 포함한다.</li><li>구문<ol><li>언어 구문의 기본적인 요소는 표현식, 항(정수), 연산자(+,-)이다.</li><li>언어에 포함되는 표현식의 수는 제한이 없다.</li><li>표현식은 “항” 뒤에 “연산자” 그 뒤에 또 다른 항이 따르는 형태로 정의한다.</li><li>연산자는 <strong>더하기 토큰</strong> 또는 <strong>빼기 토큰</strong>이다.</li><li>정수 토큰 또는 하나의 표현식은 항이다.</li></ol></li><li>2++는 어떤 규칙과도 맞지 않기 때문에 유효하지 않은 입력이 된다.</li></ul><h3 id="1-5-어휘와-구문에-대한-공식적인-정의"><a href="#1-5-어휘와-구문에-대한-공식적인-정의" class="headerlink" title="1-5. 어휘와 구문에 대한 공식적인 정의"></a>1-5. 어휘와 구문에 대한 공식적인 정의</h3><h4 id="어휘는-보통-정규표현식으로-표현한다"><a href="#어휘는-보통-정규표현식으로-표현한다" class="headerlink" title="어휘는 보통 정규표현식으로 표현한다."></a>어휘는 보통 정규표현식으로 표현한다.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INTEGER : 0|[1-9][0-9]*</span><br><span class="line">PLUS : +</span><br><span class="line">MINUS : -</span><br></pre></td></tr></table></figure><h4 id="구문은-보통-BNF-lt-기호-gt-lt-표현식-gt-라고-부르는-형식에-따라-정의한다"><a href="#구문은-보통-BNF-lt-기호-gt-lt-표현식-gt-라고-부르는-형식에-따라-정의한다" class="headerlink" title="구문은 보통 BNF ( &lt;기호&gt; ::= &lt;표현식&gt;)라고 부르는 형식에 따라 정의한다."></a>구문은 보통 <a href="http://ko.wikipedia.org/wiki/BNF" target="_blank" rel="noopener">BNF</a> ( &lt;기호&gt; ::= &lt;표현식&gt;)라고 부르는 형식에 따라 정의한다.</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">expression := term operation term</span><br><span class="line">operation := PLUS | MINUS</span><br><span class="line">term := INTEGER | expression</span><br></pre></td></tr></table></figure><p>문법이 <a href="http://www.google.com/url?q=http%3A%2F%2Fko.wikipedia.org%2Fwiki%2F%25EB%25AC%25B8%25EB%25A7%25A5_%25EC%259E%2590%25EC%259C%25A0_%25EB%25AC%25B8%25EB%25B2%2595&sa=D&sntz=1&usg=AFQjCNF47Dj5WH0U-Kl_pN9ai6aCmdOxVg" target="_blank" rel="noopener">문맥자유문법</a>(= 완전히 BNF 로 표현 가능한 문법)이라면,<br>언어는 정규 파서로 파싱할 수 있다.</p><h3 id="1-6-파서의-종류"><a href="#1-6-파서의-종류" class="headerlink" title="1-6. 파서의 종류"></a>1-6. 파서의 종류</h3><ul><li>하향식 파서 : 구문의 상위 구조로부터 일치하는 부분을 찾는다.</li><li>상향식 파서 : 낮은 수준에서 점차 높은 수준으로 찾는다.</li></ul><h3 id="1-7-파서-자동-생성"><a href="#1-7-파서-자동-생성" class="headerlink" title="1-7. 파서 자동 생성"></a>1-7. 파서 자동 생성</h3><dl><dt><strong>파서 생성기</strong></dt><dd>파서를 생성해 줄 수 있는 도구</dd></dl><ul><li>언어에 =&gt; 어휘나 구문규칙 같은 문법을 부여하면 =&gt; 동작하는 파서를 만들어줌</li><li>파싱에 대한 깊은 이해를 필요로 하고 수동으로 파서를 최적화하여 생성하는 것은 쉬운일이 아니기 때문에 파서 생성기는 유용</li></ul><p><strong>웹킷</strong></p><ul><li><dl><dt>플렉스 <strong>Flex</strong> (fast lexical analyzer generator)<br>: lex 의 기능을 개선한 자유 소프트웨어 (문법정의 프로그램)<br>: <strong>어휘 생성을 위한 어휘 분석기 발생기</strong></dt><dd>토큰의 정규 표현식 정의를 포함한 파일을 입력 받는다. (?)</dd></dl></li><li><dl><dt>바이슨 Bison<br>: 파서 생성을 위한 파서생성기<br>: BNF 형식의 언어 구문 규칙을 입력 받는다.</dt><dd>상향식 이동 감소 파서</dd></dl></li></ul><hr><h2 id="2-HTML-파서"><a href="#2-HTML-파서" class="headerlink" title="2. HTML 파서"></a>2. HTML 파서</h2><img src="/images/2018/14/html_parser.jpg"><img src="/images/2018/14/full-process.png"><p>HTML 파서는 HTML 마크업을 파싱 트리로 변환한다.</p><h3 id="2-1-HTML-문법-정의"><a href="#2-1-HTML-문법-정의" class="headerlink" title="2-1. HTML 문법 정의"></a>2-1. HTML 문법 정의</h3><p><a href="https://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/idl-definitions.html" target="_blank" rel="noopener">W3C 의 명세</a></p><h3 id="2-2-문맥-자유-문법이-아님"><a href="#2-2-문맥-자유-문법이-아님" class="headerlink" title="2-2. 문맥 자유 문법이 아님"></a>2-2. 문맥 자유 문법이 아님</h3><ul><li>모든 전통적인 파서는 HTML 에 적용할 수 없다.</li><li>파싱은 CSS 와 자바스크립트를 파싱하는 데 사용된다.</li><li>HTML 은 파서가 요구하는 문맥 자유 문법에 의해 쉽게 정의할 수 없다.</li><li>HTML 은 <code>너그럽다.</code><ul><li>암묵적으로 태그 생략이 가능하다.</li><li>시작태그, 종료 태그등을 생략한다.</li><li>뻣뻣하고 부담스러운 XML 에 반하여 HTML 은 유연한 문법이다.</li></ul></li><li>공식적인 문법으로 작성하기 어렵게 만드는 문제가 있다..</li></ul><h3 id="2-3-HTML-DTD-문석-형식-정의-Document-Type-Definition"><a href="#2-3-HTML-DTD-문석-형식-정의-Document-Type-Definition" class="headerlink" title="2-3. HTML DTD (문석 형식 정의: Document Type Definition)"></a>2-3. HTML DTD (문석 형식 정의: Document Type Definition)</h3><ul><li><a href="https://www.w3.org/TR/html4/strict.dtd" target="_blank" rel="noopener">DTD</a>는 문맥 자유 문법이 아니다.</li><li>HTML 정의는 DTD 형식 안에 있다. (SGML 계역 언어의 정의를 이용한 것)</li><li><strong>HTML5, XHTML, HTML</strong>의 세가지 문서 유형이 존재하며, 기술한 유형에 따라 마크업 문서의 요소와 속성등을 처리하는 기준이 되며 유효성 검사에 이용된다.</li><li><strong>이전 버전의 HTML</strong>(HTML2~HTML4)은 SGML(Standard Generalized Markup Language)에 기반을 두어 만들어졌기 때문에 DTD 참조가 필요하며, 이 때문에 DOCTYPE 선언을 하려면 공개 식별자와 시스템 식별자가 포함된 긴 문자열을 작성해야 한다.</li><li><strong>HTML5</strong>에서는 SGML 에 기반을 두지 않아서 DTD 참조가 필요 없으며, 최소한의 코드 작성이 기본 방향이라 매우 간단히 선언할 수 있다.</li></ul><h3 id="2-4-DOM-문서-객체-모델"><a href="#2-4-DOM-문서-객체-모델" class="headerlink" title="2-4. DOM (문서 객체 모델)"></a>2-4. DOM (문서 객체 모델)</h3><ul><li>파싱트리는 <strong>DOM 요소</strong>와 <strong>속성 노드</strong>의 트리로서 출력 트리가 된다.</li><li>문서 객체 모델 : HTML 문서의 객체 표현이다.</li><li>HTML 요소의 연결지점. 즉, 트리의 최상위 객체는 문서이다.</li><li><a href="https://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/idl-definitions.html" target="_blank" rel="noopener">HTML 정의</a></li><li><a href="https://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/idl-definitions.html" target="_blank" rel="noopener">DOM 정의</a></li></ul><h3 id="2-5-파싱-알고리즘"><a href="#2-5-파싱-알고리즘" class="headerlink" title="2-5. 파싱 알고리즘"></a>2-5. 파싱 알고리즘</h3><p>HTML 은 일반적인 하향식 혹은 상향식 파서로 파싱이 안된다.</p><ol><li>언어의 너그러운 속성</li><li>잘 알려져 잇는 HTML 오류에 대한 브라우저의 관용</li><li>변경에 의한 재파싱.<br>일반적으로 소스는 파싱하는 동안 변하지 않지만<br>HTML 에서 <strong><code>document.write</code></strong>을 포함하고 있는 스크립트 태그는 토큰을 추가할 수 있기 때문에 실제로는 입력 과정에서 파싱이 수정된다.</li></ol><blockquote><p>일반적인 파싱 기술을 사용할 수 없기 때문에 브라우저는 HTML 파싱을 위해 <strong>별도의 파서</strong>를 생성한다.</p></blockquote><hr><p>TL;DR</p><ul><li>바이트 → 문자 → 토큰 → 노드 → 객체 모델.</li><li>HTML 마크업은 DOM(Document Object Model)으로 변환되고, CSS 마크업은 CSSOM(CSS Object Model)으로 변환됩니다.</li><li>DOM 및 CSSOM 은 서로 독립적인 데이터 구조입니다.</li><li>Chrome DevTools Timeline 을 사용하면 DOM 및 CSSOM 의 생성 및 처리 비용을 수집하고 점검할 수 있습니다.</li></ul><hr><p><a href="https://html.spec.whatwg.org/multipage/parsing.html" target="_blank" rel="noopener">알고리즘</a>은 토큰화와 트리구축 이렇게 2 단계로 되어 있다.</p><ol><li>byte stream decoder</li></ol><ul><li>브라우저가 HTML 의 원시 바이트를 디스크나 네트워크에서 읽어와서, 해당 파일에 대해 지정된 인코딩(예: UTF-8)에 따라 개별 문자로 변환합니다.</li></ul><ol start="2"><li>토큰화</li></ol><ul><li>어휘 분석(lexical analysis)으로서 입력 값을 토큰으로 파싱한다.</li><li>HTML 에서 토큰은 <strong>시작 태그, 종료 태그, 속성 이름</strong>과 <strong>속성 값</strong>이다.</li></ul><ol start="3"><li>트리구축</li></ol><ul><li>토큰을 인지해서 트리 생성자로 넘기고 =&gt; 다른 토큰을 확인하기 위해 다음 문자를 확인</li><li>이 과정을 반복</li></ul><p>(HTML 파싱 과정그림)</p><img src="/images/2018/14/html_parse_algorithm.png"><p>아래가 더 세분화된 과정<br><img src="/images/2018/14/parsing-model-overview.svg" width="300px"></p><h4 id="2-5-1-토큰화-알고리즘"><a href="#2-5-1-토큰화-알고리즘" class="headerlink" title="2-5-1. 토큰화 알고리즘"></a>2-5-1. 토큰화 알고리즘</h4><ul><li>알고리즘의 결과물은 HTML 토큰</li><li>알고리즘은 상태기계라고 볼 수 있다.</li><li>각 상태는 하나 이상의 연속된 문자를 입력받아 이 문자에 따라 다음 상태를 갱신</li></ul><p>예시 &gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    Hello world</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>0.초기상태 : 자료 상태</p><p><code>&lt;html&gt;</code> <code>&lt;body&gt;</code></p><ol><li>태그 열림 상태 : <code>&lt;</code> 문자를 만나면 변함</li><li>태그 이름 상태<br>: a 부터 z 까지의 문자를 만나면 <strong>시작 태그 토큰</strong>생성<br>: <code>&gt;</code>를 만날 때까지 유지한다.<br>: 각 문자에는 새로운 토큰 이름이 붙는다. 이때 생성된 토큰은 html 토큰</li><li>자료 상태 : <code>&gt;</code>문자에 도달하면 현재 토큰이 발행된다.</li></ol><p><code>Hello world</code></p><ol><li><strong>문자 토큰</strong> 생성 발행</li><li><code>&lt;</code>문자를 만날 때까지 진행</li></ol><p><code>&lt;/body&gt;</code> <code>&lt;/html&gt;</code></p><ol><li>태그 열림 상태</li><li>태그 이름 상태 : <code>/</code>문자는 <strong>종료 태그 토큰</strong> 생성</li><li>자료 상태 : <code>&gt;</code>문자에 도달하면 현재 토큰이 발행된다.</li></ol><img src="/images/2018/14/token_algorithm.png"><h4 id="2-5-2-트리-구축-알고리즘"><a href="#2-5-2-트리-구축-알고리즘" class="headerlink" title="2-5-2. 트리 구축 알고리즘"></a>2-5-2. 트리 구축 알고리즘</h4><ul><li>파서 생성 후 문서 객체 생성</li><li>트리 구축이 진행되는 동안, 문서 최상단에서는 DOM 트리가 수정되고 요소가 추가된다.</li><li>토큰화에 의해 발행된 각 <strong>노드</strong>는 트리 생성자에 의해 처리된다.</li><li>각 토큰을 위한 DOM 요소의 명세는 정의되어 있다.</li><li>DOM 트리에 요소를 추가하는 것이 아니라면 열린 요소는 스택(임시 버퍼 저장소)에 추가된다.</li><li>이 스택은 부정확한 중첩과 종료되지 않은 태그를 교정한다.</li><li>알고리즘은 상태 기계라고 설명할 수 있고 상태는 <strong>삽입 모드</strong> 라고 부른다.</li></ul><p>예시 &gt;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    Hello world</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>트리 구축 단계의 입력 값은 토큰화 단계에서 만들어지는 일련의 토큰이다.</li><li>노드화</li></ul><ul><li>초기모드<br>: 받은 html 토큰은 html 이전 모드가 되면서 이 모드에서 처리된다.<br>: 이것은 <strong>HTMLHtmlElement 요소를 생성</strong>하고 문서 객체의 최상단에 추가된다.</li><li>head 이전 모드<br>: “body” 토큰을 받았다.</li><li>head 안쪽 모드<br>: “head” 토큰이 없더라도 <strong>HTMLHeadElement 는 묵시적으로 생성</strong>되어 트리에 추가될 것이다.</li><li>head 다음 모드<br>: body 토큰이 처리 되었고 (토큰화) <strong>HTMLBodyElement 가 생성</strong>되어 추가됐으며 “body 안쪽” 모드가 되었다.</li><li>body 안쪽 모드<br>: 문자토큰 받음(Hellow world)<br>: 첫 번째 토큰이 생성되고 “본문” 노드가 추가되면서 다른 문자들이 그 노드에 추가될 것이다.</li><li>body 다음 모드<br>: body 종료 토큰을 받으면</li><li>body 다음 다음 모드<br>: html 종료 토큰을 받으면</li></ul><img src="/images/2018/14/tree_setting.png"><h3 id="2-8-파싱이-끝난-이후의-동작"><a href="#2-8-파싱이-끝난-이후의-동작" class="headerlink" title="2-8. 파싱이 끝난 이후의 동작"></a>2-8. 파싱이 끝난 이후의 동작</h3><ul><li>문서 파싱 이후에 실행되어야 하는 “지연” 모드 스크립트를 파싱하기 시작한다.</li><li>문서 상태는 “완료 complete”가 되고 <strong>load</strong>이벤트가 발생한다. 보다 자세한 내용은 <a href="http://www.w3.org/TR/html5/syntax.html" target="_blank" rel="noopener">HTML5 의 토큰화 알고리즘과 트리 구축</a>에서 볼 수 있다.</li></ul><h3 id="2-9-브라우저의-오류-처리"><a href="#2-9-브라우저의-오류-처리" class="headerlink" title="2-9. 브라우저의 오류 처리"></a>2-9. 브라우저의 오류 처리</h3><p>HTML 페이지에서 “유효하지 않은 구문”이라는 오류는 볼 수 없는데,<br>이는 브라우저가 모든 오류 구문을 교정하기 때문이다.</p><p>파서는 토큰화된 입력 값을 파싱하여 문서를 만들고 문서 트리를 생성한다.<br>때문에 파서는 적어도 다음과 같은 오류를 처리해야한다.</p><ol><li>어떤 태그의 안쪽에 추가하려는 태그가 금지된 것일 때 일단 허용된 태그를 먼저 닫고 금지된 태그는 외부에 추가한다.</li><li>파서가 직접 요소를 추가해서는 안된다. 문서 제작자에 의해 뒤늦게 요소가 추가될 수 있고 생략 가능한 경우도 있다. HTML, HEAD, BODY, TBODY, TR, TD, LI 태그가 이런 경우에 해당한다.</li><li>인라인 요소 안쪽에 블록 요소가 있는 경우 부모 블록 요소를 만날 때까지 모든 인라인 태그를 닫는다.</li><li>이런 방법이 도움이 되지 않으면 태그를 추가하거나 무시할 수 있는 상태가 될 때까지 요소를 닫는다.</li></ol><p><strong>&lt; 웹킷의 오류 처리하는 예 &gt;</strong></p><h4 id="2-9-1-lt-br-gt-대신-lt-br-gt"><a href="#2-9-1-lt-br-gt-대신-lt-br-gt" class="headerlink" title="2-9-1. &lt;br&gt; 대신 &lt;/br&gt;"></a>2-9-1. <code>&lt;br&gt;</code> 대신 <code>&lt;/br&gt;</code></h4><ul><li>어떤 사이트는 <code>&lt;br&gt;</code> 대신 <code>&lt;/br&gt;</code>을 사용한다.</li><li>인터넷 익스플로러, 파이어폭스와 호환성을 갖기 위해 웹킷은 이것을 <code>&lt;br&gt;</code>으로 간주한다.</li></ul><h4 id="2-9-2-어긋난-표"><a href="#2-9-2-어긋난-표" class="headerlink" title="2-9-2. 어긋난 표"></a>2-9-2. 어긋난 표</h4><p>어긋난 표는 표 안에 또 다른 표가 th 또는 td 셀 내부에 있지 않은 것을 의미한다.<br>웹킷은 표의 중첩을 분해하여 형제 요소가 되도록 처리한다.</p><h4 id="2-9-3-중첩된-폼-요소"><a href="#2-9-3-중첩된-폼-요소" class="headerlink" title="2-9-3. 중첩된 폼 요소"></a>2-9-3. 중첩된 폼 요소</h4><p>폼 안에 또 다른 폼을 넣은 경우 안쪽의 폼은 무시된다.</p><h4 id="2-9-4-태그-중첩이-너무-깊을-때"><a href="#2-9-4-태그-중첩이-너무-깊을-때" class="headerlink" title="2-9-4. 태그 중첩이 너무 깊을 때"></a>2-9-4. 태그 중첩이 너무 깊을 때</h4><p>최대 20 개의 중첩만 허용하고 나머지는 무시한다.</p><h4 id="2-9-5-잘못-닫힌-html-또는-body-태그"><a href="#2-9-5-잘못-닫힌-html-또는-body-태그" class="headerlink" title="2-9-5. 잘못 닫힌 html 또는 body 태그"></a>2-9-5. 잘못 닫힌 html 또는 body 태그</h4><p>깨진 html 을 지원한다. 일부 바보 같은 페이지는 문서가 끝나기 전에 body 를 닫아버리기 때문에 브라우저는 body 태그를 닫지 않는다. 대신 종료를 위해 end()를 호출한다.</p><hr><p>DOM 트리는 문서 마크업의 속성 및 관계를 포함하지만 요소가 렌더링될 때 어떻게 표시될지에 대해서는 알려주지 않습니다.<br>이것은 CSSOM 의 역할.</p><h2 id="3-CSS-파싱"><a href="#3-CSS-파싱" class="headerlink" title="3. CSS 파싱"></a>3. CSS 파싱</h2><ul><li>문맥 자유 문법이다. 때문에 일반적인 파서 유형을 이용하여 파싱이 가능하다.</li><li><a href="http://www.google.com/url?q=http%3A%2F%2Fwww.w3.org%2FTR%2FCSS2%2Fgrammar.html&sa=D&sntz=1&usg=AFQjCNGIh6GCKhnkvUO_VA0Mx4LlPaL6Og" target="_blank" rel="noopener">CSS 명세</a></li><li>어휘 문법은 각 토큰을 위한 정규 표현식으로 정의되어 있다.</li><li>구문 문법은 BNF 로 설명되어 있다.</li></ul><h3 id="3-1-웹킷-CSS-파서"><a href="#3-1-웹킷-CSS-파서" class="headerlink" title="3-1. 웹킷 CSS 파서"></a>3-1. 웹킷 CSS 파서</h3><ul><li>웹킷은 자동으로 파서를 생성하기 위해 플렉스와 바이슨 파서 생성기를 사용한다.</li><li>웹킷의 바이슨을 사용하여 상향식 이동 감소 파서를 생성</li><li>파이어폭스 : 직접 작성한 하양식 파서를 사용한다.</li><li>모두 CSS 파일은 스타일 시트 객체로 파싱되고, CSS 규칙을 포함한다.</li></ul><img src="/images/2018/14/css_parsing.png"><h3 id="3-2-브라우저별-사용자-에이전트-스타일"><a href="#3-2-브라우저별-사용자-에이전트-스타일" class="headerlink" title="3-2. 브라우저별 사용자 에이전트 스타일"></a>3-2. 브라우저별 사용자 에이전트 스타일</h3><ul><li>위의 트리는 완전한 CSSOM 트리가 아니고 스타일시트에서 재정의하도록 결정한 스타일만 표시한다는 점에 유의</li><li>모든 브라우저는 ‘사용자 에이전트 스타일’이라고 하는 기본 스타일 집합, 즉 개발자가 고유한 스타일을 제공하지 않을 경우 표시되는 스타일을 제공합니다.</li><li>개발자가 작성하는 스타일은 이러한 기본 스타일(예: 기본 IE 스타일)을 간단하게 재정의합니다.</li></ul><hr><h2 id="4-스크립트와-스타일-시트의-진행-순서"><a href="#4-스크립트와-스타일-시트의-진행-순서" class="headerlink" title="4. 스크립트와 스타일 시트의 진행 순서"></a>4. 스크립트와 스타일 시트의 진행 순서</h2><h3 id="4-1-스크립트"><a href="#4-1-스크립트" class="headerlink" title="4-1. 스크립트"></a>4-1. 스크립트</h3><ul><li>웹은 파싱과 실행이 동시에 수행되는 동기화 모델이다.</li><li><code>&lt;script&gt;</code>태그를 만나서 실행되는 동안 문서의 파싱은 중단된다. (그래서 바디 전에 넣음)</li><li>스크립트가 외부에 있는 경우 우선 네트워크로부터 자원을 가져와야 하는데 이 또한 실시간으로 처리되고 자원을 받을 때까지 파싱은 중단된다.</li><li>스크립트를 “지연(defer)”으로 표시할 수 있는데 지연으로 표시하게 되면 문서 파싱은 중단되지 않고 문서 파싱이 완료된 이후에 스크립트가 실행된다. (비동기)</li></ul><h3 id="4-2-예측-파싱-Speculative-parsing"><a href="#4-2-예측-파싱-Speculative-parsing" class="headerlink" title="4-2. 예측 파싱 (Speculative parsing)"></a>4-2. 예측 파싱 (Speculative parsing)</h3><ul><li>스크립트를 실행하는 동안 다른 스레드는 네트워크로부터 다른 자원을 찾아 내려받고 문서의 나머지 부분을 파싱한다.</li><li>이런 방법은 자원을 병렬로 연결하여 받을 수 있고 전체적인 속도를 개선한다.</li><li>참고로 예측 파서는 DOM 트리를 수정하지 않고 메인 파서의 일로 넘긴다. 예측 파서는 외부 스크립트, 외부 스타일 시트와 외부 이미지와 같이 참조된 외부 자원을 파싱할 뿐이다.</li></ul><h3 id="4-3-스타일-시트"><a href="#4-3-스타일-시트" class="headerlink" title="4-3. 스타일 시트"></a>4-3. 스타일 시트</h3><ul><li>이론적으로 스타일 시트는 DOM 트리를 변경하지 않기 때문에 문서 파싱을 기다리거나 중단할 이유가 없다.</li><li>그러나 스크립트가 문서를 파싱하는 동안 스타일 정보를 요청하는 경우라면 문제가 된다.</li><li>스타일이 파싱되지 않은 상태라면 스크립트는 잘못된 결과를 내놓기 때문에 많은 문제를 야기한다.</li><li>파이어폭스는 아직 로드 중이거나 파싱 중인 스타일 시트가 있는 경우 모든 스크립트의 실행을 중단한다.</li><li>웹킷은 로드되지 않은 스타일 시트 가운데 문제가 될만한 속성이 있을 때에만 스크립트를 중단한다.</li></ul><hr><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://d2.naver.com/helloworld/59361" target="_blank" rel="noopener">https://d2.naver.com/helloworld/59361</a></li><li><a href="https://developers.google.com/web" target="_blank" rel="noopener">https://developers.google.com/web</a></li><li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=ko" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=ko</a></li><li>[WEBDIR] <a href="http://webdir.tistory.com/40" target="_blank" rel="noopener">http://webdir.tistory.com/40</a></li><li><a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=ko" target="_blank" rel="noopener">https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=ko</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://d2.naver.com/helloworld/59361&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://d2.naver.com/helloworld/59361&lt;/a&gt; 를 읽
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Web" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Web/"/>
    
    
      <category term="Web" scheme="http://feel5ny.github.io/tags/Web/"/>
    
      <category term="browser" scheme="http://feel5ny.github.io/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>브라우저와 렌더링 엔진</title>
    <link href="http://feel5ny.github.io/2018/05/29/rendering_engine_0/"/>
    <id>http://feel5ny.github.io/2018/05/29/rendering_engine_0/</id>
    <published>2018-05-29T12:20:19.000Z</published>
    <updated>2019-01-03T15:33:29.253Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://d2.naver.com/helloworld/59361" target="_blank" rel="noopener">https://d2.naver.com/helloworld/59361</a> 를 읽고 정리했습니다.</p></blockquote><ol><li>브라우저의 주요 기능</li><li>브라우저의 기본 구조</li><li>렌더링 엔진</li></ol><hr><h2 id="1-브라우저의-주요-기능"><a href="#1-브라우저의-주요-기능" class="headerlink" title="1. 브라우저의 주요 기능"></a>1. 브라우저의 주요 기능</h2><ul><li>URI를 입력할 수 있는 주소 표시 줄</li><li>이전 버튼과 다음 버튼</li><li>북마크</li><li>새로 고침 버튼과 현재 문서의 로드를 중단할 수 있는 정지 버튼</li><li>홈 버튼</li></ul><h2 id="2-브라우저의-기본-구조"><a href="#2-브라우저의-기본-구조" class="headerlink" title="2. 브라우저의 기본 구조"></a>2. 브라우저의 기본 구조</h2><ol><li><p>사용자 인터페이스</p><ul><li>주소 표시줄, 이전/다음 버튼, 북마크 메뉴 등. </li><li>요청한 페이지를 보여주는 창을 제외한 나머지 모든 부분이다.</li></ul></li><li><p>브라우저 엔진</p><ul><li>사용자 인터페이스와 렌더링 엔진 사이의 동작을 제어.</li></ul></li><li><p>렌더링 엔진</p><ul><li>요청한 콘텐츠를 표시. 예를 들어 HTML을 요청하면 HTML과 CSS를 파싱하여 화면에 표시함.</li></ul></li><li><p>통신</p><ul><li>HTTP 요청과 같은 네트워크 호출에 사용됨.</li><li>플랫폼 독립적인 인터페이스이고, 각 플랫폼 하부에서 실행됨.</li></ul></li><li><p>UI 백엔드</p><ul><li>콤보 박스와 창 같은 기본적인 장치를 그림. (콤보박스 : 드롭다운 목록과 텍스트 상자와 조합한 것)</li></ul></li><li><p>자바스크립트 해석기</p><ul><li>자바스크립트 코드를 해석하고 실행.</li></ul></li><li><p>자료 저장소</p><ul><li>이 부분은 자료를 저장하는 계층이다. </li><li>쿠키를 저장하는 것과 같이 모든 종류의 자원을 하드 디스크에 저장할 필요가 있다. </li><li>HTML5 명세에는 브라우저가 지원하는 ‘웹 데이터 베이스’가 정의되어 있다.</li></ul></li></ol><img src="/images/2018/13/browser_basic.png"><hr><h2 id="3-렌더링-엔진"><a href="#3-렌더링-엔진" class="headerlink" title="3. 렌더링 엔진"></a>3. 렌더링 엔진</h2><ul><li>요청 받은 내용을 브라우저 화면에 표시한다.</li><li><code>HTML</code> 및 <code>XML</code> 문서와 <code>이미지</code>를 표시할 수 있다.</li></ul><blockquote><p><strong>XML</strong><br>XML이란 문자 기반의 마크업 언어, HTML처럼 데이터를 보여주는 목적이 아닌, 데이터를 저장하고 전달할 목적으로 만들어졌음. XML태그는 HTML태그처럼 미리 정의되어 있지 안혹, 사용자가 직접 정의할 수 있다.</p></blockquote><h3 id="3-1-렌더링-엔진들"><a href="#3-1-렌더링-엔진들" class="headerlink" title="3-1. 렌더링 엔진들"></a>3-1. 렌더링 엔진들</h3><p>파이어복스, 크롬, 사파리는 두 종류의 렌더링 엔진으로 제작되어있다.</p><ul><li>파이어폭스 : 게코엔진</li><li>사파리 : 웹킷</li><li>크롬 : 블링크<br>(크로미움 프로젝트 공식 블로그는 웹킷에서 블링크로 넘어간 이유를 “웹킷이 여러 아키텍처를 지원하면서 웹킷과 크로미움 프로젝트의 복잡성이 증가했고, 이에 따라 집단 혁신 속도가 저하되었기 때문”이라고 밝혔다. <a href="http://huns.me/development/1478" target="_blank" rel="noopener">출처</a>)</li></ul><img src="/images/2018/13/rendering_engine.png"><img src="/images/2018/13/os_support.png"><p><a href="https://en.wikipedia.org/wiki/Comparison_of_browser_engines" target="_blank" rel="noopener">Comparison of browser engines</a></p><h3 id="3-2-동작-과정"><a href="#3-2-동작-과정" class="headerlink" title="3-2. 동작 과정"></a>3-2. 동작 과정</h3><p>렌더링 엔진은</p><div style="padding: 1em;background-color: lightyellow;">1. [HTML 파싱](#html_parse) (for DOM트리 구축)  2. [렌더 트리 **구축**](#setting)  3. [렌더 트리 **배치**](#layout)  4. [렌더 트리 **그리기**](#draw)</div><ul><li>일련의 과정들이 동기적으로 진행되지 않는다. HTML을 파싱할 때까지 기다리지 않고 렌더 트리 배치와 그리기 과정을 시작한다.</li><li>렌더링 엔진에 따라서 동작과정이 약간 다르다.</li></ul><h4 id="3-2-1-웹킷"><a href="#3-2-1-웹킷" class="headerlink" title="3-2-1. 웹킷"></a>3-2-1. 웹킷</h4><img src="/images/2018/13/webkit_logo.png" width="300" style="margin:0;"><img src="/images/2018/13/webkit.png"><ul><li>렌더트리 (렌더객체로 구성)</li><li>렌더객체</li><li>배치(layout)라는 용어를 사용</li><li>attachment : 웹킷이 렌더 트리를 생성하기 위해 DOM 노드와 시각 정보를 연결하는 과정.</li></ul><h4 id="3-2-2-게코"><a href="#3-2-2-게코" class="headerlink" title="3-2-2. 게코"></a>3-2-2. 게코</h4><img src="/images/2018/13/gecko-logo.gif" width="100" style="margin:0;"><img src="/images/2018/13/gecko.png">- 형상트리(frame tree) : 시각적으로 처리되는 렌더 트리- 형상(frame) : 형상- 배치라는 뜻으로 리플로(`reflow`)라는 용어를 사용- 콘텐츠 싱크 (content sink) : DOM 요소를 생성하는 공정<hr><p>궁금</p><h3 id="1-URI와-URL의-차이점"><a href="#1-URI와-URL의-차이점" class="headerlink" title="1. URI와 URL의 차이점"></a>1. URI와 URL의 차이점</h3><p><strong>URL</strong></p><ul><li><strong>U</strong>niform <strong>R</strong>esource <strong>L</strong>ocator의 약자</li><li>인터넷 상의 자원 위치</li></ul><p><strong>URI</strong></p><ul><li><strong>U</strong>niform <strong>R</strong>esource <strong>I</strong>dentifier의 약자</li><li>인터넷 상의 자원을 식별하기 위한 문자열의 구성</li><li>URI이 URL보다 상위개념</li></ul><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://d2.naver.com/helloworld/59361" target="_blank" rel="noopener">https://d2.naver.com/helloworld/59361</a></li><li><a href="https://developers.google.com/web" target="_blank" rel="noopener">https://developers.google.com/web</a></li><li><a href="https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/" target="_blank" rel="noopener">https://hacks.mozilla.org/2017/10/the-whole-web-at-maximum-fps-how-webrender-gets-rid-of-jank/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://d2.naver.com/helloworld/59361&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://d2.naver.com/helloworld/59361&lt;/a&gt; 를 읽
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Web" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Web/"/>
    
    
      <category term="Web" scheme="http://feel5ny.github.io/tags/Web/"/>
    
      <category term="browser" scheme="http://feel5ny.github.io/tags/browser/"/>
    
  </entry>
  
  <entry>
    <title>12/ File Api와 이미지 용량 줄이기</title>
    <link href="http://feel5ny.github.io/2018/05/27/JS_12/"/>
    <id>http://feel5ny.github.io/2018/05/27/JS_12/</id>
    <published>2018-05-27T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.464Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/2018/12/3.jpg"><p>오늘은 이미지 용량을 줄이는, (리사이징이 더 맞는 말이겠죠.) 방법에 대해서 알아보려고 합니다. 로컬에서 이미지 파일을 올리는 것부터 시작하죠. 이를 위해서는 HTML5관련 API 중 하나인 <strong>파일 API</strong>를 이용하고, 이미지 리사이징을 위해서 <strong>캔버스</strong>를 이용할 것입니다. 파일API를 다뤄보고 Blob에 대해서도 알아보죠..(Blob의 더 자세한 내용을 위해 포스팅을 따로 해야 할 것 같습니다.) ( + 제이커리 사용했습니다.)</p><img src="/images/2018/12/04.jpg"><p>보통 웹에서 글을 게시할 때 이미지를 첨부해야 하는 기능이 있죠. 이미지 업로드시 용량 축소가 기본적으로 들어가야 하고, 이는 프론트단에서 작업해주는게 보통입니다! 유저들이 보통 올리는 이미지는 스마트폰 사진이 일반적일 텐데, 요즘 스마트폰 카메라 성능이 좋아지면서 많게는 개당 8MB까지 나오는 경우도 있죠. 서버단에서 리사이징할 경우 비용이 아깝게 들기 때문에.. 클라이언트에서 이를 작업합니다. 전체 플로우는 이렇습니다.</p><ol><li>File API를 이용하여 이미지 파일 접근 (FileReader)</li><li>img 엘리먼트 생성, dataUrl 삽입</li><li>canvas 생성, img를 다시 리사이징하여 drawing</li><li>canvas의 dataURL를 이용하여 Blob 객체 생성</li><li>전송</li></ol><hr><h2 id="1-File-API-FileReader"><a href="#1-File-API-FileReader" class="headerlink" title="1. File API, FileReader"></a>1. File API, FileReader</h2><p>input의 <code>type=file</code>를 이용해서 이미지 파일에 접근, file 객체들을 files 컬렉션에 담습니다. 각 객체가 파일 하나를 나타냅니다.(Blob)<br>파일 객체에는 여러가지 읽기 전용 프로퍼티가 존재합니다.</p><ul><li>name: 로컬 시스템의 파일 이름</li><li>size: 바이트 단위인 파일 크기</li><li>type: 파일의 망미 타입을 나타내는 문자열 (ex_ “image/png”)</li><li>lastModifiedDate: 파일이 마지막으로 수정된 시점을 나타내는 문자열입니다. 이 프로퍼티는 크롬에만 구현되어있습니다.</li></ul><img src="/images/2018/12/01.png"><p>파일 API는 FileReader 타입을 통해 파일 데이터를 읽을 수 있습니다.</p><h3 id="1-1-FileReader-타입"><a href="#1-1-FileReader-타입" class="headerlink" title="1-1. FileReader 타입"></a>1-1. FileReader 타입</h3><p>FileReader 타입은 비동기적으로 파일을 읽는 메커니즘입니다. 서버에서 파일을 읽는 것이 아닌, 파일 시스템에서 파일을 읽는 것이라고 이해하자.<br>FileReader 타입에는 파일 데이터를 읽는 여러 가지 메서드가 존재합니다.</p><ul><li>readAsText(file, encoding) : 파일을 평범한 텍스트로 읽고 그 텍스트를 result 프로퍼티에 저장한다. 두 번째 매개변수는 옵션.</li><li>readAsDataURL(file) : 파일을 읽은 다음 이를 표현하는 데이터 URI를 result 프로퍼티에 저장.</li><li>readAsBinaryString(file) : 파일을 읽은 다음 각 문자가 1바이트를 나타내는 문자열을 result 프로퍼티에 저장.</li><li>readAsArrayBuffer(file) : 파일을 읽은 다음 파일 콘텐츠를 포함하는 ArrayBuffer를 result 프로퍼티에 저장.</li></ul><p>읽는 과정은 <strong>비동기</strong>적이므로 FileReader는 <strong>progress, error, load</strong> 이벤트를 일으킵니다.</p><ul><li>progress : 읽어올 데이터가 더 있을 때<ul><li>50밀리 초마다 발생, lengthComputable, loaded, total 같은 정보를 제공한다.</li><li><strong>loaded / total = 버퍼링</strong></li></ul></li><li>error : 에러 생겼을 때<ul><li><code>1</code> : 파일을 찾을 수 없음</li><li><code>2</code> : 보안 에러</li><li><code>3</code> : 읽기 거부</li><li><code>4</code> : 파일을 읽을 수 없음</li><li><code>5</code> : 인코딩 에러</li></ul></li><li>load : 파일을 완전히 읽었을 때</li></ul><p><strong>load 이후에는 readAsDataURL 메서드를 통해 result 프로퍼티에 데이터 URI가 저장되도록 해야 합니다.</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- html 🚀🚀 --&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"upload-wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"upload"</span> <span class="attr">class</span>=<span class="string">"upload-label"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>✨UPLOAD IMAGE ✨<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"upload-imgBtn"</span> <span class="attr">src</span>=<span class="string">"https://uploads.codesandbox.io/uploads/user/1dcc6c5f-ac13-4c27-b2e3-32ade1d213e9/2Go1-photo.svg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- fileReader를 통해 읽은 파일을 넣는 부분 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"image-preview"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">id</span>=<span class="string">"upload"</span> <span class="attr">class</span>=<span class="string">"image-upload"</span> <span class="attr">style</span>=<span class="string">"display:none;"</span> <span class="attr">multiple</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>input type=”file” 태그에 onchange 이벤트를 걸어둡니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> load_image = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> files = e.target.files;</span><br><span class="line">  <span class="keyword">const</span> filesArr = <span class="built_in">Array</span>.prototype.slice.call(files);</span><br><span class="line">  <span class="comment">// 여러장의 이미지를 불러올 경우, 배열화</span></span><br><span class="line"></span><br><span class="line">  filesArr.forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    reader.onload = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 뭔가 썸팅 할 것을 넣습니다.</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    reader.readAsDataURL(file); ✨✨</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="string">".image-upload"</span>).on(<span class="string">"change"</span>, e =&gt; load_image(e));</span><br></pre></td></tr></table></figure><hr><h2 id="2-img-엘리먼트-생성-dataUrl-삽입"><a href="#2-img-엘리먼트-생성-dataUrl-삽입" class="headerlink" title="2. img 엘리먼트 생성, dataUrl 삽입"></a>2. img 엘리먼트 생성, dataUrl 삽입</h2><p>이미지는 용량에 따라 로드 속도가 다릅니다. 웹은 이미지에 대해서 비동기적으로 동작하는데 완전히 로드될 때까지 기다리지 않고 웹 페이지를 일단 표시한 후 <strong>이미지는 따로 읽습니다.</strong> 때문에 이미지를 읽은 직후 바로 출력하면 제대로 동작하지 않습니다. filereader를 통해서 파일을 읽은 이후 이미지 리사이징을 하려고 했지만, 이미지가 아직 로드되지 않았는데 리사이징하면 당연히 canvas의 이미지는 존재하지 않겠죠? </p><p>image가 읽혀진 후에 리사이징이 이루어지도록 하기 위해서 filereader와 마찬가지로 load 콜백 내부에 리사이징 함수를 넣어둘 것입니다.<br>load 이벤트를 사용하기 위해 Image 인스턴스를 생성합니다.<br>reader.onload의 콜백 내부에 image 인스턴스를 생성하고, image가 읽을 수 있는 형태가 되면 image.onload가 발생되도록 합니다. (자세한건 코드..!)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> load_image = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> files = e.target.files;</span><br><span class="line">  <span class="keyword">const</span> filesArr = <span class="built_in">Array</span>.prototype.slice.call(files);</span><br><span class="line">  <span class="comment">// 여러장의 이미지를 불러올 경우, 배열화</span></span><br><span class="line"></span><br><span class="line">  filesArr.forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">    reader.onload = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">        image.className = <span class="string">"img-item"</span>; <span class="comment">// 스타일 적용을 위해</span></span><br><span class="line">        image.src = e.target.result;</span><br><span class="line">        image.onload = <span class="function"><span class="params">imageEvent</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 이미지가 로드가 되면! 리사이즈 함수가 실행되도록 합니다.</span></span><br><span class="line">          resize_image(image);</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    reader.readAsDataURL(file); ✨✨</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(<span class="string">".image-upload"</span>).on(<span class="string">"change"</span>, e =&gt; load_image(e));</span><br></pre></td></tr></table></figure><hr><h2 id="3-canvas-생성-img를-다시-리사이징하여-drawing"><a href="#3-canvas-생성-img를-다시-리사이징하여-drawing" class="headerlink" title="3. canvas 생성, img를 다시 리사이징하여 drawing"></a>3. canvas 생성, img를 다시 리사이징하여 drawing</h2><p>resize_image 함수에 인자로 앞서 생성한 image 요소를 넘겨받게 했습니다.<br>리사이징을 위해서 캔버스 엘리먼트를 생성한 후, 캔버스에 2d 컨텍스트의 image를 리사이징된 폭과 높이로 그릴 것입니다.</p><ol start="0"><li>캔버스 엘리먼트를 생성.</li><li>해당 image의 높이와 폭을 측정한 후, </li><li>원하는 최대 사이즈의 크기보다 높이가 클 경우 리사이징할 비율을 폭에 곱하고, 반대의 경우 반대로 적용합니다. ( 폭이 클 경우 비율을 높에 곱한다. )</li><li>리사이징된 폭과 높이를 canvas의 높이와 폭이 할당한 후 </li><li>drawing 합니다. canvas의 drawImage() 사용합니다. 매개변수로는 이미지/ 원본의 x y 좌표 / 너비와 높이 / 컨텍스트의 x y 좌표 / 컨텍스트 너비/ 높이</li><li>canvas의 dataURL을 toDataURL 메서드를 이용하여 구합니다. toDataURL 메서드에 이미지 마임 타입을 매개변수로 전달하여 data URI를 받습니다.</li></ol><ul><li>getContext()는 브라우저 별로 지원 범위가 있습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resize_image = <span class="function"><span class="params">image</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>),</span><br><span class="line">    max_size = <span class="number">1280</span>,</span><br><span class="line">    <span class="comment">// 최대 기준을 1280으로 잡음.</span></span><br><span class="line">    width = image.width,</span><br><span class="line">    height = image.height;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (width &gt; height) &#123;</span><br><span class="line">    <span class="comment">// 가로가 길 경우</span></span><br><span class="line">    <span class="keyword">if</span> (width &gt; max_size) &#123;</span><br><span class="line">      height *= max_size / width;</span><br><span class="line">      width = max_size;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 세로가 길 경우</span></span><br><span class="line">    <span class="keyword">if</span> (height &gt; max_size) &#123;</span><br><span class="line">      width *= max_size / height;</span><br><span class="line">      height = max_size;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  canvas.width = width;</span><br><span class="line">  canvas.height = height;</span><br><span class="line">  canvas.getContext(<span class="string">"2d"</span>).drawImage(image, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">  <span class="keyword">const</span> dataUrl = canvas.toDataURL(<span class="string">"image/jpeg"</span>);</span><br><span class="line">  <span class="comment">// 미리보기 위해서 마크업 추가.</span></span><br><span class="line">  $(<span class="string">".image-preview"</span>).append(<span class="string">'&lt;img src="'</span> + dataUrl + <span class="string">'" class="img-item"&gt;'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h2 id="4-canvas의-dataURL를-이용하여-Blob-객체-생성"><a href="#4-canvas의-dataURL를-이용하여-Blob-객체-생성" class="headerlink" title="4. canvas의 dataURL를 이용하여 Blob 객체 생성"></a>4. canvas의 dataURL를 이용하여 Blob 객체 생성</h2><p>Data URIs는 네 가지 파트로 구성됩니다<br><code>data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</code></p><ol><li>접두사(data:)</li><li>데이터의 타입을 가리키는 MIME 타입</li><li>텍스트가 아닌 경우 사용될 부가적인 base64 토큰 그리고 데이터 자체</li></ol><blockquote><p><strong>Base64</strong><br>바이너리 데이터를 문자 코드에 영향을 받지 않는 공통 ASCII 문자로 표현하기 위해 만들어진 인코딩이다. 네이버 지식iN 등의 URL에서 자주 볼 수 있는 형태의 바로 그것.<br>ASCII 문자 하나가 <strong>64진법의 숫자 하나를 의미</strong>하기 때문에 BASE64라는 이름을 가졌다.</p></blockquote><hr><blockquote><p><strong>Blob</strong><br>Blob은 일련의 데이터를 처리하거나 간접 참조하는 객체다. Blob이란 이름은 SQL 데이터베이스에서 유래하였으며 ‘대형 이진 객체(Binary Large Object)’를 의미한다. 자바스크립트에서 Blob은 흔히 이진 데이터를 나타내며 해당 데이터의 크기가 매우 클 수 있지만, 두 가지 특징 모두 강제된 사항은 아니다. 즉, 작은 텍스트 파일의 내용도 Blob으로 나타낼 수 있다. Blob은 대개 바이트의 크기를 알아내거나, 해당 MIME 타입이 무엇인지 요청하며, 데이터를 작은 Blob으로 잘게 나누는 등의 작업에 사용된다. <strong>즉, 데이터 자체라기보다는 데이터를 간접적으로 접근하기 위한 객체인 것이다.</strong></p></blockquote><blockquote><p><strong>Blob.size</strong><br>  Blob 객체에 포함된 데이터의 <strong>바이트</strong> 단위의 사이즈를 의미한다.<br><strong>Blob.type</strong><br>  Blob에 포함된 데이터의 MIME 타입을 의미한다. 만약 unknown으로 나올 경우, 이 문자열은 비어있는 것이다.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dataURLToBlob = <span class="function"><span class="params">dataURL</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> BASE64_MARKER = <span class="string">";base64,"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// base64로 인코딩 되어있지 않을 경우</span></span><br><span class="line">  <span class="keyword">if</span> (dataURL.indexOf(BASE64_MARKER) === <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> parts = dataURL.split(<span class="string">","</span>);</span><br><span class="line">    <span class="keyword">const</span> contentType = parts[<span class="number">0</span>].split(<span class="string">":"</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">const</span> raw = parts[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([raw], &#123;</span><br><span class="line">      type: contentType</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// base64로 인코딩 된 이진데이터일 경우</span></span><br><span class="line">  <span class="keyword">const</span> parts = dataURL.split(BASE64_MARKER);</span><br><span class="line">  <span class="keyword">const</span> contentType = parts[<span class="number">0</span>].split(<span class="string">":"</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">const</span> raw = <span class="built_in">window</span>.atob(parts[<span class="number">1</span>]);</span><br><span class="line">  <span class="comment">// atob()는 Base64를 디코딩하는 메서드</span></span><br><span class="line">  <span class="keyword">const</span> rawLength = raw.length;</span><br><span class="line">  <span class="comment">// 부호 없는 1byte 정수 배열을 생성 </span></span><br><span class="line">  <span class="keyword">const</span> uInt8Array = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(rawLength); <span class="comment">// 길이만 지정된 배열</span></span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; rawLength) &#123;</span><br><span class="line">    uInt8Array[i] = raw.charCodeAt(i);</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Blob([uInt8Array], &#123;</span><br><span class="line">    type: contentType</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><img src="/images/2018/12/02.png"><hr><h2 id="5-전송"><a href="#5-전송" class="headerlink" title="5. 전송"></a>5. 전송</h2><p>ajax로 보낼 경우 FormData 생성후 최종 생성한 Blob 객체를 추가하면 됩니다.</p><iframe src="https://codesandbox.io/embed/9jvp2o30zo" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"></iframe><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://mohwa.github.io/blog/javaScript/2015/08/31/binary-inJS/" target="_blank" rel="noopener">http://mohwa.github.io/blog/javaScript/2015/08/31/binary-inJS/</a></li><li><a href="http://www.soen.kr/html5/html3/3-1-3.htm" target="_blank" rel="noopener">http://www.soen.kr/html5/html3/3-1-3.htm</a></li><li>프론트엔드개발자를 위한 자바스크립트 - File API</li><li><a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/Data_URIs" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/Data_URIs</a></li><li><a href="https://namu.wiki/w/BASE64" target="_blank" rel="noopener">https://namu.wiki/w/BASE64</a></li><li><a href="https://developer.mozilla.org/ko/docs/Web/API/Blob" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/API/Blob</a></li><li><a href="https://firejune.com/1787/HTML5+ArrayBuffer+API+%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0" target="_blank" rel="noopener">https://firejune.com/1787/HTML5+ArrayBuffer+API+%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0</a> (ArrayBuffer - 추후 더 공부하기)</li><li><a href="http://iamawebdeveloper.tistory.com/106" target="_blank" rel="noopener">http://iamawebdeveloper.tistory.com/106</a> [나는 웹개발자!]</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/2018/12/3.jpg&quot;&gt;


&lt;p&gt;오늘은 이미지 용량을 줄이는, (리사이징이 더 맞는 말이겠죠.) 방법에 대해서 알아보려고 합니다. 로컬에서 이미지 파일을 올리는 것부터 시작하죠. 이를 위해서는 HTML5관련 API
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
      <category term="File API" scheme="http://feel5ny.github.io/tags/File-API/"/>
    
      <category term="canvas" scheme="http://feel5ny.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>(mobile) device-pixel-ratio계산</title>
    <link href="http://feel5ny.github.io/2018/05/13/mediaQuery_01/"/>
    <id>http://feel5ny.github.io/2018/05/13/mediaQuery_01/</id>
    <published>2018-05-13T12:20:19.000Z</published>
    <updated>2019-01-03T15:33:29.071Z</updated>
    
    <content type="html"><![CDATA[<div style="padding: 0px 40px 20px 40px;background: #cbd3da22;margin-top:20px">**목차** &#128075;&#128075;<ol start="0"><li>서론</li><li>@media 대하여..</li><li>-webkit-device-pixel-ratio<ul><li>2-1. 픽셀비율 계산하기</li><li>2-2. device width와 height 계산하기</li></ul></li></ol></div><hr><h2 id="0-서론"><a href="#0-서론" class="headerlink" title="0. 서론"></a>0. 서론</h2><p> 현재 작업 중인 프로젝트는 데스크탑 브라우저(여러 브라우저 대응) 뿐만아니라 모바일 기기 대응도 진행해야한다. 너무도 당연히 대응해야하지만!! 기기의 종류들의 크기가 다양해짐에 따라서 미디어쿼리를 적절히 사용해야할 필요가 생겼다.(아이폰X나 갤럭시S9같은.. 스크린이 긴 단말기ㅜ) 게다가 네이티브앱에서 웹뷰를 이용하는 일이 빈번했기 때문에 더더욱..</p><hr><h2 id="1-특정-모바일-디바이스-대응-media"><a href="#1-특정-모바일-디바이스-대응-media" class="headerlink" title="1. 특정 모바일 디바이스 대응 @media"></a>1. 특정 모바일 디바이스 대응 <code>@media</code></h2><p>CSS3의 @media 쿼리를 이용해서 screen의 크기에 따라서 레이아웃 구성을 다르게하는 방법을 구현할 수 있다. 반응형 웹에서는 다른 특별한 설정 없이 max-width같은 media features를 추가하여 브라우저의 width값마다 스타일을 조정할 수 있다. </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*syntax*/</span></span><br><span class="line">@<span class="keyword">media</span> not|only (media type) and (media feature) &#123;</span><br><span class="line">    <span class="selector-tag">CSS-Code</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="media-type"><a href="#media-type" class="headerlink" title="media type"></a>media type</h3><ul><li><code>all</code> : 모든 디바이스에 적용</li><li><code>print</code> : printer에 사용</li><li><code>screen</code> : 컴퓨터 스크린, 태블릿, 스마트폰 등에 쓰임</li><li><code>speech</code> : 스크린 리더기에 사용, 스크린 내용을 읽어주는 미디어 일때</li></ul><h3 id="media-features-조건문"><a href="#media-features-조건문" class="headerlink" title="media features(조건문)"></a>media features(조건문)</h3><p>(정말 많군요! &#128064;)</p><ul><li><code>height, width</code> : 둘 다 해당, 둘 다 미디어에 따라 다른 값들이 검출 됨</li><li><code>width : 320px</code> : 미디어가 320px일때</li><li><code>max-width : 320px</code> : 320px 이하의 미디어 일 때</li><li><code>min-width : 320px</code> : 320px 이상의 미디어 일 때</li><li><code>device</code> : device의 물리적인 값들을 기준으로(해상도와 너비는 같지 않을 수 있다)</li><li><code>device-width : 320px</code> : 기기의 너비가 320px일때</li><li><code>max-device-width : 320px</code> : 320px 이하의 화면일 때</li><li><code>min-device-width : 320px</code> : 320px 이상의 화면일 때</li><li><code>orientation</code> :<br>화면 회전 width, height가 아닌 portrait, landscape값으로 구분한다.<br>대부분 세로로 긴 핸드폰의 형태이기 때문에 기본상태는 portrait, 가로로 돌렸을 때는 landscape.<br>데스크톱에는 가로 세로 개념이 없음. <strong>그렇다고 이 개념이 모바일 개념은 아니다.</strong></li></ul><hr><ul><li><code>aspect-ratio</code>, <code>min-aspect-ratio</code>, <code>max-aspect-ratio</code>(화면비율) : width/height (가로 나누기 세로)</li><li><code>aspect-ratio:1</code> : 화면 비율이 1:1인경우</li><li><code>aspect-ratio:16/9</code> : 일반적인 화면 비율인 16:9를 의미합니다(1920*1080)</li><li><code>device-aspect-ratio</code>, <code>min-device-aspect-ratio</code>, <code>max-device-aspect-ratio</code> : 단말기의 물리적인 화면 비율</li></ul><hr><ul><li><code>color</code>, <code>min-color</code>, <code>max-color</code> : 단말기에서 사용하는 최대 색상 비트 수에 대응(단위는 자연수)</li><li><code>color:3</code> : 2³ = 8개의 색상 사용</li><li><code>color-index</code>, <code>min-color-index</code>, <code>max-color-index</code> : 최대 색상 수에 대응</li></ul><hr><ul><li><code>monochrome</code>, <code>min-monochrome</code>, <code>max-monochrome</code> : 흑백만 사용하는 단말기에서의 픽셀당 비트수, 얼마나 자유롭게 표현되는지를 확인함</li><li><code>resolution</code>, <code>min-resolution</code>, <code>max-resolution</code> : 단말기의 해상도</li></ul><hr><ul><li><code>grid</code> : 단말기가 grid방식인지 bitmap방식인지</li><li><code>grid:1</code> ⇒ 문자로만 표기되는 tty, 주로 터미널, 전화액정</li><li><code>grid:0</code> ⇒ 대부분의 컴퓨터와 스마트폰 웹 브라우저에 해당</li></ul><hr><ul><li><code>-webkit-min-device-pixel-ratio</code> : 단말기의 화소와 실제 화면의 pixel간의 비율</li></ul><hr><hr><h2 id="2-webkit-device-pixel-ratio"><a href="#2-webkit-device-pixel-ratio" class="headerlink" title="2. -webkit-device-pixel-ratio"></a>2. -webkit-device-pixel-ratio</h2><p>사실 단말기에 따른 media query는 인터넷 서핑을 잘 하다보면 구할 수 있다.<br>(<a href="http://vizdevices.yesviz.com/" target="_blank" rel="noopener">여긴</a> 내가 좋아하는 정리 사이트)<br>나 또한 정리되어있는 자료에서 device width와 height, -webkit-min-device-pixel-ratio를 구할 수 있었다. 정리된 수치로 잘 사용하고 있었지만, 종종 서치하기 힘든 디바이스까지 대응해야할 경우도 생기곤 한다. 그리고 나에게도 그런 상황이 다가왔다!</p><h3 id="1-픽셀-비율을-계산해보자"><a href="#1-픽셀-비율을-계산해보자" class="headerlink" title="1. 픽셀 비율을 계산해보자."></a>1. 픽셀 비율을 계산해보자.</h3><p>내가 대응해야할 폰은 LG X400이라는 디바이스였다. 최근에 나온 기종이고, 내가 알 수 있는 정보는 아래 표밖에 없었다.<br><img src="/images/2018/11/image.png"></p><img style="border-radius: 6px;" src="/images/2018/11/image02.png"><h3 id="5-3인치-1280-720-294ppi"><a href="#5-3인치-1280-720-294ppi" class="headerlink" title="5.3인치 1280*720, 294ppi"></a><u style="background: #222222;color: white;padding: 10px 20px;"><strong>5.3인치 1280*720, 294ppi</strong></u></h3><p>@media only screen and<br>(<code>device-width: ?px</code>) and<br>(<code>device-height: ?px</code>) and<br>(<code>-webkit-device-pixel-ratio: ?</code>) {</p><p>위의 값들이 필요하다. 먼저 픽셀 비율부터 구해보자.<br>디바이스 픽셀 비율을 계산하는 데는 세 단계가 필요하다. </p><h4 id="1-1-들고있는-디바이스로부터-시야까지의-실제-거리와-레퍼런스-픽셀의-거리를-비교"><a href="#1-1-들고있는-디바이스로부터-시야까지의-실제-거리와-레퍼런스-픽셀의-거리를-비교" class="headerlink" title="1-1. 들고있는 디바이스로부터 시야까지의 실제 거리와 레퍼런스 픽셀의 거리를 비교."></a>1-1. 들고있는 디바이스로부터 시야까지의 실제 거리와 레퍼런스 픽셀의 거리를 비교.</h4><p>  스펙에 따르면 28인치에서 이상적인 것은 <strong>인치 당 96 픽셀</strong>이다.(표준밀도는 96ppi) 그러나 스마트 폰이기때문에 사람들은 노트북을 들고 다니는 것보다 디바이스를 얼굴에 가깝게 들고있는다. 그 거리를 18 인치로 추정 해본다.<br>  <img src="/images/2018/11/image01.png"></p><h4 id="1-2-주어진-거리에-대해-이상적인-픽셀-밀도를-얻으려면-거리-비에-표준-밀도-96ppi-를-곱한다"><a href="#1-2-주어진-거리에-대해-이상적인-픽셀-밀도를-얻으려면-거리-비에-표준-밀도-96ppi-를-곱한다" class="headerlink" title="1-2. 주어진 거리에 대해 이상적인 픽셀 밀도를 얻으려면 거리 비에 표준 밀도 (96ppi)를 곱한다."></a>1-2. 주어진 거리에 대해 이상적인 픽셀 밀도를 얻으려면 거리 비에 표준 밀도 (96ppi)를 곱한다.</h4><p>idealPixelDensity = (28/18) * 96 = 150 픽셀/인치 (대략) </p><h4 id="1-3-물리적-픽셀-밀도와-이상적인-픽셀-밀도의-비율을-사용하여-장치-픽셀-비율을-얻는다"><a href="#1-3-물리적-픽셀-밀도와-이상적인-픽셀-밀도의-비율을-사용하여-장치-픽셀-비율을-얻는다" class="headerlink" title="1-3. 물리적 픽셀 밀도와 이상적인 픽셀 밀도의 비율을 사용하여 장치 픽셀 비율을 얻는다."></a>1-3. 물리적 픽셀 밀도와 이상적인 픽셀 밀도의 비율을 사용하여 장치 픽셀 비율을 얻는다.</h4><p>devicePixelRatio = 294/150 = 1.96 =&gt; 반올림 =&gt; <strong>2</strong></p><hr><h3 id="2-device-width와-height"><a href="#2-device-width와-height" class="headerlink" title="2. device-width와 height"></a>2. device-width와 height</h3><p>현재 알 수 있었던 해상도는 표에서 1280*720 라고 알 수 있었다.<br>device의 너비와 height는 픽셀 비율을 해상도에서 나누면 된다.</p><ul><li><strong>device-width</strong> = 720/2 = 360</li><li><strong>device-height</strong> = 1280/2 = 640</li></ul><hr><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and</span><br><span class="line">(device-width: <span class="number">360px</span>) and</span><br><span class="line">(device-height: <span class="number">640px</span>) and</span><br><span class="line">(-webkit-device-pixel-ratio: <span class="number">2</span>) &#123;</span><br><span class="line">  💅💅💅💅</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="요약"><a href="#요약" class="headerlink" title="요약"></a>요약</h3><ul><li>해당기기의 ppi와 해상도를 알고 있다면,<br>devicePixelRatio = 해당 기기의 ppi / 150 (왜 150인지는 위에 설명)<br>deviceWidth = 해당기기의 해상도 / devicePixelRatio</li><li>특정 기기 이외에는 min이나 max를 이용하여 정의하면 비슷한 해상도와 픽셀비율을 가진 디바이스에 적용가능하다. </li></ul><hr><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><p><a href="https://medium.com/@junghan_61455/css-media-query-5969b004bd7" target="_blank" rel="noopener">https://medium.com/@junghan_61455/css-media-query-5969b004bd7</a><br><a href="https://www.html5rocks.com/en/mobile/high-dpi/" target="_blank" rel="noopener">https://www.html5rocks.com/en/mobile/high-dpi/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;padding: 0px 40px 20px 40px;background: #cbd3da22;margin-top:20px&quot;&gt;
**목차** &amp;#128075;&amp;#128075;

&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;서론&lt;/li&gt;
&lt;li&gt;@m
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="CSS" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/CSS/"/>
    
    
      <category term="css" scheme="http://feel5ny.github.io/tags/css/"/>
    
      <category term="media-query" scheme="http://feel5ny.github.io/tags/media-query/"/>
    
      <category term="mobile" scheme="http://feel5ny.github.io/tags/mobile/"/>
    
      <category term="log" scheme="http://feel5ny.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>(번역) Angular의 observable을 이해하고, 생성하고, 구독해보기</title>
    <link href="http://feel5ny.github.io/2018/03/25/angular_observable/"/>
    <id>http://feel5ny.github.io/2018/03/25/angular_observable/</id>
    <published>2018-03-25T01:23:55.000Z</published>
    <updated>2019-01-03T15:33:29.259Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>원문 : <a href="https://medium.com/@luukgruijs/understanding-creating-and-subscribing-to-observables-in-angular-426dbf0b04a3" target="_blank" rel="noopener">https://medium.com/@luukgruijs/understanding-creating-and-subscribing-to-observables-in-angular-426dbf0b04a3</a></p></blockquote><hr><p>엥귤러 version2가 나왔을때, 엥귤러는 <code>옵저버블</code>을 소개했다. 옵저버블은 엥귤러의 특정 기능은 아니고, ES7 릴리스에 포함될 비동기 데이터를 관리하기위한 새로운 표준이다. Angular는 이벤트 시스템과 HTTP 서비스에서 옵저버블을 광범위하게 사용한다. 옵저버블들을 이해하는 건 꽤 중요한 일일 수 있다. 그러므로 쉬운 방법으로 옵저버블을 설명하려고 왔다. </p><img src="/images/2018/09/observable (1).png"><h2 id="Observables"><a href="#Observables" class="headerlink" title="Observables"></a>Observables</h2><p>옵저버블은 시간이 지남에 따라 여러값을 가질 수 있는 지연 콜렉션이다.<br>옵저버블은 사실.. 꽤 쉽습니다.</p><h3 id="1-Observables는-lazy하다"><a href="#1-Observables는-lazy하다" class="headerlink" title="1. Observables는 lazy하다."></a>1. Observables는 lazy하다.</h3><p>지연 옵저버블을 뉴스 레터로 생각할 수 있다. 각 구독자(subscriber)마다 새로운 뉴스 레터가 만들어진다. 그 뉴스레터들은 구독자들에게만 보내고 다른 사람에게는 보내지 않는다.</p><h3 id="2-Observables는-시간이-지남에-따라-여러-값을-가질-수-있다"><a href="#2-Observables는-시간이-지남에-따라-여러-값을-가질-수-있다" class="headerlink" title="2. Observables는 시간이 지남에 따라 여러 값을 가질 수 있다."></a>2. Observables는 시간이 지남에 따라 여러 값을 가질 수 있다.</h3><p>뉴스 레터 구독을 계속 열어두면, 매번 새로운 뉴스 레터를 받게된다. 발신자(sender)는 받은 시간을 결정하지만 받은 편지함에 곧바로 올 때까지 기다려야한다.</p><p>여러분이 <code>promise</code>의 세상에서 왔다면, 옵저버블과 프로미스간의 다른 중요한 차이점이 있는데, <code>promise</code>은 항상 오직 하나의 값만을 반환한다는 점이다. 또 하나는 옵저버블의 구독을 취소 할 수 있다는 점이다. 뉴스 레터를 더 이상 원하지 않으면 구독을 취소하면된다. 프로미스를 사용하면 이점이 다른건데, 프로미스는 취소 할 수 없다. 프라미스가 당신에게 건네지면, 그 프라미스의 resolve가 이미 진행되고 있으며, 일반적으로 프라미스의 resolve가 실행되는 것을 막을 수 있는 권한이 없다.</p><hr><h2 id="Push-vs-pull"><a href="#Push-vs-pull" class="headerlink" title="Push vs pull"></a>Push vs pull</h2><p>observables를 사용할 때 이해해야 할 핵심 사항은 observables가 push한다는 것이다. (옵저버블은 push 시나리오를 따른다는 말) push와 pull은 데이터 생성자가 데이터 소비자와 커뮤니케이션하는 방법을 설명하는 두 가지 방식이다.</p><h3 id="Pull"><a href="#Pull" class="headerlink" title="Pull"></a>Pull</h3><p>Pulling일 때 데이터 소비자는 데이터 생성자로부터 데이터를 가져 오는 시점을 결정한다. 생산자는 언제 데이터가 소비자에게 전달되는지를 알지 못한다.<br>모든 자바 스크립트 함수는 pull 시나리오를 사용한다. 함수는 데이터의 프로듀서이며 함수를 호출하는 코드는, 호출에서 하나의 반환 값을 “꺼내”(pull) 가져와 이를 소비한다.</p><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><p>Pushing일 때, 다른 방향으로 동작한다. 데이터 생성자 (뉴스 레터 생성자)는 소비자 (뉴스 레터 구독자)가 데이터를 가져 오는 시점을 결정합니다.</p><p>프로미스는 오늘날 자바 스크립트에서 사용하는 가장 일반적인 push 방법입니다. 프로미스(생산자) 전달자는 등록된 콜백(소비자)에게 resolve된 값을 전달하고, 프로미스는 함수와는 달리 콜백에 그 값이 “푸시 (push)”되는 시기를 정확하게 결정한다.</p><p>Observables는 JavaScript로 데이터를 푸시하는 새로운 방법이다. 옵저버블은 여러 값의 생산자로서 구독자에게 “푸시 (pushing)”한다.</p><hr><h2 id="엥귤러에서-Observables"><a href="#엥귤러에서-Observables" class="headerlink" title="엥귤러에서 Observables"></a>엥귤러에서 Observables</h2><p>Angular를 사용하기 시작하면 아마도 HTTP 요청을 설정할 때 옵저버블을 만날 것이다. http 요청부분부터 시작해봅시다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">"rxjs/Rx"</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">"@angular/core"</span></span><br><span class="line"><span class="keyword">import</span> &#123; Http, Response &#125; <span class="keyword">from</span> <span class="string">"@angular/http"</span></span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        public http: Http</span><br><span class="line">    ) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public fetchUsers() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.http.get(<span class="string">"/api/users"</span>)</span><br><span class="line">            .map(<span class="function">(<span class="params">res: Response</span>) =&gt;</span> res.json())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>우리는 이제 observable을 반환하는 fetchUsers 메서드를 사용하여 간단한 HttpClient를 만들었다. 어떤 종류의 리스트에 사용자를 표시하고 싶으므로 fetchUsers 메서드를 사용해서 해보자. 이 메소드는 옵저버블을 반환하기 때문에 우리는 그것을 구독해야 한다. Angular에서 우리는 두 가지 방식으로 Observable을 구독 할 수 있다 :</p><h3 id="방식-1"><a href="#방식-1" class="headerlink" title="방식 1:"></a>방식 1:</h3><p>비동기 파이프를 사용하여 템플릿의 옵저버블을 구독하는 방법이 있다. 이로 인해 Angular는 컴포넌트의 생명주기 동안 구독을 처리한다. Angular는 자동으로 구독하고 구독취소한다. 비동기 파이프가 노출되야하므로 모듈에 “CommonModule”을 import하는 것을 잊지 마세요.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">"@angular/core"</span></span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">"rxjs/Rx"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// client</span></span><br><span class="line"><span class="keyword">import</span> &#123; HttpClient &#125; <span class="keyword">from</span> <span class="string">"../services/client"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// interface</span></span><br><span class="line"><span class="keyword">import</span> &#123; IUser &#125; <span class="keyword">from</span> <span class="string">"../services/interfaces"</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">"user-list"</span>,</span><br><span class="line">    templateUrl:  <span class="string">"./template.html"</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public users$: Observable&lt;IUser[]&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        public client: HttpClient,</span><br><span class="line">    ) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do a call to fetch the users on init of component</span></span><br><span class="line">    <span class="comment">// the fetchUsers method returns an observable</span></span><br><span class="line">    <span class="comment">// which we assign to the users$ property of our class</span></span><br><span class="line">    public ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.users$ = <span class="keyword">this</span>.client.fetchUsers()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- We use the async pipe to automatically subscribe/unsubscribe to our observable --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"user__list"</span> *<span class="attr">ngIf</span>=<span class="string">"(users$ | async).length"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"user"</span> *<span class="attr">ngFor</span>=<span class="string">"let user of users$ | async"</span>&gt;</span></span><br><span class="line">        &#123;&#123; user.name &#125;&#125; - &#123;&#123; user.birth_date &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>달러 기호에 유의하세요. 옵저버블 변수 이름에 달러 기호를 사용하면 모범 사례로 간주된다. ($를 Stream의 약어로 쓴다.)이렇게하면 변수가 관찰 가능 여부를 쉽게 식별 할 수 있다.</p><hr><h3 id="방식-2"><a href="#방식-2" class="headerlink" title="방식 2:"></a>방식 2:</h3><p>우리는 실제 <code>subscribe()</code> 메소드를 사용하여 옵저버블을 구독한다. 데이터를 표시하기 전에 먼저 데이터에 뭔가 작업하기를 원한다면 편리할 수 ​​있다. 단점은 구독을 직접 관리해야한다는 것다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">"@angular/core"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// client</span></span><br><span class="line"><span class="keyword">import</span> &#123; HttpClient &#125; <span class="keyword">from</span> <span class="string">"../services/client"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// interface</span></span><br><span class="line"><span class="keyword">import</span> &#123; IUser &#125; <span class="keyword">from</span> <span class="string">"../services/interfaces"</span></span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">"user-list"</span>,</span><br><span class="line">    templateUrl:  <span class="string">"./template.html"</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UserList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    public users: IUser[]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        public client: HttpClient,</span><br><span class="line">    ) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// do a call to fetch the users on init of component</span></span><br><span class="line">    <span class="comment">// we manually subscribe to this method and take the users</span></span><br><span class="line">    <span class="comment">// in our callback</span></span><br><span class="line">    public ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">this</span>.client.fetchUsers().subscribe(<span class="function">(<span class="params">users: IUser[]</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// do stuff with our data here.</span></span><br><span class="line">            <span class="comment">// ....</span></span><br><span class="line">            <span class="comment">// asign data to our class property in the end</span></span><br><span class="line">            <span class="comment">// so it will be available to our template</span></span><br><span class="line">            <span class="keyword">this</span>.users = users</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"user__list"</span> *<span class="attr">ngIf</span>=<span class="string">"users.length"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"user"</span> *<span class="attr">ngFor</span>=<span class="string">"let user of users"</span>&gt;</span></span><br><span class="line">        &#123;&#123; user.name &#125;&#125; - &#123;&#123; user.birth_date &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>템플릿 로직이 꽤 비슷하다는 것을 알 수 있듯이, 당신이 2번 방식으로 간다면 구성 요소 논리는 훨씬 더 복잡해 질 수 있다. 일반적으로 나는 방식1을 선택하는 것이 좋다. 가장 쉽고 구독을 수동으로 관리할 필요가 없다. <code>2번방법에서 구독을 사용하지 않는 동안 열어두면 메모리 누수가 발생하므로 좋지 않다.</code></p><hr><h2 id="Creating-an-observable-yourself"><a href="#Creating-an-observable-yourself" class="headerlink" title="Creating an observable yourself"></a>Creating an observable yourself</h2><p>Angular가 제공한 일반적인 옵저버블을 다루는 방법을 알았으므로 옵저버블을 어떻게 생성하는지 알고있는 것이 좋다. 가장 간단한 버전은 다음과 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">"rxjs/Observable"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create observable</span></span><br><span class="line"><span class="keyword">const</span> simpleObservable = <span class="keyword">new</span> Observable(<span class="function">(<span class="params">observer</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// observable execution</span></span><br><span class="line">    observer.next(<span class="string">"bla bla bla"</span>)</span><br><span class="line">    observer.complete()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// subscribe to the observable</span></span><br><span class="line">simpleObservable.subscribe()</span><br><span class="line"></span><br><span class="line"><span class="comment">// dispose the observable</span></span><br><span class="line">simpleObservable.unsubscribe()</span><br></pre></td></tr></table></figure><p>예제에서 볼 수 있듯이 observables는 새로운 Observable() 호출을 사용하여 만든 다음 observer에 가입하고 next()를 호출하여 실행하고 unsubscribe()를 호출하여 삭제한다.</p><h3 id="observable-만들기"><a href="#observable-만들기" class="headerlink" title="observable 만들기"></a>observable 만들기</h3><p>observables를 만드는 것은 쉽다. 새로운 Observable()을 호출하고 옵저버를 나타내는 하나의 인수를 전달하면됩니다. 그러므로 저는 보통 그것을 “observer”라고 부릅니다.</p><h3 id="옵저버블-구독하기"><a href="#옵저버블-구독하기" class="headerlink" title="옵저버블 구독하기"></a>옵저버블 구독하기</h3><p>옵저버블은 느긋하다는걸 기억하세요. 구독하지 않으면 아무 일도 일어나지 않을 것이다. 옵저버를 구독 할 때 subscribe()를 호출 할 때마다 옵저버블에 독립 설정이 실행된다는 사실을 알면 좋다. 구독 요청은 동일한 옵저버블에 대한 여러 구독자간에 공유되지 않는다.</p><h3 id="옵저버블-실행하기"><a href="#옵저버블-실행하기" class="headerlink" title="옵저버블 실행하기 **"></a>옵저버블 실행하기 **</h3><p>observables 안의 코드는 observables의 실행을 나타낸다. 옵저버블을 만들 때 주어진 매개 변수(observer)에는 <code>옵저버블의 구독자에게 데이터를 보낼 수있는 세 가지 함수가 있다.</code></p><ul><li><code>next</code>: Number나 Array나 객체같은 여러 값을 subscribers에게 보낸다.</li><li><code>error</code>: 자바스크립트 에러나 예외값을 보낸다.</li><li><code>complete</code> : 어떤 값도 보내지 않는다.</li></ul><p><strong><code>next</code> 콜은 구독자에게 실제로 데이터를 전달할 때 가장 일반적이다.</strong> 옵저버블의 실행 중에는 <code>observer.next()</code>의 무한 호출이있을 수 있지만 <code>observer.error()</code> 또는 <code>observer.complete()</code>가 호출되면 실행이 중지되고 더 이상 데이터가 subscribers에게 전달되지 않는다.</p><h3 id="옵저버블-처분"><a href="#옵저버블-처분" class="headerlink" title="옵저버블 처분"></a>옵저버블 처분</h3><p>옵저버블의실행은 무한한 시간 동안 실행될 수 있기 때문에, 실행을 막을 수있는 방법이 필요하다. 각 구독자마다 각 실행이 실행되기 때문에, 메모리와 컴퓨팅 성능이 낭비, 즉 더 이상 데이터가 필요없는 구독자는 구독을 멈추는 것이 중요하다.</p><p>옵저버블을 구독할 때, 진행중인 실행을 취소하면 구독이 반환된다. 실행을 취소하려면 <code>unsubscribe()</code>를 호출하면 됨.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>이 게시물을 통해 옵저버블이 실제로 어떻게 작동하는지 더 잘 이해할 수 있다. 다음 시간에 옵저버블에 대해서 더 많이 알기 위해 Rxjs의 강력함을 이해하고 이 제공하는 모든 헬퍼 함수를 이해하는 것이다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;원문 : &lt;a href=&quot;https://medium.com/@luukgruijs/understanding-creating-and-subscribing-to-observables-in-angular-426dbf0b04a3&quot; 
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Angular" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Angular/"/>
    
    
      <category term="angular" scheme="http://feel5ny.github.io/tags/angular/"/>
    
      <category term="prettier" scheme="http://feel5ny.github.io/tags/prettier/"/>
    
      <category term="formatter" scheme="http://feel5ny.github.io/tags/formatter/"/>
    
  </entry>
  
  <entry>
    <title>Angular 프로젝트에 prettier 코드포매터 세팅하기</title>
    <link href="http://feel5ny.github.io/2018/03/11/angular_prettier/"/>
    <id>http://feel5ny.github.io/2018/03/11/angular_prettier/</id>
    <published>2018-03-11T09:23:55.000Z</published>
    <updated>2019-10-31T13:06:11.610Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>개인의 경험을 바탕으로 적은 글이기에 피드백은 언제나 댓글로 환영합니다. :)</p></blockquote><hr><p><strong>목차</strong></p><ol><li><p>모듈 세팅</p><ul><li>프리티어 설치하기<ul><li>에디터에만 세팅하기</li><li>프로젝트에 세팅하기</li></ul></li><li>프리티어 옵션 값</li></ul></li><li><p>precommit, 커밋 전 옵션에 맞춰 재포맷 하는 hook 추가.</p><ul><li>lint stage</li><li>husky</li></ul></li></ol><hr><p>한 프로젝트에 프론트엔드 개발자가 여러 명일 경우 각자의 코드 스타일이 다르기 때문에 <strong>통일성</strong>을 위해 코드 포메터를 사용하면 코드를 깔끔하게 공유할 수 있다. 현재 진행 중인 angular 프로젝트에 react 프로젝트에서 사용했었던 <strong>Prettier</strong>라는 포매터를 사용하기로 결정했다. 초반에 어떻게 세팅할지만 논의하면 된다.</p><p>프리티어를 엥귤러 프로젝트에 적용하면서 겪었던 부분을 글로 공유하고자 한다.<br>참고로 에디터는 <code>vscode</code>를 사용하고 있다.</p><img src="/images/2018/08/prettier.gif"><hr><h2 id="1-모듈-세팅"><a href="#1-모듈-세팅" class="headerlink" title="1. 모듈 세팅"></a>1. 모듈 세팅</h2><p>angular cli 로 프로젝트를 생성하면 기본 구조가 세팅이 되는데, 엥귤러는 타입스크립트가 주력 언어이므로 타입스크립트를 위한 tslint.json 파일과 tsconfig.json 파일이 함께 세팅된다.<br><code>tslint.json</code> 파일은 tslint 가 사용하는 linting(구문 체크) 설정 파일이다. tslint 란 An extensible linter for the TypeScript language. 즉 타입스크립트 린터이다!<img src="/images/2018/08/05.png" align="right" width="250px" style="margin-left: 10px;"><br>vscode 에서는 tslint 확장 프로그램을 설치하면 구문과 다른 곳을 빨간 줄로 표시해준다.<br><code>tsconfig.json</code>파일은 타입스크립트 컴파일 옵션 설정 파일이다.</p><h4 id="우리는-tslint의-옵션-포맷에-Prettier의-커스텀-옵션을-추가하기로-결정하였다"><a href="#우리는-tslint의-옵션-포맷에-Prettier의-커스텀-옵션을-추가하기로-결정하였다" class="headerlink" title="우리는 tslint의 옵션 포맷에 + Prettier의 커스텀 옵션을 추가하기로 결정하였다."></a>우리는 <strong>tslint</strong>의 옵션 포맷에 + <strong>Prettier</strong>의 커스텀 옵션을 추가하기로 결정하였다.</h4><hr><h3 id="1-1-프리티어-설치하기"><a href="#1-1-프리티어-설치하기" class="headerlink" title="1-1. 프리티어 설치하기"></a>1-1. 프리티어 설치하기</h3><img src="/images/2018/08/03.png"><p><strong>* 에디터에만 적용하기</strong><br>프리티어 <code>패키지</code>를 설치하는 방법과 <code>플러그인</code>으로 세팅하는 방법이 있다.<br>개인적으로만 사용하거나 다른 개발자들이 모두 vscode 를 사용한다면 프리티어 플러그인을 설치하고 workspace settings 에만 설정해도 프리티어 세팅은 완료된다.<br><code>Code &gt; Preference &gt; Settings &gt; Workspace Settings</code></p><img src="/images/2018/08/01.png" width="250px" align="left" style="margin-bottom:10px"><img src="/images/2018/08/02.png">위처럼 폴더가 생성된다. 폴더를 팀원들과 공유해도 괜찮고, 혹은 아래 옵션 객체만 팀 내의 docs에 공유해도 괜찮다. (나중에 들어올 팀원이 vscode를 쓴다는 전제가 있어야..ㅎ)<hr><p><strong>* 프로젝트에 적용하기</strong><br>패키지 매니저로 프리티어를 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install prettier -D</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;prettier.printWidth&quot;: 80,</span><br><span class="line">  &quot;prettier.useTabs&quot;: false,</span><br><span class="line">  &quot;prettier.tabWidth&quot;: 2,</span><br><span class="line">  &quot;prettier.bracketSpacing&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>프리티어 옵션은 여러 가지 방식으로 세팅이 가능하다. rc 파일을 따로 만들어서 관리할 수도 있고, json 파일로 만들어서 관리를 할 수 있다. 우리 프로젝트에서는 package.json 파일에 포함시키기로 했다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    ...</span><br><span class="line">    "typeScript": "~2.4.2"</span><br><span class="line">  &#125;,</span><br><span class="line">  "prettier": &#123;</span><br><span class="line">    "printWidth": 80,</span><br><span class="line">    "useTabs": false,</span><br><span class="line">    "tabWidth": 2,</span><br><span class="line">    "bracketSpacing": true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vscode 세팅에서 <code>&quot;editor.formatOnSave&quot;: true</code>를 설정하면 저장하는 것과 동시에 프리티어가 적용된다.</p><hr><h3 id="1-2-프리티어-옵션-값"><a href="#1-2-프리티어-옵션-값" class="headerlink" title="1-2. 프리티어 옵션 값"></a>1-2. 프리티어 옵션 값</h3><p>프리티어에는 여러 가지 기본 옵션 값들이 있다. <a href="https://prettier.io/docs/en/options.html" target="_blank" rel="noopener">Prettier</a> 자세한 내용은 홈페이지에서 확인 가능하다.</p><ol><li>Print Width<ul><li>한 줄에서 wrap 이 되는 기준의 글자 수를 정한다.</li><li>default <code>80</code></li></ul></li><li>Tab Width<ul><li>탭의 스페이스 사이즈</li><li>default <code>2</code></li></ul></li><li>Tabs<ul><li>탭을 쓸 건지 안 쓸 건지</li><li>boolean</li></ul></li><li>Semicolons<ul><li>문장 마지막에 세미콜론을 붙일지 안 붙일지</li><li>boolean</li></ul></li><li>Quotes<ul><li>true 이면 single quate</li></ul></li><li>Trailing Commas<ul><li>마지막에 콤마 붙이기</li><li>none / es5 / all</li></ul></li><li>Bracket Spacing</li><li>JSX Brackets</li><li>Arrow Function Parentheses</li><li>Range</li><li>Parser</li><li>FilePath</li><li>Require pragma</li><li>Insert Pragma</li><li>Prose Wrap</li></ol><p>우리의 프로젝트에서는 아래의 옵션을 세팅했다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"printWidth"</span>: <span class="number">80</span>,</span><br><span class="line">  <span class="attr">"useTabs"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"tabWidth"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"bracketSpacing"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>printWidth 를 120 으로 하기도 하던데, 그건 취향껏! (에어비엔비는 80)</p><hr><h2 id="2-precommit-커밋-전-재포맷-하는-hook-추가"><a href="#2-precommit-커밋-전-재포맷-하는-hook-추가" class="headerlink" title="2. precommit, 커밋 전 재포맷 하는 hook 추가."></a>2. precommit, 커밋 전 재포맷 하는 hook 추가.</h2><p>개발자마다 쓰는 에디터가 다르고, 각자가 각자 에디터에 세팅하는 부분에서 나올 수 있는 에러들을 방지하기 위해 프로젝트 자체에 세팅한 후 커밋 할 때마다 세팅하는 방법이 있다.<br>pre-commit 툴과 함께 사용하면 되는데 많이들 사용하는 <code>husky</code>와 <code>lint-staged</code> 모듈을 사용하면 된다.</p><p>프리커밋 툴을 사용하면 git add 을 입력할 때 (<code>husky</code> : hook) 린트 옵션에 맞춰서 재포맷을(<code>lint-staged</code> : 재포맷) 시켜준다. 이때 옵션에 tslint 옵션도 재포맷 설정에 넣어줄 수 있으므로 git add 명령어 만으로 tslint 와 prettier 의 옵션들을 적용시킬 수 있다.</p><img src="/images/2018/08/04.png"><hr><p><strong>모듈 설치</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev lint-staged husky</span><br></pre></td></tr></table></figure><ol><li>package.json 에 precommit 스크립트를 추가하고</li><li>lint-staged 옵션을 추가하면 된다.<br>이때 prettier 를 읽는 스크립트와<br>tslint 를 검사하고 fix 하는 스크립트를 추가한다.</li></ol><p><code>tslint --fix -c tslint.json -p tsconfig.json</code><br>c 는 config 의 약어. tslint.json 파일의 옵션들을 확인하고 규칙에 맞춰서 fix 한다.<br>p 는 project 의 약어. tsconfig.json 파일에 적힌 파일 경로에서 린트될 파일을 찾는다.</p><hr><p><strong>package.json</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    ...,</span><br><span class="line">    "precommit": "lint-staged"</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">    "lint-staged": &#123;</span><br><span class="line">        "*.&#123;ts,tsx&#125;": [</span><br><span class="line">        "prettier --write",</span><br><span class="line">        "tslint --fix -c tslint.json -p tsconfig.json",</span><br><span class="line">        <span class="string">"git add"</span></span><br><span class="line">        ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Reference</p><ul><li><a href="https://medium.com/@victormejia/setting-up-prettier-in-an-angular-cli-project-2f50c3b9a537" target="_blank" rel="noopener">Setting up Prettier in an Angular CLI Project</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;개인의 경험을 바탕으로 적은 글이기에 피드백은 언제나 댓글로 환영합니다. :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;목차&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;모듈 세팅&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Angular" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Angular/"/>
    
    
      <category term="angular" scheme="http://feel5ny.github.io/tags/angular/"/>
    
      <category term="prettier" scheme="http://feel5ny.github.io/tags/prettier/"/>
    
      <category term="formatter" scheme="http://feel5ny.github.io/tags/formatter/"/>
    
  </entry>
  
  <entry>
    <title>Airbnb - lottie - bodymovin 웹에서 사용해보기</title>
    <link href="http://feel5ny.github.io/2018/02/25/interaction_01/"/>
    <id>http://feel5ny.github.io/2018/02/25/interaction_01/</id>
    <published>2018-02-25T12:20:19.000Z</published>
    <updated>2021-01-10T14:09:03.886Z</updated>
    
    <content type="html"><![CDATA[<p>airbnb 앱을 쓰다보면 곳곳에서 다양한 애니메이션을 볼 수 있다. 한 서비스에 애니메이션이 있으면 있을수록 자연스러운 사용성 유도, 사용자의 감성에도 메세지를 전할 수 있고, 서비스의 브랜드가 더 기억에 오래남고 강해진다고 생각한다. </p><p>모션을 좋아하는 성향과 모션이 줄 수 있는 위의 특징때문에 곳곳에 모션을 넣는 것을 좋아하는데, 그러던 중 airbnb의 <code>lottie</code> 서비스가 눈에 들어왔다. 예전부터 테스트만해보고 넣어보는 것을 시도했었는데, react-native로 앱을 만드는 부분에 로딩애니메이션으로도 넣어보았지만 아직 웹에서는 넣어보지 않아서 이번 기회에 해당 블로그 header의 아바타에 움직임을 넣어보았다.<br>(최근 <a href="https://ant.design/" target="_blank" rel="noopener">antd</a>의 메인에서도 쓴걸 확인!)</p><img src="/images/2018/07/logo-ny_1.gif" width="300px"><p><strong>장단점</strong></p><ul><li>작업을 다하고 든 생각은.. gif보다 경량화시킬 수 있을거라는 생각을 했지만, gif보다 3배나 파일이 컸다.</li><li>대신 svg로 이미지가 들어가기 때문에 벡터상태로 선명하게 들어간다. gif는 움직이는대신 화질이 떨어지는 단점이 있는데 이를 보안한다는 점에서 굉장한 장점.</li><li>after effect를 좀 다뤄야한다는 .. 진입장벽이 있다. </li></ul><p><strong>간단 작업 순서</strong></p><ol><li><a href="https://www.adobe.com/kr/products/aftereffects.html" target="_blank" rel="noopener">after effect</a>로 작업하기</li><li>after effect에 bodymovin 플러그인 설치</li><li>작업 후 최종 렌더링할 컴포넌트 =&gt; bodymovin 플러그인을 사용하여 렌더링<ul><li>렌더링 옵션이 여러개가 있다. 본인의 프로젝트에 맞춰서 렌더링하면 됨.</li></ul></li><li>렌더링 이후 export된 json파일, js파일을 html에 잘 임포트를 시키면 끝!</li></ol><hr><h1 id="1-after-effect로-작업하기"><a href="#1-after-effect로-작업하기" class="headerlink" title="1. after effect로 작업하기"></a>1. after effect로 작업하기</h1><p>shape animation이나 여러가지 모션그래픽은 에프터이펙트로 작업합니다. bodymovin 플러그인을 사용하기 위해서는 after effect로 작업된 파일이 필요합니다.</p><img src="/images/2018/07/01.png"><p><strong>작업할 때 알아야할 점 (버그)</strong></p><ul><li>레이어 그룹해제 : 일러스트레이터를 임포트할 때 해당 레이어 내부에 group되어있는 부분을 전부 단일 레이어로 만들어야합니다. (그룹이 모두 해제되어있는 상태여야함)</li><li>마스크는 레이어당 하나만 : 하나의 shape 레이어에서 마스크를 동시에 2개를 사용시 둘중 하나만 인식이 됩니다. (아직 로티의 버그인 듯) 로티에서 해결해줄때까지 ㅠ 우선은 마스크를 한 레이어당 하나만 사용하면서 모션을 잡으셔야합니다.</li><li>너무 많은 레이어와 긴 시간의 모션은 스크립트도 용량이 크게 나옵니다. 웬만하면 loop되는 애니메이션으로 작업하셔야 합니다.</li></ul><h1 id="2-after-effect에-bodymovin-플러그인-설치"><a href="#2-after-effect에-bodymovin-플러그인-설치" class="headerlink" title="2. after effect에 bodymovin 플러그인 설치"></a>2. after effect에 bodymovin 플러그인 설치</h1><p>bodymovin이라는 플러그인을 설치하고 해당 플러그인을 사용하여 렌더링 해야합니다.</p><p><strong>설치방법</strong></p><ol><li>에펙이 실행되고 있다면 닫으십시오.</li><li>ZXP installer를 설치해야합니다. <a href="http://aescripts.com/learn/zxp-installer/" target="_blank" rel="noopener">설치경로</a></li><li>bodymovin 확장프로그램을 설치합니다. 다운로드를 클릭하여 다운받으세요. <a href="https://github.com/airbnb/lottie-web/tree/master/build/extension" target="_blank" rel="noopener">설치경로</a></li><li>ZXP installer를 실행시킨후 3번에서 다운받은 bodymovin.zxp을 드래그하여 ZXP installer에 넣습니다. (에펙에 플러그인 설치완료)</li><li>에펙을 오픈한 후 “Window &gt; Extensions”를 보시면 “Bodymovin”가 있는걸 확인할 수 있습니다.</li></ol><p>참고 &gt; <a href="http://airbnb.io/lottie/after-effects/bodymovin-installation.html" target="_blank" rel="noopener">http://airbnb.io/lottie/after-effects/bodymovin-installation.html</a></p><h1 id="3-bodymovin으로-렌더링하기"><a href="#3-bodymovin으로-렌더링하기" class="headerlink" title="3. bodymovin으로 렌더링하기"></a>3. bodymovin으로 렌더링하기</h1><div class="video-container"><iframe src="//www.youtube.com/embed/5XMUJdjI0L8" frameborder="0" allowfullscreen></iframe></div><blockquote><p>위의 방법대로 진행하면 오케이!</p></blockquote><img src="/images/2018/07/03.png">에펙에서 "Window > Extensions"의 "Bodymovin"를 오픈하면 위의 그림처럼 창이 하나 오픈됩니다. 우리가 필요한 파일은 `json`파일과 `js`파일입니다.<h2 id="3-1-json파일로-렌더링하기"><a href="#3-1-json파일로-렌더링하기" class="headerlink" title="3-1. json파일로 렌더링하기"></a>3-1. json파일로 렌더링하기</h2><ol><li><p>렌더링할 컴포넌트를 선택합니다.</p><img src="/images/2018/07/04-1.png"></li><li><p>어떤 포맷으로 렌더링할지 settings에서 선택해야합니다.</p><img src="/images/2018/07/04.png"></li><li><p>옵션은 여러가지가 있는데, 다중선택이 가능합니다.</p><img src="/images/2018/07/05.png"></li><li><p>셋팅이 완료되면 경로를 지정합니다. =&gt; 어떤 포맷으로 렌덜이되는지 확인할 수 있습니다.</p><img src="/images/2018/07/04-3.png"></li><li><p>위의 렌더링버튼을 누르시면 렌더링 시작.</p><img src="/images/2018/07/04-4.png"></li></ol><h2 id="3-2-js파일로-렌더링하기"><a href="#3-2-js파일로-렌더링하기" class="headerlink" title="3-2. js파일로 렌더링하기"></a>3-2. js파일로 렌더링하기</h2><ol><li><p>오른쪽 상단의 get the player를 선택합니다.</p><img src="/images/2018/07/04-2.png"></li><li><p>왼쪽의 get the player를 누르면 js파일을 받을 수 있습니다.</p><img src="/images/2018/07/06.png"></li></ol><h1 id="4-렌더링-이후-export된-파일-프로젝트에-import시키기"><a href="#4-렌더링-이후-export된-파일-프로젝트에-import시키기" class="headerlink" title="4. 렌더링 이후 export된 파일 프로젝트에 import시키기"></a>4. 렌더링 이후 export된 파일 프로젝트에 import시키기</h1><p>hexo블로그에 셋팅할 경우 파일은 아래 경로로 옮깁니다.<br><code>themes &gt; hueman &gt; source &gt; js</code></p><img src="/images/2018/07/02.png" width="200px" style="margin: 0;"><p><strong>필요한 파일</strong></p><ol><li>bodymoivn.js</li><li>data.json</li></ol><p>셋팅방법은 <a href="https://codepen.io/airnan/project/editor/ZeNONO/의" target="_blank" rel="noopener">https://codepen.io/airnan/project/editor/ZeNONO/의</a> 구조를 참고하였습니다.</p><ul><li>js파일 로드하는 스크립트 코드 html에 추가.</li><li>index.js파일에서 아래처럼 json파일을 불러오면 home이외의 메뉴에서는 로드되지 않습니다. (hexo의 generate방식때문)<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> animation = bodymovin.loadAnimation(&#123;</span></span><br><span class="line"><span class="javascript">        container: <span class="built_in">document</span>.getElementById(<span class="string">"bm"</span>),</span></span><br><span class="line"><span class="javascript">        renderer: <span class="string">"svg"</span>,</span></span><br><span class="line"><span class="javascript">        loop: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        autoplay: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        path: <span class="string">"logo_ny.json"</span></span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>해결방법</strong><br>좋은 방법이라고는 생각되지 않으므로 피드백환영합니다.</p><ul><li><code>index.js</code>의 경로를 아래처럼 수정 후,</li><li>js폴더에 json파일을 넣습니다.</li><li><del>json파일도 따로 로드합니다.</del></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lottie_index.js</span></span><br><span class="line"><span class="keyword">var</span> animation = bodymovin.loadAnimation(&#123;</span><br><span class="line">    container: <span class="built_in">document</span>.getElementById(<span class="string">"bm"</span>),</span><br><span class="line">    renderer: <span class="string">"svg"</span>,</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    autoplay: <span class="literal">true</span>,</span><br><span class="line">    path: <span class="string">"../../../../logo_ny.json"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// scripts.ejs</span></span><br><span class="line">&lt;%- js(<span class="string">'js/lottie'</span>) %&gt;</span><br><span class="line">&lt;%- js(<span class="string">'js/lottie_index'</span>) %&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;airbnb 앱을 쓰다보면 곳곳에서 다양한 애니메이션을 볼 수 있다. 한 서비스에 애니메이션이 있으면 있을수록 자연스러운 사용성 유도, 사용자의 감성에도 메세지를 전할 수 있고, 서비스의 브랜드가 더 기억에 오래남고 강해진다고 생각한다. &lt;/p&gt;
      
    
    </summary>
    
      <category term="04_UX 💅" scheme="http://feel5ny.github.io/categories/04-UX-%F0%9F%92%85/"/>
    
      <category term="Motion" scheme="http://feel5ny.github.io/categories/04-UX-%F0%9F%92%85/Motion/"/>
    
    
      <category term="lottie" scheme="http://feel5ny.github.io/tags/lottie/"/>
    
      <category term="bodymovin" scheme="http://feel5ny.github.io/tags/bodymovin/"/>
    
  </entry>
  
  <entry>
    <title>앵귤러 미리 예습해보기_ToDoList</title>
    <link href="http://feel5ny.github.io/2018/02/15/Angular_practice/"/>
    <id>http://feel5ny.github.io/2018/02/15/Angular_practice/</id>
    <published>2018-02-15T09:23:55.000Z</published>
    <updated>2019-01-03T15:33:29.258Z</updated>
    
    <content type="html"><![CDATA[<p><strong>출처</strong></p><ol><li>inflearn : Angular 기본과 간단한 To-Do 어플리케이션 만들기</li><li><a href="http://poiemaweb.com/" target="_blank" rel="noopener">http://poiemaweb.com/</a> : angular 파트</li></ol><p><strong>요약</strong></p><p><strong>목차</strong> </p><ol><li>Angular CLI</li><li>Angular Hello world</li><li>Module</li><li>Component 알아보기</li><li>Templete 알아보기</li><li>컴포넌트 커뮤니케이션</li><li>컴포넌트 스타일 처리</li><li>Pipe</li></ol><hr><h2 id="1-Angular-CLI"><a href="#1-Angular-CLI" class="headerlink" title="1. Angular CLI"></a>1. Angular CLI</h2><p>Angular CLI는 Node.js의 프로젝트이기때문에 노드의 설치가 필요하다. 노드버전은 6.9.0 이상이어야한다.</p><h3 id="0-셋팅하기"><a href="#0-셋팅하기" class="headerlink" title="0. 셋팅하기"></a>0. 셋팅하기</h3><ol><li>노드 설치 후</li><li><code>npm i -g @angular/cli</code></li><li><code>ng new 프로젝트 이름</code></li></ol><h3 id="1-Angular-CLI-1"><a href="#1-Angular-CLI-1" class="headerlink" title="1. Angular CLI"></a>1. Angular CLI</h3><p><code>tree src</code>라고 명령어를 입력하면 src 하위 파일 디렉토리 tree가 출력된다.<br><code>tree -L 1</code> 해당 디렉토리의 첫번째 레벨 트리만 출력된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">src/</span><br><span class="line">├── app</span><br><span class="line">│   ├── app.component.css</span><br><span class="line">│   ├── app.component.html</span><br><span class="line">│   ├── app.component.spec.ts</span><br><span class="line">│   ├── app.component.ts</span><br><span class="line">│   └── app.module.ts</span><br><span class="line">├── assets</span><br><span class="line">├── environments</span><br><span class="line">│   ├── environment.prod.ts</span><br><span class="line">│   └── environment.ts</span><br><span class="line">├── favicon.ico</span><br><span class="line">├── index.html</span><br><span class="line">├── main.ts</span><br><span class="line">├── polyfills.ts</span><br><span class="line">├── styles.css</span><br><span class="line">├── test.ts</span><br><span class="line">├── tsconfig.app.json</span><br><span class="line">├── tsconfig.spec.json</span><br><span class="line">└── typings.d.ts</span><br></pre></td></tr></table></figure><h4 id="app-폴더"><a href="#app-폴더" class="headerlink" title="app 폴더"></a><code>app</code> 폴더</h4><dl><dt>어플리케이션 관련된 파일들이 들어가게 된다.<br>app/app.component.{ts, html, css, spec.ts}</dt><dd>루트 컴포넌트를 구성하는 컴포넌트 클래스, HTML 템플릿. CSS, 유닛테스트 파일</dd></dl><dl><dt>app/app.module.ts</dt><dd>Angular 구성요소를 등록하는 루트 모듈.</dd></dl><h4 id="environments"><a href="#environments" class="headerlink" title="environments"></a><code>environments</code></h4><p><code>.prod</code> 프로젝트를 빌드할 때 프러덕션 모드로 빌드하게 되면 environment.prod.ts 내용들이 environment.ts 여기에 덮여쓰여지게된다. 앱에서 쓴 환경변수(서버 url…)를 프러덕션용 환경변수로 쓸 수 있게 된다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve</span><br></pre></td></tr></table></figure><p>서버를 실행시키면 로컬호스트에서 확인이 가능하다.</p><h3 id="CLI를-살펴보자"><a href="#CLI를-살펴보자" class="headerlink" title="CLI를 살펴보자."></a>CLI를 살펴보자.</h3><p><code>ng help</code>를 입력하면 ng cli 리스트들이 쭉 나온다. 아래는 자주 사용하는 명령어만 적어둠.</p><ol><li><code>ng build &lt;options...&gt;</code><br>Build커맨드는 소스코드를 빌드해서 dist/ 에 빌드해주는 명령어이다.</li></ol><ul><li>주로 사용하는 CLI<ul><li><code>--aot (Boolean) Build using Ahead of Time compilation.</code></li><li><code>--watch (Boolean) (Default: false) Run build when files change.</code></li></ul></li></ul><ol start="2"><li><p><code>ng completion &lt;options...&gt;</code><br>CLI 명령어를 자동 완성시켜주는 것을 설정하겠다 라는 커맨드이다.</p></li><li><p><code>ng doc &lt;keyword&gt; &lt;options...&gt;</code><br>앵귤러 공식 docs를 열어줍니다.</p></li><li><p><code>ng e2e &lt;options...&gt;</code><br>end to end 테스트를 하겠다는 것이다. 브라우저를 띄어서 테스트 하는 것.</p></li><li><p><code>ng eject &lt;options...&gt;</code><br>우리가 만든 앵귤러 CLI 프로젝트는 웹팩기반인데, webpack configuration를 밖으로 빼내어서 webpack configuration를 수정해서 프로젝트에 맞게 바꾸고 싶을 때 사용한다. </p></li><li><p>★★ <code>ng generate &lt;blueprint&gt; &lt;options...&gt;</code><br>사용 빈도수가 높다. 우리가 새로운 컴포넌트나 라우트나 모듈, 클래스 등을 agular CLI를 통해서 만들어지는데, 각각의 만들어지는 방법이 다르다. (옵션이 다르다.) </p></li><li><p><code>ng get &lt;options...&gt;</code><br>configuration를 한번 읽어오는 것</p></li><li><p><code>ng lint &lt;options...&gt;</code><br>프로젝트의 코드의 스타일 가이드에 맞춰서 작성이 잘 되고 있는지 체킹해준다.</p></li><li><p><code>ng new &lt;options...&gt;</code></p></li><li><p><code>ng serve &lt;options...&gt;</code><br>어플리케이션을 서버로 띄어준다. (빌드 후에)</p></li><li><p><code>ng set &lt;options...&gt;</code><br>앵귤러 CLI는 configuration(설정파일들)들이 있는데 그것들을 셋팅해준다.</p></li><li><p><code>ng test &lt;options...&gt;</code><br>유닛테스트 관련한 CLI, 컴포넌트나 서비스등 각각의 컴포넌트를 테스트 할때</p></li><li><p><code>ng version &lt;options...&gt;</code></p></li><li><p><code>ng xi18n &lt;options...&gt;</code><br>다국어 처리하는 시간에 자세히 살펴보도록 한다.</p></li></ol><hr><h2 id="2-Angular-Hello-world"><a href="#2-Angular-Hello-world" class="headerlink" title="2. Angular Hello world"></a>2. Angular Hello world</h2><p><code>.angular-cli.json</code> 파일은 description이라고 생각하면된다.</p><h3 id="2-1-main-ts"><a href="#2-1-main-ts" class="headerlink" title="2-1. main.ts"></a>2-1. main.ts</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; enableProdMode &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; platformBrowserDynamic &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser-dynamic'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">'./app/app.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">'./environments/environment'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (environment.production) &#123;</span><br><span class="line">  enableProdMode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">platformBrowserDynamic().bootstrapModule(AppModule);</span><br></pre></td></tr></table></figure><p><code>platformBrowserDynamic</code>메서드 : 엥귤러가 우리가 만든 코드를 컴파일을 해서 실제 실행될 수 있는 자바스크립트 코드로 만들어내는데 브라우저에서 다이나믹하게 동적으로 하겠다는 메서드이다. (just-in-time으로)<br><code>bootstrapModule(루트모듈)</code> : 우리가 사용할 어플리케이션의 루트모듈을 설정하고 앵귤러 어플리케이션을 실행시키는 것이다. 루트모듈을 부트스트랩한다 라고도 한다.</p><h3 id="2-2-app-module-ts"><a href="#2-2-app-module-ts" class="headerlink" title="2-2. app.module.ts"></a>2-2. app.module.ts</h3><p>@NgModule 데코레이터의 인자로 전달되는 메타데이터에 애플리케이션 전체의 설정 정보를 기술한 루트 모듈이다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.module.ts</span></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">  <span class="comment">// 부트스트랩은 배열이라는 값을 갖고 있는데 이는 AppComponent에 index.html에 넣어주겠다는 말이다.</span></span><br><span class="line">  <span class="comment">// AppComponent에는 app-root라는 셀력터에 연결되어있다.</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br><span class="line"><span class="comment">// @NgModule은 데코레이터</span></span><br><span class="line"><span class="comment">// 앵귤러 모듈이라는 것(NgModule)을 정의한 클래스가 되는 것이다.</span></span><br><span class="line"><span class="comment">// 앵귤러의 루트모드를 설정하는 클래스이다.</span></span><br></pre></td></tr></table></figure><ul><li>앵귤러의 루트모듈(AppModule)를 설정하는 클래스이다.</li></ul><h3 id="2-3-app-component-ts"><a href="#2-3-app-component-ts" class="headerlink" title="2-3. app.component.ts"></a>2-3. app.component.ts</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  title = <span class="string">'app'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>모든 컴포넌트의 부모 역할을 담당하는 루트 컴포넌트이다.</li></ul><img src="/images/post_img/35/angular-process.png">> Anuglar 어플리케이션의 흐름 [+](http://poiemaweb.com/angular-architecture)<h3 id="3-index-html"><a href="#3-index-html" class="headerlink" title="3. index.html"></a>3. index.html</h3><p><code>/dist/index.html</code>는 빌드(ng build)의 결과물로 실제 배포 시에는 서버로 이관된다.<br>ng serve 명령어에 의해 <strong>내장 개발 서버</strong>를 사용하여 로컬 환경에서 프로젝트를 실행(preview)하는 경우, Angular CLI 내부적으로 <code>빌드를 자동 수행</code>하므로 빌드(ng build)를 별도 실행하여 /my-app/dist/index.html를 생성할 필요는 없다.<br>자동으로 빌드되어 가상 드라이브에 저장되어 있는 index.html를 내장개발 서버가 로드한다고 이해하면 된다.</p><p><code>inline.bundle.js</code> : 웹팩 유틸리티가 포함된 Webpack loader<br><code>polifills.bundle.js</code> : polyfil 의존성 모듈(core-js, zone.js)를 번들링한 파일<br><code>styles.bundle.js</code> : 스타일 전의를 번들링한 파일<br><code>vendor.bundle.js</code> : 의존성 모듈(@angular/*, RxJS 등)을 번들링한 파일<br><code>main.bundle.js</code> : 개발자가 작성한 컴포넌트, 디렉티브, 서비스 등 소스코드를 번들링한 파일</p><h2 id="3-Module"><a href="#3-Module" class="headerlink" title="3. Module"></a>3. Module</h2><h4 id="3-1-ES6-모듈"><a href="#3-1-ES6-모듈" class="headerlink" title="3-1. ES6 모듈"></a>3-1. ES6 모듈</h4><p>모듈이란</p><ul><li>세부 구현이 숨겨지고 공개 API를 이용해 다른 코드에서 재사용 가능한 코드</li><li>각각의 파일들이 모듈이 된다. 변수 스코프가 모듈로 제한이 된다.</li><li>2016년 08월 1.0.0-beta.11부터 Angular의 빌드 시스템은 SystemJS에서 <code>Webpack</code>으로 변경되었다. We moved the build system from SystemJS to Webpack.</li></ul><h4 id="3-2-엥귤러-모듈"><a href="#3-2-엥귤러-모듈" class="headerlink" title="3-2. 엥귤러 모듈"></a>3-2. 엥귤러 모듈</h4><p>컴포넌트, 파이프, 서비스 등과 같은 앵귤러 어플리케이션의 주요 부분을 기능단위로 그룹핑하게 해준다.</p><ul><li>모든 앵귤러 어플리케이션은 하나의 Root Module을 가진다.</li><li>여러 Feature Module을 가질 수 있다.</li><li>재사용할 수 있는 기능을 외부에 배포하기 위해 사용되기도 한다. </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g m todo</span><br></pre></td></tr></table></figure><p>app 하위에 todo라는 폴더가 생성되고 todo.module.ts라는 모듈파일이 만들어진다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g c todo/todos --module todo/todo.module.ts --export</span><br></pre></td></tr></table></figure><p>g는 generate,<br>c는 component,<br>m은 module,<br>todo 밑에 todos라는 폴더를 둔다.<br>todos에서 만들어진 component를 관리하는 모듈을 지정해주기 위해서 <code>--module</code>이라는 플래그를 사용, 관리하는 모듈 이름을 붙여준다.<code>todo/todo.module.ts</code><br>해당 모듈파일이 다른 곳에서 사용할 수 있다는 의미의 –export라는 플래그를 추가한다. –export플래그를 추가하면 NgModule 데코레이터의 메타데이터 내부에 export 옵션이 추가되며 todoComponent가 자동으로 추가된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TodosComponent &#125; <span class="keyword">from</span> <span class="string">'./todos/todos.component'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    CommonModule</span><br><span class="line">  ],</span><br><span class="line">  declarations: [TodosComponent],</span><br><span class="line">  exports: [TodosComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><ul><li>declarations는 탬플릿에서 사용하는 컴포넌트를 의미한다.</li></ul><p><strong>모듈 정리</strong></p><ul><li>외부컴포넌트를 export하고싶을 때나 import하고 싶을 때는 module파일의 데코레이터에 옵션값을 추가한다.</li><li>cli에서 컴포넌트를 생성하면서 자동으로 export 옵션에 추가하는 방법은 <code>--export</code> 플래그를 사용하는 것이다.</li></ul><h2 id="4-Component"><a href="#4-Component" class="headerlink" title="4. Component"></a>4. Component</h2><ul><li>빌딩 블록 LEGO</li><li>HTML 요소들의 그룹</li><li>뷰와 로직으로 구성</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 함수라고 생각하면 된다. 함수를 호출하는 것처럼 사용하고 있다.</span></span><br><span class="line"><span class="comment">// 데코레이터 내부의 메타데이터를 정의하고 있다.</span></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-todos'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./todos.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./todos.component.css'</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TodosComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>selector</code><br><code>.</code>이나 <code>#</code>을 앞에 붙여서 css에서의 선택자와 유사하게 사용도 가능하다. 현재는 <code>.</code>이나 <code>#</code>이 없기 때문에 태그명으로 정의된 것이다.</li><li><code>templateUrl</code><br>view에 대한 정의를 template에서 정의한다.</li><li><code>styleUrls</code><br>style이 작성된 url을 정의한다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g c todo/todos/todo –inline-template –inline-style</span><br></pre></td></tr></table></figure><ul><li>template이 따로 html파일로 생성되지 않고, todo내부에 생성된 component의 컴포넌트 데코레이터의 메타데이터에 <code>template</code>이 생성된다.</li><li>template에는 리터럴로 html을 넣을 수 있다.</li><li>이를 inline방식으로 넣어지는 template스타일인데 위의 명령어로 자동으로 해당 방식의 컴포넌트를 생성할 수 있다.</li></ul><h2 id="5-Agular-Template"><a href="#5-Agular-Template" class="headerlink" title="5. Agular Template"></a>5. Agular Template</h2><ul><li>HTML 코드로서 템플릿을 표현</li><li>Tempate 표현식과 Template 문장이 있음</li><li>바인딩<ul><li>바인딩의 대상 : 속성, 이벤트 ngModel, class, style</li></ul></li></ul><img src="/images/post_img/35/01.png"><img src="/images/post_img/35/binding.jpg"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>나의 하루<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>2월 15일<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">"let todo of todos"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> [<span class="attr">checked</span>]=<span class="string">"todo.done"</span>&gt;</span> &#123;&#123;todo.text&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"할 일 추가하기"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>*ngFor=&quot;let todo of todos&quot;</code><br>todos라는 객체의 todo요소들을 referencing한다고 생각하면 된다.</p><p><strong>ngFor</strong><br>Angular의 ngFor “repeater” 지시자(directive)</p><h3 id="5-1-내장-directive"><a href="#5-1-내장-directive" class="headerlink" title="5-1. 내장 directive"></a>5-1. 내장 directive</h3><ul><li>디렉티브(Directive / 지시자)는 <code>DOM의 모든 것(모양이나 동작 등)을 관리하기 위한 지시(명령)</code>이다. HTML 요소 또는 어트리뷰트의 형태로 사용하여 디렉티브가 사용된 요소에게 무언가를 하라는 지시(directive)를 전달한다.</li><li>디렉티브는 애플리케이션 전역에서 사용할 수 있는 공통 관심사를 컴포넌트에서 분리하여 구현한 것으로 컴포넌트의 복잡도를 낮추고 가독성을 향상시킨다. 컴포넌트도 뷰를 생성하고 이벤트를 처리하는 등 DOM을 관리하기 때문에 큰 의미에서 디렉티브로 볼 수 있다.</li></ul><h4 id="5-1-1-컴포넌트-디렉티브"><a href="#5-1-1-컴포넌트-디렉티브" class="headerlink" title="5-1-1. 컴포넌트 디렉티브"></a>5-1-1. 컴포넌트 디렉티브</h4><ul><li>컴포넌트의 템플릿을 표시하기 위한 디렉티브</li><li><code>@Component</code>데코레이터의 메타데이터 객체의 selector 프로퍼티에 임의의 디렉티브의 이름을 정의한다.</li></ul><h4 id="5-1-2-어트리뷰트-디렉티브"><a href="#5-1-2-어트리뷰트-디렉티브" class="headerlink" title="5-1-2. 어트리뷰트 디렉티브"></a>5-1-2. 어트리뷰트 디렉티브</h4><ul><li>어트리뷰트 디렉티브는 HTML요소의 어트리뷰트와 같이 사용하여 해당 요소의 모양이나 동작을 제어한다. </li><li><code>ngClass</code>, <code>ngStyle</code>와 같은 빌트인 어트리뷰트 디렉티브가 있다.</li><li>클래스 바인딩은 표현식 또는 클래스 리스트를 나타내는 문자열을 바인딩한다. </li><li>ngClass 디렉티브는 문자열, 배열, 객체를 바인딩할 수 있다.</li></ul><h4 id="5-1-3-구조-디렉티브"><a href="#5-1-3-구조-디렉티브" class="headerlink" title="5-1-3. 구조 디렉티브"></a>5-1-3. 구조 디렉티브</h4><ul><li>DOM 요소를 반복생성(ngFor)</li><li>조건에 의한 추가 또는 제거 (ngIf, ngSwitch)를 통해 돔 레이아웃을 변경한다.</li><li><code>*</code>를 접두사로 추가하며 <code>[]</code>를 사용하지 않는다.</li></ul><p><strong>ngIf</strong><br>ngIf 디렉티브는 우변 표현식의 연산 결과가 참이면 해당 요소(호스트 요소)를 DOM에 추가하고 거짓이면 해당 요소(호스트 요소)를 DOM에서 제거한다. 우변의 표현식은 true 또는 false로 평가될 수 있어야한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;element *ngIf=<span class="string">"expression"</span>&gt;...&lt;<span class="regexp">/element&gt;</span></span><br></pre></td></tr></table></figure><p>ngIf 디렉티브 앞에 붙은 *(asterisk)는 아래 구문의 문법적 설탕(syntactic sugar)이다. 즉 위 코드는 아래의 코드로 변환된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ng-template [ngIf]=<span class="string">"expression"</span>&gt;</span><br><span class="line">  &lt;element&gt;...&lt;<span class="regexp">/element&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>ng-template&gt;</span><br></pre></td></tr></table></figure><p>Angular는 <em>ngIf를 만나면 호스트 요소를 <code>ng-template</code> 디렉티브로 래핑하고 *ngIf를 *</em>프로퍼티 바인딩으로 변환한다.**(<code>[ngIf]=&quot;expression&quot;</code>) ngFor와 ngSwitch 디렉티브도 동일한 패턴을 따른다.</p><ul><li>ng-template 디렉티브는 페이지에서 렌더링 될 요소를 div 또는 span 등의 요소와 함께 사용할 필요가 없는 요소들을 그룹화할 때 사용한다. </li></ul><p><strong>ngIf else</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="keyword">if</span> <span class="keyword">else</span> --&gt;</span><br><span class="line">&lt;element *ngIf=<span class="string">"expression; else elseBlock"</span>&gt;Truthy condition&lt;<span class="regexp">/element&gt;</span></span><br><span class="line"><span class="regexp">&lt;ng-template #elseBlock&gt;Falsy condition&lt;/</span>ng-template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="keyword">if</span> <span class="keyword">else</span> --&gt;</span><br><span class="line">&lt;element *ngIf=<span class="string">"expression; then thenBlock else elseBlock"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span></span><br><span class="line">&lt;ng-template #thenBlock&gt;Truthy condition&lt;/ng-template&gt;</span><br><span class="line">&lt;ng-template #elseBlock&gt;Falsy condition&lt;/ng-template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="keyword">if</span> --&gt;</span><br><span class="line">&lt;element *ngIf=<span class="string">"expression; then thenBlock"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">element</span>&gt;</span></span></span><br><span class="line">&lt;ng-template #thenBlock&gt;Truthy condition&lt;/ng-template&gt;</span><br></pre></td></tr></table></figure><p><strong>ngFor</strong><br>ngFor 디렉티브는 컴포넌트 클래스의 컬렉션을 반복하여 호스트 요소(ngFor 디렉티브가 선언된 요소) 및 하위 요소를 DOM에 추가한다. 컬렉션은 일반적으로 배열을 사용한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;element *ngFor=<span class="string">"let item of items"</span>&gt;...&lt;<span class="regexp">/element&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;element *ngFor="let item of items; let i=index; let odd=odd; trackBy: trackById"&gt;...&lt;/</span>element&gt;</span><br></pre></td></tr></table></figure><p>인덱스를 취득할 필요가 있는 경우, 인덱스를 의미하는 index를 사용하여 변수에 인덱스를 할당받을 수 있다. index 이외에도 first, last, even, odd와 같은 로컬 변수가 제공된다. 자세한 내용은 ngFor API reference를 참조하기 바란다.</p><p>ngFor 디렉티브 앞에 붙은 *(asterisk)는 아래 구문의 문법적 설탕(syntactic sugar)이다. 즉 위 코드는 아래의 코드로 변환된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ng-template ngFor <span class="keyword">let</span>-item [ngForOf]=<span class="string">"items"</span>&gt;</span><br><span class="line">  &lt;element&gt;...&lt;<span class="regexp">/element&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>ng-template&gt;</span><br><span class="line"></span><br><span class="line">&lt;ng-template ngFor <span class="keyword">let</span>-item [ngForOf]=<span class="string">"items"</span> <span class="keyword">let</span>-i=<span class="string">"index"</span> <span class="keyword">let</span>-odd=<span class="string">"odd"</span> [ngForTrackBy]=<span class="string">"trackById"</span>&gt;</span><br><span class="line">  &lt;element&gt;...&lt;<span class="regexp">/element&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>ng-template&gt;</span><br></pre></td></tr></table></figure><p><strong>ngSwitch</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;element [ngSwitch]=<span class="string">"expression"</span>&gt;</span><br><span class="line">  &lt;!-- <span class="keyword">switch</span> 조건이 <span class="string">'case1'</span>인 경우 DOM에 추가 --&gt;</span><br><span class="line">  &lt;element *ngSwitchCase=<span class="string">"'case1'"</span>&gt;...&lt;element&gt;</span><br><span class="line">  &lt;!-- <span class="keyword">switch</span> 조건이 <span class="string">'case2'</span>인 경우 DOM에 추가 --&gt;</span><br><span class="line">  &lt;element *ngSwitchCase=<span class="string">"'case2'"</span>&gt;...&lt;element&gt;</span><br><span class="line">  &lt;!-- <span class="keyword">switch</span> 조건과 일치하는 ngSwitchCase가 없는 경우 DOM에 추가 --&gt;</span><br><span class="line">  &lt;element *ngSwitchDefault&gt;...&lt;element&gt;</span><br><span class="line">&lt;<span class="regexp">/element&gt;</span></span><br></pre></td></tr></table></figure><p>ngSwitch 디렉티브 앞에 붙은 *(asterisk)는 아래 구문의 문법적 설탕(syntactic sugar)이다. 즉 위 코드는 아래의 코드로 변환된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;element [ngSwitch]=<span class="string">"expression"</span>&gt;</span><br><span class="line">  &lt;ng-template [ngSwitchCase]=<span class="string">"'case1'"</span>&gt;</span><br><span class="line">    &lt;element&gt;...&lt;<span class="regexp">/element&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>ng-template&gt;</span><br><span class="line">  &lt;ng-template [ngSwitchCase]=<span class="string">"'case2'"</span>&gt;</span><br><span class="line">    &lt;element&gt;...&lt;<span class="regexp">/element&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>ng-template&gt;</span><br><span class="line">  &lt;ng-template ngSwitchDefault&gt;</span><br><span class="line">    &lt;element&gt;...&lt;<span class="regexp">/element&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>ng-template&gt;</span><br><span class="line">&lt;<span class="regexp">/element&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;출처&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;inflearn : Angular 기본과 간단한 To-Do 어플리케이션 만들기&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://poiemaweb.com/&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Angular" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Angular/"/>
    
    
      <category term="angular" scheme="http://feel5ny.github.io/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>jquery 뽀개기(1)</title>
    <link href="http://feel5ny.github.io/2018/01/21/jquery/"/>
    <id>http://feel5ny.github.io/2018/01/21/jquery/</id>
    <published>2018-01-21T01:10:04.000Z</published>
    <updated>2019-10-31T13:06:01.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="basic"><a href="#basic" class="headerlink" title="basic"></a>basic</h2><ul><li>html은 위에서 아래로 순차적으로 실행된다.</li><li>jquery의 ready나 load메서드가 있을 경우 위에서 아래로 순차적으로 실행되지 않고 각 메서드의 특징별로 순서가 진행된다.</li></ul><h2 id="1-ready"><a href="#1-ready" class="headerlink" title="1. ready()"></a>1. <code>ready()</code></h2><p>제이쿼리 <code>ready</code> 메서드는 <strong>DOM이 완전히 로드되었을 때 코드를 실행하도록 구현되어있다.</strong><br>(리액트의 <code>componentDidMount</code>)</p><p>제이쿼리 3.0 이전 버전에서는, ready 메서드를 호출할 수 있는 몇 가지 방법이 있다.</p><ul><li><code>document</code> 엘리먼트로 호출 : <code>$(document).ready(handler);</code></li><li>빈 엘리먼트로 호출 : <code>$().ready(handler);</code></li><li>또는 특정 엘리먼트 없이 바로 호출 : <code>$(handler);</code></li></ul><h3 id="1-1-ready와-load-이벤트의-차이점"><a href="#1-1-ready와-load-이벤트의-차이점" class="headerlink" title="1-1. ready와 load 이벤트의 차이점"></a>1-1. ready와 load 이벤트의 차이점</h3><p>ready 이벤트는 DOM이 로드되고 <strong>엘리먼트 접근이 안전할 때</strong> 발생한다.<br>(= ready는 document 객체에 한해서만 적용되는 메소드.)<br>반대로 load 이벤트는 DOM과 모든 어셋들이 <strong>로드된 이후에</strong> 발생한다.</p><ul><li>모든 어셋들이 로드되기까지 로딩스피너를 보여주거나 이미지 사이즈를 계산하려고 한다면 load이벤트는 적절하다.</li><li>외부자원 접근(images, scripts, frames, iframes 등)과 window 객체에 대해 적용되는 메소드이며 </li></ul><h2 id="2-입력값을-확인하고-변경하기-GET-SET"><a href="#2-입력값을-확인하고-변경하기-GET-SET" class="headerlink" title="2. 입력값을 확인하고 변경하기 (GET/SET)"></a>2. 입력값을 확인하고 변경하기 (GET/SET)</h2><h3 id="input의-hidden"><a href="#input의-hidden" class="headerlink" title="input의 hidden"></a>input의 hidden</h3><p>form태그 안에 hidden타입 input을 넣어 폼전송에 필요한 데이터를 담아 사용합니다. 혹은 보이지 않는 변수를 선언할 때 사용.</p><h3 id="Get"><a href="#Get" class="headerlink" title="Get"></a>Get</h3><p><code>$(셀렉터).함수();</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javaScript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// alert(document.getElementById("txt1").value);</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// var txt1 = $("#txt1").val()</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// var hdn1 = $("#hdn1").val()</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> slct1 = $(<span class="string">"#slct1"</span>).val()</span></span><br><span class="line"><span class="javascript">      <span class="comment">// alert(txt1)</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// alert(hdn1)</span></span></span><br><span class="line">      alert(slct1)</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"txt1"</span> <span class="attr">value</span>=<span class="string">"제이쿼리를 뽀게버리겠다"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">id</span>=<span class="string">"hdn1 "</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"slct1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"select1"</span>&gt;</span>셀렉트1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"select2"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>셀렉트2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"select3"</span>&gt;</span>셀렉트3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#txt1"</span>).val(<span class="string">"text2"</span>)</span><br></pre></td></tr></table></figure><h2 id="3-내가-원하는-태그-속성과-HTML-값을-확인하고-변경하기"><a href="#3-내가-원하는-태그-속성과-HTML-값을-확인하고-변경하기" class="headerlink" title="3. 내가 원하는 태그 속성과 HTML 값을 확인하고 변경하기"></a>3. 내가 원하는 태그 속성과 HTML 값을 확인하고 변경하기</h2><h3 id="속성값-변경하기"><a href="#속성값-변경하기" class="headerlink" title="속성값 변경하기"></a>속성값 변경하기</h3><p><code>$(&#39;#div1&#39;).attr(&quot;style&quot;, &quot;color:red;&quot;)</code></p><h3 id="자식-엘리먼트-트리-갖고오기"><a href="#자식-엘리먼트-트리-갖고오기" class="headerlink" title="자식 엘리먼트 트리 갖고오기"></a>자식 엘리먼트 트리 갖고오기</h3><p>GET: <code>$(&quot;#node1&quot;).html()</code><br>SET(html): <code>$(&quot;#node1&quot;).html(&quot;&lt;h1&gt;테스트&lt;/h1&gt;&quot;)</code><br>SET(text): <code>$(&quot;#node1&quot;).text(&quot;&lt;h1&gt;테스트&lt;/h1&gt;&quot;)</code> : html화 하지 않고 텍스트로만 출력된다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"node1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>테이블입니다.<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-내가-원하는-위치에-HTML-삽입하기"><a href="#4-내가-원하는-위치에-HTML-삽입하기" class="headerlink" title="4. 내가 원하는 위치에 HTML 삽입하기"></a>4. 내가 원하는 위치에 HTML 삽입하기</h2><p><code>before()</code><br><code>after()</code><br><code>prepend()</code><br><code>append()</code></p><h2 id="5-셀렉터-알아보기"><a href="#5-셀렉터-알아보기" class="headerlink" title="5. 셀렉터 알아보기"></a>5. 셀렉터 알아보기</h2><p><code>$(&quot;input[name=rad]:checked&quot;).val()</code></p><h3 id="input의-타입종류"><a href="#input의-타입종류" class="headerlink" title="input의 타입종류"></a>input의 타입종류</h3><ul><li><p><code>text</code> : 기본값. 한 줄의 텍스트 입력 칸을 만듦 (기본 너비 문자는 20)</p></li><li><p><code>password</code> : text 속성과 같지만, 문자를 숨겨서 표시 (별표)</p></li><li><p><code>checkbox</code> : 체크박스를 만듦</p></li><li><p><code>radio</code> : 라디오 버튼 만듦</p></li><li><p><code>button</code> : 누름 버튼</p></li><li><p><code>submit</code> : 전송 버튼</p></li><li><p><code>reset</code> : 재설정 버튼</p></li><li><p><code>file</code> : 파일 선택 창을 만듦.</p></li><li><p><code>hidden</code> : 사용자에게 보이지 않는 숨김 창을 만듦.</p></li><li><p><code>image</code> : 이미지로 된 전송 버튼을 만듦 (src 속성으로 이미지 url 지정)</p></li><li><p><code>color</code> : 색상 선택 창을 만듦.</p></li><li><p><code>date</code> : 날짜 입력 창을 만듦 (년/월/일)</p></li><li><p><code>datetime</code> : 날짜 시간 창을 만듦 (년/월/일/시/분/초/초의 분할) 표준시간</p></li><li><p><code>datetime-local</code> : 날짜 시간 차응ㄹ 만듦 (년/월/일/시/분/초/초의 분할) 표준시간 없음</p></li><li><p><code>email</code> : email 주소 창을 만듦</p></li><li><p><code>month</code> : 달과 년 창을 만듦 (표준 시간 없음)</p></li><li><p><code>number</code> : 숫자 입력을 위한 창을 만듦(숫자 제한을 둘 수도 있음)</p><ul><li>max : 최대값 / min: 최소값 / step: 허락하는 숫자간격 / value: 기본값</li></ul></li><li><p><code>range</code> : 정확한 값이 중요하지 않는 숫자를 입력하는 창을 만듦 (슬라이더 장치처럼)</p></li><li><p><code>search</code> : 검색 창을 만듦</p></li><li><p><code>tel</code> : 전화번호 입력창을 만듦</p></li><li><p><code>time</code> : 시간 입력 창을 만듦 (표준 시간 없음)</p></li><li><p><code>url</code> : 주소 입력 창</p></li><li><p><code>week</code> : 주와 년 입력 창 (표준시간 없음)</p></li></ul><h2 id="6-내가-원하는대로-태그에-스타일을-제어해보자"><a href="#6-내가-원하는대로-태그에-스타일을-제어해보자" class="headerlink" title="6. 내가 원하는대로 태그에 스타일을 제어해보자."></a>6. 내가 원하는대로 태그에 스타일을 제어해보자.</h2><p><code>$(&quot;div:eq(0)&quot;).css(&quot;color:red;&quot;)</code> : <code>div:eq(0)</code>란, div엘리먼트들 중에서 첫번째 div요소</p><p>클래스 제어하기</p><ul><li><code>addClass(&quot;클래스명&quot;)</code> 클래스명을 지정된 셀렉터에 추가한다.</li><li><code>removeClass(&quot;클래스명&quot;)</code> 클래스명을 지정된 셀렉터로부터 지운다.</li><li><code>hasClass(&quot;클래스명&quot;)</code> 클래스명이 지정된 셀렉터로부터 존재하는지 여부를 판단. (return으로 boolean값)</li></ul><h2 id="7-traversing-함수-셀렉터를-시작으로-내가-추적하고자-하는-태그-알아내기"><a href="#7-traversing-함수-셀렉터를-시작으로-내가-추적하고자-하는-태그-알아내기" class="headerlink" title="7. traversing 함수. 셀렉터를 시작으로 내가 추적하고자 하는 태그 알아내기."></a>7. traversing 함수. 셀렉터를 시작으로 내가 추적하고자 하는 태그 알아내기.</h2><p><code>parent()</code> : 부모노드<br><code>find()</code> : 자식노드중 태그명을 찾는다.<br><code>prev()</code> : 같은 레벨에서의 직전 노드<br><code>next()</code> : 같은 레벨에서 다음 노드 (직후)</p><h2 id="8-jquery용-for문인-each-함수에-대해서-알아보자"><a href="#8-jquery용-for문인-each-함수에-대해서-알아보자" class="headerlink" title="8. jquery용 for문인 each()함수에 대해서 알아보자."></a>8. jquery용 for문인 <code>each()</code>함수에 대해서 알아보자.</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javaScript"</span> <span class="attr">src</span>=<span class="string">"./jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javaScript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">"div"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a = $(<span class="keyword">this</span>).find(<span class="string">"input[type=text]"</span>).val()</span></span><br><span class="line"><span class="javascript">        <span class="comment">// $("div").eq(index) == $(this)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// $(this)는 each문이나 이벤트에서 자주 사용한다.</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (index == <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125; </span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(a)</span></span><br><span class="line">      &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"첫번째값"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"두번째값"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"세번째값"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">"네번째값"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-마우스-키보드-이벤트-함수-사용해보고-이해하기-1"><a href="#9-마우스-키보드-이벤트-함수-사용해보고-이해하기-1" class="headerlink" title="9. 마우스 + 키보드 이벤트 함수 사용해보고 이해하기 (1)"></a>9. 마우스 + 키보드 이벤트 함수 사용해보고 이해하기 (1)</h2><h3 id="1-click"><a href="#1-click" class="headerlink" title="1. click"></a>1. <code>click</code></h3><ul><li><code>on(&#39;click&#39;)</code>과의 차이점 : on을 사용하게되면, 추가된 요소에 더 적은 메모리를 사용하고 작업할 수 있기 때문에 <code>.click</code>보다 더 선호한다. (<a href="https://code.i-harness.com/ko/q/8b311e" target="_blank" rel="noopener">참고</a>)</li></ul><h3 id="1-1-click을-사용할-때"><a href="#1-1-click을-사용할-때" class="headerlink" title="1.1 click을 사용할 때"></a>1.1 <code>click</code>을 사용할 때</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button.alert"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>위와 같이 선택기와 일치하는 모든 단일 요소에 대해 <strong>별도의 처리기</strong>가 만들어집니다. 그 의미는<ul><li>일치하는 요소가 많으면 많은 동일한 처리기가 만들어 지므로 메모리 사용 공간이 증가합니다.</li><li>동적으로 추가 된 항목에는 처리기가 없습니다. 즉, 위의 html에 새로 추가 된 “경고!” 핸들러를 <strong>리 바인드</strong>하지 않으면 버튼이 작동하지 않습니다.  (= 동적으로 생성된 요소에는 먹히지 않는다는 말)</li></ul></li></ul><h3 id="1-2-on을-사용할-때"><a href="#1-2-on을-사용할-때" class="headerlink" title="1.2 .on을 사용할 때"></a>1.2 <code>.on</code>을 사용할 때</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div#container"</span>).on(<span class="string">'click'</span>, <span class="string">'button.alert'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>동적으로 생성 된 요소를 포함하여 선택기와 일치하는 모든 요소에 대한 단일 처리기이다.</p><ol start="2"><li><code>keypress</code> : 콜백함수에서 이벤트 객체를 받을 수 있는데, 내부에 keyCode값이 있어서 어떤 키보드를 누르는지에대한 정보를 얻을 수 있다. </li><li><code>keyup</code> : esc의 경우에는 keypress가 아니라 keyup에서 작동된다.</li></ol><h2 id="10-Ajax"><a href="#10-Ajax" class="headerlink" title="10. Ajax"></a>10. Ajax</h2><p>html로 받는 형태로만 정리하겠음.</p><ul><li>form action(url)과 url값은 같다. type(method), (post/get/put/delete/…)</li><li>form은 알아서 input 태그들을 전송하지만, ajax는 data 속성을 줘야한다.</li><li>data에는 post로 보낼때 보낼 data를 넣는다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: <span class="string">''</span>, </span><br><span class="line">  type: <span class="string">''</span>,</span><br><span class="line">  dataType: <span class="string">''</span>,</span><br><span class="line">  <span class="comment">// data: &#123;&#125;,</span></span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>json 렌더하기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="string">"#loadButton"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">          url: <span class="string">"https://api.github.com/users"</span>,</span><br><span class="line">          type: <span class="string">'GET'</span>,</span><br><span class="line">          dataType: <span class="string">'json'</span>,</span><br><span class="line">          success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">            $.map(data, <span class="function"><span class="keyword">function</span> (<span class="params">data, i</span>) </span>&#123;</span><br><span class="line">              $(<span class="string">'#table'</span>).append(<span class="string">`&lt;tr&gt;&lt;td&gt;<span class="subst">$&#123;data.login&#125;</span>&lt;/td&gt;&lt;td&gt;&lt;img src=<span class="subst">$&#123;data.avatar_url&#125;</span>/&gt;&lt;/td&gt;&lt;/tr&gt;`</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h2 id="11-기타"><a href="#11-기타" class="headerlink" title="11. 기타"></a>11. 기타</h2><ol><li><code>trim()</code><br>앞뒤의 공백제거만 가능하다.</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = $(<span class="string">'#test'</span>).val()</span><br><span class="line">$.tring(text)</span><br></pre></td></tr></table></figure><ol start="2"><li><p><code>remove()</code> <code>empty()</code><br><code>$(&quot;#showhide&quot;).empty();</code> : showhide라는 아이디값을 갖고 있는 요소의 자식요소들이 비워진다.<br><code>$(&quot;#showhide&quot;).remove();</code> : showhide라는 아이디값을 갖고 있는 요소가 삭제된다.(아예)</p></li><li><p>선택한 태그의 인덱스값만 알고싶을 때</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javaScript"</span> <span class="attr">src</span>=<span class="string">"./jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javaScript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      $(<span class="string">'.btn'</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> index = $(<span class="string">".btn"</span>).index(<span class="keyword">this</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="comment">// 각 버튼을 누르면 해당되는 index의 레이어를 출력시켜라.</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 단, 다른 영역들은 닫혀야하고 클릭된 영역만을 보여줘야한다.</span></span></span><br><span class="line"><span class="javascript">        $(<span class="string">".layer"</span>).hide();</span></span><br><span class="line"><span class="javascript">        $(<span class="string">".layer"</span>).eq(index).show();</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"버튼1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"버튼2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"버튼3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layer"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span></span><br><span class="line">    레이어1입니다.</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span> 레이어1입니다.</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span> 레이어1입니다.</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span> 레이어1입니다.</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layer"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span></span><br><span class="line">    레이어2입니다.</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span> 레이어2입니다.</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span> 레이어2입니다.</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span> 레이어2입니다.</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layer"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span></span><br><span class="line">    레이어3입니다.</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span> 레이어3입니다.</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span> 레이어3입니다.</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span> 레이어3입니다.</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;basic&quot;&gt;&lt;a href=&quot;#basic&quot; class=&quot;headerlink&quot; title=&quot;basic&quot;&gt;&lt;/a&gt;basic&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;html은 위에서 아래로 순차적으로 실행된다.&lt;/li&gt;
&lt;li&gt;jquery의 ready나 lo
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Jquery" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Jquery/"/>
    
    
      <category term="jquery" scheme="http://feel5ny.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>11/ 정규표현식</title>
    <link href="http://feel5ny.github.io/2018/01/20/JS_11/"/>
    <id>http://feel5ny.github.io/2018/01/20/JS_11/</id>
    <published>2018-01-20T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<hr><p><strong>목차</strong></p><ol><li>정규표현식<ol><li>플래그</li><li>패턴</li><li>자주사용하는 정규표현식</li></ol></li><li>JS Regular Expression<ol><li>RegExp Constructor</li><li>RegExp Method<ol><li>RegExp.prototype.exec()</li><li>RegExp.prototype.test()</li></ol></li></ol></li></ol><hr><hr><h2 id="1-정규표현식"><a href="#1-정규표현식" class="headerlink" title=" 1. 정규표현식"></a><a name="RegExp"></a> 1. 정규표현식</h2><img src="/images/2018/06/regular_expression.png" width="400px">`RegExp.prototype.exec(text)` : `RegExp.prototype.test(text)` : boolean값이 반환된다.`String.prototype.match(rxgexr)` : 매치되는 문자열들을 반환한다. `String.prototype.replace(rxgexr, '')` : 첫번째 인자로 찾아진 문자열을 두번째 인자로 교체한다.`String.prototype.search(rxgexr)` : 배열의 길이`String.prototype.split(rxgexr)` : 인자값을 제외하고, 인자값을 기준으로 split된 배열이 반환됨.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'This is a pen.'</span>;</span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/is/ig</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RegExp 객체의 메소드</span></span><br><span class="line"><span class="built_in">console</span>.log(regexr.exec(targetStr)); <span class="comment">// [ 'is', index: 2, input: 'This is a pen.' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(targetStr)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String 객체의 메소드</span></span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr)); <span class="comment">// [ 'is', 'is' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(targetStr.replace(regexr, <span class="string">'IS'</span>)); <span class="comment">// ThIS IS a pen.</span></span><br><span class="line"><span class="built_in">console</span>.log(targetStr.search(regexr)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(targetStr.split(regexr));  <span class="comment">// [ 'Th', ' ', ' a pen.' ]</span></span><br></pre></td></tr></table></figure><h3 id="1-1-플래그"><a href="#1-1-플래그" class="headerlink" title="1.1 플래그"></a>1.1 플래그</h3><p>플래그는 옵션이므로 선택적으로 사용한다.<br>플래그를 사용하지 않은 경우 문자열 내 검색 매칭 대상이 1개 이상이더라도 <strong>첫번째 매칭한 대상만</strong>을 검색하고 종료한다.</p><ul><li><code>i</code> : ignore Case : <strong>대소문자를 구별하지 않고 검색한다.</strong></li><li><code>g</code> : Global : <strong>문자열 내의 모든 패턴을 검색한다.</strong></li><li><code>m</code> : Multi Line : <strong>문자열의 행이 바뀌더라도 검색을 계속한다.</strong></li></ul><hr><hr><h3 id="1-2-패턴"><a href="#1-2-패턴" class="headerlink" title="1.2 패턴"></a>1.2 패턴</h3><p>패턴에는 찾고자 하는 대상을 문자열로 지정한다.<br>또한 패턴은 특별한 의미를 가지는 메타문자(Metacharacter) 또는 기호로 표현할 수 있다. </p><hr><h4 id="1-2-1"><a href="#1-2-1" class="headerlink" title="1.2.1 /.../"></a>1.2.1 <code>/.../</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'AA BB Aa Bb'</span>;</span><br><span class="line"><span class="comment">// 임의의 문자 3개</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/.../</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr)); <span class="comment">// [ 'AA ', index: 0, input: 'AA BB Aa Bb' ]</span></span><br></pre></td></tr></table></figure><p><code>.</code>은 임의의 문자 한 개를 의미한다. 문자의 내용은 무엇이든지 상관없다. 위의 경우 <code>.</code>를 3개 연속하여 패턴을 생성하였으므로 패턴과 일치하는 3자리 문자를 추출한다.<br>플래그가 없으므로 추출을 반복하지 않는다. 문자열 내의 모든 패턴을 검색하기 위해 <code>g</code>사용</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'AA BB Aa Bb'</span>;</span><br><span class="line"><span class="comment">// 임의의 문자 3개를 반복하여 검색</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/.../g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr)); <span class="comment">// [ 'AA ', 'BB ', 'Aa ' ]</span></span><br></pre></td></tr></table></figure><hr><h4 id="1-2-2-일치하는-문자-또는-문자열-추출"><a href="#1-2-2-일치하는-문자-또는-문자열-추출" class="headerlink" title="1.2.2 일치하는 문자 또는 문자열 추출 + | []"></a>1.2.2 일치하는 문자 또는 문자열 추출 <code>+</code> <code>|</code> <code>[]</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'AA BB Aa Bb'</span>;</span><br><span class="line"><span class="comment">// 'A'를 검색</span></span><br><span class="line"><span class="keyword">var</span> regexr1 = <span class="regexp">/A/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr1)); <span class="comment">// 'A'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> regexr2 = <span class="regexp">/A/ig</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr2)); <span class="comment">// [ 'A', 'A', 'A', 'a' ]</span></span><br></pre></td></tr></table></figure><p>앞선 패턴을 최소 한번 반복하려면 앞선 패턴 뒤에 <code>+</code>를 붙인다. 아래의 경우 앞선 패턴는 A이므로 A+는 AA 또는 A를 의미한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'AA AAA BB Aa Bb'</span>;</span><br><span class="line"><span class="comment">// 'A'가 한번이상 반복되는 문자열을 반복 검색</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/A+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr)); <span class="comment">// [ 'AA', 'AAA', 'A' ]</span></span><br></pre></td></tr></table></figure><p><code>|</code>를 사용하면 or의 의미를 가지게 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'AA BB Aa Bb'</span>;</span><br><span class="line"><span class="comment">// 'A' 또는 'B'를 반복 검색</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/A|B/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr)); <span class="comment">// [ 'A', 'A', 'B', 'B', 'A', 'B' ]</span></span><br></pre></td></tr></table></figure><p>분해되지 않은 단어 레벨로 추출하기 위해서는 +를 같이 사용하면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'AA AAA BB Aa Bb'</span>;</span><br><span class="line"><span class="comment">// 'A' 또는 'B'가 한번이상 반복되는 문자열을 반복 검색</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/A+|B+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr)); <span class="comment">// [ 'AA', 'AAA', 'BB', 'A', 'B' ]</span></span><br></pre></td></tr></table></figure><p>위 예제는 패턴을 or로 한번 이상 반복하는 것인데 간단히 표현하면 아래와 같다.<br><code>[]</code>내의 문자는 or로 동작한다. 그 뒤에 <code>+</code>를 사용하여 앞선 패턴을 한번 이상 반복하게 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'AA BB Aa Bb'</span>;</span><br><span class="line"><span class="comment">// 'A' 또는 'B'가 한번이상 반복되는 문자열을 반복 검색</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/[AB]+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr)); <span class="comment">// [ 'AA', 'BB', 'A', 'B' ]</span></span><br></pre></td></tr></table></figure><hr><h4 id="1-2-3-범위지정"><a href="#1-2-3-범위지정" class="headerlink" title="1.2.3 범위지정"></a>1.2.3 범위지정</h4><h5 id="대문자-알파벳"><a href="#대문자-알파벳" class="headerlink" title="대문자 알파벳"></a>대문자 알파벳</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'AA BB ZZ Aa Bb'</span>;</span><br><span class="line"><span class="comment">// 'A' ~ 'Z'가 한번이상 반복되는 문자열을 반복 검색</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/[A-Z]+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr)); <span class="comment">// [ 'AA', 'BB', 'ZZ', 'A', 'B' ]</span></span><br></pre></td></tr></table></figure><hr><h5 id="대소문자-구별없는-알파벳-w"><a href="#대소문자-구별없는-알파벳-w" class="headerlink" title="대소문자 구별없는 알파벳 \w"></a>대소문자 구별없는 알파벳 <code>\w</code></h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'AA BB Aa Bb'</span>;</span><br><span class="line"><span class="comment">// 'A' ~ 'Z' 또는 'a' ~ 'z'가 한번이상 반복되는 문자열을 반복 검색</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/[A-Za-z]+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr)); <span class="comment">// [ 'AA', 'BB', 'Aa', 'Bb' ]</span></span><br></pre></td></tr></table></figure><p><code>\w</code>는 알파벳과 숫자를 의미한다. <code>\W</code>는 <code>\w</code>와 반대로 동작한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'AA BB Aa Bb 24,000'</span>;</span><br><span class="line"><span class="comment">// 알파벳과 숫자 또는 ','가 한번이상 반복되는 문자열을 반복 검색</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/[\w,]+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr)); <span class="comment">// [ 'AA', 'BB', 'Aa', 'Bb', '24,000' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 알파벳과 숫자가 아닌 문자 또는 ','가 한번이상 반복되는 문자열을 반복 검색</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/[\W,]+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr)); <span class="comment">// [ ' ', ' ', ' ', ' ', ',' ]</span></span><br></pre></td></tr></table></figure><hr><h5 id="숫자-추출하기"><a href="#숫자-추출하기" class="headerlink" title="숫자 추출하기"></a>숫자 추출하기</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'AA BB Aa Bb 24,000'</span>;</span><br><span class="line"><span class="comment">// '0' ~ '9'가 한번이상 반복되는 문자열을 반복 검색</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/[0-9]+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr)); <span class="comment">// [ '24', '000' ]</span></span><br></pre></td></tr></table></figure><p><code>,</code>때문에 분리되는 것을 막기 위해 <code>,</code>를 범위 안에 포함시킨다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'AA BB Aa Bb 24,000'</span>;</span><br><span class="line"><span class="comment">// '0' ~ '9' 또는 ','가 한번이상 반복되는 문자열을 반복 검색</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/[0-9,]+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr)); <span class="comment">// [ '24,000' ]</span></span><br></pre></td></tr></table></figure><p>숫자 추출하기를 간단하게 표현하면 아래와 같다.<br><code>\d</code>는 숫자를 의미한다. <code>\D</code>는 <code>\d</code>와 반대로 동작한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'AA BB Aa Bb 24,000'</span>;</span><br><span class="line"><span class="comment">// '0' ~ '9' 또는 ','가 한번이상 반복되는 문자열을 반복 검색</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/[\d,]+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr)); <span class="comment">// [ '24,000' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// '0' ~ '9'가 아닌 문자(숫자가 아닌 문자) 또는 ','가 한번이상 반복되는 문자열을 반복 검색</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/[\D,]+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(targetStr.match(regexr)); <span class="comment">// [ 'AA BB Aa Bb ', ',' ]</span></span><br></pre></td></tr></table></figure><hr><hr><h3 id="1-3-자주-사용하는-정규표현식"><a href="#1-3-자주-사용하는-정규표현식" class="headerlink" title="1.3 자주 사용하는 정규표현식"></a>1.3 자주 사용하는 정규표현식</h3><h4 id="1-3-1-특정단어로-시작"><a href="#1-3-1-특정단어로-시작" class="headerlink" title="1.3.1 특정단어로 시작? ^"></a>1.3.1 특정단어로 시작? <code>^</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'abcdef'</span>;</span><br><span class="line"><span class="comment">// 'abc'로 시작하지 검사</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/^abc/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(targetStr)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-특정단어로-끝나나"><a href="#1-3-2-특정단어로-끝나나" class="headerlink" title="1.3.2 특정단어로 끝나나? $"></a>1.3.2 특정단어로 끝나나? <code>$</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'abcdef'</span>;</span><br><span class="line"><span class="comment">// 'ef'로 끝나는지 검사</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/ef$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(targetStr)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="1-3-3-숫자인가"><a href="#1-3-3-숫자인가" class="headerlink" title="1.3.3 숫자인가?"></a>1.3.3 숫자인가?</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'12345'</span>;</span><br><span class="line"><span class="comment">// 모두 숫자인지 검사</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/^\d+$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(targetStr)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="1-3-4-공백인가-s"><a href="#1-3-4-공백인가-s" class="headerlink" title="1.3.4 공백인가? \s"></a>1.3.4 공백인가? <code>\s</code></h4><p><code>\s</code>는 공백을 의미한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">' Hi!'</span>;</span><br><span class="line"><span class="comment">// 1개 이상의 공백으로 시작하는지 검사</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/^[\s]+/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(targetStr)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="1-3-5-아이디로-사용-가능한가"><a href="#1-3-5-아이디로-사용-가능한가" class="headerlink" title="1.3.5 아이디로 사용 가능한가? {}"></a>1.3.5 아이디로 사용 가능한가? <code>{}</code></h4><p><code>{}</code> : 자리수를 의미한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'abc123'</span>;</span><br><span class="line"><span class="comment">// 알파벳 대소문자 또는 숫자로 시작하고 끝나며 4 ~10자리인지 검사</span></span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/^[A-Za-z0-9]&#123;4,10&#125;$/</span></span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(targetStr)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="1-3-6-메일주소-형식인가"><a href="#1-3-6-메일주소-형식인가" class="headerlink" title="1.3.6 메일주소 형식인가?"></a>1.3.6 메일주소 형식인가?</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'ungmo2@gmail.com'</span>;</span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*\.[a-zA-Z]&#123;2,3&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(targetStr)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="1-3-7-현드폰-번호-형식인가"><a href="#1-3-7-현드폰-번호-형식인가" class="headerlink" title="1.3.7 현드폰 번호 형식인가?"></a>1.3.7 현드폰 번호 형식인가?</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'010-1234-5678'</span>;</span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/^\d&#123;3&#125;-\d&#123;3,4&#125;-\d&#123;4&#125;$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(targetStr)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="1-3-8-특수문자-포함인가"><a href="#1-3-8-특수문자-포함인가" class="headerlink" title="1.3.8 특수문자 포함인가?"></a>1.3.8 특수문자 포함인가?</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> targetStr = <span class="string">'abc#123'</span>;</span><br><span class="line"><span class="keyword">var</span> regexr = <span class="regexp">/[\&#123;\&#125;\[\]\/?.,;:|\)*~`!^\-_+&lt;&gt;@\#$%&amp;\\\=\(\'\"]/gi</span></span><br><span class="line"><span class="built_in">console</span>.log(regexr.test(targetStr)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><hr><h2 id="2-JS-Regular-Expression"><a href="#2-JS-Regular-Expression" class="headerlink" title=" 2. JS Regular Expression"></a><a name="RegExp"></a> 2. JS Regular Expression</h2><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/js-regexp" target="_blank" rel="noopener">http://poiemaweb.com/js-regexp</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;strong&gt;목차&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;정규표현식&lt;ol&gt;
&lt;li&gt;플래그&lt;/li&gt;
&lt;li&gt;패턴&lt;/li&gt;
&lt;li&gt;자주사용하는 정규표현식&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;JS Regular Expression&lt;ol&gt;

      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>git rebase와 삽질</title>
    <link href="http://feel5ny.github.io/2018/01/05/log_003/"/>
    <id>http://feel5ny.github.io/2018/01/05/log_003/</id>
    <published>2018-01-05T14:23:55.000Z</published>
    <updated>2019-02-03T15:17:37.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="서론"><a href="#서론" class="headerlink" title="서론"></a>서론</h2><p>요즘 작업 중인 프로젝트에서 평소에 했던 방식처럼 한 기능 당, 한 테스크당 브랜치를 생성해서 작업하고 있었다. 개인프로젝트이기 때문에.. 따로 dev 브랜치는 만들진 않았고 master에서 작업 브랜치를 만들었는데, </p><h4 id="1-검색기능을-만들었어야-해서-master에서-Search-Todo라는-브랜치를-생성"><a href="#1-검색기능을-만들었어야-해서-master에서-Search-Todo라는-브랜치를-생성" class="headerlink" title="1. 검색기능을 만들었어야 해서 master에서 Search-Todo라는 브랜치를 생성"></a>1. 검색기능을 만들었어야 해서 <code>master</code>에서 <code>Search-Todo</code>라는 브랜치를 생성</h4><img src="/images/2018/04/git-log-01.jpg" width="400px"><h4 id="2-이미지-클릭시-다른-탭으로-이동하는-기능을-만들어야-해서-Move-Todo-to-Timer라는-브랜치-생성"><a href="#2-이미지-클릭시-다른-탭으로-이동하는-기능을-만들어야-해서-Move-Todo-to-Timer라는-브랜치-생성" class="headerlink" title="2. 이미지 클릭시 다른 탭으로 이동하는 기능을 만들어야 해서 Move Todo to Timer라는 브랜치 생성"></a>2. 이미지 클릭시 다른 탭으로 이동하는 기능을 만들어야 해서 <code>Move Todo to Timer</code>라는 브랜치 생성</h4><img src="/images/2018/04/git-log-02.jpg" width="400px"><h4 id="3-Move-Todo-to-Timer에서-작업하다-잘-안되는-부분이-있어서-다른-기능-구현시작-Search-Todo로-돌아가서-Add-Sound브랜치-생성"><a href="#3-Move-Todo-to-Timer에서-작업하다-잘-안되는-부분이-있어서-다른-기능-구현시작-Search-Todo로-돌아가서-Add-Sound브랜치-생성" class="headerlink" title="3. Move Todo to Timer에서 작업하다 잘 안되는 부분이 있어서 다른 기능 구현시작. Search-Todo로 돌아가서 Add-Sound브랜치 생성"></a>3. <code>Move Todo to Timer</code>에서 작업하다 잘 안되는 부분이 있어서 다른 기능 구현시작. <code>Search-Todo</code>로 돌아가서 <code>Add-Sound</code>브랜치 생성</h4><img src="/images/2018/04/git-log-03.jpg" width="400px"><h4 id="4-Add-Sound-작업이-잘-완료되어서-Search-Todo에-rebase-시킴"><a href="#4-Add-Sound-작업이-잘-완료되어서-Search-Todo에-rebase-시킴" class="headerlink" title="4. Add-Sound 작업이 잘 완료되어서 Search-Todo에 rebase 시킴"></a>4. <code>Add-Sound</code> 작업이 잘 완료되어서 Search-Todo에 rebase 시킴</h4><ul><li>사운드 작업이라서 Xcode를 좀 건드림.</li><li>게다가 Xcode를 중간에 업데이트해서 Xcode 파일 부분부분 변경됨</li></ul><img src="/images/2018/04/git-log-04.jpg" width="400px"><img src="/images/2018/04/git-log-04-01.jpg" width="400px"><h4 id="5-Move-Todo-to-Timer-작업이-끝나서-Search-Todo에-rebase-시키기로-함"><a href="#5-Move-Todo-to-Timer-작업이-끝나서-Search-Todo에-rebase-시키기로-함" class="headerlink" title="5. Move Todo to Timer 작업이 끝나서 Search-Todo에 rebase 시키기로 함"></a>5. <code>Move Todo to Timer</code> 작업이 끝나서 <code>Search-Todo</code>에 rebase 시키기로 함</h4><p><strong>문제 발생 지점</strong></p><ul><li>rebase시 각 커밋마다 rebase할 브랜치와 비교해서 충돌 지점을 체킹함.<ul><li>여기서 기존 코드랑 수신코드랑 다 받으면 되는거 아닌가 하겠지만,</li><li>그건 변경된 코드 부분마다 달라서 잘 확인을 하면서 받아야함.<ul><li>다행히 최근에 작업한 코드라 괜찮았지, 만약에 작업을 방대하게 많이 했거나 오래전에 작업했던 부분이었다면 더 문제됐을듯.</li><li><span style="color:red"><strong>여기서 Xcode 작업 코드를 잘못 받아버림.</strong></span> (흑흑흑흑 😫😫😫😫) </li></ul></li></ul></li><li>충돌 체킹 하고, 다시 <code>git add .</code>, <code>git rebase --continue</code>하면 다음 커밋 비교로 넘어감.<img src="/images/2018/04/git-log-05.jpg" width="400px"></li></ul><h4 id="6-Search-Todo브랜치에서-error"><a href="#6-Search-Todo브랜치에서-error" class="headerlink" title="6. Search-Todo브랜치에서 error.."></a>6. <code>Search-Todo</code>브랜치에서 error..</h4><p><code>Cannot read property &#39;IsAndroid&#39; of undefined</code> 이 에러를 넘어가질 않음.</p><ul><li>react-native-sound 모듈은 안드로이드 대응까지 하는데, react-native와 link되는 부분이 적용되지 않아서 나오는 문제라함.</li><li>사실 이 에러는 sound 모듈 처음 추가할때 나왔던 에러였는데 재실행해서 해결했던 기억이 남.</li><li>똑같이 해봤지만 안됨.<img src="/images/2018/04/error.png" width="400px">> 하 넘나 넘어가고싶었던 빨간색이었따..</li></ul><p>나와 같은 문제를 겪은 사람 찾음</p><ul><li><a href="https://github.com/zmxv/react-native-sound/issues/36" target="_blank" rel="noopener">https://github.com/zmxv/react-native-sound/issues/36</a></li><li>그냥 컴파일 할때 생성되는 파일, 폴더들 다 삭제하고 다시 rebuild하거나, 터미널, 시뮬레이터 에디터 다 재시동 후에 다시 run하면 된다고 했지만..</li><li>난 뭔가 안됐다…. 후</li></ul><h4 id="7-다른-브랜치도-공통된-에러인가-해서-다시-Move-Todo-to-Timer로-돌아가봄"><a href="#7-다른-브랜치도-공통된-에러인가-해서-다시-Move-Todo-to-Timer로-돌아가봄" class="headerlink" title="7. 다른 브랜치도 공통된 에러인가 해서 다시 Move Todo to Timer로 돌아가봄."></a>7. 다른 브랜치도 공통된 에러인가 해서 다시 <code>Move Todo to Timer</code>로 돌아가봄.</h4><p>잘 작동됨</p><ul><li>진짜 Xcode를 잘못건드렸다는 것을 확신하게 되었다.</li></ul><h4 id="8-다시-Search-Todo로-돌아가서-확인했는데"><a href="#8-다시-Search-Todo로-돌아가서-확인했는데" class="headerlink" title="8. 다시 Search-Todo로 돌아가서 확인했는데"></a>8. 다시 <code>Search-Todo</code>로 돌아가서 확인했는데</h4><p>어랏? 잘 잘동됨</p><ul><li>순간적으로 더블체킹 하지않고.. 단순히 된다는 확신에 기쁜 마음으로 master에 merge시킴.</li><li>rebase 충돌 병합하다가 문제 생길까봐 이번에는 merge만 진행.</li></ul><h4 id="9-master-merge-이후에-순간-느껴지는-불안감에-다시-실행해봄"><a href="#9-master-merge-이후에-순간-느껴지는-불안감에-다시-실행해봄" class="headerlink" title="9. master merge 이후에 순간 느껴지는 불안감에.. 다시 실행해봄."></a>9. master merge 이후에 순간 느껴지는 불안감에.. 다시 실행해봄.</h4><p>하 안됨.<br><img src="/images/2018/04/error.png" width="400px"></p><blockquote><p>😵</p></blockquote><ul><li>8번에서 잘 작동된 이유는..컴파일을 다시 하고 확인했어야 했는데.. reload만해서 됐었던 것.</li><li>흐억. master에 잘못된 코드가 올라갔네.</li></ul><h4 id="10-그냥-돌아가자"><a href="#10-그냥-돌아가자" class="headerlink" title="10. 그냥 돌아가자.."></a>10. 그냥 돌아가자..</h4><p>문제가 발생했던 5번 이전으로 돌아가는게 그냥 좋겠다는 생각을 했음.</p><ul><li>master로 돌아가서 <code>git reset --hard 커밋주소</code></li><li>reset은 위험하고 거기에 –hard까지 붙이면 더더욱 위험하지만</li><li>Xcode라고 확신은 했지만, 정확하진 않았기 때문에.. 이전 커밋을 삭제하기로함.</li><li>어차피 문제가 발생했을 때의 브랜치에서 작업했던 코드량이 정말 적어서 다시 작업해도 괜찮았다.</li></ul><h4 id="11-master는-4번-상태로-다시-돌아갔다"><a href="#11-master는-4번-상태로-다시-돌아갔다" class="headerlink" title="11. master는 4번 상태로 다시 돌아갔다."></a>11. master는 4번 상태로 다시 돌아갔다.</h4><ul><li>Sound만 잘 적용된 상태</li><li>master에서 새로운 브랜치 생성해서 (<code>Move to Timer</code>) 다시 작업 후 master에 merge 시킴<ul><li>지금 생각해보면 <code>Search-Todo</code>에서 충돌 전 커밋 <code>cherry-pick</code>으로 갖고와도 됐는데</li></ul></li></ul><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>git rebase 이후 충돌 병합시 신중하자</li><li>master나 dev같이 root branch에 merge하기 전에 신중하자</li><li>git 공부 더하자</li><li>한 브랜치에서 2가지 브랜치를 생성할 경우 신중하자.</li></ul><p>참고링크<br>rebase <a href="https://backlog.com/git-tutorial/kr/stepup/stepup6_4.html" target="_blank" rel="noopener">https://backlog.com/git-tutorial/kr/stepup/stepup6_4.html</a><br>cherry-pick <a href="https://backlog.com/git-tutorial/kr/stepup/stepup2_8.html" target="_blank" rel="noopener">https://backlog.com/git-tutorial/kr/stepup/stepup2_8.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;서론&quot;&gt;&lt;a href=&quot;#서론&quot; class=&quot;headerlink&quot; title=&quot;서론&quot;&gt;&lt;/a&gt;서론&lt;/h2&gt;&lt;p&gt;요즘 작업 중인 프로젝트에서 평소에 했던 방식처럼 한 기능 당, 한 테스크당 브랜치를 생성해서 작업하고 있었다. 개인프로젝트이
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="0_DevLog 👻" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/0-DevLog-%F0%9F%91%BB/"/>
    
    
      <category term="react" scheme="http://feel5ny.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>기타 용어들</title>
    <link href="http://feel5ny.github.io/2018/01/02/CS_07/"/>
    <id>http://feel5ny.github.io/2018/01/02/CS_07/</id>
    <published>2018-01-02T09:23:55.000Z</published>
    <updated>2019-01-03T15:33:29.062Z</updated>
    
    <content type="html"><![CDATA[<p>목록</p><ol><li><a href="#dns">dns</a></li><li><a href="#subnet">subnet</a></li><li><a href="#NAT">NAT</a></li><li><a href="#port">port</a></li><li><a href="#socket">socket</a></li><li><a href="#mac-address">mac address</a></li></ol><hr><h1 id="1-dns"><a href="#1-dns" class="headerlink" title=" 1. dns"></a><a name="dns"></a> 1. dns</h1><p>DNS(도메인 네임 시스템)는 <code>.com</code> 또는 <code>.net</code>과 같은 특정 최상위 도메인(TLD)의 모든 도메인 네임 및 해당하는 IP 주소를 저장하는 데이터베이스입니다. DNS는 인터넷에서 컴퓨터 시스템과 리소스를 식별하고 찾습니다. 예를 들어, 웹 주소 또는 URL을 입력하면 DNS가 입력된 이름과 해당 위치의 IP 주소를 일치시키고 사용자를 해당 사이트에 연결시켜 줍니다.</p><img src="/images/2018/02/dns1.png"><hr><h1 id="2-subnet"><a href="#2-subnet" class="headerlink" title=" 2. subnet"></a><a name="subnet"></a> 2. subnet</h1><ul><li><p>서브넷(subnet)은 “subnetwork”을 줄인 말로서 어떤 기관에 소속된 네트웍이지만 따로 분리되어 있는 한 부분으로 인식될 수 있는 네트웍을 말한다. </p></li><li><p>일반적으로 하나의 서브넷은 하나의 지역, 한 빌딩 또는 같은 근거리통신망 내에 있는 모든 컴퓨터들을 나타낼 수 있다.</p></li><li><p>여러 개의 서브넷으로 나뉘어진 어떤 조직의 네트웍은 인터넷에 하나의 공유된 네트웍 주소로 접속될 수 있다. 만약 서브넷이 없다면, 그 조직은 물리적으로 분리된 서브 네트웍마다 하나씩, 여러 군데의 인터넷 접속을 가지게 될 것이며, 그렇게 함으로써 한정된 량의 인터넷 주소가 쓸모 없이 낭비될 수도 있게된다.</p></li><li><p>인터넷은 네트웍 사용자들 간에 서로 커뮤니케이션을 하기 위한 네트웍의 집합이다. </p></li><li><p>커뮤니케이션을 위해서는 양측의 사용자 또는 호스트가 관련되어 있는 발신지와 도착지 네트웍, 그리고 네트웍 내의 특정한 컴퓨터의 주소가 있어야 한다. 이 주소를 IP 주소라고 부른다. </p></li><li><p>32 비트의 IP 주소는 크게 두 부분으로 나뉘는데, 하나는 네트웍을 식별하는 네트웍 번호이고, 다른 하나는 네트웍 내의 특정한 컴퓨터나 호스트를 식별하는 호스트 번호이다. </p></li><li><p>한 기관에서 특정한 서브넷을 확인시키기 위해 컴퓨터나 호스트를 식별하는 주소 내의 비트들을 일부 사용할 수 있다. </p></li><li><p>그러므로 실제로는 IP 주소에는 네트웍 번호, 서브넷 번호, 그리고 컴퓨터 번호 등 세 부분이 포함되어 있는 셈이다.</p><img src="/images/2018/02/ipaddress.jpg"></li><li><p><a href="https://www.icann.org/" target="_blank" rel="noopener">https://www.icann.org/</a></p></li></ul><hr><h1 id="3-NAT-Network-Address-Translation"><a href="#3-NAT-Network-Address-Translation" class="headerlink" title=" 3. NAT (= Network Address Translation)"></a><a name="NAT"></a> 3. NAT (= Network Address Translation)</h1><ul><li><p>NAT는 외부 네트웍에 알려진 것과 다른 IP 주소를 사용하는 내부 네트웍에서, IP 주소를 변환하는 것이다. </p></li><li><p>일반적으로, 한 회사는 자신의 내부 네트웍 주소를 하나 또는 그 이상의 공인 IP 주소로 사상한다. 그리고 들어오는 패킷들 상의 공인 IP 주소를 다시 사설 IP 주소로 변환한다. </p></li><li><p>이렇게 함으로써 나가거나 들어오는 각 요구들은 주소 변환과정을 반드시 거쳐야 하기 때문에, </p></li><li><p>보안문제를 확실하게 하는데 도움이 되며, 또한 </p></li><li><p>요구를 제한하거나 인증하고, 또 </p></li><li><p>이전의 요구와 일치시키는 기회를 제공한다. </p></li><li><p>NAT은 또한 회사에서 필요한 공인 IP 주소의 수를 보존하며, 회사가 외부 네트웍과의 통신에서 단 하나의 공인 IP 주소를 사용할 수 있게 한다.</p></li><li><p>NAT은 라우터의 일부로서 포함되며, 종종 통합된 방화벽의 일부가 되기도 한다. </p></li><li><p>네트웍 관리자들은 공인 IP 주소에서 사설 IP 주소로, 사설 IP 주소에서 공인 IP 주소로 사상하기 위한 NAT 표를 만든다. </p></li><li><p>NAT은 라우팅 정책과 함께 사용될 수도 있다. </p></li><li><p>NAT은 IP 주소를 정적으로 정의하거나, 또는 동적으로 변환하도록 설정될 수 있다. 시스코에서 만든 NAT 버전은 관리자가 다음과 같은 것들의 사상을 위한 표를 만들도록 해 준다.</p></li></ul><img src="/images/2018/02/nat.gif"><hr><h1 id="4-port"><a href="#4-port" class="headerlink" title=" 4. port"></a><a name="port"></a> 4. port</h1><p>네트워크의 입출력단자들을 포트(PORT)라고 하며 번호로 지정되는데 포트의 번호는 0에서 65535까지 입니다.<br>TCP/IP 네트웍에서 포트 번호는, 들어오는 트래픽을 컴퓨터 내에서 실행되고 있는 적절한 프로그램에 분배시키기 위해 할당되는 숫자를 말한다. 이것은 물리적인 플러그나 소켓이 아니며, 다만 <strong>논리적인 할당</strong>일 뿐이다</p><ul><li>프로그래밍에서, 포트는 “논리적인 접속장소”이며, 특히 인터넷 프로토콜인 TCP/IP를 사용할 때에는 클라이언트 프로그램이 네트웍 상의 특정 서버 프로그램을 지정하는 방법으로 사용된다. </li><li>웹 프로토콜인 HTTP와 같이, TCP/IP의 상위 프로토콜을 사용하는 응용프로그램에서는 미리 지정된 포트번호들을 가지고 있다. </li><li>이런 것들은 IANA에 의해 지정되었으며, “잘 알려진 포트들”이라고 불린다. </li><li>다른 응용프로그램 프로세스들은 매번 접속할 때마다 포트번호가 동적으로 부여된다. 서버 프로그램이 처음 시작되면, 지정된 포트번호로 바인드된다. 그 서버를 사용하려는 모든 클라이언트 프로그램들은 지정된 포트번호에 바인드해야만 한다. </li><li>바인드가 되면  두개의 컴퓨터간 네트워크를 이용한 통신시 발신지 컴퓨터에서 출발한 사용자 데이터(패킷)는 TCP/IP의 각 계층을 거치면서 최종적으로 목적지 주소(IP)를 가지고 있는 컴퓨터에 도착하게 됩니다. 패킷을 수신한 컴퓨터는 전송시에 사용되었던 주소필드를 제거하고, 패킷 안에 있는 데이터만을 응용프로그램에 넘겨줍니다. </li></ul><p>이 포트들은 크게 세 가지 영역으로 나누어서 지정되어 있습니다.</p><h3 id="1-0번-포트에서-1023포트-까지"><a href="#1-0번-포트에서-1023포트-까지" class="headerlink" title="1. 0번 포트에서 1023포트 까지"></a>1. 0번 포트에서 1023포트 까지</h3><p>well-known port number 라고 하며 미리 특수용도로 지정되어 있습니다. (IANA(Internet Assigned Numbers Authority)에서 관리한다.)</p><p>21번: FTP<br>22번: SSH<br>23번: TELNET<br>25번: SMTP(이메일송신)<br>53번: DNS<br>61번: SNMP(네트워크관리)<br>80번: HTTP(웹페이지를 열기 위한 용도)<br>110번: POP3(이메일수신)<br>115번: SFTP<br>135번: RPC<br>139번: NetBIOS<br>143번: IMAP<br>194: IRC<br>443: SSL<br>445: SMB</p><h3 id="2-등록된-포트로-사용할-경우-1024-49151번을-사용합니다"><a href="#2-등록된-포트로-사용할-경우-1024-49151번을-사용합니다" class="headerlink" title="2. 등록된 포트로 사용할 경우 1024~49151번을 사용합니다."></a>2. 등록된 포트로 사용할 경우 1024~49151번을 사용합니다.</h3><p>1433: MSQL<br>3306: MySQL<br>3389: Remote Desktop<br>5632: PCAnywhere<br>5900: VNC<br>6112: Warcraft III</p><h3 id="3-개인적-용도라면-49152-65535번을-사용하도록-규정되어-있습니다"><a href="#3-개인적-용도라면-49152-65535번을-사용하도록-규정되어-있습니다" class="headerlink" title="3. 개인적 용도라면 49152~65535번을 사용하도록 규정되어 있습니다."></a>3. 개인적 용도라면 49152~65535번을 사용하도록 규정되어 있습니다.</h3><p>클라이언트/서버 방식의 프로그램에서 포트의 사용</p><ol><li>서버/클라이언트 프로그램에서는 서버에서 사용하는 포트번호를 클라이언트 프로그램에서도 동일하게 맞추어 주어야 합니다.</li><li>서버/클라이언트 프로그램에서 사용하는 포트가 개방되도록 라우터 또는 공유기 등의 설정메뉴에서 개방해야 합니다.</li><li>서버/클라이언트 프로그램에서 포트를 설정하지 않으면 임의로 포트를 설정해 주는 프로그램이 일부 있습니다.</li></ol><hr><h1 id="5-socket"><a href="#5-socket" class="headerlink" title=" 5. socket"></a><a name="socket"></a> 5. socket</h1><ul><li><p>두 프로그램이 네트워크를 통해 서로 통신을 수행할 수 있도록 양쪽에 생성되는 <strong>링크의 단자</strong>입니다.</p></li><li><p>두 소켓이 연결되면 서로 다른 프로세스끼리 데이터를 전달할 수 있습니다.</p></li><li><p>결국 소켓이 구현됨으로써 네트워크 및 전송 계층의 캡슐화가 가능해집니다. </p></li><li><p>소켓은 원래 캘리포니아 버클리 대학 분교에서 UNIX용으로 개발되었으며,  UNIX에서의 입출력 메소드의 표준인 개방/읽기/쓰기/닫기 메커니즘을 따릅니다.</p></li><li><p>소켓 함수는 동기모드(블록킹) / 비동기 모드 (논블록킹)으로 동작합니다.</p></li><li><p>차이점은 만약 데이터가 도착하지 않는 상태에서 recv()로 데이터를 수신하고자 했을 때 데이터가 올 때까지 대기(block)하느냐 , 그냥 수신된 데이터가 없다는 정보만 리턴하고 넘어가느냐 입니다.</p></li><li><p>실제로 대기한다는 의미는 시스템을 멈추고 기다린다는 것이 아니라 다른 쓰레드나 프로세스(process)로 실행 권을 넘기는 것이기 때문에 프로세서는 항상 적절한 동작을 하게 됩니다.</p></li><li><p>비동기 모드로 데이터가 올 떄까지 풀링(polling)하면서 대기하는 것과는 기다린다는 의미에서는 동일하지만 프로세서를 활용한다는 면에서는 하늘과 땅 차이라고 할 수 있습니다. 이런 병렬적인 처리에 대한 고려가 필요하게 됩니다.</p></li><li><p>그리고 직접적인 소켓 통신을 처리하는 함수는 아니지만 소켓 처리에 대해서 Multiplex처리(하나의 쓰레드, 혹은 적은 수의 쓰레드에서 여러 개의 소켓을 처리)를 해주는 select , epoll , IOCP 같은 기능적인 함수군도 염두해 두어야겠습니다.</p></li></ul><h2 id="6-MAC-address-Media-Access-Control-Address"><a href="#6-MAC-address-Media-Access-Control-Address" class="headerlink" title=" 6. MAC address (= Media Access Control Address)"></a><a name="mac-address"></a> 6. MAC address (= Media Access Control Address)</h2><p>MAC 주소는, 무선 LAN 카드 또는 무선 LAN 기능 내장 기기에 개별적으로 부여되는 16진수 12자리의 단말 식별 번호(예:12:34:56:78:90:AB)입니다. OS에 따라 “물리적 주소” 또는”Wi-Fi 주소”라고 표시됩니다.</p><h2 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h2><ul><li>동적 IP 할당</li></ul><ol><li>특정 IP에서 오는 것 차단<ul><li>ex. 특정 사이트 차단. 접속을 못하게 함. </li><li>공유기 안에 혹은 라우팅 컴퓨터 안에서 설정.</li></ul></li><li>특정 포트만 전송 가능</li></ol><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://www.verisign.com/ko_KR/website-presence/online/domain-name-system/index.xhtml" target="_blank" rel="noopener">https://www.verisign.com/ko_KR/website-presence/online/domain-name-system/index.xhtml</a></li><li><a href="https://www.verisign.com/assets/DNS101_ko_KR.pdf" target="_blank" rel="noopener">https://www.verisign.com/assets/DNS101_ko_KR.pdf</a></li><li><a href="http://www.terms.co.kr/subnet.htm" target="_blank" rel="noopener">http://www.terms.co.kr/subnet.htm</a></li><li><a href="http://www.terms.co.kr/NAT.htm" target="_blank" rel="noopener">http://www.terms.co.kr/NAT.htm</a></li><li><a href="http://egloos.zum.com/Esunny/v/4130787" target="_blank" rel="noopener">http://egloos.zum.com/Esunny/v/4130787</a></li><li><a href="http://popbox.tistory.com/66" target="_blank" rel="noopener">http://popbox.tistory.com/66</a></li><li><a href="https://ko.wikipedia.org/wiki/MAC_%EC%A3%BC%EC%86%8C" target="_blank" rel="noopener">https://ko.wikipedia.org/wiki/MAC_%EC%A3%BC%EC%86%8C</a></li><li><a href="http://popbox.tistory.com/66" target="_blank" rel="noopener">http://popbox.tistory.com/66</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;목록&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#dns&quot;&gt;dns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#subnet&quot;&gt;subnet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#NAT&quot;&gt;NAT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#port&quot;&gt;por
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="CS" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/CS/"/>
    
    
      <category term="CS" scheme="http://feel5ny.github.io/tags/CS/"/>
    
      <category term="network" scheme="http://feel5ny.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>3 way handshake</title>
    <link href="http://feel5ny.github.io/2018/01/01/CS_06/"/>
    <id>http://feel5ny.github.io/2018/01/01/CS_06/</id>
    <published>2018-01-01T01:23:55.000Z</published>
    <updated>2019-01-03T15:33:29.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-way-handshake"><a href="#3-way-handshake" class="headerlink" title="3 way handshake"></a>3 way handshake</h2><p>Client와 Server 또는 P2P Socket 통신 등, 네트워크를 사용한 통신시 TCP 통신을 많이 사용한다.<br>TCP 통신을 위한 네트워크 연결은 3 way handshake 라는 방식으로 연결된다.<br>쉽게 이야기 하면, 서로의 통신을 위한 관문(port)을 확인하고 연결하기 위하여 3번의 요청/응답 후에 연결이 되는 것이다.</p><img src="/images/2018/01/handshake.jpg"><p>먼저 Server에서 열려있는 포트는 LISTEN 상태이고 Client에서는 Closed 상태이다.</p><ol><li><p>Client에서 Server에 연결 요청을 하기위해 SYN 데이터를 보낸다. (SYN = synchronize sequence numbers)</p></li><li><p>Server에서 해당 포트는 LISTEN 상태에서 SYN 데이터를 받고 SYN_RCV로 상태가 변경된다.<br>그리고 요청을 정상적으로 받았다는 대답(ACK)와 Client도 포트를 열어달라는 SYN 을 같이 보낸다.<br>(ACK = acknowledgment)</p></li><li><p>Client에서는 SYN+ACK 를 받고 ESTABLISHED로 상태를 변경하고 서버에 요청을 잘 받았다는 ACK 를 전송한다.<br>ACK를 받은 서버는 상태가 ESTABLSHED로 변경된다.</p></li></ol><p>위와 같이 3번의 통신이 정상적으로 이루어지면, 서로의 포트가 ESTABLISHED 되면서 연결이 되게 된다.</p><h3 id="Status"><a href="#Status" class="headerlink" title="Status"></a>Status</h3><ul><li>Closed : 닫힌 상태</li><li>LISTEN : 포트가 열린 상태로 연결 요청 대기 중</li><li>SYN_RCV : SYNC 요청을 받고 상대방의 응답을 기다리는 중</li><li>ESTABLISHED : 포트 연결 상태</li></ul><p>현재의 포트 상태 확인은 netstat 명령어로 할 수 있다.</p><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://hyeonstorage.tistory.com/286" target="_blank" rel="noopener">http://hyeonstorage.tistory.com/286</a></li><li><a href="http://mindnet.tistory.com/entry/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%89%BD%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-22%ED%8E%B8-TCP-3-WayHandshake-4-WayHandshake" target="_blank" rel="noopener">http://mindnet.tistory.com/entry/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%89%BD%EA%B2%8C-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-22%ED%8E%B8-TCP-3-WayHandshake-4-WayHandshake</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;3-way-handshake&quot;&gt;&lt;a href=&quot;#3-way-handshake&quot; class=&quot;headerlink&quot; title=&quot;3 way handshake&quot;&gt;&lt;/a&gt;3 way handshake&lt;/h2&gt;&lt;p&gt;Client와 Server 또는 
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="CS" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/CS/"/>
    
    
      <category term="CS" scheme="http://feel5ny.github.io/tags/CS/"/>
    
      <category term="network" scheme="http://feel5ny.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>8/ DOM 확장</title>
    <link href="http://feel5ny.github.io/2017/12/28/JS_08_4/"/>
    <id>http://feel5ny.github.io/2017/12/28/JS_08_4/</id>
    <published>2017-12-28T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. <strong>오류</strong>가 있다면 언제든지 댓글 남겨주세요.</p></blockquote><hr><hr><p><strong>목차</strong></p><ol><li>선택자 API<ol><li>querySelector() 메서드</li><li>querySelectorAll() 메서드</li><li>matchesSelector() 메서드</li></ol></li><li>요소 간 이동</li><li>HTML5<ol><li>클래스 관련 추가사항<ul><li>getElementsByClassName() 메서드</li><li>classList 프로퍼티</li></ul></li><li>포커스 관리</li><li>HTMLDocument의 변화<ul><li>readyState 프로퍼티</li><li>호환성 모드</li></ul></li><li>문자셋 프로퍼티</li><li>커스텀 데이터 속성</li><li>마크업 삽입<ul><li>innerHTML</li><li>outerHTML</li><li>insertAdjacentHTML() 메서드</li><li>메모리와 성능 문제</li></ul></li><li>scrollIntoView() 메서드</li></ol></li><li>전용 확장<ol><li>문서모드</li><li>children 프로퍼티</li><li>contains() 메서드</li><li>마크업 삽입<ul><li>innerText 프로퍼티</li><li>outerText 프로퍼티</li></ul></li><li>스크롤</li></ol></li></ol><hr><hr><p>DOM은 그 자체로도 매우 잘 정의된 API이긴 하지만, 특정 브라우저 전용 방법으로 확장하여 기능을 추가할 때도 많다.</p><h2 id="1-선택자-API"><a href="#1-선택자-API" class="headerlink" title=" 1. 선택자 API"></a><a name="location"></a> 1. 선택자 API</h2><ul><li>자바스크립트 라이브러리 중에 가장 인기 있는 기능은 CSS 선택자로 패턴을 만들고 그에 맞는 DOM 요소를 선택하는 능력이다. </li><li>선택자 API는 CSS 쿼리에 대한 브라우저의 네이티브 지원으로 W3C에서 명세화를 시작햇다.</li><li>이 기능을 구현한 자바스크립트 라이브러리들은 모두 기초적인 CSS 파서를 직접 만들고, 기존의 DOM 메서드를 이용해 문서 노드를 이동하며 <strong>패턴에 일치하는 노드를 골라내는 방식</strong>을 사용했다.</li><li><code>querySelector()</code></li><li><code>querySelectorAll()</code></li><li>Document 타입과 Element타입에서 사용가능하다.</li></ul><h3 id="1-1-querySelector-메서드"><a href="#1-1-querySelector-메서드" class="headerlink" title="1-1. querySelector() 메서드"></a>1-1. querySelector() 메서드</h3><ul><li>매개변수로 CSS 쿼리를 받는다.</li><li>패턴에 일치하는 첫번째 자손 요소를 반환한다. 없으면 null</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// body 요소를 가져온다.</span></span><br><span class="line"><span class="keyword">const</span> body = <span class="built_in">document</span>.querySelector(<span class="string">"body"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ID가 "myDiv"인 요소를 가져온다.</span></span><br><span class="line"><span class="keyword">const</span> myDiv = <span class="built_in">document</span>.querySelector(<span class="string">"#myDiv"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클래스가 "selected"인 요소 중 첫 번째를 가져온다.</span></span><br><span class="line"><span class="keyword">const</span> selected = <span class="built_in">document</span>.querySelector(<span class="string">".selected"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클래스가 "button"인 이미지 중 첫 번째를 가져온다.</span></span><br><span class="line"><span class="keyword">const</span> img = <span class="built_in">document</span>.querySelector(<span class="string">"img.button"</span>);</span><br></pre></td></tr></table></figure><h3 id="1-2-querySelectorAll-메서드"><a href="#1-2-querySelectorAll-메서드" class="headerlink" title="1-2. querySelectorAll() 메서드"></a>1-2. querySelectorAll() 메서드</h3><ul><li>querySelector()와 유사한데, 일치하는 노드 전체를 반환한다.</li><li>즉, HTMLCollection(live)이 아닌 NodeList(non-live), 정적 인스턴스를 반환한다. (유사배열 형태)</li><li>매개변수에는 여러 CSS 쿼리를 넣어도 된다. <code>&quot;h1, h2, h3&quot;</code></li></ul><h3 id="1-3-matchesSelector-메서드-matches-로-변경됨"><a href="#1-3-matchesSelector-메서드-matches-로-변경됨" class="headerlink" title="1-3. matchesSelector() 메서드 ( matches()로 변경됨 ) +"></a>1-3. matchesSelector() 메서드 ( matches()로 변경됨 ) <a href="https://developer.mozilla.org/ko/docs/Web/API/Element/matches" target="_blank" rel="noopener">+</a></h3><ul><li>선택자 API 레벨2 명세</li><li>매개변수로 CSS 선택자를 받고 요소가 그에 일치하면 true, 일치하지 않으면 false</li></ul><hr><hr><h2 id="2-요소-간-이동"><a href="#2-요소-간-이동" class="headerlink" title=" 2. 요소 간 이동"></a><a name="location"></a> 2. 요소 간 이동</h2><ul><li>버전 9 미만의 IE는 타 브라우저와 달리 요소 사이의 공백을 텍스트 노드로 반환하지 않는다. </li><li>이 때문에 childNodes나 firstChild 같은 프로퍼티를 사용할 때 차이가 발생한다. </li><li>DOM 명세를 유지하면서 브라우저 사이의 차이를 극복하려는 노력으로 요소간 이동 명세에서는 새 프로퍼티 그룹을 정의햇다.</li></ul><p>요소간 이동 API에서 추가된 새 프로퍼티들</p><ul><li><code>childElementCount</code> : <strong>자식 요소 숫자</strong>를 반환하되 텍스트 노드와 주석은 제외한다.</li><li><code>firstElementChild</code> : 첫번째 자식 요소를 가리킨다. </li><li><code>lastElementChild</code> : 마지막 자식 요소를 가리킨다.</li><li><code>previousElementSibling</code> : 이전 형제 요소를 가리킨다. </li><li><code>nextElementSibling</code> : 다음 형제 요소를 가리킨다. </li></ul><hr><hr><h2 id="3-HTML5"><a href="#3-HTML5" class="headerlink" title=" 3. HTML5"></a><a name="location"></a> 3. HTML5</h2><ul><li>이전의 HTML 명세는 자바스크립트 인터페이스에 대해서는 간단히만 설명하고 마크업 언어에만 집중했으며 자바스크립트와의 연결은 DOM으로 미뤘다. </li><li>HTML5 명세는 마크업 언어와 함께 사용하도록 디자인된 자바스크립트 API를 상세히 설명하고 정의한다.</li></ul><h3 id="3-1-클래스-관련-추가사항"><a href="#3-1-클래스-관련-추가사항" class="headerlink" title="3-1. 클래스 관련 추가사항"></a>3-1. 클래스 관련 추가사항</h3><h4 id="getElementsByClassName-메서드"><a href="#getElementsByClassName-메서드" class="headerlink" title="getElementsByClassName() 메서드"></a><code>getElementsByClassName()</code> 메서드</h4><ul><li>클래스 이름 문자열을 매개변수로 받는다.</li><li>반환값 : HTMLCollection (live)</li><li>호출한 요소의 자손만 쿼리하여 반환한다.</li></ul><h4 id="반환값이-살아있는-객체라서-생기는-이슈"><a href="#반환값이-살아있는-객체라서-생기는-이슈" class="headerlink" title="반환값이 살아있는 객체라서 생기는 이슈"></a>반환값이 살아있는 객체라서 생기는 이슈</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HTMLCollection을 반환한다.</span></span><br><span class="line"><span class="keyword">var</span> elems = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'red'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elems.length; i++) &#123;</span><br><span class="line">  <span class="comment">// 클래스 어트리뷰트의 값을 변경한다.</span></span><br><span class="line">  elems[i].className = <span class="string">'white'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// white red white</span></span><br></pre></td></tr></table></figure><p>HTMLCollection은 실시간으로 Node의 상태 변경을 반영한다. (live HTMLCollection)<br>실시간으로 Node의 상태 변경을 반영하기 때문에 loop가 필요한 경우 주의가 필요하다.<br>아래와 같은 방법으로 회피할 수 있다.</p><p>방법1 &gt; 역방향으로 돌리기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elems = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'red'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = elems.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">  elems[i].className = <span class="string">'white'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>방법2 &gt; none-live NodeList를 반환하는 querySelectorAll을 사용한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// querySelectorAll는 Nodelist(non-live)를 반환한다. IE8+</span></span><br><span class="line"><span class="keyword">var</span> elems = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.red'</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; elems.length; i++) &#123;</span><br><span class="line">  elems[i].className = <span class="string">'white'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="classList-프로퍼티"><a href="#classList-프로퍼티" class="headerlink" title="classList 프로퍼티"></a>classList 프로퍼티</h4><ul><li>클래스 이름을 조작할 때는 <code>className</code> 프로퍼티를 이용해 클래스 이름을 추가하거나 제거, 교체했다.<ul><li>한 요소에 클래스가 3가지가 적용되어 있을 경우 이름 변경에 불편함이 있다.</li></ul></li><li>classList 프로퍼티는 <a href="https://developer.mozilla.org/ko/docs/Web/API/DOMTokenList" target="_blank" rel="noopener">DOMTokenList</a>란 새 컬렉션 타입의 인스턴스이다.<ul><li>다른 DOM 컬렉션과 마찬가지로 length존재 item() 메서드나 대괄호 표기법을 통해 데이터를 갖고올 수 있다.</li></ul></li><li>크롬과 파폭3.6이상 가능</li></ul><img src="/images/post_img/61/01.png"><p><a href="https://developer.mozilla.org/ko/docs/Web/API/DOMTokenList" target="_blank" rel="noopener">DOMTokenList</a>의 메서드</p><ul><li>add(value) : 주어진 문자열 값을 목록에 추가한다.</li><li>contains(value) : 주어진 값이 목록에 존재하면 true, 그렇지 않으면 false</li><li>remove(value) : 주어진 문자열 값을 목록에서 제거</li><li>toggle(value) : 값이 목록에 존재하면 제거하고 그렇지 않으면 추가</li></ul><hr><h3 id="3-2-포커스-관리"><a href="#3-2-포커스-관리" class="headerlink" title="3-2. 포커스 관리"></a>3-2. 포커스 관리</h3><ul><li>어느 요소에 포커스가 있는지, 현재 문서에 포커스가 있는지 판단하는 능력은 웹 접근성에 대단히 중요.</li></ul><h4 id="document-activeElement"><a href="#document-activeElement" class="headerlink" title="document.activeElement"></a><code>document.activeElement</code></h4><ul><li>항상 현재 포커스를 가진 DOM 요소를 가리키는 포인터를 포함한다.</li><li>키보드 탭 키를 통한 포커스, focus() 메서드로 자동 포커스를 받는다.</li></ul><h4 id="document-hasFocus"><a href="#document-hasFocus" class="headerlink" title="document.hasFocus()"></a><code>document.hasFocus()</code></h4><ul><li>문서에 포커스가 있는지 나타내는 불리언 값을 반환한다.</li></ul><hr><h3 id="3-3-HTMLDocument의-변화"><a href="#3-3-HTMLDocument의-변화" class="headerlink" title="3-3. HTMLDocument의 변화"></a>3-3. HTMLDocument의 변화</h3><h4 id="readyState-프로퍼티"><a href="#readyState-프로퍼티" class="headerlink" title="readyState 프로퍼티"></a>readyState 프로퍼티</h4><ul><li>readyState 프로퍼티에 가능한 값은 2가지 이다.<ul><li>loading</li><li>complete</li></ul></li><li>문서를 불러왔는지 확인하는 것</li><li>보통은 onload 이벤트 핸들러를 사용했다.</li></ul><h4 id="lt-head-gt-프로퍼티"><a href="#lt-head-gt-프로퍼티" class="headerlink" title="&lt;head&gt; 프로퍼티"></a><code>&lt;head&gt;</code> 프로퍼티</h4><ul><li><code>document.head</code>로도 <code>&lt;head&gt;</code>요소 참조가 가능하다.</li><li>크롬과 사파리 5 가능</li></ul><hr><h3 id="3-4-문자셋-프로퍼티"><a href="#3-4-문자셋-프로퍼티" class="headerlink" title="3-4. 문자셋 프로퍼티"></a>3-4. 문자셋 프로퍼티</h3><ul><li>문서의 문자셋을 다루는 프로퍼티</li></ul><h4 id="document-charset"><a href="#document-charset" class="headerlink" title="document.charset"></a><code>document.charset</code></h4><ul><li>문서의 문자셋을 나타내며, 새 문자셋 지정도 가능</li><li>파폭, 사파리, 오페라, 크롬</li></ul><h4 id="document-defaultCharset"><a href="#document-defaultCharset" class="headerlink" title="document.defaultCharset"></a><code>document.defaultCharset</code></h4><ul><li>브라우저 및 시스템의 기본 설정에 따라 문서에 기본적으로 적용해야 할 문자셋을 나타낸다.</li><li>IE, 사파리, 크롬</li></ul><hr><h3 id="3-5-커스텀-데이터-속성-data"><a href="#3-5-커스텀-데이터-속성-data" class="headerlink" title="3-5. 커스텀 데이터 속성 data-"></a>3-5. 커스텀 데이터 속성 <code>data-</code></h3><ul><li>HTML5 요소에서는 요소의 렌더링에 필요한 정보나 시맨틱 값이 아닌 데이터를 접두사 <strong>data-</strong>가 붙은 비표준 속성에 제공하도록 한다.</li><li>data- 뒤에는 자유롭게 네이밍</li><li>요소의 <strong>dataset</strong>프로퍼티를 통해 접근할 수 있다.</li><li>이름-값 쌍으로 이루어진 <code>DOMStringMap</code> 인스턴스이다.</li><li>커스텀 데이터 속성은 요소에 데이터를 연결해야 하지만 사용자에게는 보이고 싶지 않을 때 유용하다.</li><li>이 테크닉은 링크 추적, 매시업에서 페이지 각 부분의 식별자로 흔히 쓰인다.</li></ul><img src="/images/post_img/61/03.png"><img src="/images/post_img/61/02.png"><hr><h3 id="3-6-마크업-삽입"><a href="#3-6-마크업-삽입" class="headerlink" title="3-6. 마크업 삽입"></a>3-6. 마크업 삽입</h3><p>마크업이 포함된 콘텐츠를 추가하는 것은 <a href="https://namu.wiki/w/XSS" target="_blank" rel="noopener">크로스 스크립팅 공격</a>(XSS: Cross-Site Scripting Attacks)에 취약하다.</p><hr><h4 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h4><ol><li>읽기모드 : 요소와 주석, 텍스트 노드 등의 자식 노드를 모두 나타내는 HTML 표현을 반환한다.<ul><li>innerHTML이 어떤 텍스트를 반활할지는 브라우저마다 다르다.</li></ul></li><li>쓰기모드 : 주어진 값을 바탕으로 새 DOM 서브트리를 만들어서 요소의 잣기 노드를 완전히 교체한다.<ul><li>주어진 문자열을 DOM 서브트리로 파싱해 이미 존재하는 자식 노드를 모두 교체한다.</li></ul></li></ol><ul><li>모든 요소가 innerHTML을 지원하지 않는다. <ul><li>col, colgroup, framset, head, html, style, table, tbody, thead, tfoot, tr, title도 지원하지 않는다.</li></ul></li></ul><hr><h4 id="outerHTML"><a href="#outerHTML" class="headerlink" title="outerHTML"></a>outerHTML</h4><ol><li>읽기모드 : 호출한 HTML 요소를 자식 노드와 <strong>함께</strong> 반환</li><li>쓰기모드 : 주어진 HTML 문자열을 파싱하여 DOM 서브트리를 생성하고 호출한 노드 전체를 교환하다.</li></ol><ul><li>나머지 특징은 innerHTML과 동일</li></ul><hr><h4 id="insertAdjacentHTML-메서드"><a href="#insertAdjacentHTML-메서드" class="headerlink" title="insertAdjacentHTML() 메서드"></a>insertAdjacentHTML() 메서드</h4><ul><li>삽입할 위치와 HTML 텍스트 두 가지를 매개변수로 받는다.</li></ul><p>삽입할 위치 매개변수</p><ul><li><code>beforebegin</code> : 호출한 요소 바로 앞에 삽입</li><li><code>afterbegin</code> : 호출한 요소 첫번째 자식 요소 바로 앞에 삽입</li><li><code>beforeend</code> : 호출한 요소 마지막 자식 요소 바로 다음에 삽입</li><li><code>afterend</code> : 호출한 요소 바로 다음에 삽입</li></ul><img src="/images/post_img/61/04.png"><hr><h4 id="메모리와-성능-문제"><a href="#메모리와-성능-문제" class="headerlink" title="메모리와 성능 문제"></a>메모리와 성능 문제</h4><ul><li>위의 메서드들로 자식 노드를 교체하면 메모리에 문제가 생길 수 있는데 IE가 특히 심하다.<br>문제가 발생하는 지점</li><li>제거한 서브트리 요소에 이벤트 핸들러나 기타 자바스크립트 객체가 할당되어 있을 때</li><li>위의 상태에서 해당 핸들러나 프로퍼티를 사용하여 요소를 문서트리에서 제거한다면, 요소와 이벤트 핸들러 사이의 연결이 메모리에 남는다.<ul><li>이른 작업이 계속되면 메모리 사용량이 점점 늘어난다.</li><li>innerHTML, insertAdjacentHTML() 사용할 때는 제거할 요소의 이벤트 핸들러나 자바스크립트 객체 프로퍼티를 모두 제거하길 권한다.</li></ul></li></ul><hr><h3 id="3-7-scrollIntoView-메서드"><a href="#3-7-scrollIntoView-메서드" class="headerlink" title="3-7. scrollIntoView() 메서드"></a>3-7. scrollIntoView() 메서드</h3><p>모든 HTML요소에 존재하며 브라우저 창이나 컨테이너 요소를 스크롤해서 해당 요소가 뷰포트에 보이게 한다.</p><ul><li>매개변수로 true나 생략하면 창 전체를 스크롤하여 요소 상단과 뷰포트 상단을 맞춘다.</li></ul><hr><hr><h2 id="4-전용-확장"><a href="#4-전용-확장" class="headerlink" title=" 4. 전용 확장"></a><a name="location"></a> 4. 전용 확장</h2><ol><li>문서모드</li><li>children 프로퍼티</li><li>contains() 메서드</li><li>마크업 삽입<ul><li>innerText 프로퍼티</li><li>outerText 프로퍼티</li></ul></li><li>스크롤</li></ol><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/js-dom" target="_blank" rel="noopener">http://poiemaweb.com/js-dom</a></li></ol><h3 id="생소했던-단어"><a href="#생소했던-단어" class="headerlink" title="생소했던 단어"></a>생소했던 단어</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. &lt;strong&gt;오류&lt;/strong&gt;가 있다면 언제든지 댓글 남겨주세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;목
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>8/ DOM(1) - 노드의 계층 구조(2)</title>
    <link href="http://feel5ny.github.io/2017/12/27/JS_08_2/"/>
    <id>http://feel5ny.github.io/2017/12/27/JS_08_2/</id>
    <published>2017-12-27T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. <strong>오류</strong>가 있다면 언제든지 댓글 남겨주세요.</p></blockquote><hr><hr><p><strong>목차</strong></p><ol><li>Node 타입</li><li>Document 타입</li><li>Element 타입</li><li><a href="#text">Text 타입</a><ul><li>텍스트 노드 생성</li><li>텍스트 노드 통일</li><li>텍스트 노드 분할</li></ul></li><li><a href="#Comment">Comment 타입</a></li><li><a href="#CDATASection">CDATASection 타입</a></li><li><a href="#DocumentType">DocumentType 타입</a></li><li><a href="#DocumentFragment">DocumentFragment 타입</a></li><li><a href="#Attr">Attr 타입</a></li></ol><hr><hr><h2 id="4-Text-타입"><a href="#4-Text-타입" class="headerlink" title=" 4. Text 타입"></a><a name="text"></a> 4. Text 타입</h2><ul><li>이 노드에는 평범한 텍스트가 포함되고 글자 그대로 사용된다.</li><li>이스케이프된 HTML 문자는 포함할 수 있지만 HTML 코드는 포함할 수 없다.</li></ul><h4 id="Text-노드의-특징"><a href="#Text-노드의-특징" class="headerlink" title="Text 노드의 특징"></a>Text 노드의 특징</h4><ul><li>nodeType은 <strong>3</strong></li><li>nodeType은 <strong>“#text”</strong></li><li>parentNode는 <strong>Element</strong></li><li><strong>자식 노드를 가질 수 없다.</strong></li></ul><img src="/images/post_img/59/textNode.jpg"><ul><li>Text 노드에 포함된 텍스트는 nodeValue 프로퍼티나 data 프로퍼티로 가져올 수 있다.</li><li>둘중에 하나를 바꾸면 노드에 반영된다.</li><li>공백도 length값에 포함된다.</li><li>텍스트 노드의 값을 바꿀때 알아둬야 할 점은 문자열이 문서 타입에 따라 HTML 또는 XML에 맞게 인코드 된다.</li></ul><h4 id="텍스트를-조작하는-메서드"><a href="#텍스트를-조작하는-메서드" class="headerlink" title="텍스트를 조작하는 메서드"></a>텍스트를 조작하는 메서드</h4><ul><li>appendData(text) : 노드 마지막에 text 추가.</li><li>deleteData(offset, count) : offset부터 count만큼 삭제</li><li>insertData(offset, count, text) : offset 위치에 text 삽입</li><li>replaceData(offset, count, text) : offset부터 (offset + count) 까지의 텍스트를 text로 교체</li><li>splitText(offset) : offset 위치를 기준으로 텍스트 노드를 둘로 나눈다.</li><li>substringData(offset, count) : offset위치부터 (offset + count)까지의 텍스트를 꺼낸다.</li></ul><h3 id="텍스트-노드-생성-document-createTextNode"><a href="#텍스트-노드-생성-document-createTextNode" class="headerlink" title="텍스트 노드 생성 document.createTextNode()"></a>텍스트 노드 생성 <code>document.createTextNode()</code></h3><ul><li>매개변수로 삽입할 텍스트를 받는다.</li><li>새 텍스트 노드를 생성하면 ownerDocument 프로퍼티가 설정되지만 문서 트리에 삽입하기 전에는 브라우저 창에 표시되지 않는다.</li><li>일반적으로 요소는 단 하나의 자식 텍스트 토드만 가진다.<ul><li>여러 개를 가질 때도 있다.</li><li>이때 <code>normalize()</code>를 사용하면 두 가지 텍스트가 공백없이 합쳐진다.</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">element.className = <span class="string">"message"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="string">"Hello world!"</span>)</span><br><span class="line">element.appendChild(textNode);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(element);</span><br></pre></td></tr></table></figure><h3 id="텍스트-노드-통일-normalize"><a href="#텍스트-노드-통일-normalize" class="headerlink" title="텍스트 노드 통일 normalize()"></a>텍스트 노드 통일 <code>normalize()</code></h3><h3 id="텍스트-노드-분할-splitText"><a href="#텍스트-노드-분할-splitText" class="headerlink" title="텍스트 노드 분할 splitText()"></a>텍스트 노드 분할 <code>splitText()</code></h3><hr><hr><h2 id="5-Comment-타입"><a href="#5-Comment-타입" class="headerlink" title=" 5. Comment 타입"></a><a name="Comment"></a> 5. Comment 타입</h2><hr><hr><h2 id="6-CDATASection-타입"><a href="#6-CDATASection-타입" class="headerlink" title=" 6. CDATASection 타입"></a><a name="CDATASection"></a> 6. CDATASection 타입</h2><hr><hr><h2 id="7-DocumentType-타입"><a href="#7-DocumentType-타입" class="headerlink" title=" 7. DocumentType 타입"></a><a name="DocumentType"></a> 7. DocumentType 타입</h2><hr><hr><h2 id="8-DocumentFragment-타입"><a href="#8-DocumentFragment-타입" class="headerlink" title=" 8. DocumentFragment 타입"></a><a name="DocumentFragment"></a> 8. DocumentFragment 타입</h2><hr><hr><h2 id="9-Attr-타입"><a href="#9-Attr-타입" class="headerlink" title=" 9. Attr 타입"></a><a name="Attr"></a> 9. Attr 타입</h2><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://meetup.toast.com/posts/89" target="_blank" rel="noopener">http://meetup.toast.com/posts/89</a></li></ol><h3 id="생소했던-단어"><a href="#생소했던-단어" class="headerlink" title="생소했던 단어"></a>생소했던 단어</h3><ol><li>MIME타입</li><li>Gecko</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. &lt;strong&gt;오류&lt;/strong&gt;가 있다면 언제든지 댓글 남겨주세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;목
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>8/ DOM(1) - 노드의 계층 구조(1)</title>
    <link href="http://feel5ny.github.io/2017/12/26/JS_08_1/"/>
    <id>http://feel5ny.github.io/2017/12/26/JS_08_1/</id>
    <published>2017-12-26T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. <strong>오류</strong>가 있다면 언제든지 댓글 남겨주세요.<br>넘나 많은 프로퍼티와 메서드들 @_@</p></blockquote><hr><p>브라우저는 웹 문서(HTML, XML, SVG)를 로드한 후, 파싱하여 DOM(문서 객체 모델: Document Object Model)을 생성한다.</p><img src="/images/post_img/58/client-server.png"><ul><li><p>텍스트 파일로 만들어져 있는 웹 문서를 브라우저에 렌더링하기 위해서는 웹 문서를 브라우저가 이해할 수 있는 구조로 메모리에 올려야 한다. </p></li><li><p>브라우저의 렌더링 엔진은 웹 문서를 로드한 후, 파싱하여 웹 문서를 브라우저가 이해할 수 있는 구조로 구성하여 메모리에 적재하는데 이를 DOM이라 한다.</p></li><li><p>즉 모든 요소와 요소의 어트리뷰트, 텍스트를 각각의 객체로 만들고 이들 객체를 부자 관계를 표현할 수 있는 트리 구조로 구성한 것이 DOM이다. </p></li><li><p>이 DOM은 자바스크립트를 통해 동적으로 변경할 수 있으며 변경된 DOM은 렌더링에 반영된다.</p></li><li><p>이러한 웹 문서의 동적 변경을 위해 DOM은 프로그래밍 언어가 자신에 접근하고 수정할 수 있는 방법을 제공하는데 일반적으로 프로퍼티와 메소드를 갖는 JavaScript 객체로 제공된다. </p></li><li><p>이를 DOM API(Application Programming Interface)라고 부른다. </p></li><li><p>달리 말하면 정적인 웹페이지에 접근하여 동적으로 웹페이지를 변경하기 위한 유일한 방법은 메모리 상에 존재하는 DOM을 변경하는 것이고, 이때 필요한 것이 DOM에 접근하고 변경하는 프로퍼티와 메소드의 집합인 DOM API이다.</p></li></ul><p>DOM은 HTML, JavaScript에서 정의한 표준이 아닌 별개의 W3C의 공식 표준이며 플랫폼/프로그래밍 언어 중립적이다. DOM은 다음 두 가지 기능을 담당한다.</p><hr><p><strong>목차</strong></p><ol><li><a href="#node">Node 타입</a><ul><li>nodeName, nodeValue<ul><li>요소의 경우 nodeName은 태그명, nodeValue는 null</li></ul></li><li>노드 사이의 관계<ul><li>ChildNodes / ParentNodes / firstChild / lastChild / hasChildNodes(), ownerDocument 프로퍼티</li></ul></li><li>노드 조작<ul><li>appendChild() / insertBefore() / replaceChild() / removeChild()</li></ul></li><li>기타 메서드<ul><li>cloneNode() / nomalize()</li></ul></li></ul></li><li><a href="#document">Document 타입</a><ul><li>Document 자식 노드<ul><li>documentElement(=<code>&lt;html&gt;</code>)</li></ul></li><li>문서 정보<ul><li>document.title / document.URL / document.domain / document.referrer</li></ul></li><li>요소 위치<ul><li>getElementById() / getElementByTagName() (namedItem) / getElementByName()</li></ul></li><li>특별한 컬렉션<ul><li>document.anchors / document.applets / document.forms / document.images / document.links</li></ul></li><li>DOM 준수 탐지<ul><li>hasFeature()</li></ul></li><li>문서에 쓰기<ul><li>write() / writeIn() / open() / close()</li></ul></li></ul></li><li><a href="#element">Element 타입</a><ul><li>HTML 요소<ul><li>id / title / lang / dir / className</li></ul></li><li>속성 얻기<ul><li>getAttribute()</li></ul></li><li>속성 설정<ul><li>setAttribute()</li></ul></li><li>속성 제거<ul><li>removeAttribute()</li></ul></li><li>attributes 프로퍼티<ul><li>getNamedItem() / removeNamedItem(name) / setNamedItem(), item()</li></ul></li><li>요소 생성<ul><li>createElement()</li></ul></li><li>요소의 자식</li></ul></li></ol><p>—- 2편 &#128071;</p><ol start="4"><li>Text 타입</li><li>Comment 타입</li><li>CDATASection 타입</li><li>DocumentType 타입</li><li>DocumentFragment 타입</li><li>Attr 타입</li></ol><hr><hr><h1 id="노드의-계층-구조"><a href="#노드의-계층-구조" class="headerlink" title="노드의 계층 구조"></a>노드의 계층 구조</h1><ul><li>문서 객체 모델 DOM은 HTML과 XML 문서에 대한 애플리케이션 프로그래밍 인터페이스이다. (api)</li><li>DOM은 문서를 노드의 계층 구조 트리로 표현한다.</li><li>개발자는 이를 통해 페이지 각 부분을 추가, 제거, 수정한다.</li><li>자바스크립트를 통해 HTML에 접근이 가능한 이유는 html이 document object model에 따라 기술되고 이 dom 인터페이스를 통해 기술된 html element가 <strong>객체</strong>로써 자바스크립트와 연결되기 때문에 접근이 가능한 것이다.</li></ul><hr><ul><li>노드 타입에는 여러 가지가 있으며 각 타입은 문서에서 서로 다른 정보나 마크업을 표현한다.</li><li>노드 타입은 서로 다른 특징, 데이터, 메서드를 가지며 각 노드는 다른 노드와 관계가 있을 수 있다.</li><li>특정 노드에 뿌리를 둔 트리 구조로 표현된다.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Pate<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/images/post_img/58/01.jpg">- 여기서 문서(Document) 노드가 루트이다.- 문서 요소 : 문서 노드의 자식. 여기서는 `<html>`  - 문서 하나에 문서 요소 하나만 있을 수 있다.  - HTML페이지에서 문서요소는 항상 `<html>` 요소이다.- 각 마크업은 트리에서 노드로 표현된다.- 총 12가지 노드 타입이 있으며 모든 노드틑 `기반 타입`(base type)을 상속한다.<hr><hr><h2 id="1-Node-타입"><a href="#1-Node-타입" class="headerlink" title=" 1. Node 타입"></a><a name="node"></a> <span style="color:#1a2980">1. Node 타입<span></span></span></h2><ul><li>DOM 레벨 1에는 Node라는 인터페이스가 있다.</li><li>DOM에 존재하는 <code>노드 타입</code>은 모두 이 인터페이스를 구현한다.</li><li>모든 브라우저에서는 Node 타입에 접근할 수 있다.</li><li>자바스크립트 노드 타입은 모두 Node를 상속하므로 모든 노드 타입에서 같은 기본 프로퍼티와 메서드를 고융한다.</li></ul><p>모든 노드에는 타입을 나타내는 nodeType 프로퍼티가 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Node.ELEMENT_NODE (<span class="number">1</span>)</span><br><span class="line">Node.ATTRIBUTE_NODE (<span class="number">2</span>)</span><br><span class="line">Node.TEXT_NODE (<span class="number">3</span>)</span><br><span class="line">Node.CDATA_SECTION_NODE (<span class="number">4</span>)</span><br><span class="line">Node.ENTITY_REFERENCE_NODE (<span class="number">5</span>)</span><br><span class="line">Node.ENTITY_NODE (<span class="number">6</span>)</span><br><span class="line">Node.PROCESSING_INSTRUCTION_NODE (<span class="number">7</span>)</span><br><span class="line">Node.COMMENT_NODE (<span class="number">8</span>)</span><br><span class="line">Node.DOCUMENT_NODE (<span class="number">9</span>)</span><br><span class="line">Node.DOCUMENT_TYPE_NODE (<span class="number">10</span>)</span><br><span class="line">Node.DOCUMENT_FRAGMENT_NODE (<span class="number">11</span>)</span><br><span class="line">Node.NOTATION_NODE (<span class="number">12</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (someNode.nodeType == Node.ELEMENT_NODE)&#123;</span><br><span class="line">  alert(<span class="string">"Node is an element."</span>)</span><br><span class="line">&#125; <span class="comment">// IE에서는 오류</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (someNode.nodeType == <span class="number">1</span>)&#123;</span><br><span class="line">  alert(<span class="string">"Node is an element."</span>)</span><br><span class="line">&#125; <span class="comment">// 모든 브라우저에서 동작</span></span><br></pre></td></tr></table></figure><hr><h3 id="1-1-nodeName-nodeValue"><a href="#1-1-nodeName-nodeValue" class="headerlink" title="1-1. nodeName, nodeValue"></a><span style="color:#26d0ce">1-1. nodeName, nodeValue</span></h3><ul><li>nodeName과 nodeValue는 해당 노드의 정보를 제공한다.</li><li>요소(element)의 nodeName은 요소의 태그명과 일치하고, nodeValue는 <code>null</code>이다.</li><li>텍스트 노드일 경우 nodeValue는 문자열이다.</li></ul><hr><h3 id="1-2-노드-사이의-관계"><a href="#1-2-노드-사이의-관계" class="headerlink" title="1-2. 노드 사이의 관계"></a><span style="color:#26d0ce">1-2. 노드 사이의 관계</span></h3><h4 id="1-2-1-ChildNodes-프로퍼티"><a href="#1-2-1-ChildNodes-프로퍼티" class="headerlink" title="1-2-1. ChildNodes 프로퍼티"></a>1-2-1. ChildNodes 프로퍼티</h4><h5 id="NodeList가-저장된다"><a href="#NodeList가-저장된다" class="headerlink" title="NodeList가 저장된다."></a><code>NodeList</code>가 저장된다.</h5><ul><li><p>유사배열 객체</p><img src="/images/post_img/58/02.png"></li><li><p>노드를 순서 있는 목록으로 저장하여 위치 기반으로 접근 가능.</p></li><li><p><code>length</code> 프로퍼티 : <strong>호출 당시</strong> 노드리스트에 담긴 노드 숫자임을 기억하자.</p></li><li><p>Array의 인스턴스는 아니다.</p></li><li><p><strong>DOM 구조의 쿼리 결과</strong></p></li><li><p>계속 바뀌므로 살아있는 객체라고도 부른다.</p></li><li><p>childNodes는 모든 자식요소 찾기</p></li><li><p>children은 모든 자식요소 찾기이지만 요소노드만 찾는다.</p></li><li><p>노드 리스트에 저장된 노드를 접근하는 방법 (어느쪽을 더 권잔하진 않는다.)</p><ul><li>대괄호 표기법</li><li>item() 메서드<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> firstChild = someNode.childNodes[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> secondChild = someNode.childNodes.item(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> count = someNode.childNodes.length;</span><br></pre></td></tr></table></figure></li></ul><img src="/images/post_img/58/03.png"></li></ul><h4 id="1-2-2-parentNode-프로퍼티"><a href="#1-2-2-parentNode-프로퍼티" class="headerlink" title="1-2-2. parentNode 프로퍼티"></a>1-2-2. parentNode 프로퍼티</h4><ul><li>childNodes 목록에 포함된 노드는 모두 부모가 같으므로 각각의 parentNode 프로퍼티는 같은 노드를 가리킨다.</li><li>childeNOdes 목록의 각 노드들은 형제관계이며 <code>previousSibling</code> 및 <code>nextSibling</code> 프로퍼티로 이동할 수 있다.</li><li>자식 노드가 하나 뿐이라면 해당 노드의 nextSibling과 previousSibling은 모두 null이다.<img src="/images/post_img/58/04.png"></li></ul><h4 id="1-2-3-firstChild-프로퍼티"><a href="#1-2-3-firstChild-프로퍼티" class="headerlink" title="1-2-3. firstChild 프로퍼티"></a>1-2-3. firstChild 프로퍼티</h4><p>childNodes 목록에서 첫번째 노드를 가리킨다.<br>someNode.firstChild = someNode.childNodes[0]</p><h4 id="1-2-4-lastChild-프로퍼티"><a href="#1-2-4-lastChild-프로퍼티" class="headerlink" title="1-2-4. lastChild 프로퍼티"></a>1-2-4. lastChild 프로퍼티</h4><p>childNodes 목록에서 마지막 노드를 가리킨다.<br>someNode.lastChild = someNode.childNodes[someNode.childNodes.length-1]</p><img src="/images/post_img/58/05.jpg"><h4 id="1-2-5-hasChildNodes-메서드"><a href="#1-2-5-hasChildNodes-메서드" class="headerlink" title="1-2-5. hasChildNodes() 메서드"></a>1-2-5. hasChildNodes() 메서드</h4><p>노드에 자식 노드가 있으면 true를 반환.<br>length로 자식 노드 확인하는 것보다 효과적.</p><h4 id="1-2-6-ownerDocument-프로퍼티"><a href="#1-2-6-ownerDocument-프로퍼티" class="headerlink" title="1-2-6. ownerDocument 프로퍼티"></a>1-2-6. ownerDocument 프로퍼티</h4><p>전체 문서를 표현하는 문서 노드에 대한 포인터<br>노드 계층 구조를 따라 위로 거슬러 올라갈 필요 없이 문서 노드에 빠르게 접근 가능하다.</p><hr><h3 id="1-3-노드-조작"><a href="#1-3-노드-조작" class="headerlink" title="1-3. 노드 조작"></a><span style="color:#26d0ce">1-3. 노드 조작</span></h3><ul><li>노드 사이의 관계 포인터는 모두 읽기 전용</li><li>아래 4가지 메서드는 <strong>자식</strong>에서만 동작하므로 <strong>부모 노드를 정확히 알아야한다.</strong></li></ul><h4 id="1-3-1-appendChild"><a href="#1-3-1-appendChild" class="headerlink" title="1-3-1. appendChild()"></a>1-3-1. <code>appendChild()</code></h4><ul><li>childNodes 목록 마지막에 노드를 추가한다. </li><li>새로 추가한 노드, 부모 노드, childNodes 목록에 포함된 이전의 마지막 자식 노드에서 모든 관계 포인터가 업데이트 된다.</li><li>이미 문서에 존재하고 있는 노드를 추가한다면, 해당 노드는 이전 위치에서 추가된 위치로 옮겨진다.</li></ul><h4 id="1-3-2-insertBefore-삽입할-노드-기준-노드"><a href="#1-3-2-insertBefore-삽입할-노드-기준-노드" class="headerlink" title="1-3-2. insertBefore(삽입할 노드, 기준 노드)"></a>1-3-2. <code>insertBefore(삽입할 노드, 기준 노드)</code></h4><ul><li>삽입할 노드와 기준 노드 2가지를 매개변수로 받는다.</li><li>삽입한 노드는 기준 노드의 <strong>이전</strong>형제가 되며, 이동이 끝나면 메서드는 <strong>삽입한 노드를 반환</strong>한다.</li></ul><img src="/images/post_img/58/insertBefore.png"><h4 id="1-3-3-replaceChild-삽입할-노드-교체할-노드"><a href="#1-3-3-replaceChild-삽입할-노드-교체할-노드" class="headerlink" title="1-3-3. replaceChild(삽입할 노드, 교체할 노드)"></a>1-3-3. <code>replaceChild(삽입할 노드, 교체할 노드)</code></h4><ul><li>기존 노드를 교체한다.</li><li>교체할 노드(B)에 있던 자리에 삽입할 노드(A)가 들어간다.</li><li><strong>B의 관계 표인터는 모두 A에 복사한다.</strong><ul><li>B는 같은 문서 소유이긴 하지만 문서에서 위치를 지정받지 못한 채 붕 떠 있는 상태이다.</li></ul></li></ul><h4 id="1-3-4-removeChild"><a href="#1-3-4-removeChild" class="headerlink" title="1-3-4. removeChild()"></a>1-3-4. <code>removeChild()</code></h4><ul><li>제거할 노드 하나만 매개변수로 받는다.</li><li>제거된 노드는 아직 해당 문서 소유이긴 하지만 문서에서 위치를 지정받지는 못했다.</li></ul><hr><h3 id="1-4-기타-메서드"><a href="#1-4-기타-메서드" class="headerlink" title="1-4. 기타 메서드"></a><span style="color:#26d0ce">1-4. 기타 메서드</span></h3><h4 id="1-4-1-cloneNode-boolean"><a href="#1-4-1-cloneNode-boolean" class="headerlink" title="1-4-1. cloneNode(boolean)"></a>1-4-1. <code>cloneNode(boolean)</code></h4><ul><li>자신을 호출한 노드의 복제본을 생성한다.</li><li>매개변수로는 자손 노드까지 복제할지 나타내는 불리언이다.<ul><li>true : 자손 노드 전체를 복제</li><li>false : 해당 노드 하나만 복제</li></ul></li><li>복제된 노드를 반환하는데, 이는 여전히 문서 소유이지만 부모 노드가 할당되지 않는다.<ul><li><code>고아노드</code>라고 한다.</li><li>appendChild()나 insertBefore(), replaceChild()를 통해 문서에 추가하기 전에는 <strong>트리 안에 존재하지 않는다.</strong></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deepList = myList.cloneNode(<span class="literal">true</span>) <span class="comment">// myList에 ul요소에 대한 참조를 저장했다고 가정</span></span><br><span class="line"><span class="built_in">console</span>.log(deepList.childNodes.length) <span class="comment">// 3 or 7(공백포함)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shallowList = myList.cloneNode(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">console</span>.log(shallowList.childNodes.length) <span class="comment">//0</span></span><br></pre></td></tr></table></figure><h4 id="1-4-2-nomalize"><a href="#1-4-2-nomalize" class="headerlink" title="1-4-2. nomalize()"></a>1-4-2. <code>nomalize()</code></h4><ul><li>문서 서브트리에 존재하는 텍스트 노드를 다루는 것 뿐.</li><li>파서의 구현 방식이나 DOM 조작 결과로 텍스트 없는 텍스트 노드가 생기거나 텍스트 노드끼리 형제 노드가 될 가능성이 있다.</li><li><code>nomalize</code>를 호출하면 노드의 자손에서 이 두가지 상황이 생기지 않았는지 검색한다.</li><li>빈 텍스트 노드를 찾으면 제거하고 텍스트 노드끼리 형제인 경우를 발견하면 두 노드를 하나로 합친다.</li></ul><hr><hr><h2 id="2-Document-타입"><a href="#2-Document-타입" class="headerlink" title=" 2. Document 타입"></a><a name="document"></a> <span style="color:#1a2980">2. Document 타입</span></h2><img src="/images/post_img/58/06.png"><ul><li>자바스크립트는 문서 노드를 Document 타입으로 표현한다.</li><li>브라우저에서 전체 HTML 페이지를 표현하는 문서 객체는 <code>HTMLDocument</code>의 인스턴스</li><li>HTMLDocument는 Document를 상속한다.</li><li>document 객체는 window의 프로퍼티이므로 전역에서 접근할 수 있다. <code>window.document</code></li><li>Document 타입은 HTML 페이지 또는 XML 기반 문서를 표현한다.</li><li>document 객체를 통해 페이지에 대한 정보를 얻고 구조 및 외관을 조작한다.</li></ul><p>Document 노드의 특징</p><ul><li>nodeType은 9</li><li>nodeName은 “#document”</li><li>nodeValue는 null</li><li>parentNode는 null</li><li>ownerDocument는 null</li><li>자식 노드로 DocumentType(최대 1개) Element(최대 1개), Processing Instruction, Comment를 가질 수 있다.</li></ul><hr><h3 id="2-1-Document-자식-노드"><a href="#2-1-Document-자식-노드" class="headerlink" title="2-1. Document 자식 노드"></a><span style="color:#26d0ce">2-1. Document 자식 노드<span></span></span></h3><p>Document 자식으로</p><ul><li>DocumentType</li><li>Element</li><li>ProcessingInstruction</li><li>Comment</li></ul><h4 id="2-1-1-documentElement-프로퍼티"><a href="#2-1-1-documentElement-프로퍼티" class="headerlink" title="2-1-1. documentElement 프로퍼티"></a>2-1-1. <code>documentElement</code> 프로퍼티</h4><ul><li><p>HTML페이지의 <code>&lt;html&gt;</code>요소를 가리킨다.</p></li><li><p>childNodes의 document 요소보다 documentElement프로퍼티가 해당 요소에 더 빨리, 더 직접적으로 접근한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> html = <span class="built_in">document</span>.documentElement;</span><br><span class="line"><span class="built_in">console</span>.log(html === <span class="built_in">document</span>.childNodes[<span class="number">0</span>] === <span class="built_in">document</span>.firstChild)</span><br></pre></td></tr></table></figure></li><li><p><strong>document 객체는 HTMLDocument의 인스턴스이므로 <code>&lt;body&gt;</code>요소를 직접적으로 가리키는 body 프로퍼티를 갖는다.</strong></p></li></ul><p>document 객체<br><img src=" /images/post_img/58/document.jpg"></p><h4 id="2-1-2-DocumentType"><a href="#2-1-2-DocumentType" class="headerlink" title="2-1-2. DocumentType"></a>2-1-2. <code>DocumentType</code></h4><p><code>&lt;!DOCTYPE&gt;</code> 태그는 문서의 다른 부분과는 별도의 엔티티로 간주하며 포함된 정보는 다음과 같이 doctype 프로퍼티를 통해 접근할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doctype = <span class="built_in">document</span>.doctype</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-문서-정보"><a href="#2-2-문서-정보" class="headerlink" title="2-2. 문서 정보"></a><span style="color:#26d0ce">2-2. 문서 정보</span></h3><ul><li>document 객체는 HTMLDocument의 인스턴스이므로 표준 Document 객체에는 존재하지 않는 프로퍼티를 여럿 가진다.</li><li>이들 프로퍼티는 현재 불러들인 웹 페이지에 대한 정보이다.</li></ul><h4 id="2-2-1-document-title"><a href="#2-2-1-document-title" class="headerlink" title="2-2-1. document.title"></a>2-2-1. <code>document.title</code></h4><ul><li><code>&lt;title&gt;</code> 요소 텍스트가 들어있다.</li><li>읽을 수도 있고 재설정도 가능하다.</li></ul><h4 id="2-2-2-웹페이지-요청과-관련한-프로퍼티"><a href="#2-2-2-웹페이지-요청과-관련한-프로퍼티" class="headerlink" title="2-2-2. 웹페이지 요청과 관련한 프로퍼티"></a>2-2-2. 웹페이지 요청과 관련한 프로퍼티</h4><p>HTTP 헤더에 들어있다.</p><ul><li>URL : 페이지의 완전한 URL</li><li>domain : 페이지의 도메인 이름,</li><li>referrer : 이 페이지를 링크한 페이지의 URL. 없으면 빈 문자열</li></ul><hr><h3 id="2-3-요소-위치"><a href="#2-3-요소-위치" class="headerlink" title="2-3. 요소 위치"></a><span style="color:#26d0ce">2-3. 요소 위치</span></h3><p>특정 요소나 요소 그룹에 대한 참조를 얻는 일을 자주한다.<br>대표적인 2가지 메서드. <code>getElementById()</code>, <code>getElementByTagName()</code></p><h4 id="2-3-1-getElementById"><a href="#2-3-1-getElementById" class="headerlink" title="2-3-1. getElementById()"></a>2-3-1. <code>getElementById()</code></h4><ul><li>찾으려는 요소 ID를 매개변수로 받고 해다 요소를 찾아 반환하며 그런 ID의 요소가 존재하지 않으면 null반환.</li><li>소문자와 대문자를 구분해야한다.</li><li>같은 요소가 2개 이상 존재하면 첫 번째 요소를 반환한다.</li><li>document.getElementBy~ : 단일 엘리먼트를 선택하는 메소드</li><li>document.getElementsBy~ : 다중 엘리먼트를 선택하는 메소드<ul><li>배열형태로 받아진다.</li></ul></li></ul><h4 id="2-3-2-getElementByTagName"><a href="#2-3-2-getElementByTagName" class="headerlink" title="2-3-2. getElementByTagName()"></a>2-3-2. <code>getElementByTagName()</code></h4><ul><li>요소의 태그 이름을 매개변수로 받고 해당하는 요소가 담긴 NodeList를 반환한다.<ul><li>HTML 문서에서는 HTMLCollection 객체를 반환한다.</li></ul></li></ul><img src=" /images/post_img/58/HTMLCollection.png">- NodeList 객체와 마찬가지로 HTMLCollection 객체의 데이터 역시 대괄호기법과 item() 메서드로 접근 가능하다.  - HTMLCollection의 `namedItem()` 메서드  - name 속성을 통해 컬렉션 데이터에 대한 참조를 얻는다.  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"myimage.jpg"</span> <span class="attr">name</span>=<span class="string">"myImage"</span>&gt;</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> images = <span class="built_in">document</span>.getElementByTagName(<span class="string">"img"</span>)</span><br><span class="line"><span class="keyword">const</span> myImage = images.namedItem(<span class="string">"myImage"</span>)</span><br><span class="line"><span class="keyword">const</span> myImage = images[<span class="string">"myImage"</span>]</span><br></pre></td></tr></table></figure><ul><li>HTMLCollection 객체에서는 대괄호 표기법에 <ul><li>숫자형 색인과 =&gt; <code>item()</code>사용</li><li>문자형 색은을 모두 사용할 수 있다. =&gt; <code>namedItme()</code> 사용</li><li>문서 전체는 아리테스크<code>*</code>를 사용한다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> allElements = <span class="built_in">document</span>.getElementByTagName(<span class="string">"*"</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="2-3-4-getElementByName"><a href="#2-3-4-getElementByName" class="headerlink" title="2-3-4. getElementByName()"></a>2-3-4. <code>getElementByName()</code></h4><p>name 속성 값이 주어진 문자열에 일치하는 요소를 반환한다.</p><ul><li>라디오 버튼에 자주 사용한다.</li><li>id 속성은 label요소와 연결하는 역할을 하며</li><li>name 속석은 값을 서버에 보낼 때 이중 단 하나만 보내는 역할을 한다. (체크된)<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Which color do you prefer?<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"red"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">id</span>=<span class="string">"colorRed"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"colorRed"</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"green"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">id</span>=<span class="string">"colorGreen"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"colorGreen"</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"white"</span> <span class="attr">name</span>=<span class="string">"color"</span> <span class="attr">id</span>=<span class="string">"colorBlue"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"colorBlue"</span>&gt;</span>Blue<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="2-4-특별한-컬렉션"><a href="#2-4-특별한-컬렉션" class="headerlink" title="2-4. 특별한 컬렉션"></a><span style="color:#26d0ce">2-4. 특별한 컬렉션</span></h3><p>document객체에는 특별하 컬렉션이 몇가지 있다.<br>각 컬렉션은 모두 HTML Collection 객체이고,<br>문서에 공통된 요소들에 빠르게 접근할 수 있도록 만들어졌다.</p><ul><li><code>document.anchors</code> : name속성이 있는 <code>&lt;a&gt;</code> 요소를 모두 갖고온다.</li><li>(폐기)<code>document.applets</code> : <code>&lt;applet&gt;</code> 요소를 모두 갖고온다. </li><li><code>document.forms</code> : <code>&lt;form&gt;</code> 요소를 모두 가져온다. (document.getElementsByTagName(“form”)과 같다.)</li><li><code>document.images</code> : <code>&lt;img&gt;</code> 요소를 모두 갖고온다.</li><li><code>document.links</code> : href속성이 있는 <code>&lt;a&gt;</code>요소를 모두 가져온다.</li></ul><hr><h3 id="2-5-DOM-준수-탐지"><a href="#2-5-DOM-준수-탐지" class="headerlink" title="2-5. DOM 준수 탐지"></a><span style="color:#26d0ce">2-5. DOM 준수 탐지</span></h3><p><code>hasFeature()</code></p><hr><h3 id="2-6-문서에-쓰기"><a href="#2-6-문서에-쓰기" class="headerlink" title="2-6. 문서에 쓰기"></a><span style="color:#26d0ce">2-6. 문서에 쓰기</span></h3><p><code>write()</code> : 넘겨 받은 텍스트를 그대로 추가하고<br><code>writeIn()</code> : 줄바꿈을 문자(<code>\n</code>)를 문자열 마지막에 추가한다.<br><code>open()</code> : 페이지 스트림을 열고<br><code>close()</code> : 페이지 스트림을 닫습니다.</p><hr><hr><h2 id="3-Element-타입"><a href="#3-Element-타입" class="headerlink" title=" 3. Element 타입"></a><a name="element"></a> <span style="color:#1a2980">3. Element 타입</span></h2><p>Element 요소의 특징</p><ul><li>nodeType은 1이다.</li><li>nodeName은 요소의 태그 이름이다.</li><li>nodeValue는 null이다.</li><li>parentNode는 Document 또는 Element이다.</li><li>자식노드로 Element나 Text, Comment, ProcessingInstruction, CDATASection, EntityReference를 가질 수 있다.</li></ul><hr><h3 id="3-1-HTML-요소"><a href="#3-1-HTML-요소" class="headerlink" title="3-1. HTML 요소"></a><span style="color:#26d0ce">3-1. HTML 요소</span></h3><p>HTMLElement 타입을 통해 표현된다.<br>HTMLElement는 Element를 직접적으로 상속한다.</p><p><code>id</code> : 요소의 고유한 식별자<br><code>title</code> : 요소에 대한 추가 정보, 일반적으로 툴팁으로 표현됨<br><code>lang</code> : 요소 콘텐츠의 언어 코드. 거의 사용되지 않는다.<br><code>dir</code> : 언어의 표기 반향. <code>ltr</code>은 왼쪽 =&gt; 오른쪽, <code>rtl</code>은 오른쪽 =&gt; 왼쪽. 거의 사용되지 않는다.<br><code>className</code> : CSS 클래스인 class 속성을 나타낸다. class가 ECMAScript의 예약어이기 때문에 className이라고 사용한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span> <span class="attr">class</span>=<span class="string">"bd"</span> <span class="attr">title</span>=<span class="string">"Body text"</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">dir</span>=<span class="string">"ltr"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src=" /images/post_img/58/HTMLElement.jpg"><hr><h3 id="3-2-속성-얻기-getAttribute"><a href="#3-2-속성-얻기-getAttribute" class="headerlink" title="3-2. 속성 얻기 (getAttribute())"></a><span style="color:#26d0ce">3-2. 속성 얻기</span> (<code>getAttribute()</code>)</h3><p><code>getAttribute(속성이름)</code> : 공식 속성 이외에 커스텀 속성을 가져오는데도 쓸 수 있다.<br><code>setAttribute(속성이름, 속성이름의 값)</code><br><code>removeAttribute(속성이름)</code></p><ul><li>속성이름은 대소문자를 구분하지 않는다.</li><li><strong>HTML5 명세에서는 커스텀 속성 앞에 전치사 <code>data-</code>를 붙여야 유효한 것으로 인정한다.</strong></li><li>getAttribute(“style”)은 객체를 반환, getAttribute(“onclick”)은 함수를 반환한다.</li><li>위의 속성과 차이점때문에 개발자들은 getAttribute()는 거의 사용하지 않고 객체 프로퍼티를 사용한다.</li><li>getAttribute() 메서드는 <strong>주로 커스텀 속성의 값을 가져올 때 사용하다.</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> four = <span class="built_in">document</span>.getElementById(<span class="string">'four'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 어트리뷰트가 존재하지 않으면</span></span><br><span class="line"><span class="keyword">if</span> (!four.hasAttribute(<span class="string">'class'</span>)) &#123;</span><br><span class="line">  <span class="comment">// four에 class 어트리뷰트를 추가하고 값으로 'white'를 설정</span></span><br><span class="line">  four.setAttribute(<span class="string">'class'</span>, <span class="string">'white'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// four에 class 어트리뷰트가 존재하면</span></span><br><span class="line">  four.className = <span class="string">'white'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 어트리뷰트의 값을 취득</span></span><br><span class="line"><span class="built_in">console</span>.log(four.getAttribute(<span class="string">'class'</span>)); <span class="comment">// white</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// class 어트리뷰트를 제거</span></span><br><span class="line">four.removeAttribute(<span class="string">'class'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 어트리뷰트의 존재를 확인</span></span><br><span class="line"><span class="built_in">console</span>.log(four.hasAttribute(<span class="string">'class'</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-3-속성-설정-setAttribute"><a href="#3-3-속성-설정-setAttribute" class="headerlink" title="3-3. 속성 설정 (setAttribute())"></a><span style="color:#26d0ce">3-3. 속성 설정</span> (<code>setAttribute()</code>)</h3><ul><li>속성 이름과 설정할 값 두가지를 매개변수로 받는다.</li><li>해당 속성이 존재하지 않으면 솏어을 새로 생성하고 값을 설정한다.</li><li>속성 이름은 소문자로 통일된다.</li></ul><hr><h3 id="3-4-속성-제거-removeAttribute"><a href="#3-4-속성-제거-removeAttribute" class="headerlink" title="3-4. 속성 제거 (removeAttribute())"></a><span style="color:#26d0ce">3-4. 속성 제거</span> (<code>removeAttribute()</code>)</h3><ul><li>속성의 값만 지우는 것이 아니라 요소에서 속성을 완전히 제거한다.</li><li>자주 쓰이지는 않는다.</li></ul><hr><h3 id="3-5-attributes-프로퍼티"><a href="#3-5-attributes-프로퍼티" class="headerlink" title="3-5. attributes 프로퍼티"></a><span style="color:#26d0ce">3-5. attributes 프로퍼티</span></h3><ul><li>Element 타입은 DOM 노드 타입 중에서 attributes 프로퍼티를 갖는 유일한 타입이다.</li><li>attributes 프로퍼티에는 NodeList처럼 살아있는 컬렉션 <code>NamedNodeMap</code>이 저장된다.</li><li>요소 속성은 모두 Attr 노드로 표현되며 각 Attr노드는 NamedNodeMap 객체에 저장된다.</li><li>attributes 프로퍼티 안의 각 노드는 <ul><li>nodeName이 속성 이름</li><li>nodeValue는 속성 값</li></ul></li><li>보통은 아래 메서드들 보다는 <code>getAttribute()</code>, <code>removeAttribute()</code>, <code>setAttribute()</code> 메서드가 더 많이 사용된다.</li></ul><p>NamedNodeMap 객체의 메서드들</p><ul><li><code>getNamedItem(name)</code> : nodeName 프로퍼티가 name인 노드를 반환한다.</li><li><code>removeNamedItem(name)</code> : nodeName 프로퍼티가 name인 노드를 목록에서 제거한다.</li><li><code>setNamedItem(node)</code> : node를 목록에 추가하고 nodeName 프로퍼티에 따라 색인한다. </li><li><code>item(pos)</code> : 인덱스가 pos인 노드를 반환한다.</li></ul><img src=" /images/post_img/58/getNamedItem.png"><p>attributes 메서드들이 유용한 경우는 요소의 속성을 대상으로 루프가 필요할 때.<br>각 속성의 이름과 값을 문자열에 추가한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputAttributes</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> pairs = <span class="keyword">new</span> <span class="built_in">Array</span>(),</span><br><span class="line">    attrName,</span><br><span class="line">    attrValue,</span><br><span class="line">    i,</span><br><span class="line">    len;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>, len = element.attributes.length.length; i &lt; len; i++) &#123;</span><br><span class="line">    attrName = element.attributes[i].nodeName;</span><br><span class="line">    attrValue = element.attributes[i].nodeValue;</span><br><span class="line">    pairs.push(attrName + <span class="string">"=\""</span> + attrValue + <span class="string">"\""</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pairs.join(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-6-요소-생성-document-createElement"><a href="#3-6-요소-생성-document-createElement" class="headerlink" title="3-6. 요소 생성 (document.createElement())"></a><span style="color:#26d0ce">3-6. 요소 생성</span> (<code>document.createElement()</code>)</h3><img src=" /images/post_img/58/createElement.png" width="400px">- createElement() 메서드는 새 요소를 생성하고 ownerDocument 프로퍼티를 설정한다.- 생성 이후에는 문서 트리의 일부가 아니므로 appendChild(), insertBefore(), replaceChild() 메서드를 통해 요소를 문서 트리에 추가해야한다.- IE7이전 버전에는 HTML을 통으로 인자로 넘길 수 있다.<hr><h3 id="3-7-요소의-자식"><a href="#3-7-요소의-자식" class="headerlink" title="3-7. 요소의 자식"></a><span style="color:#26d0ce">3-7. 요소의 자식</span></h3><ul><li><p>요소는 자식 요소나 자손 요소를 가질 수 있고, 그 숫자는 제한이 없다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;ul&gt;</code>요소 자식 노드가 7개 생긴다.</p><ul><li><code>&lt;li&gt;</code>는 3개, <code>&lt;text&gt;</code> 4개 (<code>&lt;li&gt;</code>와 텍스트 사이의 공백)</li></ul></li></ul><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/js-dom" target="_blank" rel="noopener">http://poiemaweb.com/js-dom</a></li><li><a href="http://webclub.tistory.com/339" target="_blank" rel="noopener">http://webclub.tistory.com/339</a></li></ol><h3 id="생소했던-단어"><a href="#생소했던-단어" class="headerlink" title="생소했던 단어"></a>생소했던 단어</h3><ol><li>MIME타입</li><li>Gecko</li></ol></html></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. &lt;strong&gt;오류&lt;/strong&gt;가 있다면 언제든지 댓글 남겨주세요.&lt;br&gt;넘나 많은 프로퍼티와 메서드들 @_@&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>7/ BOM (브라우저 객체 모델)</title>
    <link href="http://feel5ny.github.io/2017/12/25/JS_07_2/"/>
    <id>http://feel5ny.github.io/2017/12/25/JS_07_2/</id>
    <published>2017-12-25T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. <strong>오류</strong>가 있다면 언제든지 댓글 남겨주세요.</p></blockquote><hr><hr><p><strong>목차</strong></p><ol><li>window 객체</li></ol><p>—- 1편 &#128070;</p><ol start="2"><li><a href="#location">location 객체</a><br>2.1 쿼리스트링 확장<br>2.2 location 조작</li><li><a href="#navigator">navigator 객체</a><br>3.1 플러그인 감지<br>3.2 처리기 등록</li><li><a href="#screen">screen 객체</a></li><li><a href="#history">history 객체</a></li></ol><hr><hr><h2 id="2-location-객체"><a href="#2-location-객체" class="headerlink" title=" 2. location 객체"></a><a name="location"></a> 2. location 객체</h2><ul><li>BOM에서 가장 유용한 객체중 하나.</li><li>문서 정보와 함께 내비게이션 기능을 제공하다.</li><li>location객체는 window의 프로퍼티인 동시에 document의 프로퍼티이다.</li><li><code>window.location</code>과 <code>document.location</code>은 같은 객체를 가리킨다.  </li><li>location은 <strong>현재 문서에 대한 정보</strong>를 갖고 있으며 URL을 파싱해서 몇 가지 조각으로 분리해 각각을 프로퍼티에 저장한다.</li></ul><p>location의 프로퍼티들을 살펴보자.</p><ul><li><code>hash</code> (예: “#/0/1” <a href="http://slides.com/nayoung/deck-8#/0/1" target="_blank" rel="noopener">http://slides.com/nayoung/deck-8#/0/1</a>)<ul><li>#기호 다음에 문자가 오는 형태의 URL 해시. URL에 해시가 없다면 빈 문자열</li></ul></li><li><code>host</code> (예: “localhost:4000”)<ul><li>서버 이름과 포트번호 (있다면)</li></ul></li><li><code>hostname</code> (예: “localhost”)<ul><li>포트 번호를 제외한 서버 이름</li></ul></li><li><code>href</code> (예: “<a href="http://localhost:4000/2017/12/28/JS_07/&quot;" target="_blank" rel="noopener">http://localhost:4000/2017/12/28/JS_07/&quot;</a>)<ul><li>현재 페이지의 완전한 URL</li><li>location의 <code>toString()</code>메서드는 이 값을 반환</li></ul></li><li><code>pathname</code> (예: “/2017/12/28/JS_07/“)<ul><li>URL에 포함된 디렉터리 및 파일 이름</li></ul></li><li><code>port</code> (예: “4000”)<ul><li>URL의 요청 포트(존재한다면)이다. URL에 포트가 없으면 이 프로퍼티는 빈 문자열 반환</li></ul></li><li><code>protocol</code> (예: “http:”)<ul><li>페이지에서 사용하는 프로토콜. 일반적으로 “http:”나 “https:”중 하나이다. 프로토콜을 <code>스키마</code>라고 부르기도 한다.</li></ul></li><li><code>search</code> (예: “?q=window”)<ul><li>URL의 쿼리스트링 부분. 물음표 기호로 시작하는 문자열을 반환</li></ul></li></ul><hr><h3 id="2-1-쿼리스트링-확장"><a href="#2-1-쿼리스트링-확장" class="headerlink" title="2.1 쿼리스트링 확장"></a>2.1 쿼리스트링 확장</h3><p>URL 정보 중 쿼리스트링은 다루기 쉬운 형태로 제공되지 않는다.<br>즉, 하나씩 분리해서 제공하지 않는다는 말.<br>아래 함수를 이용하면 쿼리스트링을 파싱해서 각 매개변수를 프로퍼티로 갖는 객체를 반환한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryStringArgs</span>(<span class="params">teset</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> qs = &#123;location.search.length &gt; <span class="number">0</span> &gt; location.search.substring(<span class="number">1</span>) : <span class="string">""</span>&#125;, <span class="comment">// 쿼리스트링이 존재하면 물음표를 제외하고 qs에 할당한다.</span></span><br><span class="line">  args = &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  items = qs.length ? qs.split(<span class="string">"&amp;"</span>) : [],</span><br><span class="line">  item = <span class="literal">null</span>,</span><br><span class="line">  name = <span class="literal">null</span>,</span><br><span class="line">  value = <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// for 루프에서 사용할 변수</span></span><br><span class="line">  i = <span class="number">0</span>,</span><br><span class="line">  len = items.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 각각 매개변수를 args 객체에 할당</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    item = item[i].split(<span class="string">"="</span>);</span><br><span class="line">    name = <span class="built_in">decodeURIComponent</span>(item[<span class="number">0</span>]);</span><br><span class="line">    value = <span class="built_in">decodeURIComponent</span>(item[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(name.length) &#123;</span><br><span class="line">      args[name] = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>물음표 제거.</li><li>args를 객체 리터럴 형식으로 생성</li><li>args의 객체에 split으로 분리된 배열의 첫번째 인자가 name, 두번째 인자가 value에 들어간다.</li></ol><p><strong>결과</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://www.google.co.kr/search?newwindow=1&amp;tbm=isch&amp;q=그리드+다단&amp;cad=h</span><br><span class="line">args = &#123;newwindow: &quot;1&quot;, tbm: &quot;isch&quot;, q: &quot;그리드+다단&quot;, cad: &quot;h&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="decodeURIComponent"><a href="#decodeURIComponent" class="headerlink" title="* decodeURIComponent"></a>* <code>decodeURIComponent</code></h4><p>HTML에서 한글이 섞인 주소는 오작동할 수 있기 때문에 이스케이프 시켜야한다.<br>예 : “나영” =&gt; “%EB%82%98%EC%98%81”<br>이를 <code>인코딩</code>이라고 하며, 반대로 다시 언어화를 시켜주는 <code>디코딩</code>이 있습니다.<br><code>decodeURIComponent</code>는 <code>http://</code> 부터 모두 디코딩을 해줍니다.</p><hr><h3 id="2-2-location-조작"><a href="#2-2-location-조작" class="headerlink" title="2.2 location 조작"></a>2.2 location 조작</h3><ul><li>location.assign(“<a href="https://feel5ny.github.io/&quot;">https://feel5ny.github.io/&quot;</a>)<ul><li>메서드</li><li>해당 URL로 이동한다.</li></ul></li><li>location.href = “”<ul><li>현재 위치해있는 URL 뒤에 추가된다.</li></ul></li><li>location.hash = “”<ul><li><code>#</code>와 함께 인자가 URL 뒤에 추가된다.</li><li>hash 프로퍼티를 바꿀 때는 새 URL로 페이지를 다시 읽지 않는다.</li></ul></li><li>location.search = “q=test”<ul><li>현재 주소값에 search가 있는 경우, <code>q=</code> 뒤에 검색 단어를 추가한다.</li></ul></li><li>location.hostname = “<a href="http://www.naver.com&quot;" target="_blank" rel="noopener">www.naver.com&quot;</a><ul><li>현재 주소에서 앞부분 main 주소값이 바뀐다.</li></ul></li><li>location.pathname<ul><li>첫번째 path가 바뀐다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://developer.mozilla.org/ko/?q=nayn</span></span><br><span class="line">location.pathname = <span class="string">"en-Us"</span></span><br><span class="line"><span class="comment">// https://developer.mozilla.org/en-US/?q=nayn</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>위의 프로퍼티들은 브라우저 히스토리 스택에 쌓이기 때문에 뒤로가기 버튼이 적용된다.<br><strong>replace는 그렇지 않다.</strong></p><ul><li>location.replace(“<a href="http://www.naver.com&quot;" target="_blank" rel="noopener">www.naver.com&quot;</a>)<ul><li>히스토리 스택에 쌓이지 않는다.</li></ul></li><li>location.reload(true)<ul><li>현재 페이지를 다시 불러온다.</li><li><code>매개변수 없이 호출하면</code> 페이지를 가능한 한 가장 효과적인 방법으로 다시 읽는다.<br>즉, 페이지가 바뀌지 않았다면 <strong>브라우저 캐시</strong>에서 읽어온다.</li><li><code>매개변수로 true를 넘기면</code> 서버에서 읽어오도록 강제하게된다.</li><li>reload() 호출 이후의 코드는 네트워크 지연이나 시스템 자원같은 요인에 따라 실행될 수도 있고 아닐 수도 있기 때문에 <strong>코드 마지막에 둔다.</strong></li></ul></li></ul><hr><hr><h2 id="3-navigator-객체"><a href="#3-navigator-객체" class="headerlink" title=" 3. navigator 객체"></a><a name="navigator"></a> 3. navigator 객체</h2><p>클라이언트에서 브라우저를 구별하는 방법의 표준으로 쓰였다.<br>navigator 객체의 프로퍼티는 일반적으로 웹 페이지를 실행 중인 브라우저 타입을 판단하는 데 사용한다.<br>( *은 크롬 )</p><table><thead><tr><th align="left">프로퍼티/메서드</th><th align="left">설명</th><th align="left">IE</th><th align="center">파이어폭스</th><th align="center">사파리/크롬</th><th align="center">오페라</th></tr></thead><tbody><tr><td align="left">*<code>appCodeName</code></td><td align="left">브라우저 이름이다. 모질라 브라우저가 아니어도 일반적으로 “Mozila”</td><td align="left">3.0+</td><td align="center">1.0+</td><td align="center">1.0+</td><td align="center">7.0+</td></tr><tr><td align="left"><code>appMinorVersion</code></td><td align="left">추가적인 버전 정보이다.</td><td align="left">4.0+</td><td align="center">-</td><td align="center">-</td><td align="center">9.5+</td></tr><tr><td align="left">*<code>appName</code></td><td align="left">완전한 브라우저 이름이다.</td><td align="left">3.0+</td><td align="center">1.0+</td><td align="center">1.0+</td><td align="center">7.0+</td></tr><tr><td align="left">*<code>appVersion</code></td><td align="left">브라우저 버전입니다. 일반적으로 브라우저 실제 버전과는 다르다.</td><td align="left">3.0+</td><td align="center">1.0+</td><td align="center">1.0+</td><td align="center">7.0+</td></tr><tr><td align="left"><code>buildID</code></td><td align="left">브라우저의 빌드 번호이다.</td><td align="left">-</td><td align="center">2.0+</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="left">*<code>cookieEnabled</code></td><td align="left">쿠키가 활성화되어 있는지 나타낸다.</td><td align="left">4.0+</td><td align="center">1.0+</td><td align="center">1.0+</td><td align="center">7.0+</td></tr><tr><td align="left"><code>cpuClass</code></td><td align="left">클라이언트 컴퓨터의 CPU 타입이다. “x86”, “68K”, “Alpha”, “PPC”, “Ohter”가 있습니다.</td><td align="left">4.0+</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="left">*<code>javaEnabled</code></td><td align="left">브라우저에 자바가 활성화되어 있는지 나타낸다.</td><td align="left">4.0+</td><td align="center">1.0+</td><td align="center">1.0+</td><td align="center">7.0+</td></tr><tr><td align="left">*<code>language</code></td><td align="left">브라우저의 우선적 언어(한국어, 영어..)를 나타낸다.</td><td align="left">-</td><td align="center">1.0+</td><td align="center">1.0+</td><td align="center">7.0+</td></tr><tr><td align="left">*<code>mimeTypes</code></td><td align="left">브라우저에 등록된 <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener">마임 타입</a>을 나열한 배열이다.</td><td align="left">4.0+</td><td align="center">1.0+</td><td align="center">1.0+</td><td align="center">7.0+</td></tr><tr><td align="left"><code>onLine</code></td><td align="left">브라우저가 인터넷에 연결되어 있는지 나타낸다.</td><td align="left">4.0+</td><td align="center">1.0+</td><td align="center">-</td><td align="center">9.5+</td></tr><tr><td align="left"><code>opsProfile</code></td><td align="left">브라우저가 인터넷에 연결되어 있는지 나타낸다.</td><td align="left">4.0+</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="left"><code>oscpu</code></td><td align="left">거의 사용하지 않으며 문서도 없다.</td><td align="left">-</td><td align="center">1.0+</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="left">*<code>platform</code></td><td align="left">브라우저가 실행중인 운영체제와 CPU를 타나낸다.</td><td align="left">4.0+</td><td align="center">1.0+</td><td align="center">1.0+</td><td align="center">7.0+</td></tr><tr><td align="left">*<code>plugins</code></td><td align="left">브라우저에 설치된 플러그인을 나열한 배열이다. IE에서는 페이지의 <embed>요소를 나열한 배열이다.</td><td align="left">4.0+</td><td align="center">1.0+</td><td align="center">1.0+</td><td align="center">7.0+</td></tr><tr><td align="left"><code>preference()</code></td><td align="left">사용자 선호사항을 설정한다. 특권모드에서만 접근가능</td><td align="left">-</td><td align="center">1.5+</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="left">*<code>product</code></td><td align="left">브라우저 이름. 일반적으로 <a href="https://ko.wikipedia.org/wiki/%EA%B2%8C%EC%BD%94_(%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83_%EC%97%94%EC%A7%84)" target="_blank" rel="noopener">“Gecko”</a>이다.</td><td align="left">-</td><td align="center">1.0+</td><td align="center">1.0+</td><td align="center">-</td></tr><tr><td align="left">*<code>productSub</code></td><td align="left">브라우저에 대한 추가정보. 일반적으로 게코 버전 정보.</td><td align="left">-</td><td align="center">1.0+</td><td align="center">1.0+</td><td align="center">-</td></tr><tr><td align="left"><code>registerContentHandler()</code></td><td align="left">웹사이트를 특정 마임 타입 처리기로 등록한다.</td><td align="left">-</td><td align="center">2.0+</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="left"><code>registerProtocolHandler()</code></td><td align="left">웹사이트를 특정 프로토콜 처리기로 등록한다.</td><td align="left">-</td><td align="center">2.0+</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="left"><code>securityPolicy</code></td><td align="left">보안 정책 이름이지만 폐기되었다.</td><td align="left">-</td><td align="center">1.0+</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="left"><code>systemLanguage</code></td><td align="left">운영체제의 언어이다.</td><td align="left">4.0+</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="left"><code>taintEnabled()</code></td><td align="left">변수 테인트가 활성화 되어 잇는지 나타내지만 폐기된 기능.</td><td align="left">4.0+</td><td align="center">1.0+</td><td align="center">-</td><td align="center">7.0+</td></tr><tr><td align="left">*<code>userAgent</code></td><td align="left">브라우저 문자열이다.</td><td align="left">3.0+</td><td align="center">1.0+</td><td align="center">1.0+</td><td align="center">7.0+</td></tr><tr><td align="left"><code>userLanguage</code></td><td align="left">운영체제의 기본 언어이다.</td><td align="left">4.0+</td><td align="center">-</td><td align="center">-</td><td align="center">7.0+</td></tr><tr><td align="left"><code>userProfile</code></td><td align="left">사용자 프로필 정보에 접근할 때 사용하는 객체</td><td align="left">4.0+</td><td align="center">-</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="left">*<code>vendor</code></td><td align="left">브라우저 제조사 이름이다.</td><td align="left">-</td><td align="center">1.0+</td><td align="center">1.0+</td><td align="center">-</td></tr><tr><td align="left">*<code>vendorSub</code></td><td align="left">제조사에 대한 추가 정보이다.</td><td align="left">-</td><td align="center">1.0+</td><td align="center">1.0+</td><td align="center">-</td></tr></tbody></table><hr><h3 id="3-1-플러그인-감지"><a href="#3-1-플러그인-감지" class="headerlink" title="3.1 플러그인 감지"></a>3.1 플러그인 감지</h3><p>현재 크롬의 plugins</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="number">0</span>: MimeType, </span><br><span class="line">    application/x-google-chrome-pdf: MimeType, </span><br><span class="line">    name: <span class="string">"Chrome PDF Plugin"</span>,  <span class="comment">// 플러그인 이름</span></span><br><span class="line">    filename: <span class="string">"internal-pdf-viewer"</span>,  <span class="comment">// 플러그인의 파일 이름</span></span><br><span class="line">    description: <span class="string">"Portable Document Format"</span>, <span class="comment">// 플러그인 설명</span></span><br><span class="line">    length: <span class="number">1</span> <span class="comment">// 플러그인이 처리하는 마임 타입 숫자</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;<span class="number">0</span>: MimeType, application/pdf: MimeType, <span class="attr">name</span>: <span class="string">"Chrome PDF Viewer"</span>, <span class="attr">filename</span>: <span class="string">"mhjfbmdgcfjbbpaeojofohoefgiehjai"</span>, <span class="attr">description</span>: <span class="string">""</span>, <span class="attr">length</span>: <span class="number">1</span>&#125;,</span><br><span class="line">  &#123;<span class="number">0</span>: MimeType, <span class="number">1</span>: MimeType, application/x-nacl: MimeType, application/x-pnacl: MimeType, <span class="attr">name</span>: <span class="string">"Native Client"</span>, <span class="attr">filename</span>: <span class="string">"internal-nacl-plugin"</span>, <span class="attr">description</span>: <span class="string">""</span>, …&#125;,</span><br><span class="line">  &#123;<span class="number">0</span>: MimeType, <span class="number">1</span>: MimeType, application/x-shockwave-flash: MimeType, application/futuresplash: MimeType, <span class="attr">name</span>: <span class="string">"Shockwave Flash"</span>, <span class="attr">filename</span>: <span class="string">"PepperFlashPlayer.plugin"</span>, <span class="attr">description</span>: <span class="string">"Shockwave Flash 28.0 r0"</span>, …&#125;,</span><br><span class="line">  &#123;<span class="number">0</span>: MimeType, application/x-ppapi-widevine-cdm: MimeType, <span class="attr">name</span>: <span class="string">"Widevine Content Decryption Module"</span>, <span class="attr">filename</span>: <span class="string">"widevinecdmadapter.plugin"</span>, <span class="attr">description</span>: <span class="string">"Enables Widevine licenses for playback of HTML audio/video content. (version: 1.4.8.1030)"</span>, <span class="attr">length</span>: <span class="number">1</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><h3 id="3-2-처리기-등록"><a href="#3-2-처리기-등록" class="headerlink" title="3.2 처리기 등록"></a>3.2 처리기 등록</h3><hr><hr><h2 id="4-screen-객체"><a href="#4-screen-객체" class="headerlink" title=" 4. screen 객체"></a><a name="screen"></a> 4. screen 객체</h2><p>window의 프로퍼티이다.<br>픽셀 너비와 높이 등 클라이언트 화면에 대한 정보가 들어있다.</p><ul><li>개인적인 생각 : UI나 인터렉션부분에서 많이 적용될 듯 하다.</li></ul><p>(*은 크롬)</p><table><thead><tr><th align="left">프로퍼티/메서드</th><th align="left">설명</th><th align="left">IE</th><th align="center">파이어폭스</th><th align="center">사파리/크롬</th><th align="center">오페라</th></tr></thead><tbody><tr><td align="left">*<code>availHeight</code></td><td align="left">시스템 요소를 제외한 화면의 픽셀 높이이다.</td><td align="left">○</td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left">*<code>availLeft</code></td><td align="left">시스템 요소가 아닌 영역 중 왼쪽에서 첫 번째 픽셀이다. (읽기전용)</td><td align="left"></td><td align="center">○</td><td align="center">○</td><td align="center"></td></tr><tr><td align="left">*<code>availTop</code></td><td align="left">시스템 요소가 아닌 영역 중 위에서 첫 번째 픽셀이다. (읽기전용)</td><td align="left"></td><td align="center">○</td><td align="center">○</td><td align="center"></td></tr><tr><td align="left">*<code>availWidth</code></td><td align="left">시스템 요소를 제외한 화면의 픽셀 너비이다. (읽기전용)</td><td align="left">○</td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left"><code>bufferDepth</code></td><td align="left">시스템 요소를 제외한 화면의 픽셀 너비이다. (읽기전용)</td><td align="left">○</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="left">*<code>colorDepth</code></td><td align="left">색깔 비트 숫자이며 대부분 32이다. (읽기전용)</td><td align="left">○</td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left"><code>deviceXDPI</code></td><td align="left">화면의 실제 가로 DPI이다. (읽기전용)</td><td align="left">○</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="left"><code>deviceYDPI</code></td><td align="left">화면의 실제 세로 DPI이다. (읽기전용)</td><td align="left">○</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="left"><code>fontSmoothingEnabled</code></td><td align="left">폰트를 부드럽게 처리하는 기술이 활성화되어있는지 나타낸다. (읽기전용)</td><td align="left">○</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="left">*<code>height</code></td><td align="left">화면의 픽셀 높이이다.</td><td align="left">○</td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left"><code>left</code></td><td align="left">현재 화면의 왼쪽 모서리로부터의 픽셀 거리이다.</td><td align="left"></td><td align="center">○</td><td align="center"></td><td align="center"></td></tr><tr><td align="left"><code>logicalXDPI</code></td><td align="left">화면의 논리적 가로 DPI이다. (읽기전용)</td><td align="left">○</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="left"><code>logicalYDPI</code></td><td align="left">화면의 논리적 세로 DPI이다. (읽기전용)</td><td align="left">○</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="left">*<code>pixelDepth</code></td><td align="left">화면의 픽셀당 비트 숫자이다. (읽기전용)</td><td align="left"></td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr><tr><td align="left"><code>top</code></td><td align="left">현재 화면의 위쪽 모서리로부터의 픽셀 거리이다.</td><td align="left"></td><td align="center">○</td><td align="center"></td><td align="center"></td></tr><tr><td align="left"><code>updateInterval</code></td><td align="left">화면을 몇 밀리초마다 업데이트하는지 나타낸다.</td><td align="left">○</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="left">*<code>width</code></td><td align="left">화면의 픽셀너비이다.</td><td align="left">○</td><td align="center">○</td><td align="center">○</td><td align="center">○</td></tr></tbody></table><hr><hr><h2 id="5-history-객체"><a href="#5-history-객체" class="headerlink" title=" 5. history 객체"></a><a name="history"></a> 5. history 객체</h2><ul><li>window의 프로퍼티.</li><li>창을 첫 번째 연 이후 사용자의 내비게이션 히스토리를 보관한다.</li><li>브라우저 창, 탭, 프레임은 각각 자신의 window 객체에 속한 history객체를 가진다.</li><li>보안을 이유로 사용자가 방문했던 URL은 알 수 없다. <img src="/images/post_img/57/01.png">> 알 수 없는 url</li></ul><h3 id="메서드"><a href="#메서드" class="headerlink" title="메서드"></a>메서드</h3><h4 id="1-go"><a href="#1-go" class="headerlink" title="1. go()"></a>1. go()</h4><p><code>history.go(-1)</code> : 한페이지 뒤로<br><code>history.go(1)</code> : 한페이지 앞으로<br><code>history.go(2)</code> : 두페이지 앞으로</p><h4 id="2-back"><a href="#2-back" class="headerlink" title="2. back()"></a>2. back()</h4><p>한페이지 뒤로</p><h4 id="3-forward"><a href="#3-forward" class="headerlink" title="3. forward()"></a>3. forward()</h4><p>한페이지 앞으로</p><h3 id="프로퍼티"><a href="#프로퍼티" class="headerlink" title="프로퍼티"></a>프로퍼티</h3><p><code>length</code> : history 스택에 기록이 얼마나 많이 있는지 나타낸다. 0일경우 사용자가 페이지를 처음 열었을 때인 것이다.</p><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://meetup.toast.com/posts/89" target="_blank" rel="noopener">http://meetup.toast.com/posts/89</a></li></ol><h3 id="생소했던-단어"><a href="#생소했던-단어" class="headerlink" title="생소했던 단어"></a>생소했던 단어</h3><ol><li>MIME타입</li><li>Gecko</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. &lt;strong&gt;오류&lt;/strong&gt;가 있다면 언제든지 댓글 남겨주세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;목
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>7/ BOM (브라우저 객체 모델)</title>
    <link href="http://feel5ny.github.io/2017/12/24/JS_07_1/"/>
    <id>http://feel5ny.github.io/2017/12/24/JS_07_1/</id>
    <published>2017-12-24T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. <strong>오류</strong>가 있다면 언제든지 댓글 남겨주세요.</p></blockquote><hr><hr><p><strong>목차</strong></p><ol><li><a href="#window">window 객체</a><br>1.1 <a href="#global">전역 스코프</a> : window.전역변수명, window.전역함수명<br>1.2 <a href="#frame">창 사이의 관계와 프레임</a><br>1.3 <a href="#screen-position">창의 위치</a> : screenLeft, screenTop<br>1.4 <a href="#screen-size">창의 크기</a> : innerWidth, outerWidth<br>1.5 <a href="#navigation&open">내비게이션과 열기</a> : window.open, window.close<br>1.6 <a href="#interval&timeout">인터벌과 타임아웃</a> : setInterval, setTimeout<br>1.7 <a href="#system-popup">시스템 대화상자</a> : alert, prompt, confirm, print, find</li></ol><p>—- 2편 &#128071;</p><ol start="2"><li>location 객체</li><li>navigator 객체</li><li>screen 객체</li><li>history 객체</li></ol><hr><hr><h2 id="1-window-객체"><a href="#1-window-객체" class="headerlink" title=" 1. window 객체"></a><a name="window"></a> 1. window 객체</h2><p>BOM은 웹 페이지 콘텐츠와 무관하게 <code>브라우저 기능을 노출하는 객체</code>이다.</p><img src="/images/post_img/56/BOM-01.png"><p>브라우저의 인스턴스 =&gt; window 객체<br>웹페이지에서 정의한 모든 객체, 변수, 함수에서는<br><strong>window가 Global 객체(= 표준내장객체) 구실을 하고,</strong><br>window에 정의된 parseInt()등의 메서드를 이용한다. <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener">+</a></p><blockquote><p>global objects와 global object는 다르다.<br>global objects는 표중내장객체, global object는 전역객체이다.(실행 컨택스트에서 GO)</p></blockquote><hr><h3 id="1-1-전역-스코프"><a href="#1-1-전역-스코프" class="headerlink" title=" 1.1 전역 스코프"></a><a name="global"></a> 1.1 전역 스코프</h3><p>전역에서 선언한 <code>변수</code>와 <code>함수</code>는 모두<br><strong>window 객체의 프로퍼티 및 메서드</strong>가 된다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">29</span>;</span><br><span class="line"><span class="keyword">const</span> sayAge = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.age); <span class="comment">// 전역을 가리키는 this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(<span class="built_in">window</span>.age);  <span class="comment">// 29</span></span><br><span class="line">sayAge();           <span class="comment">// 29</span></span><br><span class="line"><span class="built_in">window</span>.sayAge();    <span class="comment">// 29</span></span><br></pre></td></tr></table></figure><h4 id="전역변수와-window-프로퍼티로-직접-정의하는-것의-차이"><a href="#전역변수와-window-프로퍼티로-직접-정의하는-것의-차이" class="headerlink" title="전역변수와 window 프로퍼티로 직접 정의하는 것의 차이."></a>전역변수와 window 프로퍼티로 직접 정의하는 것의 차이.</h4><ul><li>전역 변수는 <code>delete</code>연산자로 제거할 수 없고, window 프로퍼티는 가능하다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">29</span>;</span><br><span class="line"><span class="built_in">window</span>.color = <span class="string">"red"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">window</span>.age;    <span class="comment">// 제거 안됨</span></span><br><span class="line"><span class="keyword">delete</span> <span class="built_in">window</span>.color;  <span class="comment">// 제거 됨</span></span><br><span class="line"></span><br><span class="line">alert(<span class="built_in">window</span>.color)</span><br></pre></td></tr></table></figure><h4 id="선언하지-않았을-가능성이-있는-변수의-존재-여부는-window-객체를-통해-확인-가능"><a href="#선언하지-않았을-가능성이-있는-변수의-존재-여부는-window-객체를-통해-확인-가능" class="headerlink" title="선언하지 않았을 가능성이 있는 변수의 존재 여부는 window 객체를 통해 확인 가능"></a>선언하지 않았을 가능성이 있는 변수의 존재 여부는 window 객체를 통해 확인 가능</h4><img src="/images/post_img/56/BOM-02.png"><hr><h3 id="1-2-창-사이의-관계와-프레임"><a href="#1-2-창-사이의-관계와-프레임" class="headerlink" title=" 1.2 창 사이의 관계와 프레임"></a><a name="frame"></a> 1.2 창 사이의 관계와 프레임</h3><p>페이지에 프레임이 들어 있으면 각 프레임은 독자적인 window객체를 가지며, frames 컬렉션에 저장된다.</p><hr><h3 id="1-3-창의-위치"><a href="#1-3-창의-위치" class="headerlink" title=" 1.3 창의 위치"></a><a name="screen-position"></a> 1.3 창의 위치</h3><p><code>screenLeft</code>  : 디바이스 화면 왼쪽에서 브라우저 창까지 가로 거리<br><code>screenTop</code> : 디바이스 화면 위쪽에서 브라우저 창까지 세로 거리<br><code>moveBy(가로이동 픽셀수, 세로이동 픽셀수)</code> : (왼-&gt;오 / 위-&gt; 아래)<br><code>moveTo(x좌표, y좌표)</code></p><ul><li><code>moveBy</code> <code>moveTo</code> 크롬, 오페라, IE7이상은 안됨</li></ul><hr><h3 id="1-4-창의-크기"><a href="#1-4-창의-크기" class="headerlink" title=" 1.4 창의 크기"></a><a name="screen-size"></a> 1.4 창의 크기</h3><p>크기측정</p><ul><li><code>innerWidth</code> : 브라우저 창 내부의 페이지 뷰포트 크기 (모바일도 가능)</li><li><code>innerHeight</code> : 브라우저 창 내부의 페이지 뷰포트 크기 (모바일도 가능)</li><li><code>outerWidth</code> : 브라우저 창의 크기</li><li><code>outerHeight</code> : 브라우저 창의 크기</li></ul><p>크기조절 (IE6이상 크롬 오페라에서는 금지)</p><ul><li><code>resizeTo(최종너비, 최종높이)</code></li><li><code>resizeBy(너비 얼만큼 바꿀지, 높이 얼만큼 바꿀지)</code></li></ul><hr><h3 id="1-5-내비게이션과-열기"><a href="#1-5-내비게이션과-열기" class="headerlink" title=" 1.5 내비게이션과 열기"></a><a name="navigation&open"></a> 1.5 내비게이션과 열기</h3><p><code>window.open()</code> : URL로 이동한 후 브라우저 창을 새로 연다.</p><ul><li>이동할 URL, 대상 창, 기능을 나타내는 <code>string</code></li><li>마지막으로 새 페이지가 브라우저 히스토리에서 현재 페이지를 대체할지 나타내는 <code>boolean</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">"http://feel5ny.github.io"</span>, <span class="string">"topFrame"</span>)</span><br><span class="line"><span class="comment">// 두번째 인자는 a태그에서 target과 같다.</span></span><br></pre></td></tr></table></figure></li></ul><p>두번째 인자에는 <code>_self</code>,<code>_parent</code>,<code>_top</code>,<code>_blank</code>사용가능</p><h4 id="팝업창"><a href="#팝업창" class="headerlink" title="팝업창"></a>팝업창</h4><blockquote><p>소셜 인증시 팝업창이 open되고, close될 때 사용된다.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.open(<span class="string">"http://feel5ny.github.io"</span>, <span class="string">"topFrame"</span>, </span><br><span class="line"><span class="string">"height=400, width=400, top=10, left=10, resizable=yes"</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">옵션</th><th align="left">값</th><th align="left">설명</th></tr></thead><tbody><tr><td align="left"><code>fullscreen</code></td><td align="left">“yes” or “no”</td><td align="left">브라우저 창을 최대 크기로 생성할지 나타낸다.</td></tr><tr><td align="left"><code>height</code></td><td align="left">숫자</td><td align="left">새 창의 높이이다. 최소값은 100</td></tr><tr><td align="left"><code>left</code></td><td align="left">숫자</td><td align="left">새 창의 x좌표이다. 음수는 쓸 수 없다.</td></tr><tr><td align="left"><code>location</code></td><td align="left">“yes” or “no”</td><td align="left">주소 표시줄을 표시할지 나타낸다. 기본 값은 브라우저에 따라 다르다. “no”로 지정하면 브라우저에 따라 주소 표시줄을 숨기거나 비활성화한다.</td></tr><tr><td align="left"><code>menubar</code></td><td align="left">“yes” or “no”</td><td align="left">메뉴 바를 표시할지 나타낸다. 기본값은 “no”</td></tr><tr><td align="left"><code>resizable</code></td><td align="left">“yes” or “no”</td><td align="left">새 창의 테두리를 드래그해서 크기를 조절할 수 있는지 나타냅니다. 기본값은 “no”</td></tr><tr><td align="left"><code>scrollbars</code></td><td align="left">“yes” or “no”</td><td align="left">새 창 콘텐츠가 뷰표트를 넘칠 때 스크롤을 허용할지 나타낸다. 기본값은 “no”</td></tr><tr><td align="left"><code>status</code></td><td align="left">“yes” or “no”</td><td align="left">상태 바를 표시할지 나타낸다. 기본 값은 브라우저에 따라 다르다.</td></tr><tr><td align="left"><code>toolbar</code></td><td align="left">“yes” or “no”</td><td align="left">툴바를 표시할지 나타낸다. 기본값은 “no”</td></tr><tr><td align="left"><code>top</code></td><td align="left">숫자</td><td align="left">새 창의 y좌표. 음수는 쓸 수 없다.</td></tr><tr><td align="left"><code>width</code></td><td align="left">숫자</td><td align="left">새 창의 너비. 최솟값은 100</td></tr></tbody></table><h5 id="window-open"><a href="#window-open" class="headerlink" title="window.open()"></a><code>window.open()</code></h5><p>메서드는 새로 생성한 창에 대한 참조를 반환한다.<br>기본적으로 주요 브라우저 창의 위치나 크기를 스크립트에서 바꿀 수 없게 금지되지만, .open으로 생성한 창은 가능하다. (크롬은 CORS에 걸림)<br><code>window.close()</code>는 <code>window.open()</code>으로 생성된 창에서만 적용가능하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wroxWin = <span class="built_in">window</span>.open(<span class="string">"http://feel5ny.github.io"</span>, <span class="string">"topFrame"</span>, </span><br><span class="line"><span class="string">"height=400, width=400, top=10, left=10, resizable=yes"</span>)</span><br><span class="line"></span><br><span class="line">wroxWin.resizeTo(<span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">wroxWin.moveTo(<span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><p><code>wroxWin</code>은 <code>opener</code>프로퍼티를 갖고 있는데, window.open()을 호출한 창이나 프레임을 가리키는 포인터이다.<br>그 역은 존재하지 않는다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> wroxWin = <span class="built_in">window</span>.open(<span class="string">"http://feel5ny.github.io"</span>, <span class="string">"topFrame"</span>, </span><br><span class="line"><span class="string">"height=400, width=400, top=10, left=10, resizable=yes"</span>)</span><br><span class="line"></span><br><span class="line">alert(wroxWin.opener === <span class="built_in">window</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h3 id="1-6-인터벌과-타임아웃"><a href="#1-6-인터벌과-타임아웃" class="headerlink" title=" 1.6 인터벌과 타임아웃"></a><a name="interval&timeout"></a> 1.6 인터벌과 타임아웃</h3><p>window에는 코드가 특정 시간에 실행되게끔 해주는 메서드가 있다.<br><code>setTimeout(실해코드, 시간(밀리초))</code> : 일정 시간 뒤에 코드를 실행<br><code>setInterval()</code> : 일정 시간마다 코드를 반복 실행</p><h4 id="128336-setTimeout"><a href="#128336-setTimeout" class="headerlink" title="&#128336; setTimeout()"></a>&#128336; <code>setTimeout()</code></h4><p>자바스크립트는 큐를 이용해 각 코드의 실행을 관리한다.</p><blockquote><p>큐?  Task 큐와 이벤트 루프이다. Task 큐는 말 그대로 콜백 함수들이 대기하는 큐(FIFO) 형태의 배열이라 할 수 있고, 이벤트 루프는 호출 스택이 비워질 때마다 큐에서 콜백 함수를 꺼내와서 실행하는 역할을 해 준다.</p></blockquote><p><code>clearTimeout(setTimeout이 할당된 변수이름. 혹은 id값)</code> : 타임아웃을 취소할 때 사용한다.</p><h4 id="128171-setInterval"><a href="#128171-setInterval" class="headerlink" title="&#128171; setInterval()"></a>&#128171; <code>setInterval()</code></h4><p>페이지가 종료되거나 인터벌을 취소하기 전에는 일정 시간마다 코드를 반복 실행한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">'test'</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p><code>clearInterval()</code> : 인터벌을 취소한다.<br>인터벌을 취소하지 않으면 페이지가 떠 있는 동안은 계속 실행되므로 <strong>인터벌 취소는 timeout 취소보다 중요</strong></p><hr><h3 id="1-7-시스템-대화상자"><a href="#1-7-시스템-대화상자" class="headerlink" title=" 1.7 시스템 대화상자"></a><a name="system-popup"></a> 1.7 시스템 대화상자</h3><p><code>alert()</code> : Ok<br><code>confirm()</code> : Ok / cancel<br><code>prompt()</code> : input / Ok / cancel</p><ul><li>대화상자의 외관은 css가 아니라 운영체제/브라우저 설정에 따라 다르다.</li><li>동기적이고 modal 성질이 있어서 대화상자가 떠 있을 때는 코드 실행이 중지된다.</li></ul><p><code>window.print()</code> : 인쇄 대화상자 표시<br><code>window.find(&#39;찾을 단어&#39;)</code> : 찾기 대화상자 표시</p><hr><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://meetup.toast.com/posts/89" target="_blank" rel="noopener">http://meetup.toast.com/posts/89</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. &lt;strong&gt;오류&lt;/strong&gt;가 있다면 언제든지 댓글 남겨주세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;목
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>componentDidUpdate</title>
    <link href="http://feel5ny.github.io/2017/12/23/log_002/"/>
    <id>http://feel5ny.github.io/2017/12/23/log_002/</id>
    <published>2017-12-23T09:23:55.000Z</published>
    <updated>2019-02-03T15:17:37.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="componentDidUpdate-prevProps-prevState"><a href="#componentDidUpdate-prevProps-prevState" class="headerlink" title="componentDidUpdate(prevProps, prevState)"></a><code>componentDidUpdate(prevProps, prevState)</code></h2><p><strong>&lt; Props Update &gt;</strong></p><p>props가 업데이트될 때의 과정입니다. 업데이트되기 전에 업데이트가 발생하였음을 감지하고, componentWillReceiveProps 메소드가 호출됩니다. 그 후 shouldComponentUpdate, componentWillUpdate가 차례대로 호출된 후, 업데이트가 완료(render)되면 componentDidUpdate가 됩니다.<br><code>이 메소드들은 첫 번째 인자로 바뀔 props에 대한 정보를 가지고 있습니다.</code> componentDidUpdate만 이미 업데이트되었기 때문에 바뀌기 이전의 props에 대한 정보를 가지고 있습니다.</p><img src="/images/post_img/55/01.png"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate(prevProps, prevState) &#123; <span class="comment">// 이전 props, state에 대한 정보</span></span><br><span class="line">    <span class="keyword">if</span> (prevProps.todos.length !== <span class="keyword">this</span>.props.todos.length) &#123;</span><br><span class="line">      <span class="comment">// 이전 todo리스트의 길이가 달라지면(추가,삭제) 상태변화</span></span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        dataSource: <span class="keyword">this</span>.state.ds.cloneWithRowsAndSections(</span><br><span class="line">          _.groupBy(<span class="keyword">this</span>.props.todos, <span class="string">'createdAt'</span>),</span><br><span class="line">        ),</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (prevState.isTodoList !== <span class="keyword">this</span>.state.isTodoList) &#123;</span><br><span class="line">      <span class="comment">// 탭 이동</span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>.state.isTodoList) &#123; <span class="comment">// 완료된 탭일 때,</span></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; <span class="comment">// 완료된 탭만 필터된 datasource</span></span><br><span class="line">          dataSource: <span class="keyword">this</span>.state.ds.cloneWithRowsAndSections(</span><br><span class="line">            _.groupBy(_.filter(<span class="keyword">this</span>.props.todos, <span class="function">(<span class="params">todo</span>) =&gt;</span> todo.isDone), <span class="string">'createdAt'</span>),</span><br><span class="line">          ),</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          dataSource: <span class="keyword">this</span>.state.ds.cloneWithRowsAndSections(</span><br><span class="line">            _.groupBy(<span class="keyword">this</span>.props.todos, <span class="string">'createdAt'</span>),</span><br><span class="line">          ),</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>참고링크<br><a href="https://www.zerocho.com/category/React/post/579b5ec26958781500ed9955" target="_blank" rel="noopener">https://www.zerocho.com/category/React/post/579b5ec26958781500ed9955</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;componentDidUpdate-prevProps-prevState&quot;&gt;&lt;a href=&quot;#componentDidUpdate-prevProps-prevState&quot; class=&quot;headerlink&quot; title=&quot;componentDidUpda
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="0_DevLog 👻" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/0-DevLog-%F0%9F%91%BB/"/>
    
    
      <category term="react" scheme="http://feel5ny.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>TCP / UDP</title>
    <link href="http://feel5ny.github.io/2017/12/21/CS_04/"/>
    <id>http://feel5ny.github.io/2017/12/21/CS_04/</id>
    <published>2017-12-21T09:23:55.000Z</published>
    <updated>2019-01-03T15:33:29.067Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/post_img/65/IP.png"><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>TCP 소켓은 신뢰할 수 있는 프로토콜이다. 두 머신에서 데이터를 주고 받을 때, 파일에 쓰는 것처럼 한 쪽에서 쓰고 다른 쪽에서 읽을 수 있다.<br>연결은 신뢰할 수 있고 순차적이다.<br>즉, 한 쪽에서 보낸 데이터는 다른 쪽에서 안전하게 받을 수 있다.<br>TCP 소켓도 데이터 스트림이다. 데이터를 잘라 패킷에 담아 네트워크로 보낸다.</p><p>TCP가 단순할 수 있었던 기반에는 IP가 있다.<br>IP에는 커넥션과 관련된 컨셉은 없다. 대신 패킷이 한 컴퓨터에서 다른 컴퓨터로 전달되는 것과 관련이 있다.</p><p>교실에서 손편지를 써서 건너건너 친구에게 전달하는 걸 떠올려보자.<br>어떻게든 친구에게 편지가 도착하긴 하겠지만, 여러 사람을 거쳐 전달될 거다.<br>편지가 친구에게 정확하게 도착할 거란 보장은 없다.<br><strong>단지, 잘 도착하기만 바라고 보낼 뿐이다.</strong><br>편지가 잘 도착했는지 알 수 있는 방법이 없다.<br>물론, 실제론, 어떤 컴퓨터도 가장 빠르게 도달할 수 있는 방법을 알지 못하기 때문에 이보다 더 복잡하기도 하다.<br>가끔은 패킷을 복사해 여러 경로로 보낼 수도 있다. 이에 따라 각각 도착시간이 달라질 수도 있다.</p><h3 id="UDP-user-datagram-protocol"><a href="#UDP-user-datagram-protocol" class="headerlink" title="UDP (user datagram protocol)"></a>UDP (user datagram protocol)</h3><p>다른 방법으로, 여러 컴퓨터를 거치지 않고 데이터를 주고 받을 컴퓨터끼리 직접 연결하는 건 어떨까?<br>이 때 UDP를 사용할 수 있다.<br>UDP는 “user datagram protocol”의 약자인데, TCP와 같이 IP 기반 위에 구현되어 있다.<br>하지만, 다른 것과 달리 간단한 작업을 하는 아주 얇은 레이어만 올려져 있다.</p><p>UDP를 사용해서, 목적지의 IP(예: 112.140.20.10) 주소와 포트(예:52432)로 메시지를 보낼 수 있고,<br>컴퓨터를 거쳐 거쳐 목적지까지 도달할 수도 있고, 아님 도착하지 않을 수도 있다.</p><p>받는 곳에서는 포트(52432)를 열어두고, 패킷이 올 때까지 기다린다.<br>이 때, 어떤 컴퓨터에서 온 것이든 모두 받아들인다. (커넥션이 없다는 것을 기억한다)<br>받는 쪽에서는 패킷이 도착했을 때 이게 어느 IP의 어느 포트에서 왔고 크기가 얼마나 되는지 알 수 있다.<br>그리곤 패킷 데이터를 읽을 수 있다.</p><p><strong>UDP는 안정적이지 않은 프로토콜이다.</strong><br>일반적으로는 1~5% 정도의 데이터를 잃는 경우가 많고, 심지어는 전혀 받지 못할 수도 있다. 패킷이 전송된 순서 또한 보장되지 않는다.</p><p>UDP는 IP에서 많은 일을 하지 않는다.<br>데이터가 전송될 수도 안될 수도 있지만, <strong>UDP가 보장해주는 건 데이터의 ‘양’</strong>이다.<br>한 쪽에서 256바이트를 보냈으면, 받는 쪽에서도 무조건 256바이트를 받는다.<br>처음 100바이트를 받을 수는 없다.</p><p>정리</p><h4 id="TCP-1"><a href="#TCP-1" class="headerlink" title="TCP"></a>TCP</h4><ul><li>커넥션 기반</li><li>안정성과 순서를 보장한다</li><li>패킷을 자동으로 쪼개준다</li><li>적당한 속도로 보내준다. (회선이 처리할 수 있을 만큼)</li><li>파일을 쓰는 것처럼 사용하기 쉽다</li></ul><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><ul><li>커넥션 기반이 아니다. 직접 구현해야 한다</li><li>안정적이지 않고 순서도 보장되지 않는다. 데이터를 잃을 수도, 중복될 수도 있다.</li><li>데이터가 크다면, 보낼 때 직접 패킷 단위로 잘라야 한다.</li><li>회선이 처리할 수 있을만큼 나눠서 보내야 한다.</li><li>패킷을 잃었을 경우, 필요하다면 다양한 방법으로 이를 찾아내서 다시 보내야 한다.</li></ul><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><p>1.<a href="http://ohgyun.com/431" target="_blank" rel="noopener">http://ohgyun.com/431</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/images/post_img/65/IP.png&quot;&gt;

&lt;h3 id=&quot;TCP&quot;&gt;&lt;a href=&quot;#TCP&quot; class=&quot;headerlink&quot; title=&quot;TCP&quot;&gt;&lt;/a&gt;TCP&lt;/h3&gt;&lt;p&gt;TCP 소켓은 신뢰할 수 있는 프로토콜이다. 두
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="CS" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/CS/"/>
    
    
      <category term="CS" scheme="http://feel5ny.github.io/tags/CS/"/>
    
      <category term="network" scheme="http://feel5ny.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>네트워크 basic</title>
    <link href="http://feel5ny.github.io/2017/12/20/CS_03/"/>
    <id>http://feel5ny.github.io/2017/12/20/CS_03/</id>
    <published>2017-12-20T09:23:55.000Z</published>
    <updated>2019-01-03T15:33:29.258Z</updated>
    
    <content type="html"><![CDATA[<p>수업 전 미리 알아보기</p><hr><p>목차 </p><ol><li><a href="#network">네트워크란?</a></li><li><a href="#internet">인터넷이란?</a></li><li><a href="#osi7">OSI 7 Layer &amp; TCP/IP Model Layer</a></li></ol><hr><h2 id="네트워크란"><a href="#네트워크란" class="headerlink" title=" 네트워크란?"></a><a name="network"></a> 네트워크란?</h2><p>두 대 이상의 컴퓨터 들을 연결하고 서로 통신(이야기) 할수 있는 것</p><h3 id="네트워크의-종류"><a href="#네트워크의-종류" class="headerlink" title="네트워크의 종류"></a>네트워크의 종류</h3><ol><li>PAN (Personal Area Network) : 가장 작은 규모의 네트워크</li><li>LAN (Local Area Network) : 근거리 영역 네트워크</li><li>Man (Metropolitan Area Network) : 대도시 영역 네트워크</li><li>Wan (Wide Area Network) : 광대역 네트워크 (지역과 지역, 지방과 지방, 나라와 나라, 대륙과 대륙을 연결하는 네트워크)</li></ol><img src="/images/post_img/66/network.jpg"><img src="/images/post_img/66/wan.jpg"><h3 id="1-LAN"><a href="#1-LAN" class="headerlink" title="1. LAN"></a>1. LAN</h3><p>Local Area Network : 근거리 통신망<br>LAN의 토폴로지에 따라 버스형, 링형, 스타형, 계층형, 메쉬형 등으로 구분할수 있다.<br>*토폴로지란 (Topologies) : 네트워크를 구성하는 노드와 노드간에 연결 상태에 대한 배치를 의미한다. </p><img src="/images/post_img/66/topology.jpg"><h4 id="1-1-Bus-Topology-버스형"><a href="#1-1-Bus-Topology-버스형" class="headerlink" title="1-1. Bus Topology (버스형)"></a>1-1. Bus Topology (버스형)</h4><p>신뢰성과 확장성이 좋으며 모든 노드 들이 버스에 <code>T 자형</code>으로 연결 되어 상호 <code>Point - to - Point</code> 형태를 가지게 됩니다. 각 노드들의 연결은 <code>어뎁터(Adapter)</code>를 사용하며 양 끝 단에 <code>Terminator</code>를 두게 됩니다.<br>각 노드의 고장은 전체 네트워크 부분에 영향을 미치는 점을 가지며 CSMA/CD 방식을 주로 사용, 케이블 사용량이 적기 때문에 투자 비용이 적게 드는 편입니다.</p><p>*CSMA/CD 방식이란</p><ul><li>호스트가 채널의 상태를 감지해 충돌을 피하는 매체접근방식</li><li>CSMA(Carrier Sense Multiple Access)</li><li>호스트가 전송하기 전에 매체의 전압을 점검하여 회선이 사용되지 않는 상태임을 확인하고 전송을 시작함</li></ul><h4 id="1-2-Ring-Topology-링형"><a href="#1-2-Ring-Topology-링형" class="headerlink" title="1-2. Ring Topology (링형)"></a>1-2. Ring Topology (링형)</h4><p>통신제어가 간단하고 신뢰성이 높으며 <code>장거리 네트워크</code>에서 사용 가능 합니다.<br><code>링(Ring) 형태</code>를 이루지만 노드간 통신은 <code>Point - to - Point</code> 를 가지며<br>각 노드에서 신호 재생이 가능 하기 때문에 버스 형태와 달리 <strong>거리 제약이 적으며 잡음에도 강합니다.</strong></p><h4 id="1-3-Star-Topology-스타형-성형"><a href="#1-3-Star-Topology-스타형-성형" class="headerlink" title="1-3. Star Topology (스타형/성형)"></a>1-3. Star Topology (스타형/성형)</h4><p>중앙 제어 방식으로 모든 기기가 <code>Point - to - Point</code> 방식으로 연결 되어 있으며 문제 해결이 쉽고 하나의 기기의 고장은 전체에 영향을 미치지 않지만 중앙 제어 장비가 고장이 나면 모든 시스템에 영향을 미치게 됩니다. 케이블 사용량이 많으며 비용 또한 큰 편입니다.</p><h4 id="1-4-Mash-Topology-메쉬형"><a href="#1-4-Mash-Topology-메쉬형" class="headerlink" title="1-4. Mash Topology (메쉬형)"></a>1-4. Mash Topology (메쉬형)</h4><p>네트워크 상의 모든 컴퓨터들이 연결되어진 형태로써 연결 된 기기나 노드가 고장나더라도 다른 경로를 통해 통신이 가능하며 어떠한 경우에도 네트워크가 동작한다는 장점을 가지게 됩니다.<br>하지만, 네트워크에 연결된 기기의 수가 많을 경우 모든 기기와 연결 해야 하기 때문에 <code>케이블 사용량이 많으며</code> 구조 또한 복잡하여 <code>네트워크 관리가 힘들어 진다</code>는 단점을 가지고 있습니다.</p><h4 id="1-5-Fully-Connected"><a href="#1-5-Fully-Connected" class="headerlink" title="1-5. Fully Connected"></a>1-5. Fully Connected</h4><hr><h2 id="2-인터넷이란"><a href="#2-인터넷이란" class="headerlink" title=" 2. 인터넷이란?"></a><a name="internet"></a> 2. 인터넷이란?</h2><p>International Network 의 합성어 로써 TCP/IP ( Transmission Control Protocol / Internet Protocol ) 을 기반으로 전세계의 네트워크를 하나로 연결 하여 각각 PC가 가지고 있는 자료나 정보를 주고 받을 수 있는 광역 네트워크를 인터넷 이라고 합니다.</p><p>*다른 정의</p><ul><li>LAN 과 LAN 을 연결 하는 WAN 이 서로 다른 WAN 들과 연결 되어 하나의 네트워크를 구성한 네크워크를 칭함.</li><li>전세계의 정보를 쉽게 얻을 수 있는 정보의 바다이며, 다양한 정보 자원을 자유로운 분산과 공유를 통해 상업적인 목적 목적이 아닌 무료로 사용 할수 있어야 한다.</li><li>모든 국가 들이 네트워크 통해 연결 되어 전세계를 하나의 공동체로 구성한 네트워크를 인터넷이라 한다.</li></ul><h3 id="2-1-Protocol"><a href="#2-1-Protocol" class="headerlink" title="2-1. Protocol"></a>2-1. Protocol</h3><p>사람과 사람이 통신할때 서로 이해할 수 있는 언어, 공용된 언어를 사용해 전세계 모든 사람과 대화 할수 있다라고 하면, 컴퓨터와 컴퓨터도 서로 이해 할 수 있는 언어, 공용된 언어를 사용 해야 한다는 것인데 이 것이 바로 프로토콜(Protocol) 입니다.<br>어떤 시스템이 다른 시스템과 통신을 원활하게 수용하도록 해주는 통신 규약, 약속</p><p>프로토콜의 기능으로써 </p><ol><li>세분화와 재합성</li><li>캡슐화</li><li>연결제어</li><li>오류제어</li><li>흐름제어</li><li>동기화</li><li>순서 결정</li><li>주소 설정</li><li>다중화</li><li>전송 서비스 </li></ol><p>순서 결정<br><img src="/images/post_img/66/protocol_order.png"><br>세분화와 재합성<br><img src="/images/post_img/66/protocol_segment.png"></p><img src="/images/post_img/66/protocol.gif"><p>프로토콜은 특성에 따라 여러가지 형태로 분류할수 있으며 각각 형태를 구분 지어 본다면</p><ol><li>직접/간접 프로토콜</li><li>단일체/구조적 프로토콜</li><li>대칭/비대칭 프로토콜</li></ol><p>네트워크 용어에서 나오는 P 는 Protocol 의 약자가 대부분이며 대표적으로 인터넷을 할 때 사용되는 프로토콜은 TCP/IP 가 있습니다.<br>TCP/IP 는 Transmission Control Protocol / Internet Protocol 의 약자로써 컴퓨터와 컴퓨터가 통신 회선 등으로 연결 하기 위한 통신 규약입니다.<br>그외 HTTP, ARP, ICMP, SNMP, SMTP, POP, FTP, TFTP, DHCP 등이 프로토콜의 종류입니다.</p><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://mindnet.tistory.com/entry/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-1%ED%8E%B8-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%ACNetwork-%EB%9E%80?category=702276" target="_blank" rel="noopener">http://mindnet.tistory.com/entry/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-1%ED%8E%B8-%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%ACNetwork-%EB%9E%80?category=702276</a></li><li><a href="http://www.jidum.com/" target="_blank" rel="noopener">네트워크 쉽게 이해하기-전편</a></li><li><a href="http://minhaep.tistory.com/entry/%ED%94%84%EB%A1%9C%ED%86%A0%EC%BD%9CProtocol%EC%9D%B4%EB%9E%80" target="_blank" rel="noopener">프로토콜 기능</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;수업 전 미리 알아보기&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;목차 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#network&quot;&gt;네트워크란?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#internet&quot;&gt;인터넷이란?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#osi7&quot;&gt;
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="CS" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/CS/"/>
    
    
      <category term="CS" scheme="http://feel5ny.github.io/tags/CS/"/>
    
      <category term="network" scheme="http://feel5ny.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Database basic</title>
    <link href="http://feel5ny.github.io/2017/12/19/DB_01/"/>
    <id>http://feel5ny.github.io/2017/12/19/DB_01/</id>
    <published>2017-12-19T09:23:55.000Z</published>
    <updated>2019-01-03T15:33:29.062Z</updated>
    
    <content type="html"><![CDATA[<p>목차 </p><ol><li><a href="#rdbms">RDBMS</a></li><li><a href="#ddl">DDL, DML</a></li><li><a href="#aggregate">Aggregate, Group Function</a></li><li><a href="#sql">SQL</a></li><li><a href="#erd">ERD</a></li><li><a href="#table">Table 생성</a></li></ol><hr><h1 id="1-RDBMS"><a href="#1-RDBMS" class="headerlink" title=" 1. RDBMS"></a><a name="rdbms"></a> 1. RDBMS</h1><p><code>Relational Database Management System</code></p><ul><li>F.커드씨가 도입한 관계형 모델을 기반으로 데이터베이스를 관리하는 방식이다.</li><li>RDBMS의 종류로는 Oracle, Mysql 등이 널리 사용되고있다.</li><li>Relational을 표현하기 위하여 <a href="#erd">ERD</a>(Entity-Relationship Diagram)으로 테이블을 표현한다.</li></ul><hr><hr><h1 id="2-DDL-DML"><a href="#2-DDL-DML" class="headerlink" title=" 2. DDL, DML"></a><a name="ddl"></a> 2. DDL, DML</h1><h2 id="DDL-Data-Definition-Language"><a href="#DDL-Data-Definition-Language" class="headerlink" title="DDL (Data Definition Language)"></a>DDL (Data Definition Language)</h2><p>Table 자체를 구성하는대 사용한다.</p><hr><h3 id="1-Create-db-스키마-객체를-생성"><a href="#1-Create-db-스키마-객체를-생성" class="headerlink" title="1. Create : db 스키마 객체를 생성"></a>1. <code>Create</code> : db 스키마 객체를 생성</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book (</span><br><span class="line">  bookno <span class="built_in">NUMBER</span>(<span class="number">5</span>), <span class="comment">/* 데이터타입을 설정해 주는 것이다. 숫자 5자리까지 */</span></span><br><span class="line">  title VARCHAR2(<span class="number">50</span>), <span class="comment">/* 문자열 50자까지 설정 */</span></span><br><span class="line">  author VARCHAR2(<span class="number">10</span>), <span class="comment">/* 문자열 10자리까지 설정 */</span></span><br><span class="line">  pubdate <span class="built_in">DATE</span> <span class="comment">/* 날짜 데이터타입 */</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><h3 id="2-Data-Type"><a href="#2-Data-Type" class="headerlink" title="2. Data Type"></a>2. <code>Data Type</code></h3><ul><li><code>VARCHAR2(size)</code> : 가변길이 문자열 (최대 4000byte)</li><li><code>CHAR(size)</code> : 고정길이 문자열 (최대 2000byte)</li><li><code>NUMBER(p,s)</code> : 가변길이 숫자. 전체 p자리 중 소수점 이하 s자리<ul><li><code>p</code> : 38</li><li><code>s</code> : -84 ~ 127</li><li>21 byte</li></ul></li><li><code>DATE</code> : 고정길이 날짜 + 시간 (7byte)</li></ul><hr><h3 id="3-Alter-변경"><a href="#3-Alter-변경" class="headerlink" title="3. Alter : 변경"></a>3. <code>Alter</code> : 변경</h3><ul><li>테이블 칼럼 추가<br><code>ALTER Table Student ADD (name VARCHAR(50));</code></li><li>테이블 칼럼 수정<br><code>ALTER Table Student MODIFY (name VARCHAR(50));</code></li><li>테이블 칼럼 삭제<br><code>ALTER Table Student DROP name;</code></li></ul><hr><h3 id="4-Drop-db-스키마-제거"><a href="#4-Drop-db-스키마-제거" class="headerlink" title="4. Drop : db 스키마 제거"></a>4. <code>Drop</code> : db 스키마 제거</h3><ul><li>db가 날라갈 수 있는 위험한 명령어!</li><li><code>DROP Table Student</code></li></ul><hr><h3 id="5-Truncate-스키마는-유지하면서-자료만-버림"><a href="#5-Truncate-스키마는-유지하면서-자료만-버림" class="headerlink" title="5. Truncate: 스키마는 유지하면서 자료만 버림"></a>5. <code>Truncate</code>: 스키마는 유지하면서 자료만 버림</h3><ul><li><code>TRUNCATE Table Student</code></li></ul><hr><h3 id="6-Rename-이름-변경"><a href="#6-Rename-이름-변경" class="headerlink" title="6. Rename : 이름 변경"></a>6. <code>Rename</code> : 이름 변경</h3><ul><li><code>RENAME Student TO employee</code></li></ul><hr><h3 id="7-Comment-테이블에-설명-추가"><a href="#7-Comment-테이블에-설명-추가" class="headerlink" title="7. Comment : 테이블에 설명 추가"></a>7. <code>Comment</code> : 테이블에 설명 추가</h3><hr><h3 id="8-Constraint-테이블에-제약조건-생성"><a href="#8-Constraint-테이블에-제약조건-생성" class="headerlink" title="8. Constraint : 테이블에 제약조건 생성"></a>8. <code>Constraint</code> : 테이블에 제약조건 생성</h3><p>Table의 특정규약을 설정한다 즉 제약조건이다.</p><ul><li>NOT NULL</li><li>UNIQUE</li><li>CHECK</li></ul><h4 id="PRIMARY-KEY-gt-PRIMARY-KEY는-NOT-NULL-UNIQUE하다"><a href="#PRIMARY-KEY-gt-PRIMARY-KEY는-NOT-NULL-UNIQUE하다" class="headerlink" title="PRIMARY KEY =&gt; PRIMARY KEY는  NOT NULL + UNIQUE하다."></a>PRIMARY KEY =&gt; PRIMARY KEY는  NOT NULL + UNIQUE하다.</h4><ul><li>PK는 한테이블당 한개만 존재</li><li>인덱스 자동생성</li><li>여러 컬럼을 하나의 PK로 설정 가능<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> book (</span><br><span class="line">  ssn1 <span class="built_in">NUMBER</span>(<span class="number">6</span>),</span><br><span class="line">  ssn2 <span class="built_in">NUMBER</span>(<span class="number">7</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (ssn1, ssn2)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h4 id="FOREIGN-KEY-gt-주의-PRIMARY-KEY에게만-FOREIGN-KEY-가능"><a href="#FOREIGN-KEY-gt-주의-PRIMARY-KEY에게만-FOREIGN-KEY-가능" class="headerlink" title="FOREIGN KEY =&gt; 주의 PRIMARY KEY에게만 FOREIGN KEY 가능"></a>FOREIGN KEY =&gt; 주의 PRIMARY KEY에게만 FOREIGN KEY 가능</h4><ul><li>ON DELETE SET NULL : 해당하는 FK를 NULL로 바꾼다.</li><li>ON DELETE CASCADE : 해당하는 FK를 가진 참조행도 삭제</li></ul><hr><hr><h2 id="DML-Data-Manipulation-Language"><a href="#DML-Data-Manipulation-Language" class="headerlink" title="DML (Data Manipulation Language)"></a>DML (Data Manipulation Language)</h2><p><code>Insert</code>, <code>Delete</code>, <code>Select</code>,<code>Update Table</code> 내부의 data를 바꿀때 사용한다. </p><hr><h3 id="1-Insert"><a href="#1-Insert" class="headerlink" title="1. Insert"></a>1. <code>Insert</code></h3><p>테이블 Data 추가<br><code>INSERT INTO 테이블이름 (col1, col2) VALUES(“val1”, “val2”);</code></p><hr><h3 id="2-Delete"><a href="#2-Delete" class="headerlink" title="2. Delete"></a>2. <code>Delete</code></h3><p>테이블 Data 추가<br><code>DELETE FROM 테이블이름 Where id = 1;</code></p><hr><h3 id="3-Update"><a href="#3-Update" class="headerlink" title="3. Update"></a>3. <code>Update</code></h3><p>테이블 Data 추가<br><code>UPDATE 테이블이름 SET 변경내용 Where id = 1;</code></p><hr><h1 id="3-Aggregate-Group-Function"><a href="#3-Aggregate-Group-Function" class="headerlink" title=" 3. Aggregate, Group Function"></a><a name="aggregate"></a> 3. Aggregate, Group Function</h1><h2 id="Aggregate-Function"><a href="#Aggregate-Function" class="headerlink" title="Aggregate Function"></a>Aggregate Function</h2><h3 id="1-AVG"><a href="#1-AVG" class="headerlink" title="1. AVG"></a>1. AVG</h3><p>평균 구하기<br><code>SELECT AVG(salary) FROM Student;</code></p><ul><li>Group By<br><code>SELECT 부서명, AVG(salary) FROM 직장; =&gt; 오류 발생</code><br>=&gt; <code>SELECT 부서명, AVG(salary) FROM 직장 GROUP BY 부서명</code></li><li>Having</li></ul><h3 id="2-SUM"><a href="#2-SUM" class="headerlink" title="2. SUM"></a>2. SUM</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(col_name) <span class="keyword">FROM</span> table_name;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(salary) <span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><ul><li>COUNT</li><li>MAX</li><li>MIN</li></ul><hr><h1 id="4-SQL"><a href="#4-SQL" class="headerlink" title=" 4. SQL"></a><a name="sql"></a> 4. SQL</h1><h2 id="SQL-Structured-Query-Language"><a href="#SQL-Structured-Query-Language" class="headerlink" title="SQL(Structured Query Language)"></a>SQL(Structured Query Language)</h2><p>: 구조화된 질의 언어</p><ul><li><p>가장 기본적인 문법</p></li><li><p><code>Select</code>(Table의 원하는 col을 선택하다)</p></li><li><p><code>From</code> (어떠한 Table에서)</p></li><li><p><code>Where</code> (특정 조건)</p></li><li><p>Student 테이블을 전부다 가져오고싶다.<br><code>Select*From Student; =&gt; *</code>는 전부를 나타낸다.</p></li><li><p>Student 테이블중에서 name(col)을 가져오고싶다.<br><code>Select name From Student;</code></p></li><li><p>Student 테이블중에서 name(col)이 Joy 가져오고싶다.<br><code>Select name From Student Where name=Joy;</code></p></li></ul><h3 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h3><p>둘 이상의 테이블을 합쳐서 하나의 테이블로 만든다.</p><ul><li><p><code>Cross Join</code> (Cartasian Product) 모든 가능한 쌍이 나타난다.</p><h4 id="Inner-Join-조건을-만족하는-tuple만-나타난다"><a href="#Inner-Join-조건을-만족하는-tuple만-나타난다" class="headerlink" title="Inner Join 조건을 만족하는 tuple만 나타난다."></a><code>Inner Join</code> 조건을 만족하는 tuple만 나타난다.</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, jobname <span class="keyword">FROM</span> Student <span class="keyword">Inner</span> <span class="keyword">Join</span> Job</span><br><span class="line"><span class="keyword">ON</span> Student.id = Job.student_id;</span><br></pre></td></tr></table></figure></li><li><p><code>Outer Join</code> 조건을 만족하지 않는 tuple도 나타난다. =&gt; null로 표기<br>Left Outer Join =&gt; join table의 왼쪽 table 값중 null인 것도 가져온다.<br>Right Outer Join =&gt; join table의 오른쪽 table 값중 null인 것도 가져온다.<br>Full Outer Join =&gt; 양쪽 table 값중 null인 것도 가져온다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, jobname <span class="keyword">FROM</span> Student <span class="keyword">Left</span> <span class="keyword">Outer</span> <span class="keyword">Join</span> Job </span><br><span class="line"><span class="keyword">ON</span> Student.id = Job.student_id;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, jobname <span class="keyword">FROM</span> Student <span class="keyword">Right</span> <span class="keyword">Outer</span> <span class="keyword">Join</span> Job</span><br><span class="line"><span class="keyword">ON</span> Student.id = Job.student_id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, jobname <span class="keyword">FROM</span> Student <span class="keyword">Full</span> <span class="keyword">Outer</span> <span class="keyword">Join</span> Job</span><br><span class="line"><span class="keyword">ON</span> Student.id = Job.student_id;</span><br></pre></td></tr></table></figure><ul><li><code>Natural Join</code> 조건을 만족하는 tuple들의 동일한 col이 합쳐져서 나타난다.</li><li><code>Self Join</code> 자기 자신과 Join</li></ul><hr><h1 id="5-ERD"><a href="#5-ERD" class="headerlink" title=" 5. ERD"></a><a name="erd"></a> 5. ERD</h1><p>Entity-Relationship Diagram<br>mySql에서 자동으로 그려준다.</p><img src="/images/post_img/47/01.png"><h2 id="auto-increment"><a href="#auto-increment" class="headerlink" title="auto increment"></a>auto increment</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;목차 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#rdbms&quot;&gt;RDBMS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ddl&quot;&gt;DDL, DML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#aggregate&quot;&gt;Aggregate, Group Function&lt;
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Database" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Database/"/>
    
    
      <category term="database" scheme="http://feel5ny.github.io/tags/database/"/>
    
  </entry>
  
  <entry>
    <title>2/ React data 처리</title>
    <link href="http://feel5ny.github.io/2017/12/18/React_03/"/>
    <id>http://feel5ny.github.io/2017/12/18/React_03/</id>
    <published>2017-12-17T16:21:19.000Z</published>
    <updated>2019-01-03T15:33:29.258Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>스터디 공유용 자료입니다.</p></blockquote><hr><p>목차</p><ol><li>fetch API</li><li>실습</li></ol><hr><h2 id="1-fatch-api"><a href="#1-fatch-api" class="headerlink" title="1. fatch api"></a>1. fatch api</h2><p>axios와 비슷한 promise 기반의 HTTP REQUEST API<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch" target="_blank" rel="noopener">참고</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fetch(url)</span><br><span class="line">.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 응답 data를 받고 싶은 곳.</span></span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 에러를 받고 싶은 곳.</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://medium.com/little-big-programming/%EB%82%B4%EA%B0%80-fetch-api%EB%A5%BC-%EC%93%B0%EC%A7%80-%EB%AA%BB%ED%96%88%EB%8D%98-%EC%9D%B4%EC%9C%A0-3c23f0ec6b82" target="_blank" rel="noopener">fatch api의 단점을 경험한 포스팅</a></p><hr><h2 id="2-실습"><a href="#2-실습" class="headerlink" title="2. 실습"></a>2. 실습</h2><p>api주소 <a href="https://api.github.com/users" target="_blank" rel="noopener">https://api.github.com/users</a></p><ol><li>시맨틱 셋팅</li><li>Lifecycle Hook 중 한 곳에 get method 셋팅</li><li>받은 데이터 저장</li><li>로딩처리<ul><li><a href="https://codepen.io/" target="_blank" rel="noopener">codepen</a></li></ul></li><li>view</li></ol><hr><h2 id="3-Lodash"><a href="#3-Lodash" class="headerlink" title="3. Lodash"></a>3. Lodash</h2><p>A modern JavaScript utility library delivering modularity, performance &amp; extras.</p><ul><li>주로 서버에서 오는 데이터 구조가 렌더해야할 구조와 다를 때 사용합니다.<br><a href="https://lodash.com/docs/4.17.4" target="_blank" rel="noopener">https://lodash.com/docs/4.17.4</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;스터디 공유용 자료입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;목차&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fetch API&lt;/li&gt;
&lt;li&gt;실습&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2 id=&quot;1-fatch-api&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="React" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/React/"/>
    
    
      <category term="react" scheme="http://feel5ny.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>1/ React router</title>
    <link href="http://feel5ny.github.io/2017/12/13/React_02/"/>
    <id>http://feel5ny.github.io/2017/12/13/React_02/</id>
    <published>2017-12-13T00:21:19.000Z</published>
    <updated>2019-01-03T15:33:29.327Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>스터디 공유용 자료입니다.<br><a href="http://slides.com/woongjae/react-router#/" target="_blank" rel="noopener">http://slides.com/woongjae/react-router#/</a> 참고하였습니다.</p></blockquote><p>리액트는 SPA위한 자바스크립트 라이브러리이기 때문에, 클라이언트 사이드 렌더링과 클라이언트 사이드 라우팅이 필요합니다.</p><ul><li>react-router는 하나의 라이브러리이다. <a href="https://reacttraining.com/" target="_blank" rel="noopener">+</a></li><li>다른 router라이브러리도 있고, 직접 만들 수 있다.</li><li>페이스북에서 공식적으로 나온 라이브러리는 아니지만, 많은 사람들이 쓰고 있는 라우터 라이브러리이다. </li><li>react router v3는 다르다고 봐야한다.</li><li>react-router와 react-router-dom이 나눠져 있는 이유는 리액트 네이티브에서도 사용하기 위해서이다.</li></ul><h3 id="리액트-라우터를-사용하는-이유"><a href="#리액트-라우터를-사용하는-이유" class="headerlink" title="리액트 라우터를 사용하는 이유"></a>리액트 라우터를 사용하는 이유</h3><ul><li>여러 페이지들이 존재하는 서비스를 만들때 필요. </li><li>url 주소나 특정상태에 따라서 view를 나누기 위해서 사용한다. </li></ul><hr><h3 id="라우터의-여러-API"><a href="#라우터의-여러-API" class="headerlink" title="라우터의 여러 API"></a>라우터의 여러 API</h3><p>자주 사용하는 API를 봅시다.</p><p>가장 기본셋팅 </p><ol><li><code>BrowserRouter</code></li><li><code>Link</code></li><li><code>Route</code></li></ol><h2 id="셋팅하기"><a href="#셋팅하기" class="headerlink" title="셋팅하기"></a>셋팅하기</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app 프로젝트이름 --scripts-version=react-scripts-ts</span><br></pre></td></tr></table></figure><p>react-router-dom을 설치하자.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><p>type definition 추가.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @types/react-router-dom</span><br></pre></td></tr></table></figure><ol start="2"><li>css 프레임워크를 붙여봅시다.<br><a href="https://react.semantic-ui.com/" target="_blank" rel="noopener">https://react.semantic-ui.com/</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add semantic-ui-react</span><br><span class="line">yarn add semantic-ui-css</span><br></pre></td></tr></table></figure></li></ol><p>css import는 최상위 컴포넌트에서</p><ul><li>css는 전역으로 설정됩니다.</li></ul><ol start="3"><li>import 허락<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"allowSyntheticDefaultImports": true</span><br></pre></td></tr></table></figure></li></ol><h4 id="1-lt-BrowserRouter-gt"><a href="#1-lt-BrowserRouter-gt" class="headerlink" title="1. &lt;BrowserRouter&gt;"></a>1. <code>&lt;BrowserRouter&gt;</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link&#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span></span><br></pre></td></tr></table></figure><ul><li>브라우저 히스토리를 이용해서 구현할 라우터</li><li>하나의 자식만을 가질 수 있기 때문에, div로 감싸야한다. 아니면 자식이 여러명이라는 에러가 뜸.</li><li>다른 라우팅 컴포넌트(Route, Link)를 사용하기 위해서 기본적으로 감싸줘야 함</li><li><code>window.history.pushState()</code>로 동작하는 라우터 (리로드 없이 주소만 갱신하는 함수)</li><li>이와 비슷하게 HashRouter는 Hash(#/)으로 동작하는 Router임</li></ul><h4 id="2-lt-Link-gt"><a href="#2-lt-Link-gt" class="headerlink" title="2. &lt;Link&gt;"></a>2. <code>&lt;Link&gt;</code></h4><p>HTML의 a태그와 유사하다.</p><ul><li><a>로 렌더링되고 사용법도 비슷하지만,</a></li><li>실제 동작은 <a>와 다르게 페이지 전체를 리로드하지 않고</a></li><li>필요한 부분만 리로드하게 됨<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Link to=<span class="string">"/"</span> /&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-lt-Route-gt"><a href="#3-lt-Route-gt" class="headerlink" title="3. &lt;Route&gt;"></a>3. <code>&lt;Route&gt;</code></h4><ul><li>path 속성으로 경로지정</li><li>render, component, children 속성으로 렌더링</li><li>실제 경로가 지정한 경로와 완벽히 매치되지 않더라도, 경로를 포함만 해도 렌더링</li><li>정확히 매칭될 때만 렌더하고 싶은 경우 exact 옵션 사용</li><li>컴포넌트에 <code>match, location, history</code>라는 객체를 넘김</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exact=&#123;<span class="literal">true</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="lt-Route-gt-props-알아보기"><a href="#lt-Route-gt-props-알아보기" class="headerlink" title="&lt;Route&gt; props 알아보기"></a><code>&lt;Route&gt;</code> props 알아보기</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Post = <span class="function">(<span class="params">props: RouteComponentProps&lt;&#123; postId: <span class="built_in">string</span> &#125;&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;h3&gt;Post: &#123;props.match.params.postId&#125;&lt;<span class="regexp">/h3&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><h4 id="match-객체"><a href="#match-객체" class="headerlink" title="match 객체"></a>match 객체</h4><p><route>의 <code>path</code>에 정의한 것과 매치된 정보를 담고있음</route></p><h3 id="location-객체"><a href="#location-객체" class="headerlink" title="location 객체"></a>location 객체</h3><p>브라우저의 window.location 객체와 비슷함<br>URL을 다루기 쉽게 쪼개서 가지고 있음</p><h3 id="history-객체"><a href="#history-객체" class="headerlink" title="history 객체"></a>history 객체</h3><p>브라우저의 window.history 객체와 비슷함<br>주소를 임의로 변경하거나 되돌아갈 수 있음<br>주소를 변경하더라도 SPA 동작방식에 맞게 페이지 일부만 리로드</p><h4 id="4-lt-Redirect-gt"><a href="#4-lt-Redirect-gt" class="headerlink" title="4. &lt;Redirect&gt;"></a>4. <code>&lt;Redirect&gt;</code></h4><ul><li>말그대로 Redirect를 하는 컴포넌트</li><li>마운트 되면 지정한 경로로 이동함</li><li>기본적으로 replace 방식</li><li>location 객체를 통해 리다이렉트 할 수도 있음<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">window</span>.localStorage.token) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">"/login"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    return (</span></span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">          &lt;Route</span><br><span class="line">            exact</span><br><span class="line">            path="/"</span><br><span class="line">            component=&#123;HomePage&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">          ...</span><br><span class="line">        &lt;/Switch&gt;</span><br><span class="line">      &lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-withRouter"><a href="#5-withRouter" class="headerlink" title="5. withRouter"></a>5. <code>withRouter</code></h4><p>withRouter HOC를 통해 히스토리 객체의 속성과 <route>의 match에 액세스 할 수 있습니다. withRouter는 <route> render props : {match, location, history}와 같은 props로써 ㅇ라우트가 변경할 때마다 해당 구성 요소를 다시 렌더링합니다.</route></route></p><h4 id="6-Switch"><a href="#6-Switch" class="headerlink" title="6. Switch"></a>6. <code>Switch</code></h4><ul><li><code>&lt;Route&gt;</code>를 감싸서 사용</li><li>JavaScript의 switch 문과 비슷</li><li><route>중 매치되는 <code>첫번째</code>만 렌더</route></li><li><route>에 path를 지정하지 않은 경우, 매치되는 <route> 컴포넌트가 없을 때 렌더</route></route></li><li>따라서 순서에 유의해야함<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &#123;<span class="comment">/* intro페이지 &amp; 네비게이션 없는 페이지 */</span>&#125;</span><br><span class="line">  &lt;Route</span><br><span class="line">    path=<span class="string">"/login"</span></span><br><span class="line">    component=&#123;LoginPage&#125;</span><br><span class="line">  /&gt;w</span><br><span class="line">  &#123;<span class="comment">/* 서비스 페이지 (로그인 이후 접근 가능) &amp; 네비게이션 있는 페이지*/</span>&#125;</span><br><span class="line">  &lt;Route</span><br><span class="line">    path=<span class="string">"/share"</span></span><br><span class="line">    component=&#123;SharePage&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;Route path=<span class="string">"/"</span> component=&#123;App&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Switch&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;Switch&gt;</span><br><span class="line">  &lt;Route</span><br><span class="line">    exact</span><br><span class="line">    path=<span class="string">"/"</span></span><br><span class="line">    component=&#123;HomePage&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;Route</span><br><span class="line">    path=<span class="string">"/diary"</span></span><br><span class="line">    component=&#123;DiaryPage&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;Route</span><br><span class="line">    path=<span class="string">"/report"</span></span><br><span class="line">    component=&#123;ReportPage&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;Route</span><br><span class="line">    path=<span class="string">"/weight"</span></span><br><span class="line">    component=&#123;WeightPage&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;Route</span><br><span class="line">    path=<span class="string">"/search/:sc"</span></span><br><span class="line">    component=&#123;SearchResultPage&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;Route</span><br><span class="line">    path=<span class="string">"/search"</span></span><br><span class="line">    component=&#123;SearchPage&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;Route</span><br><span class="line">    path=<span class="string">"/recipe/:id"</span></span><br><span class="line">    component=&#123;RecipePage&#125;</span><br><span class="line">  /&gt;</span><br><span class="line">  &lt;Route component=&#123;NotFoundPage&#125; /&gt;</span><br><span class="line">&lt;<span class="regexp">/Switch&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-NavLink"><a href="#7-NavLink" class="headerlink" title="7. NavLink"></a>7. <code>NavLink</code></h4><ul><li>조금 특별한 <link></li><li><code>to</code>에 지정한 path와 URL이 매칭되는 경우,</li><li>특별한 스타일, 클래스를 적용할 수 있음</li></ul><h3 id="쉬어가기"><a href="#쉬어가기" class="headerlink" title="쉬어가기"></a>쉬어가기</h3><ul><li>모달을 달아보면서 state개념잡기.</li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;스터디 공유용 자료입니다.&lt;br&gt;&lt;a href=&quot;http://slides.com/woongjae/react-router#/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://slides.com/woong
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="React" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/React/"/>
    
    
      <category term="react" scheme="http://feel5ny.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>소팅 알고리즘</title>
    <link href="http://feel5ny.github.io/2017/12/10/CS_02/"/>
    <id>http://feel5ny.github.io/2017/12/10/CS_02/</id>
    <published>2017-12-10T09:23:55.000Z</published>
    <updated>2019-09-22T08:55:58.986Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>아직 정리 덜 됨.</p></blockquote><p>정렬할 데이터가 특수한 형태가 아니라면 standard 정렬 알고리즘을 쓰는것이 가장 좋지만, 정렬알고리즘에도 여러가지가 있고 각각의 정렬방법마다 빅오 노테이션이 다르다.</p><hr><p>목차 </p><ol><li>버블 정렬 bubble sort</li><li>선택 정렬 Selection sort</li><li>삽입 정렬 Insertion sort</li><li>병합 정렬 Merge sort</li><li>퀵 정렬 Quick sort</li></ol><hr><h2 id="1-버블정렬-Bubble-sort"><a href="#1-버블정렬-Bubble-sort" class="headerlink" title="1. 버블정렬(Bubble sort)"></a>1. 버블정렬(Bubble sort)</h2><p>버블정렬은 가장 쉬운 정렬 알고리즘이지만 시간복잡도가 좋은 퍼포먼스를 내지 못해서 실제로는 잘 사용되지 않는다.<br>시간복잡도는 O(n²)이며 공간복잡도는 하나의 배열만 사용하여 정렬을 진행하기 때문에 O(n)이다.<br>자신과 다음의 요소를 비교하여 인덱스를 정한다.</p><img src="/images/post_img/50/bubble.gif"><hr><h2 id="2-선택정렬-Selection-sort"><a href="#2-선택정렬-Selection-sort" class="headerlink" title="2. 선택정렬(Selection sort)"></a>2. 선택정렬(Selection sort)</h2><p>선택정렬은 시간복잡도가 O(n²)으로 버블정렬과 정렬하는 알고리즘이 버블정렬과 유사하다.<br><strong>한번 순회를 하면서 가장 큰 수를 찾아서 배열의 마지막 위치와 교환한다.</strong></p><img src="/images/post_img/50/selection.gif"><hr><h2 id="3-삽입정렬-Insertion-Sort"><a href="#3-삽입정렬-Insertion-Sort" class="headerlink" title="3. 삽입정렬(Insertion Sort)"></a>3. 삽입정렬(Insertion Sort)</h2><p>삽입정렬은 1부터 n까지 Index를 설정하여 현재위치보다 아래쪽을 순회하며 현재위치의 값을 현재위치보다 아래쪽으로 순회하며 알맞은 위치에 넣어주는 정렬알고리즘이다.<br>삽입정렬은 이미 정렬이 되어있다면 O(n)의 시간복잡도를 가지게된다. 정렬이 되어있는 경우라면 한번 순회하며 체크만 하기 때문이며 Big-O 시간복잡도는 O(n²)이다.</p><img src="/images/post_img/50/insertion.gif"><hr><h2 id="4-병합정렬-Merge-sort"><a href="#4-병합정렬-Merge-sort" class="headerlink" title="4.병합정렬 (Merge sort)"></a>4.병합정렬 (Merge sort)</h2><ul><li>재귀의 이해가 있어야한다.</li></ul><p>병합정렬은 정렬할 리스트를 반으로 쪼개나가며 좌측과 우측 리스트를 계속하여 분할해 나간 후 각 리스트내에서 정렬 후 병합(merge) 정렬 후 병합하는 과정을 통해 정렬하는 알고리즘이다.<br>병합정렬은 가장 많이 쓰이는 정렬 알고리즘 중 하나 이며 시간복잡도는 최소 O(nlogn)을 보장하게 된다.</p><ol><li>Divide</li><li>Conquer</li><li>Combine</li></ol><img src="/images/post_img/50/merge.gif"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4. 합병정렬 </span></span><br><span class="line"><span class="comment">// 퀵정렬과 마찬가지로 분할 정복 알고리즘중 하나이다.</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">console.log(MergeSort([234, 45634, 23, 41, 2345, 34, 23, 1, 4, 3, 6, 234, 4536, 55, 234, 23, 456, 45, 234, 1, 856, 9, 67, 56, 7]))</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MergeSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> len = arr.length;</span><br><span class="line">  <span class="keyword">if</span> (len == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> middle = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> left = arr.slice(<span class="number">0</span>, middle);</span><br><span class="line">  <span class="keyword">const</span> right = arr.slice(middle, len);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">        result.push(left.shift());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.push(right.shift());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left.length) &#123;</span><br><span class="line">      result.push(left.shift());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (right.length) &#123;</span><br><span class="line">      result.push(right.shift());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> merge(MergeSort(left), MergeSort(right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Divide-amp-Conquer"><a href="#Divide-amp-Conquer" class="headerlink" title="Divide &amp; Conquer"></a>Divide &amp; Conquer</h3><p>전략</p><ul><li>주어진 문제를 작은 문제들로 분할하고</li><li>작은 문제에서 해를 구한 후</li><li>구한 해를 이용해서 주어진 문제의 해를 구하는 방법</li></ul><p>특징</p><ul><li>주어진 문제를 동일한 종류의 작은 문제로 분할</li><li>문제 분할 과정이 <strong><code>재귀적</code></strong>으로 처리됨</li></ul><blockquote><p>Fractal같은 문제라고 생각하면 된다.</p></blockquote><p>구성</p><ol><li><p>Divide<br>문제를 크기가 작은 동일한 종류의 sub problems로 분할</p></li><li><p>Conquer<br>재귀적으로 subproblems</p></li><li></li></ol><p>시간복잡도 구성요소</p><ol><li>문제를 분할하는 시간</li><li>분할된 문제 수 * 분할된 문제의 시간 복잡도</li><li>분할된 문제의 결과를 combine하는 시간</li></ol><p>sequence : 연속된 데이터의 집단</p><img src="/images/post_img/50/merge.png">MERGE-SORT는 combine하는 함수이다.<h3 id="배열-요소가-홀수일-경우-어떻게-반을-나눌까"><a href="#배열-요소가-홀수일-경우-어떻게-반을-나눌까" class="headerlink" title="배열 요소가 홀수일 경우 어떻게 반을 나눌까.?"></a>배열 요소가 홀수일 경우 어떻게 반을 나눌까.?</h3><p>크게 고려하지 않아도 되지만, 타입캐스팅 방법처럼 계산 후 앞부분이 하나를 더 가져갈지를 판단한다.</p><h3 id="타입캐스팅"><a href="#타입캐스팅" class="headerlink" title="타입캐스팅"></a>타입캐스팅</h3><p>  타입을 바꿔주는. </p><hr><h2 id="5-퀵정렬-Quick-sort"><a href="#5-퀵정렬-Quick-sort" class="headerlink" title="5. 퀵정렬(Quick sort)"></a>5. 퀵정렬(Quick sort)</h2><p>퀵정렬은 real-world 데이터에서 빠르다고 알려져 있어 <code>가장 많이 쓰는</code> 정렬알고리즘이다.<br>퀵정렬은 pivot을 선정하여 pivot을 기준으로 좌측과 우측으로 pivot보다 작은값은 왼쪽 pivot보다 큰값은 오른쪽으로 재배치를 하고 계속하여 분할하여 정렬하는 알고리즘이다.<br>최악의 경우에는 O(n²)의 비교를 수행하지만 일반적으로 O(nlogn)의 시간복잡도를 가진다.</p><img src="/images/post_img/50/quick.gif"><hr><p>읽어볼 글</p><ol><li>quick sort는 항상 빠를까? <a href="http://asfirstalways.tistory.com/338" target="_blank" rel="noopener">+</a></li><li>quick sort에서 nlogn은 어떤 원리에서 나온 걸까? <a href="http://egloos.zum.com/wrice/v/3097929" target="_blank" rel="noopener">+</a></li></ol><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://medium.com/@fiv3star/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-sorting-algorism-%EC%A0%95%EB%A6%AC-8ca307269dc7" target="_blank" rel="noopener">https://medium.com/@fiv3star/%EC%A0%95%EB%A0%AC%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-sorting-algorism-%EC%A0%95%EB%A6%AC-8ca307269dc7</a></li><li><a href="http://asfirstalways.tistory.com/338" target="_blank" rel="noopener">http://asfirstalways.tistory.com/338</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;아직 정리 덜 됨.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;정렬할 데이터가 특수한 형태가 아니라면 standard 정렬 알고리즘을 쓰는것이 가장 좋지만, 정렬알고리즘에도 여러가지가 있고 각각의 정렬방법마다 빅오 노테이션이 다
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Algorithm" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Algorithm/"/>
    
    
      <category term="CS" scheme="http://feel5ny.github.io/tags/CS/"/>
    
  </entry>
  
  <entry>
    <title>클린코드를 위한 리팩토링</title>
    <link href="http://feel5ny.github.io/2017/12/09/Refactoring/"/>
    <id>http://feel5ny.github.io/2017/12/09/Refactoring/</id>
    <published>2017-12-09T11:12:34.000Z</published>
    <updated>2019-01-03T15:33:29.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="코드의-구린내"><a href="#코드의-구린내" class="headerlink" title="코드의 구린내 +"></a>코드의 구린내 <a href="https://github.com/KWSStudy/Refactoring/wiki/%EC%BD%94%EB%93%9C%EC%9D%98-%EA%B5%AC%EB%A6%B0%EB%82%B4" target="_blank" rel="noopener">+</a></h2><p>구린게 있으면 그 부분을 바로 잡으세요.<br>리팩토링을 어떨 때 시작하고 어떨 때 그만둬야 할지 판단하는 일은 리팩토링 기법을 적용하는 방법만큼 중요하다.</p><hr><h3 id="1-중복코드"><a href="#1-중복코드" class="headerlink" title="1. 중복코드"></a>1. 중복코드</h3><p>구린내의 제왕 중복코드.<br>똑같은 코드 구조가 두 군데 이상 있을 때는 그 부분을 하나로 통일하면 프로그램이 개선<br>한 클래스의 두 메서드 안에 같은 코드가 들어있는경우 -&gt; 메서드 추출 기법을 적용해서 겹치는 코드를 빼내어 별도의 메서드로 만들고 그 메서 드를 두 곳에서 호출<br>수퍼클래스의 두 하위 클래스에 같은 코드가 들어 있는 경우 -&gt; 메서드 추출 기법을 적용해서 중복을 없앤 후 메서드 상향 기법을 적용하면 된다.<br>위 상황에 코드가 똑같지 않고 비슷하다면 메서드 추출기법을 적용해서 같은 부분과 다른 부분을 분리해야 한다. 그런 다음 경우에 따라 템플릿 메서드 형성 기법을 적용해야 할 수도있다.<br>두 메서드가 알고리즘만 다르고 기능이 같다면 개발자는 그 두 알고리즘 중에서 더 간단한 것을 택해서 알고리즘 전환 기법을 적용하면 된다.<br>중복 코드가 메서드 가운데에 있다면 주변 메서드 추출을 적용하면된다.<br>서로 상관 없는 두 클래스 안에 중복코드가 있을 때 -&gt; 한 클래스 안의 중복 코드를 클래스 추출 이나 모듈 추출 을 적용해 제 3의 클래스나 모듈로 떼어낸 후 그것을 다른 클래스에서 호출하는 방법이 있다. 또는 중복 코드를 빼서 메서드로 만든 후 그 메서드를 두 클래스 중 하나에 넣고 다른클래스에서 그 메서드를 호출하거나 코드를 빼내어 만든 메서드를 제 3의 클래스에 넣고 그걸 두 클래스에서 호출하는 방법이 있다.</p><h3 id="2-장황한-메서드"><a href="#2-장황한-메서드" class="headerlink" title="2. 장황한 메서드"></a>2. 장황한 메서드</h3><p>최적의 상태로 장수하는 객체 프로그램을 보면 공통적으로 메서드 길이가 짧다.<br>짧은 메서드를 이해하기 쉽게하려면 메서드 명을 잘 정해야한다. 메섣의 기능을 한눈에 알 수 있는 메서드명을 사용하면 그 메서드안의 코드를 분석하지 않아도된다.<br>메서드 호출이 원래 코드보다 길어지는 한이 있어도, 메서드 명은 그 코드의 의도를 잘 반영하는 것으로 정해야한다.<br>메서드명은 기능 수행 방식이 아니라 목적(즉, 기능자체)을 나타내는 이름으로 정한다.<br>메서드 추출기법을 적용한다.<br>코드를 여러 덩어리로 분리하려면?<br>주석을 찾는 것 -&gt; 기능 설명이 주석으로 처리된 코드 구간을 메서드로 만들면 된다. (긴 메서드에서 기능 설명이 주석으로 되어있는 부분)<br>조건문과 루프도 역시 메서드로 추출</p><h3 id="3-방대한-클래스"><a href="#3-방대한-클래스" class="headerlink" title="3. 방대한 클래스"></a>3. 방대한 클래스</h3><p>기능이 지나치게 많은 클래스에는 보통 엄청난 수의 인스턴스 변수가 들어있다. 클래스에 인스턴스 변수가 너무 많으면 중복 코드가 반드시 존재하게 마련</p><h3 id="4-과다한-매개변수"><a href="#4-과다한-매개변수" class="headerlink" title="4. 과다한 매개변수"></a>4. 과다한 매개변수</h3><p>매개변수 세트가 길면 서로 일관성이 없어지거나 사용이 불편, 더많은 데이터가 필요해질 때마다 계속 수정해야 한다<br>즉 매개변수는 객체를 넘기도록 한다. 객체를 넘김으로써 위 문제들이 해결</p><h3 id="5-수정의-산발"><a href="#5-수정의-산발" class="headerlink" title="5. 수정의 산발"></a>5. 수정의 산발</h3><p>수정의 산발은 한 클래스가 다양한 원인 때문에 다양한 방식으로 자주 수정될 때 일어난다.<br>하나의 클래스를 여러 개의 변형 객체로 분리하는것이 좋다. 그러면 각 객체는 한 종류의 수정에 의해서만 변경된다.</p><h3 id="6-기능의-산재"><a href="#6-기능의-산재" class="headerlink" title="6. 기능의 산재"></a>6. 기능의 산재</h3><p>하나의 수정으로 여러 클래스가 바뀌게 되는 문제<br>수정할 부분들을 전부 하나의 클래스 안에 넣어줘야 한다.</p><h3 id="7-잘못된-소속"><a href="#7-잘못된-소속" class="headerlink" title="7 .잘못된 소속"></a>7 .잘못된 소속</h3><p>메서드가 자신이 속해있는 클래스보다 다른 클래스에서 더 호출이 이루어질 경우 해당 메서드를 더 접근이 많은 클래스로 옮겨줘야 한다.</p><h3 id="8-데이터-뭉치"><a href="#8-데이터-뭉치" class="headerlink" title="8. 데이터 뭉치"></a>8. 데이터 뭉치</h3><p>두 클래스에 들어 있는 인스턴스 변수나 여러 메서드 시그너처(메서드명과 인수들 목록을 메서드 시그너처 라고 부릅니다.)에 들어있는 매개변수 처럼, 동일한 3~4개의 데이터 항목이 여러 위치에 몰려있는 경우<br>이렇게 몰려있는 데이터 뭉치는 객체로 만들어야한다.</p><h3 id="9-강박적-기본-타입-사용"><a href="#9-강박적-기본-타입-사용" class="headerlink" title="9. 강박적 기본 타입 사용"></a>9. 강박적 기본 타입 사용</h3><p>관련된 데이터를 묶지 못하고 흩어놓게 되면, 각각의 데이터에 대한 정보를 외부에 공개해야한다.<br>함수를 만들때도 각각의 데이터를 파라미터로 넘겨주어야 하기에 파라미터의 갯수가 늘어나게 된다.<br>기본형만 사용할 바에는 객체를 만들어서(구조화)해서 사용해라<br>이때는 각각의 관련된 데이터를 하나의 구조체로 묶어 주어야한다.</p><h3 id="10-switch-문"><a href="#10-switch-문" class="headerlink" title="10. switch 문"></a>10. switch 문</h3><p>switch 문의 단점은 반드시 중복이 생긴다는 점이다. 동일한 switch가 다른 곳에서 또 쓰일가능성이 크다<br>switch 문에 새 코드행을 추가하려면 그렇게 여기저기에 존재하는 switch 문을 전부 찾아서 수정해야한다.<br>이 문제를 해결할수 있는 방법은 다형성 즉 재정의를 이용하는 것이다.<br>switch 문을 메서드 추출로 빼낸 후 메서드 이동을 실시해서 그 메서드를 재정의해야 할 클래스에 옮겨 넣으면 된다.</p><h3 id="11-평행-상속-계층"><a href="#11-평행-상속-계층" class="headerlink" title="11. 평행 상속 계층"></a>11. 평행 상속 계층</h3><p>한 클래스의 하위클래스를 만들 때마다 매번 다른 클래스의 하위 클래스도 만들어야 한다.<br>중복 코드 부분을 제거하려면 보통은 한 상속 계층의 인스턴스가 다른 상속계층의 인스턴스를 참조하게 만들면 된다.</p><h3 id="12-직무유기-클래스"><a href="#12-직무유기-클래스" class="headerlink" title="12. 직무유기 클래스"></a>12. 직무유기 클래스</h3><p>하나의 클래스를 작성할 때마다 유지관리와 이해하기 위한 비용이 추가된다.<br>비용만큼의 기능을 수행하지 못하는 비효율적인 클래스는 삭제해야한다.</p><h3 id="13-막연한-범용-코드"><a href="#13-막연한-범용-코드" class="headerlink" title="13. 막연한 범용 코드"></a>13. 막연한 범용 코드</h3><p>메서드나 클래스가 오직 테스트 케이스에만 사용된다면 구린내를 풍기는 유력한 용의자로 막연한 범용코드를 지목할 수 있다. 이러한 메서드나 클래스를 발견하면 그것과 그것을 실행하는 테스트 케이스는 삭제하자.</p><h3 id="14-임시-필드"><a href="#14-임시-필드" class="headerlink" title="14. 임시 필드"></a>14. 임시 필드</h3><p>객체 안에 인스턴스 변수가 특정 상황에서만 할당되는 경우가 간혹 있다.<br>이러한 떠돌이 해당 변수들을 사용하는 class를 생성한다</p><h3 id="15-메시지-체인"><a href="#15-메시지-체인" class="headerlink" title="15. 메시지 체인"></a>15. 메시지 체인</h3><p>메시지 체인?<br>클라이언트가 한 객체에 제 2의 객체를 요청하면, 제 2의 객체가 제 3의 객체를 요청하고 …. 연쇄적으로 요청이 발생하는 문제점</p><h3 id="16-과잉-중개-메서드"><a href="#16-과잉-중개-메서드" class="headerlink" title="16. 과잉 중개 메서드"></a>16. 과잉 중개 메서드</h3><p>어떤 클래스의 인터페이스를 보니 안의 절반도 넘는 메서드가 기능을 다른 클래스에 위임하고 있을경우</p><h3 id="17-지나친-관여"><a href="#17-지나친-관여" class="headerlink" title="17. 지나친 관여"></a>17. 지나친 관여</h3><p>클래스 끼리 관계가 지나치게 밀접한 나머지 서로의 private를 알아내느라 과도한 시간낭비<br>서로 지나지게 친밀한 클래스는 메서드 이동과 필드 이동으로 떼어 낸다.</p><h3 id="18-인터페이스가-다른-대용-클래스"><a href="#18-인터페이스가-다른-대용-클래스" class="headerlink" title="18. 인터페이스가 다른 대용 클래스"></a>18. 인터페이스가 다른 대용 클래스</h3><p>기능은 같은데 시그너처가 다른 메서드에는 메서드명 변경을 실시해야 한다.</p><h3 id="19-미흡한-라이브러리-클래스"><a href="#19-미흡한-라이브러리-클래스" class="headerlink" title="19. 미흡한 라이브러리 클래스"></a>19. 미흡한 라이브러리 클래스</h3><p>라이브러리 클래스에 넣어야 할 메서드가 두 개 뿐이라면 외래 클래스에 메서드 추가 기법을, 부가 기능이 많을 때는 국소적 상속확장 클래스 사용 기 법을 사용</p><h3 id="20-데이터-클래스"><a href="#20-데이터-클래스" class="headerlink" title="20. 데이터 클래스"></a>20. 데이터 클래스</h3><p>데이터 클래스(domain)는 필드 캡슐화기법을 실시해야한다<br>변경되지 않아야 하는 필드에는 쓰기 메서드 제거를 적용</p><h3 id="21-방치된-상속물"><a href="#21-방치된-상속물" class="headerlink" title="21. 방치된 상속물"></a>21. 방치된 상속물</h3><p>하위클래스가 부모클래스에게 상속받은 메서드나 데이터가 하위클래스에서 더이상 쓰이지 않거나 필요 없게 되었을때.<br>위 문제의 원인은 잘못된 계층구조<br>새 대등 클래스를 작서하고 메서드 하향과 필드하향을 실시해서 사용되지 않는 모든 메서드를 그 형제 클래스에 몰아 넣는다.</p><h3 id="22-불필요한-주석"><a href="#22-불필요한-주석" class="headerlink" title="22. 불필요한 주석"></a>22. 불필요한 주석</h3><p>주석을 넣어야겠다는 생각이 들 땐 먼저 코드를 리팩토링해서 주석을 없앨 수 있게 만들어보자.<br>주석은 무슨 작업을 해야 좋을지 모를 때만 넣는 것이 좋다.<br>어떤 코드를 넣은 이유를 메모해 놓을 경우에도 주석을 넣는 것이 적절하다.</p><hr><h2 id="레거시-코드를-받았을-때-좋은-코드로-바꾸는-방법"><a href="#레거시-코드를-받았을-때-좋은-코드로-바꾸는-방법" class="headerlink" title="레거시 코드를 받았을 때 좋은 코드로 바꾸는 방법 +"></a>레거시 코드를 받았을 때 좋은 코드로 바꾸는 방법 <a href="https://m.blog.naver.com/PostView.nhn?blogId=tmondev&logNo=220638991588&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F" target="_blank" rel="noopener">+</a></h2><img src="/images/post_img/45/legacy.png"><p>레거시 코드의 양이 방대할 경우 부분별로 리팩토링을 진행해야 한다. 이 때, 유의할 점은 정확한 목표를 가져야 한다는 것이다. 대부분의 개발자는 성능 개선에만 초점을 두는데, 이는 또 다른 레거시 코드를 만들어 낼 수 있다. 레거시 코드를 변경하는 목적은 변경 자체가 아니라 변경시키는 행위이다. 따라서 각각의 작업 끝에는 항상 테스트 코드가 있어야 한다. 이 점을 항상 유념하며 리팩토링을 진행해야 한다.</p><h5 id="1-변경지점-식별"><a href="#1-변경지점-식별" class="headerlink" title="1. 변경지점 식별"></a>1. 변경지점 식별</h5><p>변경시킬 지점을 알기 위해서는 대상 프로그램의 전체적인 아키텍처를 보아야한다. 노트/스케치나 스크래치 리팩토링 기법과 같은 방법을 통해 변경해야 할 지점을 식별하자.</p><h5 id="2-테스트-지점-찾기"><a href="#2-테스트-지점-찾기" class="headerlink" title="2. 테스트 지점 찾기"></a>2. 테스트 지점 찾기</h5><p>리팩토링이 필요한 부분을 찾았다면 이제 어느 부분에 테스트 루틴을 작성할 것인지 결정해야 한다. 이를 위한 가장 간단한 판단 기준은 모든 메소드에 대해 테스트를 수행하는 것이다. 또한, 각 메소드들이 의존관계를 이루는 묶음끼리도 테스트가 필요한데, 이를 위해 의존관계를 최소화시키는 것이 중요하다.</p><h5 id="3-의존관계-깨기"><a href="#3-의존관계-깨기" class="headerlink" title="3. 의존관계 깨기"></a>3. 의존관계 깨기</h5><p>코드에서의 의존관계는 다른 클래스나 인터페이스에 방향성을 가지고 의지하는 코드를 의미한다. 예를 들어 A 클래스에서 B 클래스에 있는 메서드를 호출하는 상황을 가정해 보자. 이때 A 클래스가 변경되었다고 해서 B 클래스까지 변경될 필요는 없다. 이를 A 클래스가 B 클래스에 의존하고 있다고 말한다.</p><p>이러한 의존관계는 상황별 &amp; 종류별로 매우 다양하며 이를 해소하기 위한 방법도 각양각색이다. 기본적으로 의존관계란 코드의 유지 보수성을 떨어트리기 때문에, 의존관계를 최소화시키는 것이 중요하다. 각 상황별 의존관계 해소 방법을 알고 싶다면, 책으로 출간된 마이클 패더스의 Working Effectively with Legacy Code를 읽어보기 바란다.</p><h5 id="4-테스트-루틴-작성"><a href="#4-테스트-루틴-작성" class="headerlink" title="4. 테스트 루틴 작성"></a>4. 테스트 루틴 작성</h5><p>테스트 루틴을 작성할 때에는 코드의 동작을 이해하는 데 필요하다고 느끼는 만큼의 사례를 작성해야 한다. 기능을 추출하거나 이동시키려 한다면 사례별로 동작들의 존재 여부와 연결을 검증할 수 있는 테스트 루틴을 작성한다. 이동시키고자 하는 코드를 수행하는지와 그 코드가 적절히 연결되었는지를 검증한 후에 변환을 수행하도록 한다.</p><h5 id="5-변경-후-리팩토링"><a href="#5-변경-후-리팩토링" class="headerlink" title="5. 변경 후 리팩토링"></a>5. 변경 후 리팩토링</h5><p>전체적으로 볼 때 리팩토링은 덩치가 큰 메소드를 작은 단위로 쪼개는 것이다. 이렇게 된다면 코드를 좀 더 이해하기 쉽게 작성할 수 있다. 또한, 재사용성을 높일 수 있으며 시스템 안의 다른 영역들에 있는 로직과의 중복을 제거할 수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;코드의-구린내&quot;&gt;&lt;a href=&quot;#코드의-구린내&quot; class=&quot;headerlink&quot; title=&quot;코드의 구린내 +&quot;&gt;&lt;/a&gt;코드의 구린내 &lt;a href=&quot;https://github.com/KWSStudy/Refactoring/wiki/%
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="CleanCode" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/CleanCode/"/>
    
    
      <category term="refactoring" scheme="http://feel5ny.github.io/tags/refactoring/"/>
    
      <category term="TDD" scheme="http://feel5ny.github.io/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>알고리즘과 시간 복잡도</title>
    <link href="http://feel5ny.github.io/2017/12/09/CS_01/"/>
    <id>http://feel5ny.github.io/2017/12/09/CS_01/</id>
    <published>2017-12-09T09:23:55.000Z</published>
    <updated>2019-09-22T08:55:47.900Z</updated>
    
    <content type="html"><![CDATA[<p>목차 </p><ol><li>알고리즘</li><li>시간 복잡도</li><li>Big O 표기법</li><li>Asymptotic Complexity 점근적 분석</li><li>재귀함수<ul><li>합 구하기</li><li>피보나치 수열</li></ul></li></ol><hr><p>좋은 알고리즘의 필요 요건과, 알고리즘의 실행 속도를 평가하는 방법을 알아본다.</p><h2 id="1-알고리즘"><a href="#1-알고리즘" class="headerlink" title="1. 알고리즘"></a>1. 알고리즘</h2><p>우리는 <code>finite amount of space and time</code>에 집중해야한다.<br>알고리즘은 <strong>유한한</strong> 자원을 가진 환경에서 주어진 문제를 푸는 동작의 모임이다.<br>적은 시간과 적은 자원(공간)을 이용해 문제를 해결하는 알고리즘이 좋은 알고리즘이다.</p><blockquote><p><a href="https://feel5ny.github.io/2017/11/30/JS_02/">+</a> 웹 브라우저에서 사용할 수 있는 메모리는 일반적인 데스크톱 애플리케이션의 가용 메모리에 비해 매우 적다. 적은 메모리만 할당받는 주된 이유는 웹 페이지에서 실행하는 자바스크립트가 시스템 메모리를 전부 사용해서 운영체제를 다운시키는 일을 방지하기 위함이다.<br>메모리 제한은 변수 할당 뿐만 아니라 호출스택, 스레드에서 실행할 수 있는 문장수에도 영향을 미친다.<br>즉! 가능한 최소한의 메모리만 사용해야 페이지의 성능을 올릴 수 있다. </p></blockquote><h3 id="예제-Facebook-친구-2명이-가진-공통-친구-리스트를-만드는-가장-빠르-방법은"><a href="#예제-Facebook-친구-2명이-가진-공통-친구-리스트를-만드는-가장-빠르-방법은" class="headerlink" title="예제_Facebook 친구 2명이 가진 공통 친구 리스트를 만드는 가장 빠르 방법은?"></a>예제_Facebook 친구 2명이 가진 공통 친구 리스트를 만드는 가장 빠르 방법은?</h3><p>n명의 페이스북 친구를 가진 A와 m명의 페이스북 친구를 가진 B의 공통 친구의 수는</p><ul><li>단순하게 생각한다면 n*m</li><li>800명, 400명이라면 320,000번의 비교로 찾을 수 있다.</li><li>시간복잡도를 배우고, 연산횟수를 줄이는 방법을 생각해보자.</li></ul><hr><h2 id="2-시간복잡도"><a href="#2-시간복잡도" class="headerlink" title="2. 시간복잡도 +"></a>2. 시간복잡도 <a href="https://en.wikipedia.org/wiki/Time_complexity" target="_blank" rel="noopener">+</a></h2><p>시간복잡도란 알고리즘이 문제를 해결하기 위한 <strong><code>시간(연산)의 횟수</code></strong>를 말한다.<br>computational complexity that measures or estimates the time<br>taken for running an algorism.<br>Time complexity is commonly estimated by counting the number of <code>elementary operations</code> performed by the algorism, supposing that an elementary operation takes a fixed amount of time to perform. </p><p>알고리즘을 평가하는데 있어 수행시간과 메모리 사용량을 평가기준으로 두는데<br>수행시간에 해당하는 것이 <code>시간 복잡도</code> Time Complexity,<br>메모리 사용량에 해당하는 것이 <code>공간 복잡도</code> Space Complexity이다.</p><p>연산 횟수를 카운팅 할때 3가지 경우가 있다.</p><ol><li>최선의 경우 Best Case</li><li>최악의 경우 Worst Case</li><li>평균적인 경우 Average Case</li></ol><p>평균적인 경우가 가장 이상적으로 보이겠지만 알고리즘이 복잡해 질수록 평균적인 경우는 구하기가 매우 어려워 진다. 그러므로 <strong>최악의 경우</strong>로 알고리즘의 성능을 파악한다.</p><h3 id="2-1-Program-Step에서-Elementary-Operation이란"><a href="#2-1-Program-Step에서-Elementary-Operation이란" class="headerlink" title="2-1. Program Step에서 Elementary Operation이란?"></a>2-1. Program Step에서 Elementary Operation이란?</h3><ul><li>프로그램의 진행 정도를 나타내는 기본 단위이다.</li></ul><ol><li>대입연산</li><li>덧셈, 뺄셈, 곱셈, 나눗셈</li><li>비교구문</li><li>함수호출</li></ol><p>즉, 알고리즘의 실행 순서를 따라가며 Elementary Operation이 일어나는 수를 측정한다.</p><h3 id="2-2-어떻게-카운팅할까"><a href="#2-2-어떻게-카운팅할까" class="headerlink" title="2-2. 어떻게 카운팅할까."></a>2-2. 어떻게 카운팅할까.</h3><ol><li>전역변수를 이용하여 Elementary Operation을 카운팅한다.</li><li>각 실행문 별로 Step수와 실행 횟수를 분석한다.</li></ol><h3 id="2-2-1-전역변수를-이용하여-Elementary-Operation을-카운팅"><a href="#2-2-1-전역변수를-이용하여-Elementary-Operation을-카운팅" class="headerlink" title="2-2-1. 전역변수를 이용하여 Elementary Operation을 카운팅"></a>2-2-1. 전역변수를 이용하여 Elementary Operation을 카운팅</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">list, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> tempSum = <span class="number">0</span>; <span class="comment">// 대입연산</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    count++;   <span class="comment">// loop 한번 돌 때마다</span></span><br><span class="line">    tempSum += list[i];</span><br><span class="line">    count++;  <span class="comment">// 대입연산</span></span><br><span class="line">  &#125;</span><br><span class="line">  count++;  <span class="comment">// for loop 끝날 때 한번</span></span><br><span class="line">  count++;  <span class="comment">// return 수행</span></span><br><span class="line">  <span class="keyword">return</span> tempSum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-2-각-실행문-별로-Step수와-실행-횟수를-분석한다"><a href="#2-2-2-각-실행문-별로-Step수와-실행-횟수를-분석한다" class="headerlink" title="2-2-2. 각 실행문 별로 Step수와 실행 횟수를 분석한다."></a>2-2-2. 각 실행문 별로 Step수와 실행 횟수를 분석한다.</h3><img src="/images/post_img/48/01.png"><p>주어진 프로그램 2개의 성능 비교 및 분석</p><ul><li>프로그램 P1의 성능 : C1 * n^2 + C2 * n</li><li>프로그램 P2의 성능 : C3 * n</li></ul><p>C1, C2, C3에 따라서 대소 비교 결과가 다름.<br>어떤 C1, C2, C3에 대해서도 C1 * n^2 &gt; C3 * n을 만족하는 n은 존재함.</p><p>n이 작으면 프로그램 P1의 성능이 더 좋을 수도 있다.<br>n이 충분히 <code>크면</code> 항상 프로그램 P2의 성능이 좋다. (P1에는 n이 제곱이기 때문에)</p><p>작은 경우 모두 성능이 좋으므로 문제될 것은 없다.<br><strong>따라서 n이 큰 경우의 처리가 중요하다.</strong></p><hr><h2 id="3-Big-O-표기법"><a href="#3-Big-O-표기법" class="headerlink" title="3. Big O 표기법"></a>3. Big O 표기법</h2><p>Big O가 중요한 이유를 알기 위해서는 Asymptotic Complexity에 대해 알야아한다.<br>알고리즘의 성능평가는 시간복잡도와 공간복잡도를 계산하고, 적 표기법으로 나타내면 된다. </p><img src="/images/post_img/48/02.png"><p>위 예와 같이 T(n)으로 표현한 함수의 <code>최고차항의 차수</code>가 빅오가 된다.<br>빅오의 순서는 아래와 같고 커질수록 좋지 않다.<br>보통 O(n^2)이상의 복잡도를 가지는 알고리즘은 좋지 않다.</p><img src="/images/post_img/48/03.png"><img src="/images/post_img/48/05.png"><img src="/images/post_img/48/04.png"><hr><h2 id="4-Asymptotic-Complexity"><a href="#4-Asymptotic-Complexity" class="headerlink" title="4. Asymptotic Complexity"></a>4. Asymptotic Complexity</h2><p>입력의 크기가 충분히 클 때의 <code>시간복잡도</code>와 <code>공간복잡도</code>를 분석하는 것. </p><p>프로그램 성능이 Asymptotic(점진적인) Complexity </p><ul><li>프로그램의 입력 크기 등 성능을 결정하는 주요 특성 값이 매우 클 때의 프로그램의 성능.</li><li>프로그램의 실행 속도가 어떤 경향을 가지는지를 평가한다고 생각하면 된다.</li><li>ex. 입력의 크기가 n이고 n이 매우 큰 경우</li><li>프로그램 성능 평가의 매우 중요한 기준.</li></ul><h3 id="4-1-점근적-분석의-필요성"><a href="#4-1-점근적-분석의-필요성" class="headerlink" title="4-1. 점근적 분석의 필요성"></a>4-1. 점근적 분석의 필요성</h3><p>어떠한 문제 해결을 위한 알고리즘의 성능분석을 할 때, 주어지는 데이터의 형태나 실험을 수행하는 환경, 또는 실험에 사용한 시스템의 성능등 다양한 요소에 의해 공평한 결과가 나오기 힘들고 비교 결과가 항상 일정하지 않을 수 있다.</p><p>이를 효과적으로 해결하는 방법이 점근적 분석법이다. 점근적 분석법은 <code>각 알고리즘이 주어진 데이터의 크기를 기준으로 수행시간 혹은 사용공간이 얼마나 되는지를 객관적으로 비교할 수 있는 기준을 제시해 준다.</code><br>O(빅오), Ω(오메가), Θ(세타)등이 있다. 일반적으로 빅오와 세타표기가 많이 사용된다.</p><h3 id="4-2-빅오-표기법-O-Notation"><a href="#4-2-빅오-표기법-O-Notation" class="headerlink" title="4-2. 빅오 표기법 O Notation"></a>4-2. 빅오 표기법 O Notation</h3><ul><li>점근적 상한선(Asymptotic upper bound)</li><li>주어진 알고리즘이 아무리 나빠도 비교하는 함수와 같거나 좋다.</li><li>정의 : O(g(n)) = {f(n) : there exist positive constants c and n0 such that 0≤f(n)≤cg(n) for all n≥n0}<img src="/images/post_img/48/o_notation.png">n0를 기준으로 n0보다 오른쪽에 있는 모든 n 값에 대해 함수 f(n)은 함수 cg(n)보다 작거나 같다는 의미이다. 그래프가 아래에 있을 수록 수행시간이 짧은 것이므로 성능이 좋은 것이다.</li></ul><h3 id="4-3-오메가-표기법-Ω-Notation"><a href="#4-3-오메가-표기법-Ω-Notation" class="headerlink" title="4-3. 오메가 표기법 Ω Notation"></a>4-3. 오메가 표기법 Ω Notation</h3><ul><li>점근적 하한선(Asymptotic lower bound)</li><li>주어진 알고리즘이 아무리 좋아도 비교하는 함수와 같거나 나쁘다.</li><li>정의 : Ω(g(n)) = {f(n) : there exist positive constants c and n0 such that 0≤cg(n)≤f(n) for all n≥n0}<img src="/images/post_img/48/omega_notation.png">n0를 기준으로 n0보다 오른쪽에 있는 모든 n 값에 대해 함수 f(n)은 함수 cg(n)보다 크거나 같다는 의미이다.</li></ul><h3 id="4-4-세타-표기법-Θ-Notation"><a href="#4-4-세타-표기법-Θ-Notation" class="headerlink" title="4-4. 세타 표기법 Θ Notation"></a>4-4. 세타 표기법 Θ Notation</h3><ul><li>점근선 상한선과 점근적 하한선의 교집합(Asymptotic tighter bound)</li><li>주어진 알고리즘이 아무리 좋아지거나 나빠지더라도 비교하는 함수의 범위안에 있다.</li><li>정의 : Θ(g(n)) = {f(n) : there exist positive constants c1, c2 and n0 such that 0≤c1g(n)≤f(n)≤c2g(n) for all n≥n0}<img src="/images/post_img/48/theta_notation.png">n0를 기준으로 n0보다 오른쪽에 있는 모든 n 값에 대해 함수 f(n)은 함수 c1g(n)보다 크거나 같거나 c2g(n)보다 작거나 같다는 의미이다</li></ul><hr><h4 id="cf-의사코드란-pseudo-code"><a href="#cf-의사코드란-pseudo-code" class="headerlink" title="cf. 의사코드란? pseudo-code +"></a>cf. 의사코드란? pseudo-code <a href="https://medium.com/djangogirlsseoul-codecamp/%EC%9D%98%EC%82%AC%EC%BD%94%EB%93%9C-pseudo-code-%EB%9E%80-d892a3479b1d" target="_blank" rel="noopener">+</a></h4><p>의사(疑似: 비교할 의, 비슷할 사 | Pseudo: 가짜의- ) 코드는 컴퓨터 프로그램이나 알고리즘이 수행해야할 내용을 우리가 사용하는 언어 (한국어 또는 영어 등)로 간략히 서술해 놓은 것을 말합니다. 왜 의사코드를 사용해야 하나요?</p><p>의사코드는 코딩 입력을 시작하기 전, <code>사고를 좀더 명확히 정립하게 만들어주어</code> 프로그램을 설계하는데 도움이 됩니다. 실제 코드 입력을 처음 시작할 때가 제일 힘듭니다! 단순히 소스코드를 입력하는 것보다 함수(function) 프로그램을 만들 때 많은 시간을 낭비할 수 있습니다. 약 10분 정도 각 풀이법의 장점과 단점을 주도면밀하게 살펴보면서 의사코드 작성한다면, 이후 디버그를 수정하고 코드를 재분해 하는데 걸리는 시간을 단축할 수 있습니다.</p><blockquote><p>모델링이라고 생각해보자.</p></blockquote><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://ledgku.tistory.com/33" target="_blank" rel="noopener">http://ledgku.tistory.com/33</a></li><li><a href="http://bigocheatsheet.com/" target="_blank" rel="noopener">http://bigocheatsheet.com/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;목차 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;알고리즘&lt;/li&gt;
&lt;li&gt;시간 복잡도&lt;/li&gt;
&lt;li&gt;Big O 표기법&lt;/li&gt;
&lt;li&gt;Asymptotic Complexity 점근적 분석&lt;/li&gt;
&lt;li&gt;재귀함수&lt;ul&gt;
&lt;li&gt;합 구하기&lt;/li&gt;
&lt;li&gt;피보나치 
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Algorithm" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Algorithm/"/>
    
    
      <category term="CS" scheme="http://feel5ny.github.io/tags/CS/"/>
    
  </entry>
  
  <entry>
    <title>단위 테스트는 왜 해야할까</title>
    <link href="http://feel5ny.github.io/2017/12/08/TDD_01/"/>
    <id>http://feel5ny.github.io/2017/12/08/TDD_01/</id>
    <published>2017-12-08T09:23:55.000Z</published>
    <updated>2019-10-31T13:06:11.611Z</updated>
    
    <content type="html"><![CDATA[<hr><p>목차 </p><ol><li>단위테스트. 다들 중요하다고 하는데 왜 중요할까?</li><li>결국 클린코드를 위한 길</li><li>TDD : Test Driven Development</li><li>실습</li></ol><hr><h2 id="1-단위테스트-다들-중요하다고-하는데-왜-중요할까"><a href="#1-단위테스트-다들-중요하다고-하는데-왜-중요할까" class="headerlink" title="1. 단위테스트. 다들 중요하다고 하는데 왜 중요할까? +"></a>1. 단위테스트. 다들 중요하다고 하는데 왜 중요할까? <a href="https://cjh5414.github.io/why-pytest/" target="_blank" rel="noopener">+</a></h2><p>단위테스트는 모듈이나 어플리케이션 안에 있는 개별적인 코드 단위가 예상대로 작동하는지 확인하는 반복적인 행위이다. </p><p>프로젝트에 단위 테스트를 적용하는 데에는 “내 코드가 제대로 동작하는지 확인하는 것”이라는 명백한 이유 외에도 몇 가지 장점이 있다.</p><ul><li>단위 테스트는 코드가 “어떻게!”작성하는지 생각하는데 도움을 준다. </li><li>게다가 “무엇”을 해야하는지에 있어서 구현 선택을 검토하는데 해가 되지 않고, 그 선택들이 적절한지 아닌지 알아낸다. 주된 효과로는 단위 테스트를 추가하는 것은 애플리케이션의 유닛(함수/메소드)를 더 <code>작게</code> 만든다.</li></ul><blockquote><p>많은 일을 하는 테스팅 코드는 어렵다.’<br>‘많은 일을 하는 디버깅 코드는 어렵다.’<br>이 두 가지 문제의 해결법은 많은 일을 하지 않도록 코드를 작성하는 것이다. 각각의 함수를 단 한가지만의 일을 하도록 작성해야 한다. 이렇게 하면 단위 테스트로 쉽게 테스트할 수 있다. (하나의 함수에 대해 많은 단위 테스트가 필요하지 않는다.)<br>내 동료가 메소드를 더 작게 분리해야 하는지에 대해 판단할 때 사용하는 문구가 있다. 만약 코드의 역할을 다른 프로그래머에게 설명할 때 ‘and’라는 단어를 사용했다면 그 메소드는 적어도 하나 이상의 부분으로 나눠야 한다는 것이다. <a href="http://softwareengineering.stackexchange.com/questions/195989/is-it-ok-to-split-long-functions-and-methods-into-smaller-ones-even-though-they/195992#195992" target="_blank" rel="noopener">stackoverflow</a></p></blockquote><p>단위 테스트의 다른 장점은 문제를 빨리 발견하고 변화를 쉽게하며 통합을 간단하게 하고 설계를 개선할 수 있다는 것이다. </p><blockquote><p>여기까지 읽고 나니, 테스트코드를 짜는 것은, 설계도를 만들면서 프로그래밍을 한다고 생각해도 될듯하다. 스케치를하는 느낌! 아키텍처를 짜면서 프로그래밍을 할 수 있다.</p></blockquote><p>단위테스트의 시작은 어렵다. “hot to start unit testing”를 구글에 검색하면 113,000,000의 결과가 나올정도로. 단위테스트를 시작하는 가장 쉬운 방법은 버그를 고치는 것입니다. 그 방법은 아래와 같다.</p><ul><li>버그를 찾는다.</li><li>버그를 고쳤을 때 통과할만한 테스트를 작성한다.</li><li>테스트를 통과할 때까지 코드를 수정한다.</li></ul><hr><hr><h2 id="2-결국-클린코드를-위한-길"><a href="#2-결국-클린코드를-위한-길" class="headerlink" title="2. 결국 클린코드를 위한 길"></a>2. 결국 클린코드를 위한 길</h2><p>요구사항이 수시로 변경되고 프로젝트 일정이 눈에 보이기 시작하면 테스트 코드 없이 바로 로직 구현을 하는 경우가 태반이라고 했다. 물론 신속히 개발할 수 있지만, 나중에 유지 보수 때 문제가 발생한다고 한다. 유지보수라고 하지만 새로운 기능을 요구할 때도 있다. 기존 로직에 영향을 주지 않고 코드를 작성해야 하는데 테스트 코드 없이 구현하다 보면 사이드 이펙트가 여기 저기서 터진다. 결국 유지보수기간에 코드에 대한 테스트 코드를 다시 작성하는 사태..</p><h3 id="클린코드가-우선순위에서-밀려나서는-안되는-3가지-이유"><a href="#클린코드가-우선순위에서-밀려나서는-안되는-3가지-이유" class="headerlink" title="클린코드가 우선순위에서 밀려나서는 안되는 3가지 이유 +"></a>클린코드가 우선순위에서 밀려나서는 안되는 3가지 이유 <a href="http://codesquad.kr/page/specialTdd.html" target="_blank" rel="noopener">+</a></h3><h4 id="1-유지보수하기-좋은-코드"><a href="#1-유지보수하기-좋은-코드" class="headerlink" title="1. 유지보수하기 좋은 코드"></a>1. 유지보수하기 좋은 코드</h4><p>프로그래머 작업 중 가장 많은 시간을 투자하는 일이 유지보수이다. 유지보수하기 좋은 코드를 구현하는 것은 서비스의 성패를 좌우하는 중요한 요소이다. 유지보수하기 좋은 코드를 구현하는 핵심은 클린 코드 구현에 있다.</p><h4 id="2-변화에-대응하는-핵심-능력"><a href="#2-변화에-대응하는-핵심-능력" class="headerlink" title="2. 변화에 대응하는 핵심 능력"></a>2. 변화에 대응하는 핵심 능력</h4><p>운영 중 필연적으로 발생하기 마련인 기능 추가, 버그 수정, 레거시 코드 리뷰(이전 개발자들의 유산과도 같은 코드) 및 수정 작업과 같은 변화 자체에 확장성있게 대응하려면 클린 코드에 대한 이해와 작성 능력이 필수. 변화를 피할 수 없으면 제대로 대응하자.</p><h4 id="3-프로젝트-협업-능력-향상"><a href="#3-프로젝트-협업-능력-향상" class="headerlink" title="3. 프로젝트 협업 능력 향상"></a>3. 프로젝트 협업 능력 향상</h4><p>읽기 좋은 클린 코드를 작성함으로서 오는 장점은 개인에게만 있지 않다. 특히 1인 개발이 아닌, 여러 개발자가 함께 참여하는 프로젝트일수록 확장성 있는 코드 작성 능력을 가진 개발자의 기여도는 높을 수 밖에 없다.</p><h3 id="cf-레거시-코드란-Legacy-code"><a href="#cf-레거시-코드란-Legacy-code" class="headerlink" title="cf. 레거시 코드란 Legacy code"></a>cf. 레거시 코드란 <code>Legacy code</code></h3><ul><li>테스트가 불가능하거나 어려운 코드</li><li><a href="https://feel5ny.github.io/2017/12/09/Refactoring/">클린코드를 위한 리팩토링</a></li></ul><hr><hr><h2 id="3-TDD-Test-Driven-Development"><a href="#3-TDD-Test-Driven-Development" class="headerlink" title="3. TDD : Test Driven Development +"></a>3. TDD : Test Driven Development <a href="http://blog.jeonghwan.net/mocha/" target="_blank" rel="noopener">+</a></h2><ol><li>우선 개발자는 바라는 향상 또는 새로운 함수를 정읳하는 자동화된 테스트 케이스를 작성(초기적 결함을 점검하는)</li><li>케이스를 통과하기 위한 최소한의 양의 코드를 생성</li><li>새 코드를 표준에 맞도록 리팩토링</li></ol><img src="/images/post_img/45/tdd-work-flow.gif">일반적으로 RED, GREEN, REFACTOR 세단계를 거쳐 이루어진다.<ol><li><code>RED</code> : 실패하는 테스트</li><li><code>GREEN</code> : 테스트에 통과하도록 코드를 작성</li><li><code>REFACTOR</code> : 불필요한 코드를 삭제<br>장점 : 유지보수가 가능한 코드를 작성할수 있고, 버그가 생겨날 여지도 줄고, 높은 가독성을 추구할 수 있다. </li></ol><blockquote><p>참고한 글에서는 심리적인 안정감을 준다고 한다. 테스트 없이 개발하면 그물망 없는 막타워를 뛰어 내리는 심정이라면서.. 코드 한줄한줄이 부담스럽다고 한다.<br>생각해보면 이전 프로젝트에서는 테스트코드 없이 작업에 들어갔었고, 기능구현은 됐으나, 내가 보기 싫은 정도의 무자비한 코드들이 나왔다. 그러다보니 리팩토링조차 하지 못하는 상황.. 그런 의미에서 클린코드를 위한 작업이라고 생각하면, 좋을 듯하다.</p></blockquote><hr><h3 id="BDD-Behaviour-Driven-Development"><a href="#BDD-Behaviour-Driven-Development" class="headerlink" title="BDD (Behaviour Driven Development)"></a>BDD (Behaviour Driven Development)</h3><p>BDD는 행동 베이스이다.<br>엔드 유저의 행동을 시나리오로 가져야합니다.<br>가령 로그인을 예로 BDD를 하려면, 셀레늄으로 실제 브라우저에서 렌더링된 아이디와 패스워드를 입력폼에 넣고 로그인 버튼까지 누르는걸 시뮬레이트해야한다.</p><blockquote><p>Given, When, Then</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Scenario: User uses wrong password</span><br><span class="line">  Given a username dkfksl;</span><br><span class="line">  And a password kdfksj;</span><br><span class="line">  When the user logs in with username and password</span><br><span class="line">  Then the login form should be shown again</span><br></pre></td></tr></table></figure><ol><li>특정 값이 주어지고 (Given)</li><li>어떤 이벤트가 발생했을 때 (When)</li><li>그에 대한 결과를 보장해야한다 (Then)</li></ol><hr><hr><h2 id="4-실습"><a href="#4-실습" class="headerlink" title="4. 실습"></a>4. 실습</h2><blockquote><p>react 테스트때는 Enzyme과 묶어서 Mocha 사용할 예정.<br>Typescript사용, type definition으로는 mocha, node, express 셋팅, 의존모듈 : mocha, shoudld, supertest, typeScript </p></blockquote><p>실습을 위해 필요한 것과 알야아할 용어</p><ul><li>mocha</li><li>should.js (assert 대체)</li><li>supertest</li><li>sinon<ul><li>mock</li></ul></li></ul><hr><h3 id="mocha"><a href="#mocha" class="headerlink" title="mocha"></a>mocha</h3><img src="/images/post_img/45/mocha.svg">Mocha is a feature-rich JavaScript test framework running on Node.js and in the browser, making asynchronous testing simple and fun. Mocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases.<p>mocha는 node와 브라우저 모두에 적용할 수 있고, TDD, BDD, QUnit, export 스타일 모두 적용할 수 있는 프레임웍이다. assertion문 또한, 취향(?)에 따라 선택하여 적용할 수 있다.<br>assertion문 expect, should, assert …</p><hr><h3 id="should"><a href="#should" class="headerlink" title="should +"></a>should <a href="http://shouldjs.github.io/" target="_blank" rel="noopener">+</a></h3><ul><li>테스트 코드를 검증할 때 사용하는 써드파티 라이브러리</li><li>가독성이 높은 테스트 코드를 만들 수 있게해주는 장점!</li><li>assert는 nodejs 공식 모듈, should 써드파티 모듈<ul><li>assert란 실행 결과를 비교하기위해 사용하는 내장 모듈.</li><li>노드에서 제공하는 assert라는 라이브러리가 있지만, 노드측에서 발표를 했다! 노드 assert 이외의 서드파티 라이브러리를 사용하라..!!</li></ul></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.body.should.be.a.Object();              <span class="comment">// res.body는 Object 형태이어야한다. should.be.a</span></span><br><span class="line">res.body.should.have.property(<span class="string">'result'</span>);    <span class="comment">// res.body는 result라는 property를 갖고(have) 있어야 한다. </span></span><br><span class="line">res.body.result.should.have.equal(<span class="string">'Hello Get TDD'</span>) <span class="comment">// res.body.result는 'Hello Get TDD'라는 문자열과 같은 값을 갖고 있어야 한다.</span></span><br></pre></td></tr></table></figure><hr><h3 id="superTest"><a href="#superTest" class="headerlink" title="superTest +"></a>superTest <a href="https://github.com/visionmedia/supertest" target="_blank" rel="noopener">+</a></h3><ul><li>mocha가 하나의 함수를 테스트했다면, <code>통합테스트</code>(api 기능 테스트)에서 사용하는 라이브러리</li><li>api 서버라면 내부적으로 express 구동 -&gt; 요청보낸 뒤 결과 검증까지함(시나리오 코드 작성)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> supertest = <span class="built_in">require</span>(<span class="string">'supertest'</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'should'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server: any = supertest.agent(<span class="string">'http://localhost:3000'</span>)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'테스트 시작'</span>, () =&gt; &#123;</span><br><span class="line">  it(<span class="string">'GET'</span>, done =&gt; &#123;</span><br><span class="line">    server.get(<span class="string">'/'</span>).expect(<span class="string">"Content-type"</span>, /json/).expect(<span class="number">200</span>)</span><br><span class="line">      .end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        res.body.should.be.a.Object();</span><br><span class="line">        res.body.should.have.property(<span class="string">'result'</span>);</span><br><span class="line">        res.body.result.should.have.equal(<span class="string">'Hello Get TDD'</span>)</span><br><span class="line">        done();</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ul><p>서버에서 구현하는 API는 단순히 메모리상의 데이터를 다루는 것만 있는 것은 아닙니다. 사용자 계정 정보 등 영구적으로 저장할 데이터는 데이터베이스에 저장하게 되는데, 서버에 이 정보를 데이터베이스에서 조회한 뒤 API로 응답하는 경우가 빈번합니다.<br>그럼 유닛 테스트를 위해 데이터베이스에 직접 자료를 넣어야 할까요? 그렇게 할 수도 있겠지만 시간이 많이 걸립니다. 왜냐하면 테스트를 위해 데이테베이스 컨넥션을 생성한 뒤 데이터를 입력하고 조회하는 시간이 상당하기 때문입니다. 게다가 이러한 API가 많아질수록 전체 테스트 시간은 늘어나게 됩니다.<br>그래서 목(Mock)을 사용해야 합니다. 데이터베이스 역할을 흉내낼 수 있는 가상의 것을 만들수 있습니다.</p><hr><h3 id="sinon"><a href="#sinon" class="headerlink" title="sinon +"></a>sinon <a href="https://www.slideshare.net/UyeongJu/javaScript-test-double-sinonjs" target="_blank" rel="noopener">+</a></h3><p>Sinon.js는 주로 테스트 대상이 의존하는 모듈과 자원의 <code>대역</code>의 용도로 사용한다. 특정 테스트 프레임워크를 의존하지 않기 때문에 QUnit 이외의 테스트 프레임워크와도 함께 사용할 수 있다. Sinon이라는 이름은 트로이 전쟁에서 활양한 스파이의 이름에서 유래했다.<br>복잡한 비동기나 동시 다발적인 이벤트 그리고 애니메이션등 <code>작성하기 어려운 테스트 타입</code>을 Spy, Stub, Mock, FakeTiner, FakeServer 등으로 대체하여 테스트하기 쉽게 만들어 준다.</p><p>MOCK작업을 할 수 있게 하는 라이브러리라고 생각하면된다.<br>MOCK : 데이터 베이스 역할을 흉내내는 가상의 것</p><hr><h4 id="Mock이란"><a href="#Mock이란" class="headerlink" title="Mock이란?"></a>Mock이란?</h4><p>실제 객체를 만들기엔 비용과 시간이 많이 들거나 의존성이 길게 걸쳐져 있어 제대로 구현하기 어려울 경우, 가짜 객체를 만들어 사용한다.</p><ul><li>JavaScript는 비동기 상황을 테스트해야하기 때문에, 실제로 테스트 코드를 짜는 것은 굉장히 까다로운 작업이 될수 있다. </li><li>이러한 것을 해결하기 위한 하나의 방법으로 stub, mock object를 만드는 방법이 있다.</li></ul><hr><h4 id="Mock-객체는-언제-필요한가"><a href="#Mock-객체는-언제-필요한가" class="headerlink" title="Mock 객체는 언제 필요한가?"></a>Mock 객체는 언제 필요한가?</h4><ul><li>테스트 작성을 위한 환경 구축이 어려운 경우<ul><li>환경 구축을 위한 작업 시간이 많이 필요한 경우에 Mock객체를 사용한다. (데이터베이스, 웹서버, 웹애플리케이션서버, FTP서버, 등)</li><li>특정 모듈을 갖고 있지 않아서 테스트 환경을 구축하지 못할 때 또는 타 부서와의 협의나 정책이 필요한 경우에 사용한다.</li></ul></li><li>테스트가 특정 경우나 순간에 의존적인 경우</li><li>테스트 시간이 오래 걸리는 경우</li><li>개인 PC의 성능이나 서버의 성능문제로 오래 걸릴수 있는 경우 시간을 단축하기 위해 사용한다.</li></ul><hr><h3 id="cf-테스트-러너-karma"><a href="#cf-테스트-러너-karma" class="headerlink" title="cf. 테스트 러너 (karma)"></a>cf. 테스트 러너 (karma)</h3><p>JavaScript는 브라우저 환경에 따라, 테스트 결과가 달라지기 때문에, 실제 브라우저에서 테스트를 꼭! 해야만한다. 테스트 러너는 여러 환경에서 동일 테스트를 호출 할 수 있다.</p><hr><p>참고링크</p><ol><li><a href="http://www.incodom.kr/Mock" target="_blank" rel="noopener">http://www.incodom.kr/Mock</a></li><li><a href="http://webframeworks.kr/tutorials/expressjs/expressjs_test_code/" target="_blank" rel="noopener">http://webframeworks.kr/tutorials/expressjs/expressjs_test_code/</a></li><li><a href="https://mochajs.org/" target="_blank" rel="noopener">https://mochajs.org/</a></li><li><a href="http://jinbroing.tistory.com/148" target="_blank" rel="noopener">http://jinbroing.tistory.com/148</a></li><li><a href="https://hyunseob.github.io/2016/05/09/assert-nodejs-test-module/" target="_blank" rel="noopener">https://hyunseob.github.io/2016/05/09/assert-nodejs-test-module/</a></li><li><a href="https://suhyeon.github.io/2017/12/10/TDD-1/" target="_blank" rel="noopener">https://suhyeon.github.io/2017/12/10/TDD-1/</a></li><li><a href="http://seokjun.kr/node-js-tdd/" target="_blank" rel="noopener">http://seokjun.kr/node-js-tdd/</a></li><li><a href="http://blog.jeonghwan.net/mocha/" target="_blank" rel="noopener">http://blog.jeonghwan.net/mocha/</a></li><li><a href="http://meetup.toast.com/posts/126" target="_blank" rel="noopener">http://meetup.toast.com/posts/126</a></li><li><a href="https://sungjk.github.io/2017/03/03/testing-react-application.html" target="_blank" rel="noopener">https://sungjk.github.io/2017/03/03/testing-react-application.html</a></li><li><a href="http://woogri.tistory.com/entry/BDD-BDD-%EB%84%88%EB%8A%94-%EC%96%B4%EB%94%94%EC%84%9C-%EC%98%A8%EA%B1%B0%EB%8B%88" target="_blank" rel="noopener">http://woogri.tistory.com/entry/BDD-BDD-%EB%84%88%EB%8A%94-%EC%96%B4%EB%94%94%EC%84%9C-%EC%98%A8%EA%B1%B0%EB%8B%88</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;목차 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;단위테스트. 다들 중요하다고 하는데 왜 중요할까?&lt;/li&gt;
&lt;li&gt;결국 클린코드를 위한 길&lt;/li&gt;
&lt;li&gt;TDD : Test Driven Development&lt;/li&gt;
&lt;li&gt;실습&lt;/li&gt;
&lt;/ol&gt;
&lt;h
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="TDD" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/TDD/"/>
    
    
      <category term="TDD" scheme="http://feel5ny.github.io/tags/TDD/"/>
    
      <category term="mocha" scheme="http://feel5ny.github.io/tags/mocha/"/>
    
  </entry>
  
  <entry>
    <title>6/ 함수표현식의 다른 용도</title>
    <link href="http://feel5ny.github.io/2017/12/07/JS_06/"/>
    <id>http://feel5ny.github.io/2017/12/07/JS_06/</id>
    <published>2017-12-07T12:20:19.000Z</published>
    <updated>2019-10-31T13:06:01.464Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. <strong>오류</strong>가 있다면 언제든지 댓글 남겨주세요.</p></blockquote><p>목차 </p><ol><li><a href="#recursion">함수와 재귀</a></li><li><a href="#closure">클로저</a><br>2-1. 클로저 사용 (반복문)<br>2-2. 클로저의 메모리 누수<br>2-3. 클로저를 이용한 고유 변수(private variable : 객체 외부에서 접근할 수 없는 변수)<br>   = 은닉화</li></ol><hr><h2 id="1-함수의-재귀"><a href="#1-함수의-재귀" class="headerlink" title=" 1. 함수의 재귀"></a><a name="oop"></a> 1. 함수의 재귀</h2><p>함수의 재귀 부분은 <a href="https://feel5ny.github.io/2017/12/02/JS_04/">함수Part 포스팅</a>의 callee의 예시를 보면서 설명했었다. 추가로 스트릭트 모드일 경우에 <code>arguments.callee</code>에 접근할 수 없으므로 이를 보완하는 방법을 알아본다.</p><ul><li>이름 붙은 함수 표현식을 써서 같은 결과를 낼 수 있게 한다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> factorial = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">num</span>)</span>&#123; <span class="comment">// f()를 생성하여 factorial에 할당.</span></span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * f(num<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>f라는 이름은 함수를 다른 변수에 할당하더라도 그대로 유지되므로 재귀 호출은 정확히 실행됨.</p><hr><h2 id="2-클로저"><a href="#2-클로저" class="headerlink" title=" 2. 클로저"></a><a name="closure"></a> 2. 클로저</h2><p>클로저란 <strong>다른 함수의 스코프에 있는 변수에 접근 가능한 함수</strong>이다.(내부함수가 외부함수의 스코프에 접근가능). 즉, <strong>내부함수가 참조하는 외부함수의 지역변수가 외부함수에 의해 내부함수가 반환된 이후에도 life-cycle이 유지되는 것을 의미</strong>한다.<br><strong><code>생성될 당시의 환경을 기억하는 함수를 말한다.</code></strong> 클로저를 잘 이해하기 위해서는 스코프 체인이 어떻게 생성되고 사용되는지 자세히 알아야 한다.</p><p>함수에서 변수에 접근할 때마다 스코프 체인에서 해당 이름의 변수를 검색한다. 함수 실행이 끝나면 로컬 활성화 객체는 파괴되고 메모리에는 전역 스코프만 남는다. 하지만 클로저는 외부함수가 실행을 마쳐도 활성화 객체는 내부함수가 파괴될 때가지 메모리에 남는다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createComparisonFunction</span>(<span class="params">propertyName</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">object1, object2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> value1 = object1[propertyName]</span><br><span class="line">    <span class="keyword">const</span> value2 = object1[propertyName]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(value1 &lt; value2) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> compare = createComparisonFunction(<span class="string">"name"</span>)</span><br><span class="line"><span class="keyword">const</span> result = compare(&#123;<span class="attr">name</span>: <span class="string">"Nicholas"</span>&#125;, &#123;<span class="attr">name</span>:<span class="string">"Greg"</span>&#125;)</span><br><span class="line">compare = <span class="literal">null</span>; <span class="comment">// 함수파괴 - GC이 메모리 회수가능</span></span><br></pre></td></tr></table></figure><img src="/images/post_img/43/01">내부 함수가 반환되어 다른 컨텍스트에서 실행되는 동안에도 `propertyName`에 접근하 수 있다. 이런 일이 가능한 것은 내부 함수의 스코프 체인에 `createComparisonFunction()`의 스코프가 포함되기 때문이다.<ol><li>외부함수가 실행을 마치고 익명함수를 반환하면 익명함수의 스코프체인은 외부함수의 활성화객체AO와 전역변수객체GO를 포함하도록 초기화된다. <ul><li>이 때문에 익명 함수는 외부 함수의 번수 전체에 접근할 수 있다.</li></ul></li><li>아직 익명함수의 스코프 체인에서 활성객체를 참조하기 때문에 외부 함수가 실행을 마쳤는데도 활성객체는 파괴디지 않는다.<ul><li>즉 활성화객체는 익명함수가 파괴될 때까지 메모리에 남는다. </li></ul></li></ol><h3 id="중간지점-개념정리"><a href="#중간지점-개념정리" class="headerlink" title="중간지점..개념정리"></a>중간지점..개념정리</h3><p>자신을 포함하고 있는 외부함수보다 내부함수가 더 오래 유지되는 경우,<br>내부함수가 외부함수의 스코프에 접근할 수 있고,<br>외부함수는 외부함수의 지역변수를 사용하는 내부함수가 소멸될 때까지 소멸되지 못하고 상태가 유지되며<br>내부함수에 의해서 소멸하게 되는 특성을 클로저라고 부른다.</p><p>외부함수의 지역변수를 Free variable(자유변수)이라고 부르는데, 클로저라는 이름은 <strong>자유변수에 함수가 닫혀있다(Closed)라는 의미로, 자유변수에 엮여있는 함수라는 뜻</strong>이다.</p><p>외부함수가 이미 반환되었어도 <strong>외부함수 내의 변수는 이를 필요로 하는 내부함수가 하나 이상 존재하는 경우, 계속 유지된다.</strong> (내부함수가 외부함수에 있는 변수의 복사본이 아니라 실제변수에 접근한다.)</p><p>클로저는 외부함수의 스코프를 보관해야하므로 다른 함수에 비해 메모리를 많이 요구한다. 클로저를 과용하면 메모리 문제가 생길 수 있으니, 반드시 필요할 때만 사용하길 권장한다.</p><h3 id="2-1-클로저-사용-반복문"><a href="#2-1-클로저-사용-반복문" class="headerlink" title="2-1. 클로저 사용 (반복문)"></a>2-1. 클로저 사용 (반복문)</h3><p>함수 안에 함수를 정의하고 내부에 정의한 함수를 노출시키면, 클로저를 사용할 수 있다. 함수를 노출시키기 위해서는 함수를 반환하거나 다른 함수로 전달하면 됩니다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">    result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>result 배열에 들어가는 모든 함수가 스코프체인에 <code>createFunctions()</code>의 활성화객체를 포함하므로, 이들은 모두 같은 변수, i를 참조한다. 때문에 마지막에 할당된 i가 저장이 되는것이다. </p><img src="/images/post_img/43/02-1.jpg" witdth="700"><p>이는 for루프의 초기문에 사용된 var키워드 변수의 스코프가 전역이기 때문에 발생하는 현상이므로, ES6의 <code>let</code>키워드를 이용하여 블록레벨 스코프 개념을 만들면 원하는 결과값이 나오긴한다.</p><p>하지만.. 우선 let이 없다는 상황에서 클로저를 사용하여 원하는 결과값을 반환해보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunctions</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">    result[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/images/post_img/43/02-2.jpg" witdth="700">1. 즉시실행함수이기 때문에 함수가 실행되면서 내부함수가 반환된다.  - 즉시실행함수는 한번만 호출시 처음 한번만 실행된다. 2. num에 i를 매개변수로 넘기기 때문에(복사) result에 들어가는 익명함수에는 자유변수 num이 생겼다고 보면되다.3. 배열에 들어가는 함수는 즉시실행함수 매개변수로 i를 받는다. i는 num에 매개변수로 **복사**가되고, num은 해당 함수의 자유변수가 된다. 반환된 내부함수는 자유변수 num에 엮여있는 함수 클로저가 된다. 때문에 외부함수에서 매개변수로 받는 i값에 따라 고유한 num과 클로저를 갖게 된다.<h3 id="2-2-클로저의-메모리-누수"><a href="#2-2-클로저의-메모리-누수" class="headerlink" title="2-2. 클로저의 메모리 누수"></a>2-2. 클로저의 메모리 누수</h3><p>클로저는 외부함수의 활성화객체 참조를 계속 유지하기 때문에 참조카운트가 줄지 않는다. (가비지컬렉션이 잡지 치우지 못한다.) 필요하다면 클로저를 갖고 있는 변수에 null을 할당하여 참조를 끊어야한다.</p><h3 id="2-3-클로저를-통한-은닉화-고유변수"><a href="#2-3-클로저를-통한-은닉화-고유변수" class="headerlink" title="2-3. 클로저를 통한 은닉화 (고유변수)"></a>2-3. 클로저를 통한 은닉화 (고유변수)</h3><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Strict_mode</a></li><li><a href="http://poiemaweb.com/js-closure" target="_blank" rel="noopener">http://poiemaweb.com/js-closure</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. &lt;strong&gt;오류&lt;/strong&gt;가 있다면 언제든지 댓글 남겨주세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;목차 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>0/ React</title>
    <link href="http://feel5ny.github.io/2017/12/07/React_01/"/>
    <id>http://feel5ny.github.io/2017/12/07/React_01/</id>
    <published>2017-12-07T12:20:19.000Z</published>
    <updated>2019-01-03T15:33:29.066Z</updated>
    
    <content type="html"><![CDATA[<p>어썸 리액트! &#128153;</p><p>리액트 공식 사이트로 들어가면 부제목으로 이런 글이 있다.<br><code>A JavaScript library for building user interfaces</code><br>UI 작업을 위한 자바스크립트 라이브러리! </p><p>사용자가 서비스를 접하면서 만나게되는 여러 상황에 빠르게 대응할 수 있고, 다양한 UI 트리거를 빠르게 만들 수 있도록 나온 라이브러리가 아닌가 한다. 그만큼 개발에도 사용자 경험을 많이 신경쓰고 있다는 점에서, UI와 인터렉션은 정말 화두 오브 화두. 상태관리를 손쉽게 할 수 있다는 점때문에 개발자가 UX를 고민할 시간이 더 생긴다는 점에서 리액트를 선호한다. 최근에는 앵귤러를 입문하고 있는데, 비슷한 패턴으로 상태관리를 한다고 느껴지긴했지만, 아직 어려운 개념들이 많고.. 그래서 아직 리액트와의 차이점은 잘 모르겠다. </p><hr><p>목차 </p><ol><li>리액트 탄생배경</li><li>리액트의 특징</li></ol><hr><h2 id="1-리액트-탄생배경"><a href="#1-리액트-탄생배경" class="headerlink" title="1. 리액트 탄생배경"></a>1. 리액트 탄생배경</h2><p>front 영역을 제어하기 위해서는 자바스크립트로 DOM을 컨트롤 하면 된다. 이는 다양한 인터렉션 기능들을 구현할 수 있게 해주지만 이 DOM이라는 것을 조작하기에는 여간 까다로운게 아니다.(바닐라로 간단 기능을 짜본사람은 무슨 느낌인지..) 이런 까다로운 DOM을 쉽고 효율적으로 다루기 위해 Jquery 라이브러리가 나왔다. But, 제이커리는 여러가지 <a href="https://www.tokyobranch.net/archives/7463" target="_blank" rel="noopener">이슈</a>를 갖고 있었다.</p><p>SPA 개발을 위한 구글의 오픈소스 자바스크립트 프레임워크인 Angular가 등장하면서 구조화된 프론트엔드 환경을 제시했다. 이런 상황에서 Facebook에서 React가 등장하게 된다. React는 에어비엔비, 넷플릭스, 드랍박스, 트위터 등에서 사용하고 있다. 리엑트는 자바스크립트 라이브러리이며, 라우터와 같이 웹을 만들 때 필요한 도구들을 포함되어 있지 <strong>않다.</strong> (앵귤러는 포함되어있음) 필요한 도구들이 없는 대신? 가볍다. 그리고 빠르게 배울수 있다는 점!</p><h2 id="2-리액트의-특징"><a href="#2-리액트의-특징" class="headerlink" title="2. 리액트의 특징"></a>2. 리액트의 특징</h2><p>React 공식 사이트에서 말하는 특징</p><h3 id="1-Declarative"><a href="#1-Declarative" class="headerlink" title="1. Declarative"></a>1. Declarative</h3><p>React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes.<br>Declarative views make your code more predictable and easier to debug.</p><blockquote><p>직관적<br>리액트는 인터렉티브 UI를 어려움없이 만들 수 있습니다. 당신의 어플리케이션의 각각의 상태를 위해 간단한 view들을 디자인을 해보십시요. 리액트는 데이터가 변할때 해당 컴포넌트를 효과적으로 업데이트하고 렌더링 할 수 있습니다. 직관적인 view들은 디버깅하기 더 쉽게, 더 잘 예측할 수 있도록 해줍니다!</p></blockquote><h3 id="2-Component-Based"><a href="#2-Component-Based" class="headerlink" title="2. Component-Based"></a>2. Component-Based</h3><p>Build encapsulated components that manage their own state, then compose them to make complex UIs.<br>Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep state out of the DOM.</p><blockquote><p>컴포넌트 단위.<br>자체 상태를 관리하는 캡슐화된 컴포넌트를 만들어서 복잡한 UI를 만들 수 있도록 구성해보세요. 템플릿 대신 자바스크립트로 작성된 컴포넌트 로직을 통해 여러분은 풍부한 데이터를 쉽게 전달하고, DOM에서 상태를 유지할 수 있습니다.</p></blockquote><h3 id="3-Learn-Once-Write-Anywhere"><a href="#3-Learn-Once-Write-Anywhere" class="headerlink" title="3. Learn Once, Write Anywhere"></a>3. Learn Once, Write Anywhere</h3><p>We don’t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code.<br>React can also render on the server using Node and power mobile apps using React Native.</p><blockquote><p>한번배우고, 어디서나 쓰십쇼!우리는 여러분의 기술 스택의 나머지 부분에 대해서 가정하지 않았으므로 여러분은 기존 코드를 다시 작성하지 않고, React에서 새로운 기능을 개발할 수 있습니다. React는 React Native를 사용하여 Node나 모바일 앱을 사용하여 서버에서 렌더링할 수 있습니다.</p></blockquote><hr><h3 id="2-1-Component"><a href="#2-1-Component" class="headerlink" title="2-1. Component"></a>2-1. Component</h3><p>component는 UI를 구성하는 개별적은 View 단위이다. 이 단위들이 레고 블럭처럼 조합되어서 최종 결과물을 만들어낸다. 이는 앵귤러도 같은 개념이다. Component의 강력한 특징은 <strong>재사용</strong>이 가능하다. 틀을 만들어 놓고 여러 컴포넌트로 갖고가서 사용이 가능하다는 것.<br>리덕스 창시자 Dan Abramov는 React의 목표가 성능보다는 유지가능한 앱을 만드는 것!이라고 설명했다고 한다.</p><h3 id="2-2-JSX"><a href="#2-2-JSX" class="headerlink" title="2-2. JSX"></a>2-2. JSX</h3><p>JSX는 React에서 사용하기 위해서 새로 만들어진 자바스크립트 문법이다.<br>React는 작성한 코드를 컴파일하는 과정을 꼭 거쳐야한다. 때문에 리액트에서는 Babel을 사용하고 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">HelloMessage</span> <span class="attr">name</span>=<span class="string">"John"</span> /&gt;</span>, mountNode)</span></span><br></pre></td></tr></table></figure><p>return 내부의 형태와 ReactDom.render의 첫번째 인자는 JSX문법이다. 이를 자바스크립트로 컴파일을 하기위해 Babel을 사용하는 것이다. 자바스크립트로 컴파일 후의 모습은 아래와 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> React.createElement(</span><br><span class="line">      <span class="string">"div"</span>,</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      <span class="string">"Hello "</span>,</span><br><span class="line">      <span class="keyword">this</span>.props.name</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(React.createElement(HelloMessage, &#123; <span class="attr">name</span>: <span class="string">"John"</span> &#125;), mountNode);</span><br></pre></td></tr></table></figure><p>React는 Babel과 같은 트랜스파일러를 꼭 사용해야하기 때문에 Webpack등을 사용해야하는데, 왜 구지 이런 셋팅을 하면서까지 JSX를 사용하는 걸까. 위처럼 작성해도 되지만, 공식사이트에서 말한 첫번째 특징인 직관적인(Declarative) 개발을 할 수 있도록 하기 위해 JSX를 사용한다. JSX를 보면 html마크업과 거의 같다고 볼 수 있다. 어떤 결과물이 나올지 이해가 된 상태에서 개발하기 때문에 예측가능 개발을 할 수 있도록 해주며, 개발의 피로도를 상당히 줄여준다.</p><h3 id="2-3-Vitual-DOM"><a href="#2-3-Vitual-DOM" class="headerlink" title="2-3. Vitual DOM"></a>2-3. Vitual DOM</h3><div class="video-container"><iframe src="//www.youtube.com/embed/BYbgopx44vo" frameborder="0" allowfullscreen></iframe></div><p>DOM은 웹의 핵심으로, 말 그대로 브라우저가 화면을 그리기 위한 정보가 담겨있는 문서이다. 이 DOM을 다루는 것이 힘들다는 것은.. 바닐라로 짜보면 알 수 있다. 정확히는 DOM 조작이 전체 동작을 비효율적으로 만드는게 아니라, 그 이후에 일어나는 일 때문에 작업이 더뎌지는 거라고 한다. DOM에 변화가 생기면, 렌더트리를 재생성하고(모든 요소의 스타일이 다시 계산된다.) 레이아웃을 만들고, 페인팅을 하는 과정을 반복한다. 그만큼 DOM을 쉽게 다룰 수 있는 부분은 개발자들의 숙제였고, 그러던 중에 Jquery가 탄생하게 된것이다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloMessage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">     <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;div&gt;Hello &#123;<span class="keyword">this</span>.props.name&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;I am &#123;this.state.chatName&#125;&lt;/</span>div&gt;</span><br><span class="line">       &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>React 컴포넌트는 render를 다시 호출하여 새로운 결과 값을 return한다. 그런데 이 리턴값은 바로 DOM에 반영되지 않는다! 즉 렌더링이 되지 않는다는 말인데, react는 return값을 갖고 새로운 Virtual DOM을 만든다.. 그리고, 현재 브라우저에 보여지고 있는 진짜 DOM과 비교하여 어떤 부분이 달라졌는지 찾아낸다. 달리진 부분을 발견하면 그 부분만! 바뀐 그 부분만 진짜 DOM에 반영한다. 그리고 브라우저는 이 DOM을 해석하고 유저에게 새로운 화면을 그려준다. 즉, 브라우저 내에서 발생하는 연산의 양을 줄이면서 실제 DOM을 조작하는 것보다 성능이 개선이 된다. </p><p>가상돔을 만든 이유는, 직접 DOM을 조작하는 리소스가 많으 드는 행위를 하지않고, DOM을 조작하는 과정을 최적화시켜주고, 컴포넌트 단위로 묶어서 관리할 수 있도록 해준다. 컴포넌트 단위의 개발을 구현하기 위해 보다 효율적인 DOM 조작 방식을 도입한 것이다. </p><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://reactjs.org/" target="_blank" rel="noopener">https://reactjs.org/</a></li><li><a href="https://medium.com/@RianCommunity/react%EC%9D%98-%ED%83%84%EC%83%9D%EB%B0%B0%EA%B2%BD%EA%B3%BC-%ED%8A%B9%EC%A7%95-4190d47a28f" target="_blank" rel="noopener">https://medium.com/@RianCommunity/react%EC%9D%98-%ED%83%84%EC%83%9D%EB%B0%B0%EA%B2%BD%EA%B3%BC-%ED%8A%B9%EC%A7%95-4190d47a28f</a></li><li><a href="https://velopert.com/3236" target="_blank" rel="noopener">https://velopert.com/3236</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;어썸 리액트! &amp;#128153;&lt;/p&gt;
&lt;p&gt;리액트 공식 사이트로 들어가면 부제목으로 이런 글이 있다.&lt;br&gt;&lt;code&gt;A JavaScript library for building user interfaces&lt;/code&gt;&lt;br&gt;UI 작업을 위한 
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="React" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/React/"/>
    
    
      <category term="react" scheme="http://feel5ny.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>5/ 객체 지향 프로그래밍 (1)</title>
    <link href="http://feel5ny.github.io/2017/12/04/JS_05_1/"/>
    <id>http://feel5ny.github.io/2017/12/04/JS_05_1/</id>
    <published>2017-12-04T05:53:22.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. <strong>오류</strong>가 있다면 언제든지 댓글 남겨주세요.<br>이 주제는 조금 더 공부를 해야할 듯 하다.</p></blockquote><p>목차 </p><ol><li>프로퍼티 타입<ul><li>데이터 프로퍼티</li><li>접근자 프로퍼티</li></ul></li><li>다중 프로퍼티 정의</li><li>프로퍼티 속성 읽기</li></ol><hr><p>객체지향언어는 일반적으로 클래스를 통해 같은 프로퍼티와 메서드를 가지는 객체르 여러 개 만든다는 특징이 있다. ECMAScript에는 클래스라는 개념이 없으며 이에 따라 ECMAScript의 객체는 다른 클래스 기반 언어와 다르다. (ES6에는 class라는 개념이 도입되었다.)</p><p>ECMAScript에서 객체는 순서가 없는 값의 배열이다. 각 프로퍼티와 메서드는 이름으로 구별하며 값에 대응한다. 객체는 이름-값 쌍의 그룹이며 각 값은 데이터나 함수가 될 수 있다.</p><hr><hr><h2 id="1-프로퍼티-타입"><a href="#1-프로퍼티-타입" class="headerlink" title=" 1. 프로퍼티 타입"></a><a name="oop"></a> 1. 프로퍼티 타입</h2><p>객체 리터럴 방식으로 객체를 생성할 때 프로퍼티와 메서드를 생성할 수 있다. 이러한 프로퍼티는 모두 자바스크립트에서 <code>프로퍼티의 행동을 정의하는 특징</code>에 따라 생성된다.<br>이들 속성이 자바스크립트 엔진 내부에서 구현하는 것으로 정의했고, 이들 송성을 자바스크립트에서 직접적으로 접근할 수 있는 방법은 없다.<br>이들 속성은 <code>[[Enumerable]]</code>처럼 속성 이름을 대괄호로 감싸서 내부 속성임을 나타낸다. </p><p>데이터 프로퍼티와 접근자 프로퍼티 두가지 타입이 있다.</p><hr><h3 id="1-1-데이터-프로퍼티"><a href="#1-1-데이터-프로퍼티" class="headerlink" title="1-1. 데이터 프로퍼티"></a>1-1. 데이터 프로퍼티</h3><p>데이터 값에 대한 단 하나의 위치를 포함하여 이 위치에서 값을 읽고 쓴다.(무슨말이지?)</p><ol><li><p><code>[[Configurable]]</code><br>프로퍼티가 delete를 통해 삭제하거나, 속성을 바꾸거나 접근자 프로퍼티로 변활할 수 있음을 나타낸다.<br>객체에서 직접 정의한 모든 프로퍼티에서 이 속성은 기본적으로 true</p></li><li><p><code>[[Enumerable]]</code><br><code>for-in</code>루프에서 해당 프로퍼티를 반환함을 나타낸다.<br>기본은 true</p></li><li><p><code>[[Writable]]</code><br>프로퍼티 값을 바꿀 수 있음을 나타낸다.<br>기본은 true</p></li><li><p><code>[[Value]]</code><br>프로퍼티의 실제 데이터 값을 포함한다. 프로퍼티의 값을 읽는 위치이고, 새로운 값을 쓰는 위치.<br>기본값은 <code>undefined</code></p><blockquote><p>프로퍼티를 선언만 하고 값을 할당하지 않으면 <code>undefined</code></p></blockquote></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person =&#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서 “Nicholas”가 [[Value]] 데이터 프로퍼티에 저장된다는 말이다.</p><hr><h4 id="기본-프로퍼티-속성을-바꾸기-위해서는"><a href="#기본-프로퍼티-속성을-바꾸기-위해서는" class="headerlink" title="기본 프로퍼티 속성을 바꾸기 위해서는?"></a>기본 프로퍼티 <strong>속성</strong>을 바꾸기 위해서는?</h4><p><code>Object.defineProperty()</code>메서드를 사용하면 된다.</p><ul><li>Object.defineProperty() 처럼 강력한 옵션을 사용할 일이 드물겠지만, 자바스크립트 객체를 잘 이해하려면 알고 있으면 좋다. </li><li>전반적인 자바스크립트의 문법을 변화시키고 코드에 대한 해석을 기존처럼 할 수 없는 컨텍스트를 제공한다.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(프로퍼티를 추가하거나 수정할 객체, 프로퍼티 이름, 서술자 객체)</span><br></pre></td></tr></table></figure></li></ul><h4 id="서술자-객체가-뭐지-descriptor-객체"><a href="#서술자-객체가-뭐지-descriptor-객체" class="headerlink" title="서술자 객체가 뭐지? descriptor 객체"></a>서술자 객체가 뭐지? descriptor 객체</h4><p>해당 속성에 대한 특성을 의미.<br>내부 속성 이름과 같다. 서술자 객체에는 <code>configurable</code>, <code>enumerable</code>, <code>writable</code>, <code>value</code> 4가지 프로퍼티가 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperyt(person, <span class="string">"name"</span>, &#123;</span><br><span class="line">  writable: <span class="literal">false</span>, <span class="comment">// readOnly 형식으로 바꿨다고 생각하자. </span></span><br><span class="line">  value: <span class="string">"Nicholas"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// "Nicholas"</span></span><br><span class="line">person.name = <span class="string">"Greg"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name) <span class="comment">// "Nicholas"</span></span><br></pre></td></tr></table></figure><hr><h3 id="1-2-접근자-프로퍼티-accessor-함수"><a href="#1-2-접근자-프로퍼티-accessor-함수" class="headerlink" title="1-2. 접근자 프로퍼티 (accessor 함수)"></a>1-2. 접근자 프로퍼티 (accessor 함수)</h3><p>데이터 값이 들어있지 않고, <code>getter</code>함수와 <code>setter</code>함수로 구성된다. (옵셔널)<br>접근자 프로퍼티를 읽을 때는 getter함수가 호출</p><ul><li>유효한 값을 반환할 책임은 이 함수에 있다.</li></ul><p>접근자 프로퍼티의 4가지 속성</p><ol><li><p><code>[[Configurable]]</code><br>프로퍼티가 delete를 통해 삭제하거나, 속성을 바꾸거나 접근자 프로퍼티로 변활할 수 있음을 나타낸다.<br>기본은 true</p></li><li><p><code>[[Enumerable]]</code><br><code>for-in</code>루프에서 해당 프로퍼티를 반환함을 나타낸다.<br>기본은 true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="string">'first-name'</span>: <span class="string">'Joy'</span>,</span><br><span class="line">  <span class="string">'last-name'</span>: <span class="string">'Kim'</span>,</span><br><span class="line">  gender: <span class="string">'female'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// prop에 객체의 프로퍼티 이름이 반환된다. 단, 순서는 보장되지 않는다.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> person) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prop + <span class="string">': '</span> + person[prop]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">first-name: Joy</span></span><br><span class="line"><span class="comment">last-name: Kim</span></span><br><span class="line"><span class="comment">gender: female</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p><code>[[Get]]</code><br>프로퍼티를 <strong>읽을</strong> 때 호출할 함수.<br>기본은 undefined</p></li><li><p><code>[[Set]]</code><br>프로퍼티를 <strong>바꿀</strong> 때 호출할 함수.<br>기본은 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> book = &#123;</span><br><span class="line">  _year: <span class="number">2004</span>, </span><br><span class="line">  <span class="comment">// 밑줄(_)은 이 프로퍼티는 객체의 메서드를 통해서만 접근할 것이고 객체 외부에서는 접근하지 않겠다는 의도를 나타낼 때 흔히 쓰는 표기법 (private와 같은 개념)</span></span><br><span class="line">  edition: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">"year"</span>, &#123;</span><br><span class="line">  <span class="keyword">get</span>: function()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._year</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span>: function(newValue)&#123;</span><br><span class="line">    <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>._year = newValue;</span><br><span class="line">      <span class="keyword">this</span>.edition += newValue <span class="number">-2004</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">book.year = <span class="number">2005</span>;</span><br><span class="line">alert(book.edition) <span class="comment">//2</span></span><br></pre></td></tr></table></figure></li></ol><p>setter의 경우는 프로퍼티의 값을 바꿨을 때 해당 프로퍼티만 바뀌는 게 아니라 부수적인 절차가 필요한 경우에 사용한다.</p><p>getter만 셋팅할 경우 읽기전용<br>setter만 셋팅될 경우 undefined</p><hr><h2 id="2-다중-프로퍼티-정의"><a href="#2-다중-프로퍼티-정의" class="headerlink" title=" 2. 다중 프로퍼티 정의"></a><a name="oop"></a> 2. 다중 프로퍼티 정의</h2><p>여러개의 프로퍼티를 동시에 수정해야할 경우 <code>Object.defineProperties()</code><br>configurable의 기본값은 true이지만, defineProperties나 defineProperty은 공통적으로 호출만 되면 true로 재지정하지 않는 이상 false가 된다. </p><hr><h2 id="3-프로퍼티-속성-읽기"><a href="#3-프로퍼티-속성-읽기" class="headerlink" title=" 3. 프로퍼티 속성 읽기"></a><a name="oop"></a> 3. 프로퍼티 속성 읽기</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(읽어올 프로퍼티가 포함된 객체, 서술자를 가져올 프로퍼티 이름)</span><br></pre></td></tr></table></figure><p>원하는 프로퍼티의 서술자 프로퍼티를 읽을 수 있다.<br>모든 객체에서 사용가능하며, DOM이나 BOM 객체에서도 가능하다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> book = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(book, &#123;</span><br><span class="line">  _year: &#123;</span><br><span class="line">    value: <span class="number">2004</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  edition: &#123;</span><br><span class="line">    value: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  year: &#123;</span><br><span class="line">    <span class="keyword">get</span>: function()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>._year;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span>: function(newValue)&#123;</span><br><span class="line">      <span class="keyword">if</span> (newValue &gt; <span class="number">2004</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>._year = newValue;</span><br><span class="line">        <span class="keyword">this</span>.edition += newValue - <span class="number">2004</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"_year"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(descriptor.value) <span class="comment">// 2004</span></span><br><span class="line"><span class="built_in">console</span>.log(descriptor.configurable) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> descriptor.get) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(book, <span class="string">"year"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(descriptor.value) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(descriptor.configurable) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> descriptor.get) <span class="comment">// "function"</span></span><br></pre></td></tr></table></figure><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://www.bsidesoft.com/?p=1878#%25ec%25a0%2595%25ec%25a0%2581%25ec%258b%259c%25ec%25a0%2590%25ea%25b3%25bc-%25ec%258b%25a4%25ed%2596%2589%25ec%258b%259c%25ec%25a0%2590" target="_blank" rel="noopener">http://www.bsidesoft.com/?p=1878#%25ec%25a0%2595%25ec%25a0%2581%25ec%258b%259c%25ec%25a0%2590%25ea%25b3%25bc-%25ec%258b%25a4%25ed%2596%2589%25ec%258b%259c%25ec%25a0%2590</a></li><li><a href="http://poiemaweb.com/js-object" target="_blank" rel="noopener">http://poiemaweb.com/js-object</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. &lt;strong&gt;오류&lt;/strong&gt;가 있다면 언제든지 댓글 남겨주세요.&lt;br&gt;이 주제는 조금 더 공부를 해야할 듯 하다.&lt;/p&gt;
&lt;/blockq
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>4/ 참조타입_Function 타입 (2)</title>
    <link href="http://feel5ny.github.io/2017/12/03/JS_04_2/"/>
    <id>http://feel5ny.github.io/2017/12/03/JS_04_2/</id>
    <published>2017-12-03T11:11:53.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. <strong>오류</strong>가 있다면 언제든지 댓글 남겨주세요.</p></blockquote><p>목차 </p><ol><li><a href="#FunctionProperty">함수의 내부 구조</a></li><li><a href="#FunctionMethod">함수 프로퍼티와 메서드</a></li><li><a href="#several_type">함수의 다양한 형태</a><br>3-1. 즉시실행함수<br>3-2. 내부함수<br>3-3. 콜백함수</li></ol><hr><h2 id="1-함수의-내부-구조"><a href="#1-함수의-내부-구조" class="headerlink" title=" 1. 함수의 내부 구조"></a><a name="FunctionProperty"></a> 1. 함수의 내부 구조</h2><p>함수 내부에는 객체들이 있다. </p><img src="/images/post_img/39/01.png" width="80%"><p>요약</p><ul><li><code>arguments</code> 함수에 전달된 파라미터를 모두 포함하는 유사배열객체</li><li><code>this</code> 함수의 호출패턴에 따라 값이 달라진다. </li><li><code>caller</code> 해당 함수를 호출한 함수를 참조하는 값을 갖고있다. 전역함수에서는 null. 재귀함수를 사용할 때 사용가능.</li><li><code>length</code> arguments의 배열 길이. (파라미터의 갯수)</li><li><code>name</code> 함수의 이름</li><li><code>__proto__</code> 모든 객체가 갖고 있는 프로퍼티. [[Prototype]] 이며, 브라우저마다 다르게 명시한다. 해당 객체의 프로토타입을 가리키는 참조값을 갖고있다.</li><li><code>prototype</code> 함수 객체가 생성자로 사용될 때 이 함수를 통해 생성된 객체의 부모 역할을 하는 객체를 가리킨다.</li><li><code>apply</code> 함수를 호출하면서 해당함수의 this를 호출한 함수로 넘기는 역할을 한다.  </li><li><code>call</code> apply와 같은 개념이며, apply와 다른 점은 parmeter를 각각 넘기는 스타일이다.</li><li><code>bind</code> bind() 메소드는 호출될 때 그 this 키워드를 제공된 값으로 설정하고 새로운 함수가 호출될 때 제공되는 주어진 순서의 선행 인수가 있는 새로운 함수를 생성한다.</li></ul><hr><h3 id="1-1-arguments"><a href="#1-1-arguments" class="headerlink" title="1-1. arguments"></a>1-1. <code>arguments</code></h3><p>순회가능한(iterable) 유사배열객체이며, 함수에 전달된 파라미터를 모두 포함한다.<br>arguments 프로퍼티는 arguments 객체를 값으로 가지며, 함수 내부에서 지역변수처럼 사용된다. 즉, 외부에서는 호출할 수 없다. </p><p>arguments 객체에는<br><code>callee</code>, <code>length</code>, <code>Symbol</code> 프로퍼티가 존재한다.<br><code>callee</code> 프로퍼티는 arguments 객체의 소유자인 함수를/ 가리키는 포인터이다.</p><img src="/images/post_img/39/02.png" width="80%"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * factorial(num<span class="number">-1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수 이름에 의존하는 약점을 callee로 보완</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(num &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num<span class="number">-1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-this"><a href="#1-2-this" class="headerlink" title="1-2. this"></a>1-2. <code>this</code></h3><h3 id="1-3-caller"><a href="#1-3-caller" class="headerlink" title="1-3. caller"></a>1-3. <code>caller</code></h3><p>caller 프로퍼티에는 해당 함수를 호출한 함수에 대한 <strong>참조</strong>를 저장하며, 전역 스코프에서 호출했다면 <code>null</code>이 저장된다. </p><hr><h2 id="2-함수-프로퍼티와-메서드"><a href="#2-함수-프로퍼티와-메서드" class="headerlink" title=" 2. 함수 프로퍼티와 메서드"></a><a name="FunctionMethod"></a> 2. 함수 프로퍼티와 메서드</h2><p>함수에서 사용된 this는 실행된 객체를 가리키거나 상위 컨텍스트인 window를 가리킨다.<br><strong>this를 조작해서 다를 객체를 지정하려면?</strong> apply나 call을 사용하면 된다.</p><h3 id="2-1-apply-메서드"><a href="#2-1-apply-메서드" class="headerlink" title="2-1. apply 메서드"></a>2-1. <code>apply</code> 메서드</h3><p>소유자인 <strong>함수를 호출하면서</strong> this를 파라미터로 넘기는데, 결론적으로는 함수 내부에서 this객체의 값을 바꾸는 것이나 마찬가지이다. 매개변수로는 소유자함수에 넘길 this와 매개변수 배열을 (Array의 인스턴스 혹은 arguments)를 받는다. </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum1</span>(<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>) <span class="comment">// arguments 객체를 넘김</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum2</span>(<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum.apply(<span class="keyword">this</span>, [num1, num2]) <span class="comment">// 배열을 넘김</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(callSum1(<span class="number">10</span>,<span class="number">10</span>)) <span class="comment">//20</span></span><br><span class="line">alert(callSum2(<span class="number">10</span>,<span class="number">10</span>)) <span class="comment">//20</span></span><br></pre></td></tr></table></figure><h3 id="2-2-call"><a href="#2-2-call" class="headerlink" title="2-2. call"></a>2-2. <code>call</code></h3><p>apply와 같은데, 두번째 파라미터를 array형태가 아니라, 각각 나열해야한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSum</span>(<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sum.call(<span class="keyword">this</span>, num1, num2) <span class="comment">// arguments 객체를 넘김</span></span><br><span class="line">&#125;</span><br><span class="line">alert(callSum(<span class="number">10</span>,<span class="number">10</span>)) <span class="comment">//20</span></span><br></pre></td></tr></table></figure><h3 id="2-3-bind"><a href="#2-3-bind" class="headerlink" title="2-3. bind"></a>2-3. <code>bind</code></h3><p>새 함수 인스턴스를 만드는데 그 this는 bind()에 전달된 값이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.color= <span class="string">"red"</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">color</span>: <span class="string">"white"</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.color)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objectSayColor = sayColor.bind(o)</span><br><span class="line">objectSayColor() <span class="comment">//white</span></span><br></pre></td></tr></table></figure><img src="/images/post_img/39/04" width="400"><h3 id="2-4-proto-프로퍼티"><a href="#2-4-proto-프로퍼티" class="headerlink" title="2-4. __proto__ 프로퍼티"></a>2-4. <code>__proto__</code> 프로퍼티</h3><p>ECMAScript spec에서는 <strong><code>모든 객체</code>는 자신의 프로토타입을 가리키는 <code>[[Prototype]]</code>이라는 숨겨진 프로퍼티를 가진다</strong>라고 되어있다. <code>[[Prototype]]</code>와 <code>__proto__</code>는 같은 개념이다. </p><h3 id="2-5-prototype프로퍼티"><a href="#2-5-prototype프로퍼티" class="headerlink" title="2-5. prototype프로퍼티"></a>2-5. <code>prototype</code>프로퍼티</h3><p><strong>함수 객체만이 갖고 있는 프로퍼티</strong>로, 자바스크립트 객체지향의 근간이다. <code>__proto__</code>와 다르다.</p><ul><li>함수 객체가 생성자로 사용될 때 이 함수를 통해 생성된 객체의 부모 역할을 하는 객체를 가리킨다.</li><li>함수가 생성될 때 만들어지며 <code>constructor</code> 프로퍼티를 가지는 객체를 가리킨다. 이 constructor 프로퍼티는 함수 객체 자신을 가리킨다.</li></ul><hr><h2 id="3-함수의-다양한-형태"><a href="#3-함수의-다양한-형태" class="headerlink" title=" 3. 함수의 다양한 형태"></a><a name="several_type"></a> 3. 함수의 다양한 형태</h2><h3 id="3-1-즉시호출함수표현식-IIFE-Immediately-Invoke-Function-Expression"><a href="#3-1-즉시호출함수표현식-IIFE-Immediately-Invoke-Function-Expression" class="headerlink" title="3-1. 즉시호출함수표현식 IIFE, (Immediately Invoke Function Expression)"></a>3-1. 즉시호출함수표현식 IIFE, (Immediately Invoke Function Expression)</h3><p>함수의 정의와 동시에 실행되는 함수를 즉시호출함수라고 한다. 최초 한번만 호출되며 다시 호출할 수는 없다. 이러한 특징을 이용하여 최초 한번만 실행이 필요한 초기화 처리등에 사용할 수 있다.</p><blockquote><p>react에서 componentwillmount의 개념</p></blockquote><p>즉시실행함수 내에 처리 로직을 모아 두면 혹시 있을 수도 있는 변수명 충돌을 방지할 수 있어 이를 위한 목적으로 사용되기도 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 기명 즉시실행함수(named immediately-invoked function expression)</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 익명 즉시실행함수(immediately-invoked function expression)</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><h3 id="3-2-내부함수"><a href="#3-2-내부함수" class="headerlink" title="3-2. 내부함수"></a>3-2. 내부함수</h3><p>함수 내부에 정의된 함수를 내부함수라 한다.<br>내부함수는 부모함수의 변수에 접근할 수 있지만, 부모함수는 자식함수의 변수에 접근할 수 없다.<br><img src="/images/post_img/39/03.jpg" width="400"></p><h3 id="3-3-콜백함수"><a href="#3-3-콜백함수" class="headerlink" title="3-3. 콜백함수"></a>3-3. 콜백함수</h3><p>콜백함수는 함수를 명시적으로 호출하는 방식이 아니라 특정 이벤트가 발생했을 때 시스템에 의해 호출되는 함수를 말한다. 보통 이벤트 핸들러 처리때, 비동기식 처리모델에 사용된다. 옵저버(Observer) 디자인 패턴에서 나온 개념이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'1초 후 출력된다.'</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>비동기식 처리 모델이란 처리가 종료하면 호출될 함수(콜백함수)를 미리 매개변수에 전달하고 처리가 종료하면 콜백함수를 호출하는 것이다.</p><p>콜백함수는 <strong>콜백 큐</strong>에 들어가 있다가 해당 이벤트가 발생하면 호출된다.<br>콜백 함수는 <strong>클로저</strong>이므로 콜백 큐에 단독으로 존재하다가 호출되어도 콜백함수를 전달받은 함수의 변수에 접근할 수 있다. (<a href="http://meetup.toast.com/posts/89" target="_blank" rel="noopener">참고</a>)</p><p><strong>그런데 왜 이름이 callback 일까?</strong><br>설명1 -<br>선언된 함수를 이용하는 것을 호출 (call) 한다고 표현 한다. 콜백 함수는 운영체제(혹은 웹)에 의해 호출되는 응용 프로그램의 함수라 할 수 있다. 호출되는 방향이 정상적인 호출과 달리 <strong>반대된다는 의미</strong>에서 콜백이라고 한다. 정상적인 함수 호출 방법과는 다르게 운영체제 ( 시스템 ) 측에서 이벤트를 발생시켜서 이에 대한 처리를 해달라고 요청해 오는 과정이 있기 때문에 이와 같은 이름이 붙여졌다고 할 수 있다.</p><p>설명2 -<br>콜백함수란 API 의 반대개념이라고 볼 수 있습니다.<br>또한 말그대로 콜백! CallBack &gt; 반대로 부른다고 해석할 수 있지요.<br>우리는 작성하는 일반 코드내에서<br>보통 API나 SDK에서 제공해주는 함수(Function)들을 호출(Call)하여 사용하곤 한다.<br>이런 방식의 경우, 어떤 이벤트를 제어하기 위해서는 별도의 쓰레드를 생성하여 무한루프로 실시간 검사하는 꽤나 무겁고 살짝 무식한 프로그램들을 만들어야한다.</p><p>보통 이럴때, 사용하는 것이 콜백(CallBack) 함수.<br>물론 시스템상 CallBack함수를 만들어 등록하는 방식이 제공되어야 한다.<br>Windows 프로그램상에서 On??Event()를 통해 등록하는 방식이나, 안드로이드 상에서 Listener를 등록하는 방식이 이와 같다.<br>콜백함수라는 말 그대로 일반 Call의 반대 방향을 말한다.<br>통상적으로 쓰듯이 우리가 시스템상의 함수를 Call하는 것이 아니라, 시스템에서 우리가 만들고 등록한 함수를 Call하는 방식.</p><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/js-function" target="_blank" rel="noopener">http://poiemaweb.com/js-function</a></li><li><a href="http://shinluckyarchive.tistory.com/479" target="_blank" rel="noopener">shinlucky’s Archive</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. &lt;strong&gt;오류&lt;/strong&gt;가 있다면 언제든지 댓글 남겨주세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;목차 &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>4/ 참조타입_Function 타입 (1)</title>
    <link href="http://feel5ny.github.io/2017/12/02/JS_04_1/"/>
    <id>http://feel5ny.github.io/2017/12/02/JS_04_1/</id>
    <published>2017-12-02T02:20:12.000Z</published>
    <updated>2019-10-31T13:06:01.544Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. <strong>오류</strong>가 있다면 언제든지 댓글 남겨주세요.</p></blockquote><p>목차 </p><ol start="0"><li><a href="#Function">Function 타입</a></li><li><a href="#declarations_expressions">함수 선언 vs 함수 표현식</a></li><li><a href="#First_class_object">값처럼 쓰는 함수(일급객체)</a></li><li><span style="color:lightgray">함수의 내부 구조</span></li><li><span style="color:lightgray">함수 프로퍼티와 메서드</span><br> <span style="color:gray">4,5번은 Function 2편에서</span></li></ol><hr><h2 id="1-Function-타입"><a href="#1-Function-타입" class="headerlink" title=" 1. Function 타입"></a><a name="Function"></a> 1. Function 타입</h2><p>함수는 객체이다. 모든 함수는 Function타입의 인스턴스이며, 프로퍼티와 메서드가 있다.<br>함수란 어떤 특정 작업을 수행하기 위해 필요한 일련의 구문들을 그룹화하기 위한 개념이다.</p><h3 id="함수-정의"><a href="#함수-정의" class="headerlink" title="함수 정의"></a>함수 정의</h3><ol><li><p>함수 선언식</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span> (<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>함수 표현식 Function expression</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>일급객체라는 함수의 특징 때문에 함수 리터럴 방식으로 선언 후 변수에 할당할 수 있다.</li><li>할당된 함수를 가리키는 참조값을 저장하게 된다.</li><li>이렇게 생성된 함수는 function 키워드 다음에 함수 이름이 없으므로 <code>익명 함수</code>로 간주한다. <ul><li>익명함수(anonymous function) = 람다함수(lambda)</li><li>name 프로퍼티는 빈 문자열이다.</li><li>함수표현식으로 재귀, 클로저, 고유변수 등을 설명할 수 있다. <br></li></ul></li></ul></li><li><p>Function 생성자 사용 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sum = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'num1'</span>,<span class="string">'num2'</span>,<span class="string">'return num1 + num2'</span>)</span><br></pre></td></tr></table></figure><ul><li>함수 리터럴 방식</li><li>당연히 권장하지 않는다.</li><li>ECMAScript 생성자에 전달할 문자열을 다시 평가해야 하므로 성능에 영향이 있다.</li></ul></li></ol><p><strong><code>괄호를 쓰지않는 sum</code></strong><br>괄호를 쓰지 않고 함수 이름만 쓰면 함수를 실행하지 않고 <strong>함수를 가리키는 포인터에 접근(만)하는 것</strong>이다.</p><hr><h2 id="2-함수-선언-vs-함수-표현식"><a href="#2-함수-선언-vs-함수-표현식" class="headerlink" title=" 2. 함수 선언 vs 함수 표현식"></a><a name="declarations_expressions"></a> 2. 함수 선언 vs 함수 표현식</h2><p>자바스크립트 엔진이 <a href="https://feel5ny.github.io/2017/12/01/JS_03/">실행 컨텍스트</a>에 데이터를 불러올 때 중요한 차이가 하나 있다.<br><span style="color: tomato">함수 선언</span>은 어떤 코드도 실행하기 전에 이미 모든 실행 컨텍스트에서 접근하고 실행할 수 있지만<br><span style="color: white">함수 표현식</span>은 코드 실행이 해당 줄까지 진행하기 전에는 사용할 수 없다.</p><p>실행 컨텍스트와 같이 생각해보자!<strong>자바스크립트 엔진은 코드를 평가할 때 제일 먼저 함수 선언을 찾은 다음 이들을 맨 위로 올린다 (함수 호이스팅). <code>함수 표현식</code>은 변수에 함수가 할당된 개념이기 때문에, 해당 변수에 값(함수)이 들어오기 전까지는 <code>undefined</code>로만 선언되어있는 상태이다.(변수 호이스팅)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert(sum(<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line"><span class="keyword">const</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>즉, 위 코드를 보면 에러가 나는데, sum은 컨텍스트에 있지만 매개변수를 넘길 수 있는 형태가 아니기 때문에(2번째 줄 오기 전까지는 <code>undefined</code>) 해당 코드까지 실행하기 전에는 <code>unexpected identifier</code> 에러를 낸다.<br>(예기치 못한 식별자 = <code>sum(10,10)</code>을 보고 함수형태의 식별자 sum을 기대하고 찾았는데, 함수형태가 아니라서) </p><h4 id="함수-표현식만-사용하자고-권고한다-참고"><a href="#함수-표현식만-사용하자고-권고한다-참고" class="headerlink" title="함수 표현식만 사용하자고 권고한다 : 참고"></a>함수 표현식만 사용하자고 권고한다 : <a href="http://poiemaweb.com/js-function#2-함수-호이스팅function-hoisting" target="_blank" rel="noopener">참고</a></h4><p>JavaScript : The Good Parts의 저자이며 자바스크립트의 권위자인 더글러스 크락포드(Douglas Crockford)는 이와 같은 문제 때문에 <code>함수표현식만을 사용할 것을 권고하고 있다.</code> 함수 호이스팅이 함수 호출 전 반드시 함수를 선언하여야 한다는 규칙을 무시하므로 <strong>1. 코드의 구조를 엉성하게 만들 수 있다고 지적한다.</strong></p><p>또한 함수선언식으로 함수를 정의하면 사용하기에 쉽지만 대규모 애플리케이션을 개발하는 경우 <strong>2. 인터프리터가 너무 많은 코드를 변수 객체(VO)에 저장하므로 애플리케이션의 응답속도는 현저히 떨어질 수 있으므로 주의해야 할 필요가 있다.</strong></p><hr><h2 id="3-값처럼-쓰는-함수-일급객체"><a href="#3-값처럼-쓰는-함수-일급객체" class="headerlink" title=" 3. 값처럼 쓰는 함수 (일급객체)"></a><a name="First_class_object"></a> 3. 값처럼 쓰는 함수 (일급객체)</h2><p>자바스크립트 함수는 <strong>일급 객체</strong>이다. </p><p>일급객체란 </p><ol><li>생성(인스턴스 생성가능), </li><li>대입, </li><li>연산, </li><li>인자 또는 반환값으로서의 전달 등 </li></ol><p><strong>프로그래밍 언어의 기본적 조작을 제한없이 사용할 수 있는 대상</strong>을 의미한다.<br>일급객체일 경우 아래와 같은 특징을 갖는다.</p><div style="background-color: #303337; padding: 21px;"> 1. 무명의 [리터럴](https://feel5ny.github.io/2017/11/17/Typescript_04/#literal)로 표현이 가능하다.2. 변수나 자료구조 (객체, 배열...)에 저장할 수 있다.3. 함수의 파라미터로 전달할 수 있다. 4. 반환값(return value)으로 사용할 수 있다. (내부함수)</div><p>함수와 다른 객체를 구분 짓는 특징은 호출할 수 있다는 것이다.</p><ol start="4"><li>함수가 다른 함수를 반환하는 상황<br>예시1_callSomeFunction<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sample example</span></span><br><span class="line"><span class="comment">// callSomeFuncion은 범용함수이다. 범용함수란 더 많은 상황에서 더 잘 적용할 수 있는 함수를 말한다.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callSomeFunction</span>(<span class="params">someFunction, someArgument</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> someFunction(someArgument) <span class="comment">// 반환값으로 사용됨</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add10</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1 = callSomeFunction(add10, <span class="number">19</span>);</span><br><span class="line">alert(result); <span class="comment">//20</span></span><br></pre></td></tr></table></figure></li></ol><p>예시2_sort의 createComparisonFunction함수</p><ul><li>해당 객체의 프로퍼티 이름을 확인하여 순서를 배치하는 함수를 반환하는 비교함수이다.</li><li>개체는 해당 속성 중 하나의 값을 기준으로 정렬 할 수 있습니다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sort</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createComparisonFunction</span>(<span class="params">propertyName</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">object1, object2</span>)</span>&#123; <span class="comment">// return 연산자 뒤에 내부함수</span></span><br><span class="line">    <span class="keyword">let</span> value1 = object1[propertyName]</span><br><span class="line">    <span class="keyword">let</span> value2 = object2[propertyName]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (value1 &lt; value2)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// value1이 앞에 옴</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2)&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// value1이 뒤에 옴</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = [&#123;<span class="attr">name</span>: <span class="string">'Joy'</span>, <span class="attr">age</span>: <span class="number">27</span>&#125;, &#123;<span class="attr">name</span>:<span class="string">'Clara'</span>, <span class="attr">age</span>:<span class="number">28</span>&#125;]</span><br><span class="line">data.sort(createComparisonFunction(<span class="string">'name'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(data[<span class="number">0</span>].name) <span class="comment">// Clara</span></span><br><span class="line">data.sort(createComparisonFunction(<span class="string">'age'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(data[<span class="number">0</span>].age) <span class="comment">// 27</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="sort-compareFunction"><a href="#sort-compareFunction" class="headerlink" title="sort(compareFunction)"></a><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noopener"><strong><code>sort(compareFunction)</code></strong></a></h3><p>compareFunction이 제공되지 않으면 <strong>요소를 문자열(toString)로 변환하고 유니 코드 코드 포인트 순서로 문자열을 비교하여 정렬</strong>됩니다. 예를 들어 “바나나”는 “체리”앞에옵니다. 숫자 정렬에서는 9가 80보다 앞에 오지만 숫자는 문자열로 변환되기 때문에 <strong>“80”은 유니 코드 순서에서 “9”앞에옵니다.</strong></p><p>문자열 대신 숫자일 경우 value1과 value2를 빼는방법으로 색인을 반환한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/js-function" target="_blank" rel="noopener">http://poiemaweb.com/js-function</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;‘프론트엔드 개발자를 위한 자바스크립트 프로그래밍’ 책을 참고하여 정리합니다. &lt;strong&gt;오류&lt;/strong&gt;가 있다면 언제든지 댓글 남겨주세요.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;목차 &lt;/p&gt;
&lt;ol start=&quot;
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>3/ 실행 컨텍스트와 스코프</title>
    <link href="http://feel5ny.github.io/2017/12/01/JS_03/"/>
    <id>http://feel5ny.github.io/2017/12/01/JS_03/</id>
    <published>2017-12-01T01:13:55.000Z</published>
    <updated>2019-10-31T13:06:01.543Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&mallGb=KOR&barcode=9788966260768&orderClick=LAG&Kc=" target="_blank" rel="noopener">프론트엔드 개발자를 위한 자바스크립트 프로그래밍</a> 책을 참고하여 정리합니다. <strong>오류</strong>가 있다면 언제든지 댓글 남겨주세요.</p></blockquote><hr><h2 id="1-실행-컨텍스트"><a href="#1-실행-컨텍스트" class="headerlink" title=" 1. 실행 컨텍스트"></a><a name="1"></a> 1. 실행 컨텍스트</h2><p>실행 컨텍스트(Execution Context)는 scope, hoisting, this, function, closure 등의 동작원리를 담고 있는 자바스크립트의 핵심원리이다. ECMAScript 스펙에 따르면 실행 컨텍스트를 실행 가능한 코드를 형상화하고 구분하는 추상적인 개념이라고 정의한다. 즉, 실행 컨텍스트는 <code>실행 가능한 코드가 실행되는 환경</code>이라고 말할 수 있다.<br>실행 가능한 코드란</p><ul><li>전역코드 : 전역 영역에 존재하는 코드</li><li>함수코드 : 함수 내에 존재하는 코드</li><li>Eval코드 : Eval 함수로 실행되는 코드</li></ul><p>일반적으로는 전역코드와 함수코드. </p><p>자바스크립트 엔진은 코드를 실행하기 위해 실행에 필요한 여러가지 정보를 알고 있어야 한다.</p><ul><li>변수: 전역변수, 지역변수, 매개변수, 객체의 프로퍼티</li><li>함수 선언<ul><li>함수 표현식은 호이스팅이 안되는 이유. (함수 표현식은 변수에 할당되는 방식이기 때문에)</li></ul></li><li>변수의 유효범위 (Scope)</li><li>this</li></ul><p>자바스크립트 엔진은 실행 컨텍스트를 물리적 객체의 형태로 관리한다.</p><hr><h2 id="2-실행-컨텍스트의-3가지-객체"><a href="#2-실행-컨텍스트의-3가지-객체" class="headerlink" title=" 2. 실행 컨텍스트의 3가지 객체"></a><a name="2"></a> 2. 실행 컨텍스트의 3가지 객체</h2><p>객체의 형태를 가지며 아래의 3가지 프로퍼티를 소유한다.</p><ul><li>Variable object</li><li>Scope chain</li><li>thisValue</li></ul><h3 id="2-1-Variable-object-VO-변수객체"><a href="#2-1-Variable-object-VO-변수객체" class="headerlink" title="2-1. Variable object (VO 변수객체)"></a>2-1. Variable object (VO 변수객체)</h3><p>변수나 함수의 실행 컨텍스트는 <strong>다른 데이터에 접근할 수 있는지, 어떻게 행동하는지를 규정합니다.</strong> 각 실행 컨텍스트에는 변수객체(variable object:VO)가 연결되어 있으며, 해당 컨텍스트에서 정의된 모든 <code>변수</code>와 <code>함수</code>는 이 객체에 존재한다. 코드로는 접근할 수 없다.</p><ul><li>변수</li><li>parameter arguments<ul><li>parameter, 매개변수 : 함수 원형 작성시 사용되는 변수를 인자 (이름보다는 타입이 중요)</li><li>argument, 실행인자 : 코딩 중 함수 호출시 사용되는 변수 또는 실제 값을 인수</li></ul></li><li>함수 선언 (함수 표현식은 제외)</li></ul><p>Variable Object는 실행 컨텍스트의 프로퍼티이기 때문에 값을 갖는데, 이 값은 다른 객체를 가리킨다.<br>전역 컨텍스트와 함수 컨텍스트가 가리키는 객체는 다르다. 함수에만 파라미터가 존재한다.</p><h4 id="전역-컨텍스트인-경우"><a href="#전역-컨텍스트인-경우" class="headerlink" title="전역 컨텍스트인 경우"></a><code>전역 컨텍스트인 경우</code></h4><p>Variable Object는 전역 변수, 전역 함수 등을 포함하는 전역 객체(Global Object/GO)를 가리킨다. 전역변수와 전역함수는 전역 객체의 프로퍼티이다.</p><img src="/images/post_img/36/ec-vo-global.png"><p>전역 컨텍스트란</p><ul><li><p>가장 바깥쪽에 존재하는 실행 컨텍스트이다.</p></li><li><p>ECMAScript를 구현한 환경에 따라 이 컨텍스트를 부르는 이름이 다르다.</p><ul><li>웹 ()<ul><li>전역컨텍스트 : <code>window</code></li><li>전역변수와 전역함수는 모두 window의 프로퍼티 및 메서드로 생성된다.</li></ul></li></ul></li><li><p>전역컨텍스트는 애플리케이션이 종료될 때, 웹페이지를 나가거나 브라우저를 닫을 때까지 유지된다.</p></li></ul><h4 id="함수-컨텍스트인-경우"><a href="#함수-컨텍스트인-경우" class="headerlink" title="함수 컨텍스트인 경우"></a><code>함수 컨텍스트인 경우</code></h4><p>Variable Object는 Activation Object(AO/활성객체)를 가리키며 arguments object가 추가된다.<br>arguments object 매개변수와 인수들의 정보를 배열의 형태로 담고 있는 객체이다.<br>(이전 글에서 함수의 매개변수로 값이 전달될 때 arguments object에 들어간다고 했다. 전달한 값이 argument라고 생각하면 된다. arguments object: 함수 호출 시 전달된 인수들의 정보를 담고 있는 유사배열객체.)<br><img src="/images/post_img/36/ec-vo-foo.png"></p><h4 id="실행컨텍스트-스택"><a href="#실행컨텍스트-스택" class="headerlink" title="실행컨텍스트 스택"></a><code>실행컨텍스트 스택</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">'xxx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="string">'yyy'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> z = <span class="string">'zzz'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(x + y + z);</span><br><span class="line">  &#125;</span><br><span class="line">  bar();</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><img src="/images/post_img/36/ec_1.png">1. 컨트롤이 실행 가능한 코드로 이동하면 논리적 스택 구조를 가지는 새로운 실행 컨텍스트 스택이 생성된다. 스택은 LIFO(Last In First Out, 후입 선출)의 구조를 가지는 나열 구조이다.2. 전역 코드(Global code)로 컨트롤이 진입하면 전역 실행 컨텍스트가 생성되고 실행 컨텍스트 스택에 쌓인다. 전역 실행 컨텍스트는 애플리케이션이 종료될 때(웹 페이지에서 나가거나 브라우저를 닫을 때)까지 유지된다.3. 함수를 호출하면 해당 함수의 실행 컨택스트가 생성되며 직전에 실행된 코드블럭의 실행 컨텍스트 위에 쌓인다.4. 함수 실행이 끝나면 해당 함수의 실행 컨텍스트를 파기하고 직전의 실행 컨텍스트에 컨트롤을 반환한다.ECMAScript 프로그램은 모두 이런 식으로 실행된다.<hr><h2 id="3-스코프-체인-SC"><a href="#3-스코프-체인-SC" class="headerlink" title=" 3. 스코프 체인 SC"></a><a name="3"></a> 3. 스코프 체인 SC</h2><p>스코프 체인은 일종의 리스트로서 중첩된 함수의 <strong>스코프의 레퍼런스를 차례로 저장하고 있는 개념</strong>이다.<br>즉, 현재 실행컨텍스트의 활성객체(AO)를 선두로하여 순차적으로 상위 컨텍스트의 AO를 가리키며 마지막 리스트는 전역 객체를 가리킨다.</p><p><strong>스코프 체인의 목적은 실행 컨텍스트가 접근할 수 있는 모든 변수와 함수에 <code>순서</code>를 정의하는 것.</strong></p><ul><li>함수가 중첩 상태일 때 하위함수 내에서 상위함수의 유효범위까지 참조할 수 있는데 이것는 스코프 체인을 검색하였기 때문이다. </li><li>함수가 중첩되어 있으면 중첩될 때마다 부모 함수의 Scope가 자식 함수의 스코프 체인에 포함된다. </li><li>함수 실행중에 변수를 만나면 그 변수를 우선 현재 Scope, 즉 Activation Object에서 검색해보고, </li><li>만약 검색에 실패하면 스코프 체인에 담겨진 순서대로 그 검색을 이어가게 되는 것이다. </li></ul><p><strong>이것이 스코프 체인이라고 불리는 이유이다.</strong></p><p>이와 같이 순차적으로 스코프 체인에서 변수를 검색하는데 결국 검색에 실패하면 정의되지 않은 변수에 접근하는 것으로 판단하여 Reference 에러를 발생시킨다.<br>스코프 체인은 <code>[[scope]]</code> 프로퍼티로 참조할 수 있다.</p><hr><h2 id="4-this-value"><a href="#4-this-value" class="headerlink" title=" 4. this value"></a><a name="4"></a> 4. this value</h2><p>this 프로퍼티에는 this 값이 할당된다. this에 할당되는 값은 함수 호출 패턴에 의해 결정되는데, 이는 Function 글에서 자세히 다루겠다.</p><hr><h2 id="5-실행-컨텍스트의-생성과정"><a href="#5-실행-컨텍스트의-생성과정" class="headerlink" title=" 5. 실행 컨텍스트의 생성과정"></a><a name="5"></a> 5. 실행 컨텍스트의 생성과정</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">'xxx'</span>;<span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">function foo () &#123;</span></span><br><span class="line"><span class="string">  var y = 'yyy';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  function bar () &#123;</span></span><br><span class="line"><span class="string">    var z = 'zzz';</span></span><br><span class="line"><span class="string">    console.log(x + y + z);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  bar();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">foo();</span></span><br></pre></td></tr></table></figure><ol><li>전역 코드에 진입<br>컨트롤이 실행 컨텍스트에 진입하기 이전에 유일한 전역 객체(Global Object)가 생성된다. 초기 상태의 전역 객체에는 빌트인 객체(Math, String, Array 등)와 BOM, DOM이 설정되어 있다.</li></ol><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/js-execution-context" target="_blank" rel="noopener">http://poiemaweb.com/js-execution-context</a></li><li><a href="http://nerissa.tistory.com/entry/Parameter%EC%99%80-Argument%EC%9D%98-%EC%B0%A8%EC%9D%B4" target="_blank" rel="noopener">http://nerissa.tistory.com/entry/Parameter%EC%99%80-Argument%EC%9D%98-%EC%B0%A8%EC%9D%B4</a></li><li><a href="http://poiemaweb.com/js-function" target="_blank" rel="noopener">http://poiemaweb.com/js-function</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788966260768&amp;orderClick=LAG&amp;Kc=&quot;
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>2/ 메모리 관리와 가비지 콜렉션</title>
    <link href="http://feel5ny.github.io/2017/11/30/JS_02/"/>
    <id>http://feel5ny.github.io/2017/11/30/JS_02/</id>
    <published>2017-11-30T09:23:55.000Z</published>
    <updated>2019-10-31T13:06:01.465Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&mallGb=KOR&barcode=9788966260768&orderClick=LAG&Kc=" target="_blank" rel="noopener">프론트엔드 개발자를 위한 자바스크립트 프로그래밍</a> 책을 참고하여 정리합니다. <strong>오류</strong>가 있다면 언제든지 댓글 남겨주세요.</p></blockquote><p><strong>요약</strong><br>가비지 콜렉션은 더 이상 사용하지 않는 메모리를 회수하는 역할을 한다. 메모리를 회수하기 전 사용하지 않는 변수를 체킹해야 하는데 이때 <code>표시하고 지우기</code> 방법과 <code>참조 카운팅</code>이 있다. <code>표시하고 지우기 방법</code>은 처음 컨텍스트의 모든 변수에 마킹을 한 후, 값이 할당되어있거나 참조되어있는 변수의 마킹을 지운다. 지웠음에도 마킹이 남아있는 변수를 회수하는 방식이다. <code>참조 카운팅</code>은 참조 카운트가 0인 변수를 회수하는 방식인데 순환참조의 카운팅 한계가 있기 때문에 주로 표시하고 지우기 방법을 사용한다. 가비지 콜렉터 사이클이 도는 것은 상당한 비용이 발생한다. 메모리 누수 관리를 위해서는 사용하지 않는 변수나 객체는 모두 null로 재할당하여 가비지 컬렉터가 다음 사이클 때 회수하도록 하는 방법, 크롬 개발자도구의 퍼포먼스 탭에서 확인하는 방법 등이 있다.</p><hr><h3 id="1-가비지-콜렉션"><a href="#1-가비지-콜렉션" class="headerlink" title="1. 가비지 콜렉션"></a><a name="1"></a>1. 가비지 콜렉션</h3><p>자바스크립트는 <span class="mint">인터프리터</span> 언어이다.<br>(인터프리터 언어란 목적 파일 산출과정이 없이 실행과 동시에 줄 단위로 번역이 된고, 저용량 소스에 적합하다. 코드가 실행되는 시점이 런타임이다. <a href="https://feel5ny.github.io/2017/11/08/Typescript_01/">인터프리터와 컴파일러의 차이점</a>)</p><img src="/images/post_img/34/cleaner-01.jpg" width="50%"><p>고급 언어 인터프리터는 가비지 콜렉터 라는 소프트웨어를 가지고 있다.<br>가비지 컬렉터(<strong>G</strong>arbage <strong>C</strong>ollector)란 <strong>메모리 할당을 추적하고 할당된 메모리가 더 이상 필요 없어졌을 때 해체하는 작업이다.</strong> </p><p>이 프로세스는 주기적으로 실행되는데 코드 실행 중에 특정 시점에서 메모리를 회수하도록 지정할 수도 있다. C나 C++같은 언어에서는 메모리 추적이 매우 중요하기 때문에 메모리 관리가 힘들지만, <span class="mint">자바스크립트는 필요한 메모리를 자동으로 할당하고 더 이상 사용하지 않는 메모리는 자동으로 회수하므로 개발자가 직접 메모리를 관리하지 않아도 된다. </span></p><p>가비지 컬렉터는 항상 필요없어진 메모리만을 해제하지만, 모든 필요없어진 메모리를 해제하는 건 아니다. 즉, ‘더 이상 필요없는 모든 메모리’가 아니라 ‘더 이상 필요 없는 <strong>몇몇</strong> 메모리’를 찾아낸다. 이는 가비지 콜렉션 알고리즘의 한계점이 있기 때문이다. </p><hr><h3 id="2-GC가-회수해야할-메모리-식별은-어떻게-하나요"><a href="#2-GC가-회수해야할-메모리-식별은-어떻게-하나요" class="headerlink" title="2. GC가 회수해야할 메모리 식별은 어떻게 하나요?"></a><a name="2"></a>2. GC가 회수해야할 메모리 식별은 어떻게 하나요?</h3><p>무튼, 어떤 변수가 더 이상 사용되지 않는지, 사용될 가능성이 있는 변수는 무엇인지 추적해야 메모리 회수 대상을 정할 수 있다. 식별 기준은 2가지이다.</p><ol><li>표시하고 지우기 Mark and Sweep</li><li>참조 카운팅 Reference counting</li></ol><h4 id="2-1-표시하고-지우기-Mark-and-Sweep"><a href="#2-1-표시하고-지우기-Mark-and-Sweep" class="headerlink" title="2.1 표시하고 지우기 Mark and Sweep"></a><a name="2-1"></a>2.1 표시하고 지우기 Mark and Sweep</h4><p>가장 널리 쓰이는 컬렉션 방법이다.<br>변수가 특정 컨텍스트 안에서 사용할 것으로 정의되면 그 변수는 그 컨텍스트 안에 있는 것으로 <strong>표시</strong>된다. 표시한는 구체적인 방법은 알 필요는 없다.. </p><p>GC가 작동하면 </p><ol><li>메모리에 저장된 변수 전체를 표시한다.</li><li>컨텍스트에 있는 변수, 컨텍스트에 있는 변수가 참조하는 변수의 표시를 지운다.</li><li>표시가 지워지지 않는 변수를 삭제한다.</li></ol><p>가비지 컬렉터는 ‘메모리 청소’를 실행해 표시가 남아 있는 값을 모두 파괴하고 메모리를 회수한다. </p><h4 id="2-2-참조-카운팅-Reference-counting"><a href="#2-2-참조-카운팅-Reference-counting" class="headerlink" title="2.2 참조 카운팅 Reference counting"></a><a name="2-2"></a>2.2 참조 카운팅 Reference counting</h4><p>각 값이 얼마나 많이 참조 되었는지 추적한다. </p><ol><li>변수를 선언하고 참조 값이 할당되면 참조 카운트는 1이다.</li><li>다른 변수가 같은 값을 참조하면 참조 카운트가 늘어난다. </li><li>마찬가지로 해당 값을 참조하는 변수에 다른 값을 할당하면 원래 값의 참조 카운트가 줄어든다. </li><li>값의 참조 카운트가 0이 되면 해당 값에 접근할 방법이 없으며, 메모리를 회수해도 안전하다. </li><li>다음 가비지 컬렉터를 실행할 때 참조 카운트가 0인 값에서 사용하던 메모리를 회수한다.</li></ol><p><strong>순환 참조 문제</strong><br>이 알고리즘은 두 object가 서로를 참조하면 문제가 발생한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">problem</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> objectA = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">// objectA : reference count 1</span></span><br><span class="line">  <span class="keyword">let</span> objectB = <span class="keyword">new</span> <span class="built_in">Object</span>(); <span class="comment">// objectB : reference count 2</span></span><br><span class="line"></span><br><span class="line">  objectA.someOtherObject = objectB; <span class="comment">// objectA : 2</span></span><br><span class="line">  objectB.anotherObject = objectA; <span class="comment">// objectB : 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드를 보면 새로운 객체가 생성되면서 참조 카운트가 1이되고,<br>서로 참조하게 되면서 참조카운트가 2가 된다.<br>이 상태에서 스코프를 벗어나게 되면, 해당 변수는 사용되지 않는데, 벗어났음에도 카운트가 0이 아니기 때문에 GC가 컬렉션을 하지 않게 된다. 이는 곧 메모리 낭비로 이어진다.<br>이때는 강제로 null을 항당해서 참조했던 값으로의 연결을 끊어줘야한다.</p><blockquote><p>그래서 대부분의 브라우저에서는 표시하고 지우기 방법을 쓴다.</p></blockquote><hr><h3 id="3-가비지-콜렉터와-성능문제"><a href="#3-가비지-콜렉터와-성능문제" class="headerlink" title="3. 가비지 콜렉터와 성능문제"></a><a name="3"></a>3. 가비지 콜렉터와 성능문제</h3><p>GC는 주기적으로 실행되며 메모리 내에 할당된 변수가 많다면 상당한 비용이 드는 작업이므로 GC를 실행하는 <strong>타이밍</strong>이 중요하다. 익스플로러는 가비지 컬렉터를 너무 자주 실행하여 성능 문제를 일으키는 것으로 악명이 놓다.</p><hr><h3 id="4-자바스크립트로-프로그래밍시-내가-할-수-있는-메모리-관리"><a href="#4-자바스크립트로-프로그래밍시-내가-할-수-있는-메모리-관리" class="headerlink" title="4. 자바스크립트로 프로그래밍시 내가 할 수 있는 메모리 관리"></a><a name="4"></a>4. 자바스크립트로 프로그래밍시 내가 할 수 있는 메모리 관리</h3><p>웹 브라우저에서 사용할 수 있는 메모리는 일반적인 데스크톱 애플리케이션의 가용 메모리에 비해 매우 적다. 적은 메모리만 할당받는 주된 이유는 웹 페이지에서 실행하는 자바스크립트가 시스템 메모리를 전부 사용해서 운영체제를 다운시키는 일을 방지하기 위함이다.<br>메모리 제한은 변수 할당 뿐만 아니라 호출스택, 스레드에서 실행할 수 있는 문장수에도 영향을 미친다.<br>즉! 가능한 최소한의 메모리만 사용해야 페이지의 성능을 올릴 수 있다.</p><img src="/images/post_img/34/cleaner-02.jpg" width="50%"><p>필요 없어진 데이터에는 <code>null</code>을 할당하여 참조를 제거(dereference)하는 편이 좋다. <span class="mint">이론상은 그렇지만, 실제로는 많이 사용하지 않는다. 참조를 하고 있는지에 대해서 개발자가 판단하기가 어렵기 때문에 오히려 전체 흐름을 망가뜨리는 행위가 될 수 있다. 우리도 모르게 어디선가 side effect가 발생할 수도있고, 복잡성이 증가한다.(면접 때 면접관님께서 정정해주셨다!)</span><br>수동으로 참조 제거해야 할 대상은 주로 <code>전역변수</code> 및 <code>전역 객체의 프로퍼티</code>이다.<br>(지역변수는 컨텍스트를 빠져나가는 순간 자동으로 참조가 제거된다.)</p><p>참조 제거의 요점은 값의 컨텍스트를 없애서 다음에 가비지콜렉션을 실행할 때 해당 메모리를 회수하도록 하는 것이다. </p><ul><li><p>사용하지 않은 객체, 변수는 모두 <strong>null</strong> 로 초기화</p></li><li><p>이벤트 핸들러를 바인딩 했다면, 모두 <strong>언바인딩</strong></p></li><li><p>DOM 을 동적으로 생성했다면, <strong>불필요한 객체, 속성(값)을 DOM 에 삽입하지 말자.</strong></p></li><li><p>크롬 개발자도구의 Performace탭에서 <a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool?hl=ko" target="_blank" rel="noopener">timeline</a>확인해보자. </p></li></ul><hr><h4 id="번외-참고-글-V8-Efficient-Garbage-Collection"><a href="#번외-참고-글-V8-Efficient-Garbage-Collection" class="headerlink" title="(번외 (참고 글)) V8_Efficient Garbage Collection"></a>(번외 (참고 글)) <a href="http://huns.me/development/452" target="_blank" rel="noopener">V8_Efficient Garbage Collection</a></h4><p>V8은 객체가 사용하다가 더 이상 필요 없게 된 메모리를 가비지 콜렉션(garbage collection)이라고 알려진 작업을 통해서 다시 찾아온다. 빠른 객체 할당을 보장하고, 가비지 콜렉션으로 인한 프로그램 정지 시간을 단축시키며, 메모리 파편화를 제거하기 위해서 stop-the-world 방식의 세대적이고, 정확한 가비지 콜렉터(garbage collector)를 채택하고 있다.</p><p>이것은 다음을 의미한다.</p><ul><li>가비지 콜렉션 사이클을 수행할 때 프로그램 실행을 멈춘다.</li><li>가비지 콜렉션 사이클 중 대부분의 시간을 객체의 힙(heap)의 영역을 처리하는데 사용함으로써 어플리케이션 멈춤 현상을 최소화 한다.</li><li>모든 객체가 포인터가 메모리의 어디에 있는지 항상 정확히 알고 있다. 이를 통해 객체를 포인터로 잘못 식별하여 메모리 누수를 일으키는 문제를 피할 수 있다.</li></ul><p>V8에서 객체의 heap은 2개의 부분으로 나누어져 있다. 새로 객체가 생성되는 영역과 가비지 콜렉션 사이클이 진행되는 동안에 살아남은 객체가 있는 영역. 객체가 가비지 콜렉션으로 들어가면 V8은 객체의 포인터를 갱신한다.</p><blockquote><p>변수를 생성하는 것 자체가 메모리를 사용하는 것인데, 이를 회수하고 관리하는 가비지컬렉션이 있다는 것에 흥미로웠다.<br>메모리 누수를 막아서 최소한의 메모리 사용으로 페이지 성능을 향상하는 것이 목적이지만, 사이클이 너무 많이 실행되면 이것 또한 자원낭비.<br>변수의 할당의 최소화하고, 코드 재사용성을 높이고, 전역변수나 전역객체의 프로퍼티가 존재한다면 마지막에 null을 할당해보자.</p></blockquote><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_Management</a></li><li><a href="http://huns.me/development/452" target="_blank" rel="noopener">http://huns.me/development/452</a></li><li><a href="https://v8project.blogspot.kr/2015/08/getting-garbage-collection-for-free.html" target="_blank" rel="noopener">https://v8project.blogspot.kr/2015/08/getting-garbage-collection-for-free.html</a></li><li><a href="http://hapina.tistory.com/112" target="_blank" rel="noopener">http://hapina.tistory.com/112</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788966260768&amp;orderClick=LAG&amp;Kc=&quot;
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>1/ 변수, 원시 값과 참조 값</title>
    <link href="http://feel5ny.github.io/2017/11/29/JS_01/"/>
    <id>http://feel5ny.github.io/2017/11/29/JS_01/</id>
    <published>2017-11-29T09:23:55.000Z</published>
    <updated>2019-10-31T13:06:01.737Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&mallGb=KOR&barcode=9788966260768&orderClick=LAG&Kc=" target="_blank" rel="noopener">프론트엔드 개발자를 위한 자바스크립트 프로그래밍</a> 책을 참고하여 정리합니다. <strong>오류</strong>가 있다면 언제든지 댓글 남겨주세요.</p></blockquote><p>까묵지말자<br>Call-by-value, Call-by-reference</p><hr><h2 id="1-변수란"><a href="#1-변수란" class="headerlink" title=" 1. 변수란?"></a><a name="1"></a> 1. 변수란?</h2><p>변수는 위치(주소)를 기억하는 저장소이다. (포인터의 개념)<br>위치란 메모리 상의 주소(address)를 의미한다. 즉, 메모리 주소에 접근하기 위해 사람이 이해할 수 있는 언어로 지정한 식별자이다.</p><p>변수를 통해 메모리에 값을 저장하기 위해서는 우선 필요한 저장 단위(byte)를 알아야한다. <strong>이는 값의 종류에 따라 값을 저장하기 위해 확보해야할 메모리의 크기가 다르기 때문이다.</strong> 이때 값의 종류 즉, 데이터의 종류를 자료형이라고 한다. C-family언어는 정적타이핑 언어로 변수 선언 시 변수에 저장할 값의 종류에 따라 사전에 자료형을 지정하여야 한다.</p><blockquote><p>변수를 선언하는 것부터가 메모리를 사용하는 것이기 때문에 변수사용을 최소한으로 하여, 페이지의 성능을 유지해야한다.</p></blockquote><h3 id="동적-타입-Dynamic-typed"><a href="#동적-타입-Dynamic-typed" class="headerlink" title="동적 타입 Dynamic typed"></a>동적 타입 Dynamic typed</h3><p>jacascript는 동적 타이핑 언어로(느슨한 타입: loosely typed) 변수의 Type annotation이 필요없이 값이 할당되는 과정에서 자동으로 자료형이 결정(Type Inference: 타입 추론)된다. 따라서 같은 변수에 여러 자료형의 값을 대입할 수 있다. </p><blockquote><p>타입스크립트는 이런 동적 타이핑 언어의 단점을 보안하기 위해서 타입을 명시해주는 특징을 갖고 있다. </p></blockquote><p>변수는 값을 저장(할당), 참조하기 위해 사용된다. 한번 쓰고 버리는 값이 아닌 유지할 필요가 있는 경우, 변수를 사용한다.</p><hr><h2 id="2-원시-값과-참조-값"><a href="#2-원시-값과-참조-값" class="headerlink" title=" 2. 원시 값과 참조 값"></a><a name="2"></a> 2. 원시 값과 참조 값</h2><p>원시 값과 참조값 두가지 타입의 데이터를 저장할 수 있는데,<br>원시 값은 단순한 데이터이며<br>참조 값은 여러 값으로 구성되는 객체를 가리킨다.<br>변수에 값이 할당되면 <code>자바스크립트 엔진</code>이 해당 값이 원시 데이터인지 참조인지 판단한다.</p><p>참조 값은 메모리에 저장된 객체이다. <code>다른 언어와 달리 자바스크립트는 메모리 위치에 직접 접근하는 것을 허용하지 않고, 객체의 메모리 공간을 직접 조작하는 일은 불가능하다.</code></p><h3 id="참조로-접근한다"><a href="#참조로-접근한다" class="headerlink" title="참조로 접근한다"></a><code>참조로 접근한다</code></h3><p>객체를 조작할 때는 객체 자체가 아니라 해당 객체에 대한 <strong>참조를 조작</strong>하는 것이다. 이런 이유로 객체를 가리키는 값은 ‘참조로 접근한다’고 한다.</p><hr><h2 id="3-동적-프로퍼티"><a href="#3-동적-프로퍼티" class="headerlink" title=" 3. 동적 프로퍼티"></a><a name="3"></a> 3. 동적 프로퍼티</h2><p>참조 값을 다룰 때는 언제든 프로퍼티와 메서드를 추가하거나 바꾸고 삭제 할 수 있다.<br>원시 값에는 프로퍼티가 없지만 추가하려 해도 에러가 생기진 않는다.<br>동적으로 프로퍼티를 추가할 수 있는 값은 참조 값 뿐이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>()</span><br><span class="line">person.name = <span class="string">'Clara'</span></span><br><span class="line">alert(person.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'Clara'</span></span><br><span class="line">name.age = <span class="number">27</span></span><br><span class="line">alert(name.age) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><hr><h2 id="4-값-복사"><a href="#4-값-복사" class="headerlink" title=" 4. 값 복사"></a><a name="4"></a> 4. 값 복사</h2><h3 id="원시-값"><a href="#원시-값" class="headerlink" title="원시 값"></a>원시 값</h3><p>원시 값은 다른 변수로 복사할 때는 현재 저장된 값을 새로 생성한 다음 새로운 변수에 복사한다. 복사된 값과 원래 값은 완전히 분리되어 있다.</p><h3 id="참조-값"><a href="#참조-값" class="headerlink" title="참조 값"></a>참조 값</h3><p>참조 값을 변수에서 다른 변수로 복사가되면 그 값이 객체 자체가 아니라 <code>힙</code>에 저장된 객체를 가리키는 <code>포인터</code>라는 점이다. 복사 후에는 두 변수는 정확히 같은 객체를 가리킨다. 따라서 한쪽을 조작하면 다른 쪽에도 반영된다.<br>스택메모리 공간은 함수호출 시마다 생성되고,<br>힙메모리 공간은 객체 생성 시 생성됨.</p><img src="/images/post_img/33/reference_copy.jpg" width="80%"><hr><h2 id="5-매개변수-전달"><a href="#5-매개변수-전달" class="headerlink" title=" 5. 매개변수 전달"></a><a name="5"></a> 5. 매개변수 전달</h2><p>함수 매개변수는 모두 <code>값</code>으로 전달된다. 함수 외부에 있는 값은 함수 내부의 매개변수에 복사된다. 변수는 값으로도, 참조로도 접근할 수 있지만 <strong>매개변수는 오직 <code>값</code>으로만 전달된다.</strong> 메모리 공간을 확보하며 매개변수에 할당된다.</p><h3 id="Call-by-value-값에-의한-호출"><a href="#Call-by-value-값에-의한-호출" class="headerlink" title="Call-by-value (값에 의한 호출)"></a>Call-by-value (값에 의한 호출)</h3><img src="/images/post_img/33/primitive.jpg" width="80%"><p>매개변수를 값 형태로 넘기면 해당 값은 지역 변수에 <code>복사</code>된다.  arguments 객체에 들어가게 된다.</p><h3 id="Call-by-reference-참조에-의한-호출"><a href="#Call-by-reference-참조에-의한-호출" class="headerlink" title="Call-by-reference (참조에 의한 호출)"></a>Call-by-reference (참조에 의한 호출)</h3><img src="/images/post_img/33/reference_parameter_1.jpg" width="80%">함수에 `값`을 전달했기 때문에 함수 내부에서 매개변수의 값이 바뀌었음에도 불구하고 원래 객체에 대한 참조를 그대로 유지한 것이다. = 즉 객체가 넘어갈때는 참조 형태로 전달되는 것이 아니라 **값으로 넘어간다.** (== 포인터가 넘어간다)<img src="/images/post_img/33/reference_parameter_2.jpg" width="80%">함수 내부에서 obj를 덮어쓰면 obj는 지역객체를 가리키는 포인터가 되고, 이 지역 객체(obj.name)는 함수 실행이 끝나면 파괴된다.<hr><h2 id="6-타입판별"><a href="#6-타입판별" class="headerlink" title=" 6. 타입판별"></a><a name="6"></a> 6. 타입판별</h2><p><code>typeof</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> 변수명</span><br></pre></td></tr></table></figure><p><code>instanceof</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">변수명 <span class="keyword">instanceof</span> <span class="built_in">Object</span> </span><br><span class="line"><span class="comment">// 이 변수는 Object의 인스턴스인가? </span></span><br><span class="line"><span class="comment">// 결과값은 boolean</span></span><br></pre></td></tr></table></figure><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/js-data-type-variable" target="_blank" rel="noopener">http://poiemaweb.com/js-data-type-variable</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788966260768&amp;orderClick=LAG&amp;Kc=&quot;
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="JavaScript" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/JavaScript/"/>
    
    
      <category term="javaScript" scheme="http://feel5ny.github.io/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>persistor.purge()</title>
    <link href="http://feel5ny.github.io/2017/11/29/log_001/"/>
    <id>http://feel5ny.github.io/2017/11/29/log_001/</id>
    <published>2017-11-29T09:23:55.000Z</published>
    <updated>2019-02-03T15:17:37.679Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/rt2zz/redux-persist" target="_blank" rel="noopener">https://github.com/rt2zz/redux-persist</a><br>redux-persist 정리할 때 purge에 대해서 구체적으로 작성해보겠습니다.</p></blockquote><h2 id="상황"><a href="#상황" class="headerlink" title="상황"></a>상황</h2><ul><li>작업하면서 계속 리로딩을 하고 있었는데 reducer에서 값을 넣는 모양을 계속 바꿔주면서 작업하고 있었는데, 갑자기 로딩화면만 계속 나오기 시작</li></ul><p>에러 메세지</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError: In this environment the sources <span class="keyword">for</span> assign MUST be an object. This error is a performance optimization and not spec compliant</span><br></pre></td></tr></table></figure><h2 id="원인"><a href="#원인" class="headerlink" title="원인"></a>원인</h2><p>오류가 있는 persist 저장소를 갖고있어서 그럼.</p><h2 id="솔루션"><a href="#솔루션" class="headerlink" title="솔루션"></a>솔루션</h2><p><a href="https://github.com/rt2zz/redux-persist/issues/536" target="_blank" rel="noopener">https://github.com/rt2zz/redux-persist/issues/536</a></p><ol><li>루트 폴더에 persist를 작성한 부분 중 <code>const persistor = persistStore(store);</code>를 찾아냅니다.</li><li>해당 코드 밑에 <code>persistor.purge();</code>를 넣고 다시 실행 (purge는 persistStore의 데이터를 전부 날리는 역할을 한다.)</li><li>잘 싱행된다면 해당 코드는 삭제하세요.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/rt2zz/redux-persist&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/rt2zz/redux-persist&lt;/a&gt;&lt;b
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="0_DevLog 👻" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/0-DevLog-%F0%9F%91%BB/"/>
    
    
      <category term="react" scheme="http://feel5ny.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React에 typeScript 셋팅하기</title>
    <link href="http://feel5ny.github.io/2017/11/28/Typescript_13/"/>
    <id>http://feel5ny.github.io/2017/11/28/Typescript_13/</id>
    <published>2017-11-28T11:13:22.000Z</published>
    <updated>2019-10-31T13:06:22.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>실습은 <a href="https://github.com/saystone/tic-tac-toe" target="_blank" rel="noopener">tic-tac-toc</a>이라는 js 프로젝트를 마이그레이션 하면서 typescript를 연습해본다.<br>raect+typescript는 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="noopener">강의</a> 참고하였습니다.<br>역시 이론과 실습이 결합할 때가 제일 재밌다!</p></blockquote><p>처음 프로젝트를 생성할 때 부터 타입스크립 버전으로 셋팅하는것이 제일 깔끔하다.</p><h3 id="1-create-react-app-ts-test-scripts-version-react-scripts-ts"><a href="#1-create-react-app-ts-test-scripts-version-react-scripts-ts" class="headerlink" title="1. create-react-app ts-test --scripts-version=react-scripts-ts"></a>1. <code>create-react-app ts-test --scripts-version=react-scripts-ts</code></h3><p>  create-react-app + 프로젝트 이름 + <code>--scripts-version=react-scripts-ts</code> 추가</p><img src="/images/post_img/27/01.jpg"><ul><li>react에서 사용하는 PropTypes를 사용하지 않아도 된다.</li></ul><blockquote><h3 id="PropTypes"><a href="#PropTypes" class="headerlink" title="PropTypes"></a><code>PropTypes</code></h3><p>컴포넌트 에서 원하는 props 의 Type 과 전달 된 props 의 Type 이 일치하지 않을 때 콘솔에서 오류 메시지가 나타나게 하고 싶을 땐, 컴포넌트 클래스의 propTypes 객체를 설정하면 됩니다. 또한, 이를 통하여 필수 props 를 지정할 수 있습니다. 즉, props 를 지정하지 않으면 콘솔에 오류 메시지가 나타납니다.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Content.js</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Content</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h2&gt;&#123; <span class="keyword">this</span>.props.title &#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt; &#123; this.props.body &#125; &lt;/</span>p&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Content.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">    title: React.PropTypes.string,</span></span><br><span class="line"><span class="regexp">    body: React.PropTypes.string.isRequired /</span><span class="regexp">/ isRequired는 필수의 의미이다.</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Content;</span></span><br></pre></td></tr></table></figure><h3 id="2-state와-props는-interface로-처리를-해야한다"><a href="#2-state와-props는-interface로-처리를-해야한다" class="headerlink" title="2. state와 props는 interface로 처리를 해야한다."></a>2. state와 props는 interface로 처리를 해야한다.</h3><p>class에서 입출력되는 타입을 검토하기 위해서</p><ol><li><p>배열의 요소가 객체일 경우</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> GameState &#123;</span><br><span class="line">  history: <span class="built_in">Array</span>&lt;&#123; squares: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; &#125;&gt; <span class="comment">// Array 요소가 객체일 경우 이렇게 타입을 지정해준다.</span></span><br><span class="line">  stepNumber: <span class="built_in">number</span></span><br><span class="line">  xIsNext: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Game <span class="keyword">extends</span> React.Component&lt;GameProps, GameState&gt; &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>()</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      history: [</span><br><span class="line">        &#123;</span><br><span class="line">          squares: <span class="built_in">Array</span>(<span class="number">9</span>).fill(<span class="literal">null</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      stepNumber: <span class="number">0</span>,</span><br><span class="line">      xIsNext: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>return에 대한 출력값을 타입으로 명시할때</p><h3 id="JSX-Element"><a href="#JSX-Element" class="headerlink" title="JSX.Element"></a><code>JSX.Element</code></h3><p>return 내부가 JSX문법이므로 JSX.Element로 명시하였다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Game <span class="keyword">extends</span> React.Component&lt;GameProps, GameState&gt; &#123;</span><br><span class="line">  render(): JSX.Element &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"game"</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">"game-board"</span>&gt;</span><br><span class="line">          &lt;Board squares=&#123;current.squares&#125; onClick=&#123;<span class="function"><span class="params">i</span> =&gt;</span> <span class="keyword">this</span>.handleClick(i)&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div className="game-info"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;div&gt;&#123;status&#125;&lt;/</span>div&gt;</span><br><span class="line">          &lt;ol&gt;&#123;moves&#125;&lt;<span class="regexp">/ol&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://velopert.com/921" target="_blank" rel="noopener">https://velopert.com/921</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;실습은 &lt;a href=&quot;https://github.com/saystone/tic-tac-toe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tic-tac-toc&lt;/a&gt;이라는 js 프로젝트를 마이그레이션 하면서 
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2017 TypeScript workshop" scheme="http://feel5ny.github.io/categories/02-WorkShop/2017-TypeScript-workshop/"/>
    
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>11/ Type Inference</title>
    <link href="http://feel5ny.github.io/2017/11/27/Typescript_12/"/>
    <id>http://feel5ny.github.io/2017/11/27/Typescript_12/</id>
    <published>2017-11-27T04:11:43.000Z</published>
    <updated>2019-10-31T13:06:22.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="noopener">강의</a>와 <a href="http://slides.com/woongjae/deck-8-15" target="_blank" rel="noopener">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><hr><h3 id="1-타입추론"><a href="#1-타입추론" class="headerlink" title=" 1. 타입추론"></a><a name="1"></a> 1. 타입추론</h3><ul><li>기본적으로 타입을 명시적으로 쓰지 않을 때 추론하는 방법에 대한 규칙<ul><li>명시적으로 쓰는 것은 타입 추론이 아니라 <code>코드를 읽기 좋게 하는 지름길</code></li></ul></li><li>let 은 기본적으로 우리가 아는 기본 자료형으로 추론</li><li>const 는 <code>리터럴 타입</code>으로 추론<ul><li>오브젝트 타입을 타입을 쓰지 않으면, 프로퍼티는 let 처럼 추론<ul><li>const person = {name: ‘Mark’, age: 35}; 면</li><li>person =&gt; {name: string; age: number;} 로 추론</li></ul></li></ul></li><li>대부분은 추론이 쉽다.<ul><li>단순 변수</li><li>structuring, destructuring</li></ul></li><li>array, 함수의 리턴에서는 원하는데로 얻기가 힘들다.</li></ul><hr><h3 id="2-배열-타입-추론"><a href="#2-배열-타입-추론" class="headerlink" title=" 2. 배열 타입 추론"></a><a name="2"></a> 2. 배열 타입 추론</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [];</span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">const</span> array3 = [<span class="string">'a'</span>, <span class="number">1</span>, <span class="literal">false</span>]; <span class="comment">// 타입이 다를 경우 union타입으로 추론된다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123; </span><br><span class="line">    dog: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    cat: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array4 = [<span class="keyword">new</span> Dog(), <span class="keyword">new</span> Cat()]</span><br></pre></td></tr></table></figure><hr><h3 id="3-리턴-타입-추론"><a href="#3-리턴-타입-추론" class="headerlink" title=" 3. 리턴 타입 추론"></a><a name="3"></a> 3. 리턴 타입 추론</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">message: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (message === <span class="string">'world'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'world'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>리터럴타입의 ‘world’이거나 0이 나온다.</p><hr><h3 id="4-유니온-타입과-타입-가드"><a href="#4-유니온-타입과-타입-가드" class="headerlink" title=" 4. 유니온 타입과 타입 가드"></a><a name="4"></a> 4. 유니온 타입과 타입 가드</h3><h4 id="타입가드-Type-guard"><a href="#타입가드-Type-guard" class="headerlink" title="타입가드 Type guard"></a><code>타입가드</code> Type guard</h4><p>어떤 Scope에서 타입을 보증하는 런타임 체크를 수행하는 몇 가지 표현식이다. 타입 가드를 정의하기 위해서, 리턴 타입이 <code>Type predicate</code>인 함수를 정의 할 필요가 있다.</p><h4 id="Type-predicate"><a href="#Type-predicate" class="headerlink" title="Type predicate"></a><code>Type predicate</code></h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parameterName is Type</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Car &#123;</span><br><span class="line">    brand: <span class="built_in">string</span>;</span><br><span class="line">    wheel: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPerson</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="title">arg</span> <span class="title">is</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg.name !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">arg: Person | Car</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isPerson(arg)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(arg.name);</span><br><span class="line">        <span class="comment">// console.log(arg.brand);</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(arg.name);</span></span><br><span class="line">        <span class="built_in">console</span>.log(arg.brand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://infoscis.github.io/2017/06/19/TypeScript-handbook-advanced-types/" target="_blank" rel="noopener">https://infoscis.github.io/2017/06/19/TypeScript-handbook-advanced-types/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;타입스크립트 정리 글은 이웅재님의 &lt;a href=&quot;https://www.youtube.com/user/2woongjae/videos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;강의&lt;/a&gt;와 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2017 TypeScript workshop" scheme="http://feel5ny.github.io/categories/02-WorkShop/2017-TypeScript-workshop/"/>
    
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>10/ Decorator</title>
    <link href="http://feel5ny.github.io/2017/11/26/Typescript_11/"/>
    <id>http://feel5ny.github.io/2017/11/26/Typescript_11/</id>
    <published>2017-11-26T12:11:09.000Z</published>
    <updated>2019-10-31T13:06:22.174Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="noopener">강의</a>와 <a href="http://slides.com/woongjae/deck-8-15" target="_blank" rel="noopener">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><p><strong>요약</strong><br>아직 잘 이해가 안간다. &#128565;</p><hr><h3 id="1-Decorator-종류"><a href="#1-Decorator-종류" class="headerlink" title=" 1. Decorator 종류"></a><a name="1"></a> 1. Decorator 종류</h3><ul><li>Class Decorator</li><li>Method Decorator</li><li>Property Decorator</li><li>Parameter Decorator<blockquote><p>각자 Decorator의 시그니처가 다르다.</p></blockquote></li></ul><p>Decorator?</p><ul><li>함수 표현식에 해당한다.</li><li><code>@</code>와 같이 써서 표현식 뒤에 오는 대상에 더욱 기능적으로 추가하거나 하는 일들을 할 수 있다.</li><li>함수를 선언한 뒤 <code>@</code>키워드를 이용해 선언된 함수를 Decorator로 사용할 수 있다. </li></ul><hr><h4 id="1-1-Decorator-코드-작성-준비"><a href="#1-1-Decorator-코드-작성-준비" class="headerlink" title=" 1-1. Decorator 코드 작성 준비"></a><a name="1-1"></a> 1-1. Decorator 코드 작성 준비</h4><p><code>yarn add typeScript -D</code>여기서 <code>D</code>는 <code>dev</code>와 같은 명령어다.</p><hr><h3 id="2-Decorator"><a href="#2-Decorator" class="headerlink" title="2. Decorator"></a><a name="2"></a>2. Decorator</h3><h4 id="2-1-Class-Decorator"><a href="#2-1-Class-Decorator" class="headerlink" title="2-1. Class Decorator"></a><a name="2-1"></a>2-1. Class Decorator</h4><h5 id="2-1-1-Class-Decorator-Basic"><a href="#2-1-1-Class-Decorator-Basic" class="headerlink" title=" 2-1-1. Class Decorator Basic"></a><a name="basic"></a> 2-1-1. Class Decorator Basic</h5><p>여기서 helloFactory 는 팩토리 패턴</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">constructorFn: <span class="built_in">Function</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(constructorFn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloFactory</span>(<span class="params">show: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (show) &#123;</span><br><span class="line">        <span class="keyword">return</span> hello;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @hello</span></span><br><span class="line"><span class="meta">@helloFactory</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'new Person()'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><hr><h5 id="2-1-2-Class-Decorator-Advanced"><a href="#2-1-2-Class-Decorator-Advanced" class="headerlink" title=" 2-1-2. Class Decorator Advanced"></a><a name="advanced"></a> 2-1-2. Class Decorator Advanced</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHello</span>(<span class="params">constructorFn: <span class="built_in">Function</span></span>) </span>&#123;</span><br><span class="line">    constructorFn.prototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@addHello</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'new Person()'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">(&lt;<span class="built_in">any</span>&gt;person).hello();</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-Method-Decorator"><a href="#2-2-Method-Decorator" class="headerlink" title=" 2-2. Method Decorator"></a><a name="2-2"></a> 2-2. Method Decorator</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">editable</span>(<span class="params">canBeEdit: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span>, propName: <span class="built_in">string</span>, description: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(canBeEdit);</span><br><span class="line">        <span class="built_in">console</span>.log(target);</span><br><span class="line">        <span class="built_in">console</span>.log(propName);</span><br><span class="line">        <span class="built_in">console</span>.log(description);</span><br><span class="line">        description.writable = canBeEdit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'new Person()'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@editable</span>(<span class="literal">true</span>)</span><br><span class="line">    hello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.hello();</span><br><span class="line">person.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'world'</span>);</span><br><span class="line">&#125;</span><br><span class="line">person.hello();</span><br></pre></td></tr></table></figure><hr><h3 id="2-3-Property-Decorator"><a href="#2-3-Property-Decorator" class="headerlink" title=" 2-3. Property Decorator"></a><a name="2-3"></a> 2-3. Property Decorator</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writable</span>(<span class="params">canBeWrite: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target: <span class="built_in">any</span>, propName: <span class="built_in">string</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(canBeWrite);</span><br><span class="line">        <span class="built_in">console</span>.log(target);</span><br><span class="line">        <span class="built_in">console</span>.log(propName);</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            writable: canBeWrite</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="meta">@writable</span>(<span class="literal">false</span>)</span><br><span class="line">    name: <span class="built_in">string</span> = <span class="string">'Mark'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'new Person()'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">undefined</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-4-Prameter-Decorator"><a href="#2-4-Prameter-Decorator" class="headerlink" title=" 2-4. Prameter Decorator"></a><a name="2-4"></a> 2-4. Prameter Decorator</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printInfo</span>(<span class="params">target: <span class="built_in">any</span>, methodName: <span class="built_in">string</span>, paramIndex: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">    <span class="built_in">console</span>.log(methodName);</span><br><span class="line">    <span class="built_in">console</span>.log(paramIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> _name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, <span class="meta">@printInfo</span> age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hello(<span class="meta">@printInfo</span> message: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Person &#123; hello: [Function] &#125;</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">0</span></span><br><span class="line"><span class="comment">[Function: Person]</span></span><br><span class="line"><span class="comment">undefined</span></span><br><span class="line"><span class="comment">1</span></span><br></pre></td></tr></table></figure><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/es6-class" target="_blank" rel="noopener">http://poiemaweb.com/es6-class</a></li><li><a href="https://javarouka.github.io/blog/2016/09/30/decorator-exploring/" target="_blank" rel="noopener">https://javarouka.github.io/blog/2016/09/30/decorator-exploring/</a></li><li><a href="http://blog-kr.zoyi.co/channel-frontend-decorator/" target="_blank" rel="noopener">http://blog-kr.zoyi.co/channel-frontend-decorator/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;타입스크립트 정리 글은 이웅재님의 &lt;a href=&quot;https://www.youtube.com/user/2woongjae/videos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;강의&lt;/a&gt;와 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2017 TypeScript workshop" scheme="http://feel5ny.github.io/categories/02-WorkShop/2017-TypeScript-workshop/"/>
    
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>9/ itertor</title>
    <link href="http://feel5ny.github.io/2017/11/25/Typescript_10/"/>
    <id>http://feel5ny.github.io/2017/11/25/Typescript_10/</id>
    <published>2017-11-25T11:13:22.000Z</published>
    <updated>2019-10-31T13:06:22.174Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="noopener">강의</a>와 <a href="http://slides.com/woongjae/deck-8-15" target="_blank" rel="noopener">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><p><strong>요약</strong><br>아직 잘 이해가 안간다. &#128565;</p><hr><h3 id="1-for…of"><a href="#1-for…of" class="headerlink" title=" 1. for…of"></a><a name="1"></a> 1. for…of</h3><ul><li><p>es3<br><code>for(var i = 0; i&lt;array.length; i++)</code></p></li><li><p>es5<br><code>array.forEach</code> : return으로 순회를 탈출할 수 없다.</p></li><li><p>es6<br><code>for..of</code><br><code>for(const item of array)</code><br>원칙적으로는 배열에서만 사용이 가능하다. </p></li><li><p>for-of 루프는 이터러블 객체를 순회한다. for-of 루프는 이터레이터의 next() 메소드를 호출하고 next() 메소드가 반환하는 객체의 done 프로퍼티가 true가 될 때까지 루핑한다.</p></li></ul><hr><h3 id="2-for-in"><a href="#2-for-in" class="headerlink" title=" 2. for..in"></a><a name="2"></a> 2. for..in</h3><p>일반적일때는 사용하지 않는 것으로. (엔진에 따라 다르다.)</p><ul><li>배열을 순회할 때는 사용하지 않을 것<ul><li>index 가 number 가 아니라 string 으로 나온다.</li><li>배열의 프로퍼티를 순회할 수도 있다.</li><li>prototype 체인의 프로퍼티를 순회할 수도 있다.</li><li>루프가 무작위로 순회할 수도 있다.</li><li>for..of 를 쓸 것</li></ul></li><li>객체를 순회할 때<ul><li><code>for (const prop of Object.keys(obj))</code> 도 사용할 수 있다.</li></ul></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'first'</span>, <span class="string">'second'</span>];</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    age: <span class="number">35</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열에 for..of 이용</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item of array) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> item + <span class="string">', '</span> + item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열에 for..in 이용</span></span><br><span class="line"><span class="comment">// item 이 string 타입의 숫자</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> array) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> item + <span class="string">', '</span> + item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체에 for..of 이용 =&gt; 오류</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for (const item of obj) &#123;</span></span><br><span class="line"><span class="comment">    console.log(typeof item + ', ' + item);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체에 for..in 이용</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> item + <span class="string">', '</span> + item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체의 keys 들에 for..of 이용</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item of <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> item + <span class="string">', '</span> + item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>target 이 es3 인데도 forEach 는 트랜스파일이 되지 않았음.<br><a href="https://github.com/Microsoft/TypeScript/issues/2410" target="_blank" rel="noopener">https://github.com/Microsoft/TypeScript/issues/2410</a></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="string">'first'</span>, <span class="string">'second'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// ts</span></span><br><span class="line">array.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// js</span></span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="3-Symbol-iterator"><a href="#3-Symbol-iterator" class="headerlink" title=" 3. Symbol.iterator"></a><a name="3"></a> 3. Symbol.iterator</h3><h4 id="이터러블-iterable"><a href="#이터러블-iterable" class="headerlink" title="이터러블(iterable)"></a><code>이터러블(iterable)</code></h4><p>iterate = 반복하다<br>이터러블은 <strong>순회 가능한 자료 구조</strong>이다. <code>Symbol.iterator</code>를 프로퍼티 key로 사용한 메소드를 구현하는 것에 의해 순회 가능한 자료 구조인 이터러블이 된다.</p><h4 id="이터레이터"><a href="#이터레이터" class="headerlink" title="이터레이터"></a><code>이터레이터</code></h4><p><code>Symbol.iterator</code>를 프로퍼티 key로 사용한 메소드는 이터레이터로 반환한다. 이터레이터는 순회 가능한 자료 구조인 이터러블의 요소를 탐색하기 위한 포인터로서 <code>next()</code> 메소드를 갖는 객체이다. next() 메소드는 value, done 프로퍼티를 갖는 객체를 반환하며 이 메소드를 통해 이터러블 객체를 순회할 수 있다.</p><p>ES6에서 제공하는 built-in iterable은 아래와 같다.</p><ul><li>Array <code>Array.prototype[Symbol.iterator]</code></li><li>String <code>String.prototype[Symbol.iterator]</code></li><li>Map <code>Map.prototype[Symbol.iterator]</code></li><li>Set <code>Set.prototype[Symbol.iterator]</code></li><li>DOM data structures <code>NodeList.prototype[Symbol.iterator]</code> <code>HTMLCollection.prototype[Symbol.iterator]</code></li></ul><ul><li>프로퍼티이며, 함수가 구현되어있으면, iterable 이라고 한다.</li><li>Array, Map, Set, String, Int32Array, Uint32Array, etc. 에는 내장된 구현체가 있으므로 이터러블 하다.</li><li>그냥 객체는 이터러블하지 않다.</li><li>이터레이터를 통해 이터러블한 객체의 Symbol.iterator 함수를 호출한다.</li><li>target : es3 or es5<ul><li>Array 에만 for..of 사용 가능</li><li>일반 객체에 사용하면 오류</li></ul></li><li>target : es6<ul><li>Symbol.iterator 함수를 구현하면 어떤 객체에도 for..of 사용 가능</li></ul></li></ul><hr><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.es6.d.ts</span></span><br><span class="line"><span class="keyword">interface</span> IteratorResult&lt;T&gt; &#123;</span><br><span class="line">    done: <span class="built_in">boolean</span>;</span><br><span class="line">    value: T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Iterator&lt;T&gt; &#123;</span><br><span class="line">    next(value?: <span class="built_in">any</span>): IteratorResult&lt;T&gt;; <span class="comment">// next가 필수로 있어야한다.</span></span><br><span class="line">    <span class="keyword">return</span>?(value?: <span class="built_in">any</span>): IteratorResult&lt;T&gt;;</span><br><span class="line">    <span class="keyword">throw</span>?(e?: <span class="built_in">any</span>): IteratorResult&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Iterable&lt;T&gt; &#123;</span><br><span class="line">    [Symbol.iterator](): Iterator&lt;T&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IterableIterator&lt;T&gt; <span class="keyword">extends</span> Iterator&lt;T&gt; &#123;</span><br><span class="line">    [Symbol.iterator](): IterableIterator&lt;T&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="5-CustomIterable"><a href="#5-CustomIterable" class="headerlink" title=" 5. CustomIterable"></a><a name="4"></a> 5. CustomIterable</h3><p>객체는 이터러블이 아니다. 하지만 이터레이션 프로토콜을 준수하여 이터러블 객체를 만들수 있다.</p><ul><li>Symbol.iterator를 key로 사용한 메소드는 next() 함수를 프로퍼티로 가지는 객체를 반환하여야 한다. 그리고 next() 함수는 done과 value 프로퍼티를 가지는 객체를 반환한다. for-of는 done 프로퍼티가 true가 될 때까지 반복하며 done 프로퍼티가 true가 되면 반복을 중지한다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> CustomIterable <span class="keyword">implements</span> Iterable&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> _array: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">'first'</span>, <span class="string">'second'</span>];</span><br><span class="line"></span><br><span class="line">    [Symbol.iterator]() &#123;</span><br><span class="line">        <span class="keyword">var</span> nextIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            next: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    value: <span class="keyword">this</span>._array[nextIndex++],</span><br><span class="line">                    done: nextIndex &gt; <span class="keyword">this</span>._array.length</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cIterable = <span class="keyword">new</span> CustomIterable();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item of cIterable) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/es6-iteration-for-of" target="_blank" rel="noopener">http://poiemaweb.com/es6-iteration-for-of</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;타입스크립트 정리 글은 이웅재님의 &lt;a href=&quot;https://www.youtube.com/user/2woongjae/videos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;강의&lt;/a&gt;와 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2017 TypeScript workshop" scheme="http://feel5ny.github.io/categories/02-WorkShop/2017-TypeScript-workshop/"/>
    
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>8/ Generic</title>
    <link href="http://feel5ny.github.io/2017/11/24/Typescript_09/"/>
    <id>http://feel5ny.github.io/2017/11/24/Typescript_09/</id>
    <published>2017-11-24T06:42:10.000Z</published>
    <updated>2019-10-31T13:06:22.178Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="noopener">강의</a>와 <a href="http://slides.com/woongjae/deck-8-15" target="_blank" rel="noopener">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><p><strong>요약</strong><br>제네릭은 어떠한 클래스 혹은 함수에서 사용할 타입을 그 함수나 클래스를 사용할 때 결정하는 프로그래밍 기법을 말한다. 정적 타입 언어에서도 이렇게 특정 타입을 위해 만들어진 함수 혹은 클래스를 보다 범용적으로 재사용하기 위한 요구가 있기 때문에 제네릭이라는 프로그래밍 기법이 생긴 게 아닐까한다. </p><hr><h3 id="1-any-gt-generic"><a href="#1-any-gt-generic" class="headerlink" title=" 1. any =&gt; generic"></a><a name="1"></a> 1. <del>any</del> =&gt; generic</h3><p>any의 사용을 지양하고자 타입을 인자로 넘긴다.</p><ul><li>탬플릿을 만드는 개념. 인자값과 출력값의 타입을 같게 탬플릿을 만들어준다.</li><li>제네릭은 선언 시점이 아니라 생성 시점에 타입을 명시하여 <code>하나의 타입만이 아닌 다양한 타입을 사용할 수 있도록 하는 기법이다.</code> 한번의 선언으로 다양한 타입에 재사용이 가능하다는 장점이 있다.</li><li><code>T</code>는 제네릭을 선언할 때 관용적으로 사용되는 식별자로 타입 파라미터(Type parameter)라 한다. T는 Type의 약자로 반드시 T를 사용하여야 하는 것은 아니다.</li><li>함수에도 제네릭을 사용할 수 있다. 제네릭을 사용하면 하나의 타입만이 아닌 다양한 타입의 매개변수와 리턴값을 사용할 수 있다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloGeneric</span>&lt;<span class="title">T</span>&gt;(<span class="params">message: T</span>): <span class="title">T</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloString</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloNumber</span>(<span class="params">message: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 더 많은 반복된 함수들 ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">message: <span class="built_in">any</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloGeneric</span>&lt;<span class="title">T</span>&gt;(<span class="params">message: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hello(<span class="string">'Mark'</span>).length);</span><br><span class="line"><span class="built_in">console</span>.log(hello(<span class="number">35</span>).length); <span class="comment">// hello 의 리턴이 any 이기 때문에 타입 헬퍼가 제대로 되지 않음</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(helloGeneric(<span class="number">35</span>).toString()); <span class="comment">// console.log(helloGeneric&lt;number&gt;(35).toString());</span></span><br><span class="line"><span class="comment">// helloGeneric 을 사용하면 정상적으로 사용가능</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-basic-generic"><a href="#2-basic-generic" class="headerlink" title=" 2. basic generic"></a><a name="2"></a> 2. basic generic</h3><ol><li>Generic 타입을 쓰지 않으면, T 로 추론</li><li>Generic 타입을 쓰면, T 를 확인</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloGeneric</span>&lt;<span class="title">T</span>&gt;(<span class="params">message: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>&lt;<span class="title">T</span>&gt;(<span class="params">message:  T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hello&lt;<span class="built_in">string</span>&gt;(<span class="string">'Hello'</span>));</span><br><span class="line"><span class="keyword">let</span> age = hello(<span class="number">35</span>);</span><br><span class="line">hello&lt;<span class="built_in">number</span>&gt;(<span class="string">'35'</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="3-Generic-Array"><a href="#3-Generic-Array" class="headerlink" title=" 3. Generic Array"></a><a name="3"></a> 3. Generic Array</h3><p>hello 함수의 제네릭 타입을 [] 를 이용하여 배열로 사용할 수 있음</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>&lt;<span class="title">T</span>&gt;(<span class="params">messages: T[]</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> messages[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hello&lt;<span class="built_in">string</span>&gt;([<span class="string">'Hello'</span>, <span class="string">'World'</span>]));</span><br></pre></td></tr></table></figure><hr><h3 id="4-Generic-Type"><a href="#4-Generic-Type" class="headerlink" title=" 4. Generic Type"></a><a name="4"></a> 4. Generic Type</h3><p>구현체에 return T 를 설정하지 않아도, return false 시 오류가 나지 않는다?</p><ul><li>때에 따라서 적합하지 않을 수 있다. </li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> HelloGeneric = &lt;T&gt;<span class="function">(<span class="params">message: T</span>) =&gt;</span> T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hello: HelloGeneric = &lt;T&gt;(message: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hello&lt;<span class="built_in">string</span>&gt;(<span class="string">'Hello'</span>).length);</span><br></pre></td></tr></table></figure><hr><h3 id="5-Generic-Class"><a href="#5-Generic-Class" class="headerlink" title=" 5. Generic Class"></a><a name="5"></a> 5. Generic Class</h3><p>명시적으로 제네릭 타입을 설정하면 오류 </p><ul><li>function에서 generic을 사용할 때의 오류와 같다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> _name: T;</span><br><span class="line">    <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: T</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Person(<span class="string">'Mark'</span>);</span><br><span class="line"><span class="comment">// new Person&lt;string&gt;(35);</span></span><br></pre></td></tr></table></figure><hr><h3 id="6-Generic-with-extends"><a href="#6-Generic-with-extends" class="headerlink" title=" 6. Generic with extends"></a><a name="6"></a> 6. Generic with extends</h3><p>T 가 string 또는 number 를 상속받기 때문에 boolean 은 안된다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&lt;T <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">number</span>&gt; &#123; <span class="comment">// union type</span></span><br><span class="line">    <span class="keyword">private</span> _name: T;</span><br><span class="line">    <span class="keyword">private</span> _age: T;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: T</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Person(<span class="string">'Mark'</span>);</span><br><span class="line"><span class="keyword">new</span> Person(<span class="number">35</span>);</span><br><span class="line"><span class="comment">// new Person(true);</span></span><br></pre></td></tr></table></figure><hr><h3 id="7-Generic-with-multiple-types"><a href="#7-Generic-with-multiple-types" class="headerlink" title=" 7. Generic with multiple types"></a><a name="7"></a> 7. Generic with multiple types</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&lt;T, K&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> _name: T;</span><br><span class="line">    <span class="keyword">private</span> _age: K;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: T, age: K</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Person(<span class="string">'Mark'</span>, <span class="number">35</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="8-type-lookup-system"><a href="#8-type-lookup-system" class="headerlink" title=" 8. type lookup system"></a><a name="8"></a> 8. type lookup system</h3><p>keyof 키워드를 알아야한다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Test = keyof Person;</span><br><span class="line"><span class="comment">// 리터럴 타입의 유니온 타입이 나온다. "name" | "age"</span></span><br></pre></td></tr></table></figure><p>객체와 key값을 인자로 받아서 perperty의 타입값을 알아내는 함수를 만들었다고 치자.<br>함수에서 컴파일 타입을 검증할 수 있는 시스템이 필요하다. =&gt; type lookup system</p><ul><li><code>getProperty</code>: Generic과 type alias를 결합하여 사용하여 type을 찾아낼 수 있는 시스템을 만든다.</li><li><code>setProperty</code>: Generic과 type alias를 결합하여 사용하여 type을 찾아내고, 타입을 다시 재정의 하는 함수</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K</span>): <span class="title">T</span>[<span class="title">K</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    age: <span class="number">35</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K</span>): <span class="title">T</span>[<span class="title">K</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K, value: T[K]</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    obj[key] = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getProperty(person, <span class="string">'name'</span>));</span><br><span class="line"><span class="comment">// console.log(getProperty(person, fullname));</span></span><br><span class="line">setProperty(person, <span class="string">'name'</span>, <span class="string">'Anna'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(getProperty(person, <span class="string">'name'</span>));</span><br><span class="line"><span class="comment">// setProperty(person, 'name', 24);</span></span><br></pre></td></tr></table></figure><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/typeScript-generic" target="_blank" rel="noopener">http://poiemaweb.com/typeScript-generic</a></li><li><a href="https://www.youtube.com/watch?v=3-nJyzJATq8" target="_blank" rel="noopener">https://www.youtube.com/watch?v=3-nJyzJATq8</a></li><li><a href="https://hyunseob.github.io/2017/01/14/typeScript-generic/" target="_blank" rel="noopener">https://hyunseob.github.io/2017/01/14/typeScript-generic/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;타입스크립트 정리 글은 이웅재님의 &lt;a href=&quot;https://www.youtube.com/user/2woongjae/videos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;강의&lt;/a&gt;와 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2017 TypeScript workshop" scheme="http://feel5ny.github.io/categories/02-WorkShop/2017-TypeScript-workshop/"/>
    
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>08 days/ 협업규칙 정하기, 초기 셋팅, 퍼블리싱</title>
    <link href="http://feel5ny.github.io/2017/11/24/dada_02week/"/>
    <id>http://feel5ny.github.io/2017/11/24/dada_02week/</id>
    <published>2017-11-24T01:10:04.000Z</published>
    <updated>2019-02-04T17:33:43.618Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Daily scrum(김나영) <a href="https://docs.google.com/spreadsheets/d/e/2PACX-1vR57PrRMvXjFa1sHCtLX-ifjMt8VEoiPuzKa0ErH-h787p4MqxssYJKt7QaYCReGVIaJEu_HgpMBGRC/pubhtml" target="_blank" rel="noopener">+</a><br>Github <a href="https://github.com/huusz/Da-Da" target="_blank" rel="noopener">+</a></p><hr><p>목차<br>(2017.10.01 ~ 2017.10.09)</p><ol><li><a href="#managing">프로젝트 매니징을 위한 셋팅</a><ul><li>깃헙 셋팅</li><li>깃헙 프로젝트 탭으로 매니징</li><li>테스크 관련 규칙 정하기</li></ul></li><li><a href="#init">프로젝트 초기 셋팅</a><ul><li>의존모듈 셋팅</li><li>css 프레임워크 선택</li><li>css styling 방법</li></ul></li><li><a href="#publishing">퍼블리싱 &#128153;</a> (feat.추석)</li></ol><hr><h2 id="1-프로젝트-매니징을-위한-셋팅"><a href="#1-프로젝트-매니징을-위한-셋팅" class="headerlink" title=" 1. 프로젝트 매니징을 위한 셋팅"></a><a name="managing"></a> 1. 프로젝트 매니징을 위한 셋팅</h2><h3 id="깃헙-셋팅"><a href="#깃헙-셋팅" class="headerlink" title="깃헙 셋팅"></a>깃헙 셋팅</h3><ul><li>깃헙 레포에는 백엔드, 프론트엔드 폴더를 초반에 나누어서 진행하였다.<ul><li><span style="color:white"><strong>troubleShoot</strong></span><br>위험 상황을 피하는 차원에서 백엔드와 프론트엔드는 레포를 따로 생성하는게 좋다고 하셨음.</li></ul></li><li>처음 시작 시에는 master브랜치에서 브랜치를 각자 생성하여 진행, 풀리케스트 없이 바로 바로 merge하며 진행. (지금 생각하니 헉;)</li><li>퍼블리싱 이후에는 master는 절대적으로 배포용으로만 사용하기로 정함. (브랜치 rock 설정)</li><li>develop-backend, develop-frontend 브랜치를 main브랜치로 정함. </li><li>퍼블리싱 단계에서는 <code>각자 이름-페이지이름</code>으로 브랜치를 생성하기로 정하였다.</li></ul><img src="/images/post_img/06/01.png">> 퍼블리싱 끝나고 merge 후<ul><li><span style="color:white"><strong>troubleShoot</strong></span><br>위의 이미지는 1주일만에 merge한 상황. merge는 자주자주 하는게 좋다.</li></ul><hr><h3 id="깃헙-프로젝트-탭"><a href="#깃헙-프로젝트-탭" class="headerlink" title="깃헙 프로젝트 탭"></a>깃헙 프로젝트 탭</h3><img src="/images/post_img/06/02.png">프로젝트 탭은 총 5가지로 구성하였다.1. 규칙2. 할 일3. 진행 중인 작업4. 마친 작업<p>규칙의 경우 예전에 참여했던 프로젝트의 규칙을 light하게 가져왔다.<br><img src="/images/post_img/06/03.png"></p><p>규칙은 아래와 같이 가볍게 정했다!</p><ol><li>급한 이슈의 경우 라벨 붙이기</li><li>카드당 assign 필수</li><li>작성 규칙<ul><li>[페이지명] 작업 설명<ul><li>EX. [Diary] 식단 추가 작업</li></ul></li><li>페이지가 구분 되지 않는 경우는 [Global]로 한다.<ul><li>EX. [Global] 페이지 라우팅</li></ul></li></ul></li><li>카드 하나당 1개의 작업만 등록한다.</li></ol><ul><li>테스크의 경우 매주 진행했던 오프라인 회의 때 코드리뷰 이후 할일 카드를 같이 생성하기로 정했다.</li></ul><hr><p><span style="color:white"><strong>Tip</strong></span></p><ul><li>깃헙 프로젝트에서 카드를 이슈로 만들면, 이슈탭에도 자동 등록 가능하다.</li><li>해당 이슈의 커밋이 진행 될 경우, 커밋 메세지에 이슈 number와 명령어를 추가하면 이슈가 자동으로 close나 등등의 작업이 자동화되면서, 이슈에도 log가 남는다.<ul><li>Close: <code>close</code>, <code>closes</code>, <code>closed</code>, <code>fix</code>, <code>fixes</code>, <code>fixed</code>, <code>resolve</code>, <code>resolves</code>, <code>resolved</code></li><li>Reopen: <code>reopen</code>, <code>reopens</code>, <code>reopened</code></li></ul></li></ul><p><span style="color:white"><strong>Issue</strong></span></p><ul><li>slack notation을 걸어놓지 않아서 이메일로 확인해야했다.</li><li>카드를 close로 옮겨야하는 번거로움이 있었다.<br>(지라같은 툴은 옮기지 이슈가 닫히면 자동으로 옮기짐)</li></ul><hr><hr><h2 id="2-프로젝트-초기-셋팅"><a href="#2-프로젝트-초기-셋팅" class="headerlink" title=" 2. 프로젝트 초기 셋팅"></a><a name="init"></a> 2. 프로젝트 초기 셋팅</h2><h3 id="1-create-react-app"><a href="#1-create-react-app" class="headerlink" title="1. create-react-app"></a>1. create-react-app</h3><hr><h3 id="2-폴더-구조-셋팅"><a href="#2-폴더-구조-셋팅" class="headerlink" title="2. 폴더 구조 셋팅"></a>2. 폴더 구조 셋팅</h3><p>  <code>components/</code> global하게 사용되는 container 컴포넌트<br>  <code>pages/</code> container component와 presentational component를 함께 두었다.</p><hr><h3 id="3-CSS-프레임워크-선택"><a href="#3-CSS-프레임워크-선택" class="headerlink" title="3. CSS 프레임워크 선택 +"></a>3. CSS 프레임워크 선택 <a href="https://www.vobour.com/book/view/LCETueEN7i3MjvEcz" target="_blank" rel="noopener">+</a></h3><p>  <strong>Semantic-UI-React</strong><br>  서비스 컨셉과 유사한 디자인을 갖고 있고 여러 종류의 컴포넌트들이 있어서 사용.</p><hr><h3 id="4-css-styling-방법"><a href="#4-css-styling-방법" class="headerlink" title="4. css styling 방법"></a>4. css styling 방법</h3><h4 id="4-1-첫번째-이슈-디자인-커스텀"><a href="#4-1-첫번째-이슈-디자인-커스텀" class="headerlink" title="4-1. 첫번째 이슈_디자인 커스텀"></a>4-1. 첫번째 이슈_디자인 커스텀</h4><ul><li>시맨틱 프레임워크를 사용해도, 디자인 시안이 있었기 때문에 약간의 커스텀이 필요했다. </li><li>이미 셋팅되어있는 컴포넌트를 커스텀을 해야했기 때문에 css로는 적용이 불가능했다. 인라인으로 적용해야 덮어씌어졌음.</li><li><code>!important</code>로 되어있는 css를 제외하고는 inline 형식으로 작성하기로 결정</li></ul><h4 id="4-2-두번째-이슈-스타일드-컴포넌트-인라인-스타일"><a href="#4-2-두번째-이슈-스타일드-컴포넌트-인라인-스타일" class="headerlink" title="4-2. 두번째 이슈_스타일드 컴포넌트? 인라인 스타일"></a>4-2. 두번째 이슈_스타일드 컴포넌트? 인라인 스타일</h4><p>핫한 스타일드 컴포넌트를 쓸까 인라인 스타일로 작업을 할까 고민했었다. 지금 생각해보면 과감하게 쓸껄…이라고 생각이 든다. 러닝커브가 있을 듯 하여 <code>인라인 스타일</code>로 작업하게 되었다. </p><p><span style="color:white"><strong>Issue</strong></span><br>인라인스타일로 작업하다보니 <code>:hover</code>, <code>:before</code>, <code>:after</code>과 같은 셀렉터를 사용하지 못했고, css를 부분 부분 섞어 쓰게 되었다. 스타일드 컴포넌트는 이를 해결해주는데.. 그냥 쓸껄!</p><img src="/images/post_img/06/04.png" width="150px"><hr><h3 id="5-의존모듈-셋팅"><a href="#5-의존모듈-셋팅" class="headerlink" title="5. 의존모듈 셋팅"></a>5. 의존모듈 셋팅</h3><p>디자인 시안을 보면, 필요한 서드파티는 </p><ol><li>일기탭의 에디터</li><li>그래프 차트</li></ol><hr><h4 id="5-1-일기탭-에디터"><a href="#5-1-일기탭-에디터" class="headerlink" title="5-1. 일기탭 에디터"></a>5-1. 일기탭 에디터</h4><ul><li>개인적으로 <a href="https://summernote.org/" target="_blank" rel="noopener">summernote</a>를 좋아하는데, 리액트 친화적이지 않아서 포기</li><li>리액트 친화적인 모듈을 찾다가 페이스북에서 만든 <a href="https://draftjs.org/" target="_blank" rel="noopener">draft.js</a>를 사용하기로 결정.</li><li>나중에 설명하겠지만, 에디터는 post로 보내기 전에 html 형식으로 export했어야 했고, 이 부분에서 많은 난관에 봉착했었다.<ul><li><code>draft-js-export-html</code>로 해결</li></ul></li></ul><hr><h4 id="5-2-그래프-차트"><a href="#5-2-그래프-차트" class="headerlink" title="5-2. 그래프 차트"></a>5-2. 그래프 차트</h4><ul><li>react d3를 사용하려고 했으나, 디자인 시안과 비슷하지 않다는 점, 커스텀이 어려운 점이 있었다.</li><li>두번째 찾은 차트는 Uber에서 나온 <a href="https://uber.github.io/react-vis/" target="_blank" rel="noopener"><code>react-vis</code></a> 리액트 친화적.</li><li>세번째 찾은 차트는 <a href="https://github.com/recharts/recharts" target="_blank" rel="noopener"><strong>rechart</strong></a><ul><li>react와 d3로 만들어졌고, UI가 서비스 컨셉과 잘 어울려서 선택하게 됨.</li></ul></li><li>이또한 나중에 설명하겠지만, 그래프에 데이터를 넣는 구조와 서버에서 날라오는 데이터 구조가 많이 달랐기 때문에 프론트에서 다시 셋팅하는 작업이 필요했음.</li></ul><hr><hr><h2 id="3-퍼블리싱-128153"><a href="#3-퍼블리싱-128153" class="headerlink" title=" 3. 퍼블리싱 &#128153;"></a><a name="publishing"></a> 3. 퍼블리싱 &#128153;</h2><p>프론트엔드는 2명이었다. 각자 하고싶은 페이지를 맡아서 진행했다. 퍼블리싱은 항상 즐겁다! &#128582; 퍼블리싱하면서 발생한 이슈만 정리하겠다.</p><h3 id="간단-라우팅-작업"><a href="#간단-라우팅-작업" class="headerlink" title="+ 간단 라우팅 작업"></a>+ 간단 라우팅 작업</h3><ul><li><p><code>react-router-dom</code> 의존모듈</p></li><li><p>주 사용 API</p><ul><li>BrowserRouter</li><li>Route</li><li>Link</li><li>Switch (로그인 이후 바꾸주는 역할, 404페이지 라우팅)</li><li>withRouter (중첩 라우팅할 때 사용)</li></ul></li><li><p><code>App.js</code>에 셋팅</p></li><li><p>path</p><ul><li><code>/</code></li><li><code>/diary</code><ul><li>tab용 router파일 따로 셋팅</li><li><code>/diary/food</code></li><li><code>/diary/fitness</code></li><li><code>/diary/review</code></li></ul></li><li><code>/report</code></li><li><code>/weight</code></li><li><code>/search/:sc</code></li><li><code>/recipe/:id</code></li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;Daily scrum(김나영) &lt;a href=&quot;https://docs.google.com/spreadsheets/d/e/2PACX-1vR57PrRMvXjFa1sHCtLX-ifjMt8VEoiPuzKa0ErH-h787p4MqxssYJKt7Q
      
    
    </summary>
    
      <category term="blog 🙆" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/"/>
    
      <category term="project" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/project/"/>
    
    
      <category term="react" scheme="http://feel5ny.github.io/tags/react/"/>
    
      <category term="publishing" scheme="http://feel5ny.github.io/tags/publishing/"/>
    
  </entry>
  
  <entry>
    <title>7-1/ class 연습</title>
    <link href="http://feel5ny.github.io/2017/11/23/Typescript_08-1/"/>
    <id>http://feel5ny.github.io/2017/11/23/Typescript_08-1/</id>
    <published>2017-11-23T03:11:23.000Z</published>
    <updated>2019-10-31T13:06:22.179Z</updated>
    
    <content type="html"><![CDATA[<h3 id="연습문제-1"><a href="#연습문제-1" class="headerlink" title="연습문제 1"></a>연습문제 1</h3><p>아래 자바스크립트를 타입스크립트로 바꾸시오</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.speed = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">this</span>.honk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"부우우웅"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">this</span>.accelerate = <span class="function"><span class="keyword">function</span>(<span class="params">speed</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.speed = <span class="keyword">this</span>.speed + speed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">"BENZ"</span>);</span><br><span class="line">car.honk();</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br><span class="line">car.accelerate(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br></pre></td></tr></table></figure><p>1차</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Car &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> speed: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">public</span> honk(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'부우우웅'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> accelerate(speed) &#123;</span><br><span class="line">        <span class="keyword">this</span>.speed = <span class="keyword">this</span>.speed + speed;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> Car(<span class="string">"BENZ"</span>);</span><br><span class="line">car.honk();</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br><span class="line">car.accelerate(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br></pre></td></tr></table></figure><p>2차</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Car &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> _speed: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">public</span> honk(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'부우우웅'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> accelerate(speed) &#123;</span><br><span class="line">        <span class="keyword">this</span>._speed = <span class="keyword">this</span>.speed + speed;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">get</span> speed(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._speed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> Car(<span class="string">"BENZ"</span>);</span><br><span class="line">car.honk();</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br><span class="line">car.accelerate(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br></pre></td></tr></table></figure><p>3차</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ICar &#123;</span><br><span class="line">    honk(): <span class="built_in">void</span>;</span><br><span class="line">    accelerate(speed: <span class="built_in">number</span>): <span class="built_in">void</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Car &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> _speed: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> honk(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'부우우웅'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> accelerate(speed) &#123;</span><br><span class="line">        <span class="keyword">this</span>._speed = <span class="keyword">this</span>._speed + speed;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> speed(): <span class="built_in">number</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._speed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> car = <span class="keyword">new</span> Car(<span class="string">"BENZ"</span>);</span><br><span class="line">car.honk();</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br><span class="line">car.accelerate(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car.speed);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;연습문제-1&quot;&gt;&lt;a href=&quot;#연습문제-1&quot; class=&quot;headerlink&quot; title=&quot;연습문제 1&quot;&gt;&lt;/a&gt;연습문제 1&lt;/h3&gt;&lt;p&gt;아래 자바스크립트를 타입스크립트로 바꾸시오&lt;/p&gt;
&lt;figure class=&quot;highlight t
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2017 TypeScript workshop" scheme="http://feel5ny.github.io/categories/02-WorkShop/2017-TypeScript-workshop/"/>
    
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>7/ class(2)</title>
    <link href="http://feel5ny.github.io/2017/11/22/Typescript_08/"/>
    <id>http://feel5ny.github.io/2017/11/22/Typescript_08/</id>
    <published>2017-11-22T01:32:11.000Z</published>
    <updated>2019-10-31T13:06:22.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="noopener">강의</a>와 <a href="http://slides.com/woongjae/deck-8-14" target="_blank" rel="noopener">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><p><strong>요약</strong><br>class에서 선언된 멤버변수와 멤버함수를 외부에서 접근이 가능하게 하는 방법, 재선언할 수 있도록 컨트롤하는 방법을 배웁니다. 생성자에도 private화하여 class 내부에서만 선언이 가능하도록 하며, 이는 singleTon 패턴을 정확하게 배치 가능할 수 있게 합니다. readonly 키워드를 붙여서 getter의 역할만 가능하도록 할 수 있습니다. </p><hr><h3 id="1-class-getter-setter"><a href="#1-class-getter-setter" class="headerlink" title=" 1. class getter, setter"></a><a name="1"></a> 1. class getter, setter</h3><p>get, set을 하는 중에 무언가를 해주기 위해서 사용한다. get과 set 사이에 추가적인 작업이 있을 때 사용한다.</p><ol><li>_ 를 변수명 앞에 붙이고, 내부에서만 사용한다.</li><li>getter를 함수처럼 설정하면, 프로퍼티처럼 꺼내쓸수있다.</li><li>마찬가지로 setter 를 함수처럼 설정하면, 추가 작업을 하고 셋팅할 수 있다.</li></ol><blockquote><p>강사님은 getter setter가 혼란을 줄 수 있는 경우가 있어서 사용하지 않고, 대신 메서드를 같은 역할을 하는 메서드를 만드는데 메서드의 이름을 getName, setName으로 짓는다고 하셨따.</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> _name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> name() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">set</span> name(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="comment">// 작업</span></span><br><span class="line">        <span class="keyword">this</span>._name = <span class="string">`<span class="subst">$&#123;name&#125;</span> Lee`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person(<span class="string">'Mark'</span>, <span class="number">35</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br><span class="line">person.name = <span class="string">'Woongjae'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name);</span><br></pre></td></tr></table></figure><h4 id="getter"><a href="#getter" class="headerlink" title="getter"></a><code>getter</code></h4><p>getter는 어떤 멤버 변수에 접근할 때마다 멤버 변수의 값을 조작하는 행위가 필요할 때 사용한다. 사용 방법은 아래와 같다.</p><h4 id="setter"><a href="#setter" class="headerlink" title="setter"></a><code>setter</code></h4><p>setter는 어떤 멤버 변수에 값을 할당할 때마다 멤버 변수의 값을 조작하는 행위가 필요할 때 사용한다. 사용 방법은 아래와 같다.</p><hr><h3 id="2-class-멤버변수"><a href="#2-class-멤버변수" class="headerlink" title=" 2. class 멤버변수"></a><a name="2"></a> 2. class 멤버변수</h3><p>객체지향의 class와 거의 유사하다. static property와 static method가 있다.</p><ol><li>static 키워드를 붙힌 프로퍼티는 클래스.프로퍼티로 사용한다.</li><li>static 프로퍼티에 private, protected 를 붙히면 똑같이 동작한다.</li></ol><ul><li>public static은 외부에서 변경이 가능하다.</li><li>default는 public이다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CITY = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> lastName: <span class="built_in">string</span> = <span class="string">'Lee'</span>;</span><br><span class="line">    <span class="keyword">private</span> _name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> print() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this._name&#125;</span> <span class="subst">$&#123;Person.lastName&#125;</span> in <span class="subst">$&#123;Person.CITY&#125;</span>.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person(<span class="string">'Mark'</span>, <span class="number">35</span>);</span><br><span class="line">Person.CITY = <span class="string">'Seoul'</span>;</span><br><span class="line">person.print(); <span class="comment">// Mark Lee in Seoul.</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-class-멤버함수"><a href="#3-class-멤버함수" class="headerlink" title=" 3. class 멤버함수"></a><a name="3"></a> 3. class 멤버함수</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Talk(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'안녕하세요.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.Talk(); <span class="comment">// 안녕하세요.</span></span><br></pre></td></tr></table></figure><p>public static은 의미가 있다.<br>private static 메소드와 프로퍼티는 무슨 의미가 있나?<br>대부분 한 ts파일에 한 class를 사용하고, 모듈을 다른곳에서 쓰기위해서 export import를 쓴다. </p><h4 id="private-static"><a href="#private-static" class="headerlink" title="private static?"></a><code>private static</code>?</h4><ul><li>사용시 class의 private static과 ts파일 안의 제일 상단에 있는 const 변수와 어떤 차이가 있나? 라고 할때 애매하다.</li><li>private이라 애매한 것. </li></ul><hr><h3 id="4-class-private-static-property-or-method"><a href="#4-class-private-static-property-or-method" class="headerlink" title=" 4. class private static property or method"></a><a name="4"></a> 4. class private static property or method</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> PROPERTY = <span class="string">'프라이빗 프로퍼티'</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> METHOD() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'프라이빗 메서드'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(Person.PROPERTY);</span><br><span class="line">        Person.METHOD();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PROPERTY = <span class="string">'모듈 내 변수'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">METHOD</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'모듈 내 함수'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(PROPERTY);</span><br><span class="line">        METHOD();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="5-Abstract-Class-128566"><a href="#5-Abstract-Class-128566" class="headerlink" title=" 5. Abstract Class &#128566;"></a><a name="5"></a> 5. Abstract Class &#128566;</h3><ol><li>abstract 키워드가 사용된 클래스는 new 로 생성할 수 없다.</li><li>abstract 키워드가 사용된 클래스를 상속하면 abstract 키워드가 붙은 함수를 구현해야 한다.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> APerson &#123;</span><br><span class="line">    <span class="keyword">protected</span> _name: <span class="built_in">string</span> = <span class="string">'Mark'</span>;</span><br><span class="line">    <span class="keyword">abstract</span> setName(name: <span class="built_in">string</span>): <span class="built_in">void</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person <span class="keyword">extends</span> APerson &#123;</span><br><span class="line">    setName(name: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const person = new APerson(); // (X)</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><hr><h3 id="6-private-constructor"><a href="#6-private-constructor" class="headerlink" title=" 6. private constructor"></a><a name="6"></a> 6. private constructor</h3><ol><li>생성자 함수 앞에 접근제어자인 private 을 붙일 수 있다.</li><li>외부에서 생성이 불가능하다.</li></ol><blockquote><p>내부에서 생성하는 방법을 써야하고, 그러다보니 싱글톤 패턴을 정확하게 배치해서 사용할 수 있게 되었다. </p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Preference &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const p: Preference = new Preference(); (X)</span></span><br></pre></td></tr></table></figure><hr><h3 id="7-singleTon-128580"><a href="#7-singleTon-128580" class="headerlink" title=" 7. singleTon &#128580;"></a><a name="7"></a> 7. singleTon &#128580;</h3><p>자바스크립트의 함수는 new로 생성자를 사용할 때마다 새로이 생성된 객체를 리턴합니다. 하지만 특수한 상황에서는 하나의 함수에서 생성되는 객체가 오직 한개만을 가져야 할 때가 있다. 그럴 경우 사용되는 디자인 패턴이 <code>Singleton Pattern</code></p><ul><li>싱글턴 패턴 : 객체리터럴이 싱글턴 패턴의 대표적.<ul><li>모듈패턴을 변형한 디자인 패턴<ul><li>처음 namespace를 만들 때 사용한다. </li><li>게임을 실행할 때 게임은 한번만 켜져야 하기 때문에 싱글턴이 적절.</li></ul></li></ul></li></ul><ol><li>private 생성자를 이용해서 내부에서만 인스턴스 생성이 가능하도록 함.</li><li>pubilc static 메서드를 통해 private static 인스턴스 레퍼런스를 획득한다.</li><li>Lazy Loading (Initialization) : 최초 실행시가 아니라, 사용시에 할당을 함</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Preference &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> getInstance() &#123;</span><br><span class="line">        <span class="comment">// 유일 객체가 정의되지 않았다면 객체를 생성.</span></span><br><span class="line">        <span class="keyword">if</span> (Preference.instance === <span class="literal">null</span>) &#123;</span><br><span class="line">            Preference.instance = <span class="keyword">new</span> Preference();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Preference.instance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> instance: Preference = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p: Preference = Preference.getInstance();</span><br></pre></td></tr></table></figure><hr><h3 id="8-readonly"><a href="#8-readonly" class="headerlink" title=" 8. readonly"></a><a name="8"></a> 8. readonly</h3><p>private인데 get, set중 get만 있는 상황과 같다. </p><ol><li><code>private readonly</code> 로 선언된 경우, 생성자에서는 할당이 가능하다.</li><li><code>private readonly</code> 로 선언된 경우, 생성자 이외에서는 할당이 불가능하다.</li><li><code>public readonly</code> 로 선언된 경우, 클래스 외부에서는 다른값을 할당할 수 없다.</li><li>마치 getter 만 있는 경우와 같다.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> readonly _name: <span class="built_in">string</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> readonly age: <span class="built_in">number</span> = <span class="number">35</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> setName(name: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="comment">// this._name = name; (X)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p: Person = <span class="keyword">new</span> Person(<span class="string">'Mark'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(p.age);</span><br><span class="line"><span class="comment">// p.age = 36; // (X)</span></span><br></pre></td></tr></table></figure><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/es6-class" target="_blank" rel="noopener">http://poiemaweb.com/es6-class</a></li><li><a href="http://blog.javarouka.me/2012/02/javascripts-pattern-1-singeton-patterrn.html" target="_blank" rel="noopener">http://blog.javarouka.me/2012/02/javascripts-pattern-1-singeton-patterrn.html</a></li><li><a href="http://karl27.tistory.com/10" target="_blank" rel="noopener">http://karl27.tistory.com/10</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;타입스크립트 정리 글은 이웅재님의 &lt;a href=&quot;https://www.youtube.com/user/2woongjae/videos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;강의&lt;/a&gt;와 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2017 TypeScript workshop" scheme="http://feel5ny.github.io/categories/02-WorkShop/2017-TypeScript-workshop/"/>
    
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>6/ class(1)</title>
    <link href="http://feel5ny.github.io/2017/11/21/Typescript_07/"/>
    <id>http://feel5ny.github.io/2017/11/21/Typescript_07/</id>
    <published>2017-11-21T01:32:11.000Z</published>
    <updated>2019-10-31T13:06:22.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="noopener">강의</a>와 <a href="http://slides.com/woongjae/deck-8-14" target="_blank" rel="noopener">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><p><strong>TL;DR</strong><br>타입스크립트에서 주로 사용되는 class의 기초에 대해서 배웁니다. es6에 도입된 <code>class</code>와, public, private, protected 키워드로 class에 접근제어하는 방법을 배우고, class간의 상속 개념을 배웁니다. </p><hr><h3 id="1-class-기초"><a href="#1-class-기초" class="headerlink" title=" 1. class 기초"></a><a name="1"></a> 1. class 기초</h3><ol><li>생성자 함수(<code>constructor</code>)가 없으면, 디폴트 생성자가 불린다.</li><li>클래스의 프로퍼티 혹은 멤버 변수가 정의되어 있지만, 값을 대입하지 않으면 undefined 이다.<br> =&gt; 오브젝트에 프로퍼티가 아예 존재하지 않는다.</li><li>접근제어자 (Access Modifier)는 <code>public</code>이 디폴트이다.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="comment">// name과 age는 프로퍼티</span></span><br><span class="line">    <span class="comment">// class 바디에는 메소드와 프로퍼티만 포함할 수 있다. </span></span><br><span class="line">    name: <span class="built_in">string</span> = <span class="literal">null</span>; </span><br><span class="line">    age: <span class="built_in">number</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name; <span class="comment">// constructor 내부에서 선언한 멤버변수는 this에 바인딩되어 있으므로 언제나 public이다. </span></span><br><span class="line">    &#125; <span class="comment">// 퍼블릭</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// class에서 default가 public이다.</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">'Clara'</span>);</span><br><span class="line"><span class="comment">// 인스턴스를 생성할 때 new 연산자와 함께 호출한 것이 바로 constructor이며 constructor의 파라미터에 전달한 값은 멤버 변수에 할당한다.</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name)</span><br><span class="line"><span class="built_in">console</span>.log(person.age) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><hr><h3 id="2-class-property"><a href="#2-class-property" class="headerlink" title=" 2. class property"></a><a name="2"></a> 2. class property</h3><ul><li>constructor이외에 프로퍼티들을 포함시킬 수 있다. </li><li>프로퍼티에도 값을 할당할 수 있다. 호출시 프로퍼티에 다시 값을 할당하게 되면, 마지막에 할당된 값이 출력된다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span> = <span class="string">'Clara'</span>;</span><br><span class="line">    age: <span class="built_in">number</span> = <span class="number">27</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name === <span class="literal">null</span>); <span class="comment">// false</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name === <span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person();</span><br><span class="line">person.name = <span class="string">'nayoung'</span>;</span><br><span class="line">person.age = <span class="number">35</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person); </span><br><span class="line"><span class="comment">// Person &#123;name: 'nayoung', age: 35&#125;</span></span><br><span class="line"><span class="comment">// Person의 프로퍼티가 불린 후에 person.name에 다시 할당된 값이 불리어지므로 결론적으로는 'nayoung'이 출력된다.</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-class-Access-Modifier"><a href="#3-class-Access-Modifier" class="headerlink" title=" 3. class Access Modifier"></a><a name="3"></a> 3. class Access Modifier</h3><h4 id="private"><a href="#private" class="headerlink" title="private"></a><code>private</code></h4><ul><li>절대적으로 접근이 불가능하다.</li></ul><ol><li><code>private</code> 으로 설정된 프로퍼티는 <code>dot(.)</code>으로 접근할 수 없다.</li><li>클래스 내부에서는 private 프로퍼티를 사용할 수 있다.</li><li>private이 붙은 변수나 함수는 _ 를 이름앞에 붙이는데, 이는 문법이 아니라 널리 쓰이는 코딩 컨벤션이다.<blockquote><p>앞에 밑줄과 변수명을 쓰면 private이라는 코딩컨벤션 중 하나였다.</p></blockquote></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person(<span class="number">35</span>);</span><br><span class="line">person.name = <span class="string">'Mark'</span>;</span><br><span class="line"><span class="comment">// person._age (X)</span></span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">// Person &#123;name: 'Mark', _age: 35&#125;</span></span><br></pre></td></tr></table></figure><h4 id="protected"><a href="#protected" class="headerlink" title="protected"></a><code>protected</code></h4><p>부모자식간의 관계에서 상속을 받은 class는(자식) 부모에는 접근 가능하다.</p><ol><li>부모에서 private 으로 설정된 프로퍼티는 상속을 받은 자식에서도 접근할 수 없다.</li><li>부모에서 protected 로 설정된 프로퍼티는 상속을 받은 자식에서 접근이 가능하다.</li><li>상속을 받은 자식 클래스에서 부모 클래스에 this 를 통해 접근하려면, 생성자에서 super(); 를 통해 초기화 해야한다.<blockquote><p>super란? super키워드는 부모 클래스의 프로퍼티를 참조할 때 또는 부모 클래스의 constructor를 호출할 때 사용한다.</p></blockquote></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Parent &#123;</span><br><span class="line">    <span class="keyword">private</span> privateProp: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> protectedProp: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(); <span class="comment">// 아래의 멤버변수와 순서가 바뀌어도 에러가 난다!</span></span><br><span class="line">        <span class="keyword">this</span>.protectedProp = <span class="string">'protected'</span>;</span><br><span class="line">        <span class="comment">// this.privateProp = 'private'; // (X)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="4-class-default-constructor"><a href="#4-class-default-constructor" class="headerlink" title=" 4. class default constructor"></a><a name="4"></a> 4. class default constructor</h3><ul><li>디폴트 생성자는 프로그래머가 만든 생성자가 없을 때 사용할 수 있다.<ul><li>사용자가 만든 생성자가 하나라도 있으면, 디폴트 생성자는 사라진다.<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="5-class-amp-method"><a href="#5-class-amp-method" class="headerlink" title=" 5. class &amp; method"></a><a name="5"></a> 5. class &amp; method</h3><ol><li>클래스 내부에 작성된 메서드는 public 이 디폴트</li><li>arrow function 으로 작성 가능</li><li>private 을 이용하면 클래스 외부에서 접근 불가</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> _name: <span class="built_in">string</span>, <span class="keyword">private</span> _age: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    print(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`이름은 <span class="subst">$&#123;this._name&#125;</span> 이고, 나이는 <span class="subst">$&#123;this._age&#125;</span> 살 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printName = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123; <span class="comment">// arrow function</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`이름은 <span class="subst">$&#123;this._name&#125;</span> 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> printAge(): <span class="built_in">void</span>  &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`나이는 <span class="subst">$&#123;this._age&#125;</span> 살 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person(<span class="string">'Mark'</span>, <span class="number">35</span>);</span><br><span class="line">person.print(); <span class="comment">// 이름은 Mark 이고, 나이는 35 살 입니다.</span></span><br><span class="line">person.printName(); <span class="comment">// 이름은 Mark 입니다.</span></span><br><span class="line"><span class="comment">// person.printAge(); // (X)</span></span><br></pre></td></tr></table></figure><hr><h3 id="6-class-extends"><a href="#6-class-extends" class="headerlink" title=" 6. class extends"></a><a name="6"></a> 6. class extends</h3><ol><li>상속은 <code>extends</code> 키워드를 이용한다.</li><li>자식 클래스에서 디폴트 생성자는 부모의 생성자와 입력 형태가 같다.</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Parent &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">protected</span> _name: <span class="built_in">string</span>, <span class="keyword">protected</span> _age: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    print(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`이름은 <span class="subst">$&#123;this._name&#125;</span> 이고, 나이는 <span class="subst">$&#123;this._age&#125;</span> 살 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    printName = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`이름은 <span class="subst">$&#123;this._name&#125;</span> 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> printAge(): <span class="built_in">void</span>  &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`나이는 <span class="subst">$&#123;this._age&#125;</span> 살 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</span><br><span class="line">    _name = <span class="string">'Mark Jr.'</span>; <span class="comment">// 나중에 할당된 값이 출력된다. </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const p: Child = new Child(); // (X)</span></span><br><span class="line"><span class="keyword">const</span> p: Child = <span class="keyword">new</span> Child(<span class="string">''</span>, <span class="number">5</span>);</span><br><span class="line">p.print(); <span class="comment">// 이름은 Mark Jr. 이고, 나이는 5 살 입니다.</span></span><br></pre></td></tr></table></figure><ol><li>생성자를 정의하고, this 를 사용하려면, <code>super</code> 를 통해 부모의 생성자를 호출해줘야 한다.</li><li>super를 호출할때는 부모 생성자의 입력 타입이 같아야 한다.</li><li>super를 호출하는 것은 클래스 <code>외부</code>에서 호출하는 것과 같다.</li><li><code>protected</code> 함수를 호출해서 그 안의 private 을 출력하는 것에 주의한다.<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Parent &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">protected</span> _name: <span class="built_in">string</span>, <span class="keyword">private</span> _age: <span class="built_in">number</span></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    print(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`이름은 <span class="subst">$&#123;this._name&#125;</span> 이고, 나이는 <span class="subst">$&#123;this._age&#125;</span> 살 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> printName = (): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`이름은 <span class="subst">$&#123;this._name&#125;</span> 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> printAge(): <span class="built_in">void</span>  &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`나이는 <span class="subst">$&#123;this._age&#125;</span> 살 입니다.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">'Mark Jr.'</span>, age);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.printName();</span><br><span class="line">        <span class="keyword">this</span>.printAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p: Child = <span class="keyword">new</span> Child(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 이름은 Son 입니다.</span></span><br><span class="line"><span class="comment">// 나이는 1 살 입니다.</span></span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/es6-class" target="_blank" rel="noopener">http://poiemaweb.com/es6-class</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;타입스크립트 정리 글은 이웅재님의 &lt;a href=&quot;https://www.youtube.com/user/2woongjae/videos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;강의&lt;/a&gt;와 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2017 TypeScript workshop" scheme="http://feel5ny.github.io/categories/02-WorkShop/2017-TypeScript-workshop/"/>
    
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>03 days/ 기획 및 프로토타입, 그리고 디자인</title>
    <link href="http://feel5ny.github.io/2017/11/21/dada_01week/"/>
    <id>http://feel5ny.github.io/2017/11/21/dada_01week/</id>
    <published>2017-11-21T01:10:04.000Z</published>
    <updated>2019-01-03T15:39:20.496Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Daily scrum +<br>Github <a href="https://github.com/huusz/Da-Da" target="_blank" rel="noopener">+</a></p><blockquote><p>개발부분부터 보길 원하신다면 다음 포스팅부터 읽으셔도 됩니다.</p></blockquote><hr><h3 id="정말-3일만에-끝내신건가요"><a href="#정말-3일만에-끝내신건가요" class="headerlink" title="정말 3일만에 끝내신건가요?"></a>정말 3일만에 끝내신건가요?</h3><p>개발 공부를 하고 있던 만큼, 개발 이외의 시간들은 최대한 단축하고 싶었다. 우리 모두 비슷한 마음이었고, 다행히 이 부분의 스케줄을 잘 조정할 수 있었다. 사실 기획 스탭은 굉장히 중요한 시간이라는건 안다.. 한달이라는 기간이 주어졌기 때문에 선택과 집중을 해야하는 상황에서 우리는 개발기간을 선택했다. 다행히 각 스탭별로 능력을 갖고 있던 팀원들이 모였기 때문에, 이 부분에 대한 커뮤니케이션은 잘 진행되었고, 모두가 물어보는 그 3일만에 개발에 들어갈 수 있었다.<br>(여기서 말한 3일은 아이데이션 기간은 제외한 기간이다.)</p><hr><p>목차</p><ol><li><a href="#ideation">아이데이션</a></li><li><a href="#storyboard">와이어프레임 및 스토리보드</a></li><li><a href="#prototype">프로토타입</a></li><li><a href="#design">디자인</a></li></ol><hr><h2 id="1-아이데이션"><a href="#1-아이데이션" class="headerlink" title=" 1. 아이데이션"></a><a name="ideation"></a> 1. 아이데이션</h2><p>아이디어 논의 회의는 3일 중에.. 끝낸건 아니다ㅎ 그래도 2번의 회의 끝에 확정하게 되었다.<br>9월 7일 팀빌딩을 마치고, 25일 첫 팀프로젝트 오리엔테이션 전까지 2번의 회의를 진행했다.</p><h3 id="1차회의"><a href="#1차회의" class="headerlink" title="1차회의"></a>1차회의</h3><p> 서비스 주제의 경우, <code>요리</code>에 관심이 많던 팀원의 의견에서부터 시작했다. 요리로 키워드가 좁혀지고, 요리로 끊임없는 마인드맵을 그리다가, 첫 회의때는 주제는 결정하지 못했다.<br>그리고 첫 회의 때인만큼, 각자 하고 해보고싶은 테크에 대해서도 같이 얘기해보았는데, 그중 Google Cloud Platform (이하 GCP)의 <strong><a href="https://cloud.google.com/vision/" target="_blank" rel="noopener"><code>Vision api</code></a></strong>를 사용하자는 의견이 나왔다. 간단하게 얘기하자면 사진을 분석하여 어떤 물체가 있는 사진인지 단어를 여러가지 던져주는 api이다. 사실 이외에도 여러 의견들이 나왔었다. 일랙트론, 얼굴인식 api, 등등.. </p><ul><li>1차회의의 결론은 <code>요리</code>로 좁혀졌다는 것.</li></ul><img src="/images/post_img/05/05.png"><h3 id="2차회의"><a href="#2차회의" class="headerlink" title="2차회의"></a>2차회의</h3><p> 1차회의가 끝난 후 2차회의 전까지 집에서 이것저것 생각 해보았다. </p><ol><li>요리와 사진을 접목시켜서 나올 수 있는 서비스가 무엇일까.</li><li>요리를 사진 찍어서 올릴 상황은 언제인거지.<br>그러다 문득 네이버 블로그 이웃은 <code>다이어트 컨설팅</code>을 하는 언니가 떠올랐다. 그분이 주로 컨설팅 하는 방식은 컨설팅 받은 사람이 칼로리 계산과 영양소를 잘 조절해서 건강한 식사를 해 줄 수 있도록 도와주는 방식인데, 이때 사용하는 방법은 그 사람의 SNS에 무조건 식단 사진을 올리고 칼로리, 영상소를 기록하게 한다. 컨설턴트는 그 내용을 확인하고 1:1로 상담을 진행한다.</li></ol><p>오케이.</p><p>무조건 사진을 올려야한다는 조건과 음식이라는 조건이 일치했고, 2차 회의 때 제시해보았다. 저번 회의때 요리라는 키워드 때문에 레시피 서비스도 얘기했었는데, 레퍼런스를 찾다가 <code>로푸드 레시피</code>를 제공하는 해외사이트를 공유한적이 있었다. 그때의 레퍼런스와 건강함을 추구하는 몇몇 팀원들 덕분에 ㅎㅎ 식단 다이어리 서비스로 확정.<br>바로 러프한 아키텍처를 구상하고 회의를 마무리했다.</p><hr><h2 id="2-와이어프레임-및-스토리보드"><a href="#2-와이어프레임-및-스토리보드" class="headerlink" title=" 2. 와이어프레임 및 스토리보드"></a><a name="wireframe"></a> 2. 와이어프레임 및 스토리보드</h2><ul><li>팀프로젝트 오리엔테이션 및 3차회의</li><li>4차 회의</li><li>기획안 발표</li></ul><h3 id="팀-프로젝트-오리엔테이션-3차회의"><a href="#팀-프로젝트-오리엔테이션-3차회의" class="headerlink" title="팀 프로젝트 오리엔테이션 3차회의"></a>팀 프로젝트 오리엔테이션 3차회의</h3><p>팀 오리엔테이션때는 여러 재밌는 시간을 가졌는데, 프로젝트 시작 전 생각할 수 있는 위험요소를 공유하고, 어떻게 해결할지에 대해서 공유하는 시간을 가졌다. 지금 보니.. 귀여운 리스크들이네.</p><p><strong>Risk</strong></p><ul><li>각자의 욕심을 내세우는 커뮤니케이션 문제로 팀원 간의 관계 악화</li><li>충분한 테스트를 거치지 못해 최종 결과물이 오작동하거나 오류 발생</li><li>환경적 문제 : 소스 손실, 장비 고장</li></ul><p><strong>Solution</strong></p><ul><li>충분한 대화, 타협되지 않을 경우 각자 해당 부분을 담당</li><li>테스트 기간을 무조건 확보한다.</li><li>백업을 자주 한다.</li></ul><p>간단 오리엔테이션과 전체 진행 일정을 들은 후, 팀 회의 시간을 갖게 되었다. 이날은 저번에 짠 아키텍처를 시각화하고, 구체적으로 어떻게 컨셉을 잡을지와 UI구성, 서비스 네이밍, 등을 정했다. 이번 회의때는 몇몇 이슈들이 있었는데 저번 회의가 끝나고, 각자 머리 속으로 구성한 부분이 조금씩 달랐다는 점이었다. 이 날은 그런 생각의 차이를 조정하는 시간을 가졌다.<br>그리고 <strong>건강한 <code>다</code>이어트를 위한 식단 <code>다</code>이어리 서비스, DA DA</strong> 가 확정 되었다.</p><h3 id="스토리보드-작업-소요기간-1일"><a href="#스토리보드-작업-소요기간-1일" class="headerlink" title=" 스토리보드 작업 (소요기간: 1일)"></a><a name="storyboard"></a> 스토리보드 작업 (소요기간: 1일)</h3><p>와이어프레임 ( PDF version <a href="https://github.com/huusz/Da-Da/blob/master/static/dada-wireframe.pdf" target="_blank" rel="noopener">+</a> / Web version <a href="https://docs.google.com/presentation/d/e/2PACX-1vRgjDbUHXEy2dDrOFUiSDvOQ2hTvXXMSGbRQw3Bakq3Xh7Jcw5sVTkolmp-XKsWISoXxpxI6EjV6twg/pub?start=false&loop=false&delayms=3000" target="_blank" rel="noopener">+</a> )</p><ol><li>Information Architecture</li><li>구조도</li><li>화면별 스토리보드</li><li>시나리오</li></ol><hr><h2 id="3-프로토타입"><a href="#3-프로토타입" class="headerlink" title=" 3. 프로토타입 +"></a><a name="prototype"></a> 3. 프로토타입 <a href="https://projects.invisionapp.com/share/2GDPBHAT5" target="_blank" rel="noopener">+</a></h2><p>프로토타입은 Invision, Sketch를 사용했다. 스토리보드를 참고하여 간단 목업스타일로 시안 작업을 진행했고, 인터렉션은 invision에서 작업, 전체 느낌과 컨셉을 확인하는 시간을 가졌다.</p><img src="/images/post_img/05/04.png"><hr><h2 id="4-디자인"><a href="#4-디자인" class="headerlink" title=" 4. 디자인  +"></a><a name="design"></a> 4. 디자인  <a href="https://projects.invisionapp.com/share/DCE154SUH#/screens" target="_blank" rel="noopener">+</a></h2><p>디자인은 간단하게 키워드를 잡고 진행했다. 심플 + 모던 + 산뜻<br>최대한 음식을 먹고싶은 욕구를 억제했으면 좋겠다는 생각이 들어서 붉은 계열의 색상은 피했다. 식욕억제를 목적으로 블루계열 색상으로 key color를 잡았고, 블랙과 키칼리가 비슷한 비율로 사용되었기 때문에 강약조절이 필요했고, 키칼라에 좀더 힘을 주려기 위해 그라데이션을 사용하였다.<br>프로토타입에서 목업작업을 잘 해놓았기 때문에 그래픽 작업에서는 수월하게 진행할 수 있었다. 역시 기초작업이 제일 중요.<br><img src="/images/post_img/05/03.png"></p><p>최종 디자인 사안 이후 zeplin을 사용해서 팀원 전체와 공유하였다.</p><img src="/images/post_img/05/01.png"><hr><p><a href>다음편! &gt;</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;Daily scrum +&lt;br&gt;Github &lt;a href=&quot;https://github.com/huusz/Da-Da&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;+&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;개발부분부터 보길 
      
    
    </summary>
    
      <category term="blog 🙆" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/"/>
    
      <category term="project" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/project/"/>
    
    
      <category term="react" scheme="http://feel5ny.github.io/tags/react/"/>
    
      <category term="plan" scheme="http://feel5ny.github.io/tags/plan/"/>
    
      <category term="design" scheme="http://feel5ny.github.io/tags/design/"/>
    
      <category term="prototype" scheme="http://feel5ny.github.io/tags/prototype/"/>
    
  </entry>
  
  <entry>
    <title>5/ interface</title>
    <link href="http://feel5ny.github.io/2017/11/20/Typescript_06/"/>
    <id>http://feel5ny.github.io/2017/11/20/Typescript_06/</id>
    <published>2017-11-20T13:10:56.000Z</published>
    <updated>2019-10-31T13:06:22.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="noopener">강의</a>와 <a href="http://slides.com/woongjae/deck-8-14" target="_blank" rel="noopener">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><p><strong>TL;DR</strong><br>inteface에 대해서 배웁니다. interface 내부에서 타입선언 후 변수에서 사용하며, 함수에서는 <code>implements</code> 키워드를 사용하여 interface를 상속받아 사용합니다. property를 <code>?</code>를 사용하여 옵셔널하게 사용가능하며(안써도 되는 프로퍼티를 명시할 수 있음) interface 끼리 상속이 가능합니다. interface 자체를 함수화하여 사용가능하며, 내부에서는 출력값과 입력값의 타입을 명시합니다. indexable type으로도 옵셔널한 프로퍼티를 만들 수 있습니다.</p><hr><h3 id="1-interface-기초"><a href="#1-interface-기초" class="headerlink" title=" 1. interface 기초"></a><a name="1"></a> 1. interface 기초</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person: &#123; name: <span class="built_in">string</span>, age: <span class="built_in">number</span> &#125; = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    age: <span class="number">32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// person이라는 오브젝트를 설명하고 있는 타입은 리터럴 타입인데,매번 리터럴방식으로 타입을 선언할것인가?</span></span><br><span class="line"><span class="comment">// 아니오..  &gt; interface로 부르자.</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">    age: <span class="built_in">number</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    age: <span class="number">32</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// interface는 컴파일 이후에는 나타나지 않는다.</span></span><br></pre></td></tr></table></figure><ul><li>타입을 미리 interface에서 명시 한 후에 해당 interface를 넣어서 타입을 명시한다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">입력값:입력값타입</span>): 출력타입 </span>&#123;</span><br><span class="line">  ~</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hello = (p:Person): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(p.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">    age: <span class="built_in">number</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 입력과 출력을 정확히 명시하지 않으면, </span></span><br><span class="line"><span class="comment">// 추론을 하게 되는데 이는 문제가 될 수 있다.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">p: Person</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`안녕하세요. <span class="subst">$&#123;p.name&#125;</span> 입니다.`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-interface-optional-property"><a href="#2-interface-optional-property" class="headerlink" title=" 2. interface optional property"></a><a name="2"></a> 2. interface optional property</h3><h4 id="2-1-있어도-되고-없어도-되는-proerty를-설정-할-수-있다"><a href="#2-1-있어도-되고-없어도-되는-proerty를-설정-할-수-있다" class="headerlink" title="2-1. 있어도 되고 없어도 되는 proerty를 설정 할 수 있다."></a>2-1. 있어도 되고 없어도 되는 proerty를 설정 할 수 있다.</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">    age: <span class="built_in">number</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    <span class="comment">// age를 정의하지 않았기 때문에 person에 빨간줄이 생긴다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  age? : <span class="built_in">number</span> <span class="comment">// &lt;= age 뒤에 ?를 붙이면 된다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>,</span><br><span class="line">    age?: <span class="built_in">number</span>, <span class="comment">// 옵셔널한 프로퍼티 주는 방법</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    <span class="comment">// age는 optional한 property이기 때문에 없어도 오류가 나지 않는다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-indexable-type"><a href="#2-2-indexable-type" class="headerlink" title=" 2-2. indexable type"></a><a name="2-2"></a> 2-2. indexable type</h4><p>indexable type으로 optional한 타입을 사용 가능하다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. array같은 타입이고</span></span><br><span class="line"><span class="comment">// 2. 사전같은 타입이다.</span></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">// person의 property명으로 인덱스가 어떤 타입이었는지에 따라서</span></span><br><span class="line">    <span class="comment">// property.string 형태의 어떤 indexable type이 들어가면 나머지는 다 string으로 표현할 수 있다.</span></span><br><span class="line">    <span class="comment">// 사전같은 의미이다.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">    name: <span class="string">'Clara'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">person.anybody = <span class="string">"Clara"</span></span><br><span class="line">person[<span class="number">1</span>] = <span class="string">'hi'</span> <span class="comment">// 배열형태로도 넣을 수 있다.</span></span><br></pre></td></tr></table></figure><p><code>person.anybody = &quot;Clara&quot;</code> </p><ul><li>이렇게 객체에 <code>.</code>을 붙인 후 프로퍼티로 타입을 <code>옵셔널</code>하게 줄 수 있기 때문에 optional type으로 사용이 가능하다는 뜻이다. (없어도 에러가 나지 않는다.) </li><li><strong>index는 <code>string</code>이거나 <code>number</code>만 가능하다.</strong></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sa: StringArray = &#123;&#125;; <span class="comment">// 옵셔널하다, 안써도 에러가 안난다.</span></span><br><span class="line">sa[<span class="number">100</span>] = <span class="string">'백'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> StringDictionary &#123;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sd: StringDictionary = &#123;&#125;; <span class="comment">// 옵셔널하다</span></span><br><span class="line">sd.hundred = <span class="string">'백'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> StringArrayDictionary &#123;</span><br><span class="line">    [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sad: StringArrayDictionary = &#123;&#125;;</span><br><span class="line"><span class="comment">// 당연히 옵셔널하다.</span></span><br><span class="line">sad[<span class="number">100</span>] = <span class="string">'백'</span>;</span><br><span class="line">sad.hundred = <span class="string">'백'</span>;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringDictionary &#123;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sd: StringDictionary = &#123;</span><br><span class="line">    name: <span class="string">'이름'</span> <span class="comment">// 필수</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sd.any = <span class="string">'any'</span>; <span class="comment">// 어떤 프로퍼티도 가능</span></span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> StringDictionaryNo &#123;</span><br><span class="line">    [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">    <span class="comment">// name: number; </span></span><br><span class="line">    <span class="comment">// (X) 인덱서블 타입이 string 값을 가지기 때문에 number 를 필수로 끌어오면 에러</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="3-function-in-interface"><a href="#3-function-in-interface" class="headerlink" title=" 3. function in interface"></a><a name="3"></a> 3. function in interface</h3><p>interface 내부에 함수를 넣을 수 있다.</p><ul><li>출력값의 타입을 명시해야한다.<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    hello(): <span class="built_in">void</span>;</span><br><span class="line">    world(): <span class="built_in">string</span>;</span><br><span class="line">    nayoung(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    hello: <span class="function"><span class="keyword">function</span> (<span class="params"></span>): <span class="title">void</span> </span>&#123; <span class="comment">//void일 경우는 써도 되고 안 써도된다.</span></span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    world(): <span class="built_in">string</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'World'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    nayoung: (): <span class="function"><span class="params">number</span> =&gt;</span> &#123; <span class="comment">// ES6 문법 합수 사용시 </span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="4-implements-interface-128580"><a href="#4-implements-interface-128580" class="headerlink" title=" 4. implements interface &#128580;"></a><a name="4"></a> 4. implements interface &#128580;</h3><p>interface를 상속받아서 class에서 사용가능하다.</p><ul><li>class 선언문의 <code>implements</code> 뒤에 인터페이스를 선언하면 해당 클래스는 지정된 인터페이스를 반드시 구현하여야 한다. <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    hello(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 만들기. IPeron을 상속받았다.</span></span><br><span class="line"><span class="keyword">class</span> Person <span class="keyword">implements</span> IPerson &#123;</span><br><span class="line">  <span class="comment">// IPerson을 다 써줘야한다.</span></span><br><span class="line">    name: <span class="built_in">string</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123; <span class="comment">// IPerson의 name을 this.name으로 받는다. </span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    hello(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`안녕하세요. <span class="subst">$&#123;this.name&#125;</span> 입니다.`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> hi(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;this.name&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: IPerson = <span class="keyword">new</span> Person(<span class="string">'Mark'</span>);</span><br><span class="line">person.hello()</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="5-extends-interface"><a href="#5-extends-interface" class="headerlink" title=" 5. extends interface"></a><a name="5"></a> 5. extends interface</h3><p>상속받는 인터페이스를 만들 수 있다. interface끼리 상속이 가능하다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Korean <span class="keyword">extends</span> Person &#123;</span><br><span class="line">    city: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> k: Korean = &#123;</span><br><span class="line">    name: <span class="string">'이웅재'</span>,</span><br><span class="line">    city: <span class="string">'서울'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="6-function-interface"><a href="#6-function-interface" class="headerlink" title=" 6. function interface"></a><a name="6"></a> 6. function interface</h3><p>함수형 인터페이스이다. </p><ul><li>함수의 타입 체크는 할당할 때가 아니라 <code>사용할 때 한다</code>는 점을 명심</li><li>function의 입출력을 바로 명시하지 않는다.</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> HelloPerson &#123;</span><br><span class="line">    <span class="comment">// (name: string, age: number): void;</span></span><br><span class="line">    (name: <span class="built_in">string</span>, age?: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// helloPerson의 타입이 HelloPerson</span></span><br><span class="line"><span class="keyword">let</span> helloPerson: HelloPerson = <span class="function"><span class="keyword">function</span> (<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;  </span><br><span class="line">    <span class="comment">// name:string을 넣지 않아도 에러가 안난다. =&gt; 호출할 때 에러가 난다.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`안녕하세요! <span class="subst">$&#123;name&#125;</span> 입니다.`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">helloPerson(<span class="string">'Mark'</span>); <span class="comment">// 안녕하세요! Mark 입니다.</span></span><br><span class="line">helloPerson(); <span class="comment">// 에러가 난다.</span></span><br></pre></td></tr></table></figure><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://poiemaweb.com/typeScript-interface" target="_blank" rel="noopener">http://poiemaweb.com/typeScript-interface</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;타입스크립트 정리 글은 이웅재님의 &lt;a href=&quot;https://www.youtube.com/user/2woongjae/videos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;강의&lt;/a&gt;와 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2017 TypeScript workshop" scheme="http://feel5ny.github.io/categories/02-WorkShop/2017-TypeScript-workshop/"/>
    
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>4/ 타입추론, Type assertions, Type alias</title>
    <link href="http://feel5ny.github.io/2017/11/18/Typescript_05/"/>
    <id>http://feel5ny.github.io/2017/11/18/Typescript_05/</id>
    <published>2017-11-18T06:13:11.000Z</published>
    <updated>2019-10-31T13:06:22.174Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="noopener">강의</a>와 <a href="http://slides.com/woongjae/deck-8-14" target="_blank" rel="noopener">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><p><strong>목표</strong><br>이 포스팅과 interface 포스팅에서는 타입을 명시하는 방법을 배웁니다. 타입을 명시하지 않아도 추론이 가능하며, 강제 타입선언, 별명을 붙여가며 타입을 선언하는 방식 등을 배웁니다.</p><hr><h3 id="1-let과-const의-타입-추론"><a href="#1-let과-const의-타입-추론" class="headerlink" title=" 1. let과 const의 타입 추론"></a><a name="1"></a> 1. let과 const의 타입 추론</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">string</span> = <span class="string">'진호'</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">'승민'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c: <span class="built_in">string</span> = <span class="string">'나영'</span>;</span><br><span class="line"><span class="keyword">const</span> d = <span class="string">'슬기'</span> <span class="comment">// 리터럴 타입</span></span><br></pre></td></tr></table></figure><ul><li>const는 프리미티브 타입은 다른 값으로 못 바꾸고, 레퍼런스타입은 다른 레퍼런스타입을 가리키지 못하게 하는 것인데, 타입스크립트에서는 <code>리터럴 타입</code>이라고 하는 것으로 타입까지 강제해버린다.</li><li>즉 const에서 타입없이 선언될 경우 타입 추론에 의해서 할단된 값이 타입으로 된다. (리터럴 타입)<br>ex. 위에서 <code>const d = &#39;슬기&#39;</code>에서 d는 <code>const d:&#39;슬기&#39;</code>라고 뜨고, 슬기라는 리터럴 타입으로 된다.</li></ul><p>재할당 redeclare</p><ul><li>let은 재할당(redeclare)이 가능하다.</li><li>const는 <ul><li>레퍼런스 타입은 레퍼런스 값이 바뀌는 것을 허용하지 않고, 속안의 프로퍼티 바꾸는 것은 허용된다. </li><li>프리미티브 타입은 재할당이 아예 불가능.</li></ul></li></ul><blockquote><p>보통은 const를 사용하며, let을 쓰면서 명시적으로도 값이 바껴지는 변수라고도 표시한다.</p></blockquote><hr><h3 id="2-Type-assertions-assertions-’단언’"><a href="#2-Type-assertions-assertions-’단언’" class="headerlink" title=" 2. Type assertions (assertions:’단언’)"></a><a name="2"></a> 2. Type assertions (assertions:’단언’)</h3><ul><li>형 변환과는 다르다.<br>형 변환은 : 실제 데이터 구조를 바꾼다.</li><li><code>&#39;타입이 이것이다&#39;라고 컴파일러에게 알려주는 것</code>을 의미한다.<br>예_<code>넓은 범위의 타입</code>이 (union타입) 어떤 상황에서 고정이 되어야할 경우, 타입 어셜션으로 타입을 강제해 준다.</li><li>방법은 2가지가 있다.<ol><li>변수 as 강제할 타입</li><li>&lt;강제할타입&gt;변수</li></ol></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someValue: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 주로 넓은 타입에서 좁은 타입으로 강제하는 경우가 많다.</span></span><br><span class="line"><span class="comment">2. jsx 에서는 as 를 쓴다.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-Type-alias-alias-’별명’"><a href="#3-Type-alias-alias-’별명’" class="headerlink" title=" 3. Type alias (alias:’별명’)"></a><a name="3"></a> 3. Type alias (alias:’별명’)</h3><p>타입에 별명을 붙인다고 생각하면 된다.</p><ul><li>타입이 생기는 것이 아니라, 따로 이름을 붙여주는 것이다.</li><li>interface가 유사하지만 interface처럼 쓸수 없는 경우가 있다.</li><li>Primitive나 Union Type, Tuple 같은 타입에서 쓴다.<br>보통 Primitive 타입은 .. 많이 안쓴다. (number나 string을 구지..)</li><li>만들어진 타입의 refer로 사용하는 것이지 `타입을 만드는 것은 아니다.</li><li><code>type + 별칭</code></li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Aliaing Primitive</span></span><br><span class="line"><span class="keyword">type</span> MyStringType = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'world'</span>;</span><br><span class="line"><span class="keyword">let</span> myStr: MyStringType = <span class="string">'hello'</span>;</span><br><span class="line">myStr = str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// string에 'world'라는 별명을 주었다.</span></span><br><span class="line"><span class="comment">// 별 의미가 없다..</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Aliaing Union Type</span></span><br><span class="line"><span class="keyword">let</span> person: <span class="built_in">string</span> | <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">person = <span class="string">'Mark'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> StringOrNumber = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="comment">// StringOrNumber이라는 타입별칭을 붙였다. </span></span><br><span class="line"><span class="comment">// 별칭 붙일 때는 앞에 type + 별칭</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> another: StringOrNumber = <span class="number">0</span>;</span><br><span class="line">another = <span class="string">'Anna'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 유니온 타입은 A 도 가능하고 B 도 가능한 타입</span></span><br><span class="line"><span class="comment">2. 길게 쓰는걸 짧게</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Aliaing Tuple</span></span><br><span class="line"><span class="keyword">let</span> person: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">'Mark'</span>, <span class="number">35</span>];</span><br><span class="line"><span class="keyword">type</span> PersonTuple = [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="keyword">let</span> another: PersonTuple = [<span class="string">'Anna'</span>, <span class="number">24</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 튜플 타입에 별칭을 줘서 여러군데서 사용할 수 있게 한다.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="3-1-Type-alias와-Interface와-차이점"><a href="#3-1-Type-alias와-Interface와-차이점" class="headerlink" title=" 3-1. Type alias와 Interface와 차이점"></a><a name="3-1"></a> 3-1. Type alias와 Interface와 차이점</h4><p>보통은 interface와 class등을 자주 사용하기 때문에 alias 쓰는 타이밍이 초반에는 많이 없다. interface를 사용하다가 굳이 사용할 필요가 없는 순간에 alias를 쓰면 된다.</p><ol><li><p>오류 메세지<br>타입스크립트가 컴파일을 시도할때 오류가 나올때, Alias라는 이름으로 알려주지 않고 타입 자체로 알려준다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Alias = &#123; num: <span class="built_in">number</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Interface &#123;</span><br><span class="line">    num: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">aliased</span>(<span class="params">arg: Alias</span>): <span class="title">Alias</span></span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">interfaced</span>(<span class="params">arg: Interface</span>): <span class="title">Interface</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. type alias 는 object literal type 로</span></span><br><span class="line"><span class="comment">2. interface 는 interface 로</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>상속을 받을 수는 있지만 상속을 할 수는 없다.</p><ul><li>당연한건 type alias 끼리는 extends, implements 불가</li><li>interface extends type alias 가능 </li><li>class A implements type alias 가능<br>= A라는 클래스는 type alias 인터페이스를 구현할 수 있다. </li><li>class A extends type alias 블가 (interface 도 마찬가지)<br>= A라는 클래스는 type alias를 상속받지 못한다. </li><li>마치 interface 처럼 동작한다.</li><li>클래스 선언문의 implements 뒤에 인터페이스를 선언하면 해당 클래스는 지정된 인터페이스를 반드시 구현하여야 한다.</li></ul></li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> PersonAlias = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;; <span class="comment">// type alias</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IPerson <span class="keyword">extends</span> PersonAlias &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// 가능</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ip: IPerson = &#123;</span><br><span class="line">    name: <span class="string">'Mark'</span>,</span><br><span class="line">    age: <span class="number">35</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> PersonImpl <span class="keyword">implements</span> PersonAlias &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    </span><br><span class="line">    hello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'안녕하세요'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// PersonImpl라는 클래스는 PersonAlias라는 인터페이스를 구현하겠다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pi: PersonImpl = <span class="keyword">new</span> PersonImpl();</span><br><span class="line">pi.hello();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> PersonChild <span class="keyword">extends</span> PersonAlias &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// 불가능</span></span><br></pre></td></tr></table></figure><ul><li>extends와 implements의 차이<br><code>class A extends B</code> 라고 하면<br>A는 B라는 클래스를 상속 받아서 +a 시키겠다는 뜻.<br><code>class A implements C</code> 라고 하면<br>A는 C라는 인터페이스를 구현하겠다~ 라는 뜻입니다.</li></ul><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://gdthink.blogspot.kr/2006/06/extends%EC%99%80-implements%EC%9D%98-%EC%B0%A8%EC%9D%B4.html" target="_blank" rel="noopener">http://gdthink.blogspot.kr/2006/06/extends%EC%99%80-implements%EC%9D%98-%EC%B0%A8%EC%9D%B4.html</a></li><li><a href="http://poiemaweb.com/typeScript-interface" target="_blank" rel="noopener">http://poiemaweb.com/typeScript-interface</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;타입스크립트 정리 글은 이웅재님의 &lt;a href=&quot;https://www.youtube.com/user/2woongjae/videos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;강의&lt;/a&gt;와 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2017 TypeScript workshop" scheme="http://feel5ny.github.io/categories/02-WorkShop/2017-TypeScript-workshop/"/>
    
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>3/ Typescript_기본 데이터 타입</title>
    <link href="http://feel5ny.github.io/2017/11/17/Typescript_04/"/>
    <id>http://feel5ny.github.io/2017/11/17/Typescript_04/</id>
    <published>2017-11-17T03:33:40.000Z</published>
    <updated>2019-10-31T13:06:22.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="기본-데이터-타입-🌱"><a href="#기본-데이터-타입-🌱" class="headerlink" title="기본 데이터 타입 🌱"></a>기본 데이터 타입 🌱</h2><p>타입스크립트에서 기본 자료형을 <code>잘!</code> 숙지해야 한다. 타입스크립트는 타입을 새로 만들면서 짜는 방식인데, 특정한 골격을 갖출 때 결국 남는건 기본 자료형들이 남는다. 이때 기본 자료형이 정확히 어떤 것들이 있는지 인지하고 있어야, 그 기본 자료형들을 잘 조합해서 내가 사용할 인터페이스를 만들어 낼 수 있고, 타입을 만들 수 있다. 자바스크립트의 기본자료형을 모두 포함한다.</p><hr><blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="noopener">강의</a>와 <a href="http://slides.com/woongjae/deck-8#" target="_blank" rel="noopener">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다 .</p></blockquote><p><a name="0"></a></p><h3 id="0-literal"><a href="#0-literal" class="headerlink" title="0. literal"></a>0. literal</h3><ul><li><code>값 자체가 변하지 않는 값을 의미합니다 .</code></li><li>상수와 다른 것은 상수는 가리키는 포인터가 고정이라는 것이고, 리터럴은 그 자체가 <strong>값이자 그릇</strong>입니다 .</li><li>“<code>리터럴 상수</code>는 5, 1.23 과 같은 숫자나, ‘This is a string’ 혹은 “It’s a string!” 과 같은 문자열 등을 말합니다. 이것들이 리터럴 상수라고 불리우는 이유는 이것들이 프로그램 내에 직접 <code>문자 형태</code>로 (literally) 지정되는 값들 이기 때문입니다. <code>이러한 값들은 한번 지정되면 변하지 않습니다 .</code></li><li>예를 들면 숫자 <code>2</code>는 언제나 자기 자신이 2 라는 숫자임을 나타내며 어떤 다른 의미도 갖지 않습니다 .</li><li>이들은 한번 지정되면 그 값을 변경할 수 없기 때문에 <em>상수</em>입니다 . 그 중에서도 특별히 이러한 값들을 리터럴 상수라고 부릅니다. @kangpual</li></ul><hr><p><a name="1"></a></p><h2 id="1-기본-자료형-Primitive-Type"><a href="#1-기본-자료형-Primitive-Type" class="headerlink" title="1. 기본 자료형 Primitive Type"></a>1. 기본 자료형 Primitive Type</h2><ul><li>object 와 reference 형태가 아닌 실제 값을 저장하는 자료형입니다 .</li><li>프리미티브 형의 내장 함수를 사용 가능한것은 자바스크립트 처리 방식 덕분<ul><li>동작 자체는 마치 객체인 것처럼 처리된다 .</li><li>메모리를 아끼기 위해서</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">'Nayoung'</span></span><br><span class="line"></span><br><span class="line">name.toString()</span><br></pre></td></tr></table></figure><p><a name="1-1"></a></p><h3 id="1-1-boolean"><a href="#1-1-boolean" class="headerlink" title="1-1. boolean"></a>1-1. boolean</h3><ul><li>가장 기본적인 데이터 타입</li><li>단순한 true 혹은 false값 입니다 .</li><li>JavaScript / TypeScript 에서 <strong>‘boolean’</strong> 이라고 부른다 .</li></ul><p><strong>소문자 boolean 과 대문자 Boolean</strong></p><ul><li>소문자 boolean 은 프리미티브 타입의 불린 , 대문자 Boolean 은 레퍼 오브젝트의 생성자 class 인데 , 자바스크립트에서는 두 가지의 차이가 크게 없지만, 타입스크립트에서는 차이가 있다 . 타입스크립트에서는 소문자를 권장한다.<ul><li><code>Type &#39;boolean&#39; is assignable to type &#39;Boolean&#39;.</code></li><li>Type ‘Boolean’ is not assignable to type ‘boolean’.</li><li>‘boolean’ is a primitive, but ‘Boolean’ is a wrapper object.</li><li>Prefer using ‘boolean’ when possible.</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: boolean = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> isDone === <span class="string">'boolean'</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Type 'boolean' is assignable to type 'Boolean'.</span></span><br><span class="line"><span class="keyword">let</span> isOk: <span class="built_in">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Type 'Boolean' is not assignable to type 'boolean'.</span></span><br><span class="line"><span class="comment">// 'boolean' is a primitive, but 'Boolean' is a wrapper object.</span></span><br><span class="line"><span class="comment">// Prefer using 'boolean' when possible.</span></span><br><span class="line"><span class="keyword">let</span> isNotOk: boolean = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p><a name="1-2"></a></p><h3 id="1-2-number"><a href="#1-2-number" class="headerlink" title="1-2. number"></a>1-2. number</h3><ul><li>JavaScript 와 같이, TypeScript 의 모든 숫자는 부동 소수점 값 입니다.</li><li>TypeScript 는 16진수 및 10진수 리터럴 외에도, ECMAScript 2015에 도입된 2진수및 8진수를 지원합니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decimal: number = <span class="number">6</span> <span class="comment">// 10진수 리터럴</span></span><br><span class="line"><span class="keyword">let</span> hex: number = <span class="number">0xf00d</span> <span class="comment">// 16진수 리터럴</span></span><br><span class="line"><span class="keyword">let</span> binary: number = <span class="number">0b1010</span> <span class="comment">// 2진수 리터럴</span></span><br><span class="line"><span class="keyword">let</span> octal: number = <span class="number">0o744</span> <span class="comment">// 8진수 리터럴</span></span><br></pre></td></tr></table></figure><p><a name="1-3"></a></p><h3 id="1-3-string"><a href="#1-3-string" class="headerlink" title="1-3. string"></a>1-3. string</h3><ul><li>Template String을 자주 쓴다 .</li><li>다른 언어에서와 마찬가지로 텍스트 형식을 참조하기 위해 <code>string</code>형식을 사용한다.</li><li>자바스크립트와 마찬가지로, 타입스크립트는 문자열 데이터를 둘러싸기 위해 큰 따옴표나 작은따옴표를 사용한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: string = <span class="string">'mark'</span></span><br><span class="line">name = <span class="string">'anna'</span></span><br></pre></td></tr></table></figure><p><a name="1-4"></a></p><h3 id="1-4-Template-String"><a href="#1-4-Template-String" class="headerlink" title="1-4. Template String"></a>1-4. Template String</h3><ul><li>주로 사용한다.</li><li>행에 걸쳐 있거나, 표현식을 넣을 수 있는 문자열</li><li>이 문자열은 backtick (= backquote <figure class="highlight plain"><figcaption><span>기호에 둘러쌓여 있습니다.</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">* 포함된 표현식은 `$&#123; expr &#125;`와 같은 형태로 사용합니다.</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">let fullName: string = `Bob Bobbington`</span><br><span class="line">let age: number = 37</span><br><span class="line"></span><br><span class="line">let sentence: string = `Hello, my name is $&#123;fullName&#125;.</span><br><span class="line"></span><br><span class="line">I&apos;ll be $&#123;age + 1&#125; years old next month.`</span><br><span class="line"></span><br><span class="line">// template string 을 사용하지 않을 경우</span><br><span class="line">let sentence: string =</span><br><span class="line">  &apos;Hello, my name is &apos; +</span><br><span class="line">  fullName +</span><br><span class="line">  &apos;.\n\n&apos; +</span><br><span class="line">  &quot;I&apos;ll be &quot; +</span><br><span class="line">  (age + 1) +</span><br><span class="line">  &apos; years old next month.&apos;</span><br></pre></td></tr></table></figure></li></ul><p><a name="1-5"></a></p><h3 id="1-5-Undefined-amp-null"><a href="#1-5-Undefined-amp-null" class="headerlink" title="1-5. Undefined &amp; null"></a>1-5. Undefined &amp; null</h3><ul><li>TypeScript에서 ‘undefined’와 ‘null’은 실제로 각각 ‘undefined’와 ‘null’이라는 고유한 타입을 가집니다.</li><li>‘void’ 와 마찬가지로, undefined 와 null 은 그 자체로는 쓸모가 없습니다.</li><li>둘다 소문자만 존재합니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 이 변수들에 할당할 수 있는 것들은 거의 없다.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure><ul><li>위 처럼 사용하기 보다는 <code>return</code>에서 주로 사용</li></ul><h3 id="1-5-1-undefined-amp-null-are-subtypes-of-all-other-types"><a href="#1-5-1-undefined-amp-null-are-subtypes-of-all-other-types" class="headerlink" title="1-5-1. undefined &amp; null are subtypes of all other types"></a>1-5-1. undefined &amp; null are subtypes of all other types</h3><ul><li>기본 설정이 그렇습니다.</li><li>대입이 가능하다는 것이다.</li><li>number에 null 또는 undefined 를 <code>할당할 수 있다는 의미</code>입니다.</li><li>하지만, 컴파일 옵션에서 <code>--strictNullChecks</code>사용하면, null과 undefined 는 void 나 자기 자신들에게만 할당할 수 있습니다.</li><li>이 경우, null과 undefined를 할당할 수 있게 하려면, union type 을 이용해야합니다. (union type: 두개의 타입을 합치는 것.)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 대입 가능</span></span><br><span class="line"><span class="keyword">let</span> name: string = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> age: number = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// strictNullChecks =&gt; true</span></span><br><span class="line"><span class="comment">// 보통 위의 옵션을 true로 하진 않는다..</span></span><br><span class="line"><span class="comment">// 위의 옵션이 추가되면 자기 자신이나 void에게만 할당 가능, 다른 타입에는 할당하지 못함.</span></span><br><span class="line"><span class="comment">// let name: null = null; // (O)</span></span><br><span class="line"><span class="comment">// Type 'null' is not assignable to type 'string'.</span></span><br><span class="line"><span class="keyword">let</span> name: string = <span class="literal">null</span> <span class="comment">// (X)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null =&gt; null || void, undefined =&gt; undefined || void</span></span><br><span class="line"><span class="comment">// Type 'null' is not assignable to type 'undefined'.</span></span><br><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">null</span> <span class="comment">// (X)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> v: <span class="keyword">void</span> = <span class="literal">undefined</span> <span class="comment">// (O)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> union: string | <span class="literal">null</span> | <span class="literal">undefined</span> = <span class="string">'str'</span></span><br></pre></td></tr></table></figure><h3 id="1-5-2-null-in-JavaScript"><a href="#1-5-2-null-in-JavaScript" class="headerlink" title="1-5-2. null in JavaScript"></a>1-5-2. null in JavaScript</h3><ul><li>null 이라는 값으로 할당된 것을 null 이라고 합니다.</li><li><code>무언가가 있는데, 사용할 준비가 덜 된 상태.</code> (undefined 는 <code>무언가가 아예 준비가 안된 상태</code>)</li><li>null 이라는 타입은 null 이라는 값만 가질 수 있습니다.</li><li>런타임에서 typeof 연산자를 이용해서 알아내면 , <code>object</code> 입니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(n) <span class="comment">// null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> n) <span class="comment">// object</span></span><br></pre></td></tr></table></figure><h3 id="1-5-3-undefined-in-JavaScript"><a href="#1-5-3-undefined-in-JavaScript" class="headerlink" title="1-5-3. undefined in JavaScript"></a>1-5-3. undefined in JavaScript</h3><ul><li>값을 할당하지 않은 변수는 undefined 라는 값을 가집니다.</li><li><code>무언가가 아예 준비가 안된 상태</code></li><li>object 의 property 가 없을 때도 undefined 입니다.</li><li>런타임에서 typeof 연산자를 이용해서 알아내면 , <code>undefined</code> 입니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> u: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(u) <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> u) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><hr><p><a name="2"></a></p><h2 id="2-참조타입-javaScript"><a href="#2-참조타입-javaScript" class="headerlink" title="2. 참조타입 (javaScript)"></a>2. 참조타입 (javaScript)</h2><p><a name="2-1"></a></p><h3 id="2-1-Array"><a href="#2-1-Array" class="headerlink" title="2-1. Array"></a>2-1. Array</h3><ul><li>원래 자바스크립트에서 array는 객체입니다.</li><li>사용방법 2가지 &#9996;<ul><li>Array&lt;타입&gt; (내부적으로 제네릭을 이용한 것이다.)</li><li>타입 []</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure><p><a name="2-2"></a></p><h3 id="2-2-Symbol-🙄"><a href="#2-2-Symbol-🙄" class="headerlink" title="2-2. Symbol 🙄"></a>2-2. Symbol 🙄</h3><ul><li>ECMAScript 2015의 Symbol 입니다.</li><li><code>프리미티브 타입</code>의 값을 담아서 사용합니다.</li><li>고유하고 수정불가능한 값으로 만들어줍니다.</li><li>그래서 주로 접근을 제어하는데 쓰는 경우가 많았습니다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [sym]: <span class="string">'value'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj[sym]) <span class="comment">// "value"</span></span><br></pre></td></tr></table></figure><hr><p><a name="3"></a></p><h2 id="3-타입스크립트에서-추가로-제공하는-타입"><a href="#3-타입스크립트에서-추가로-제공하는-타입" class="headerlink" title="3. 타입스크립트에서 추가로 제공하는 타입"></a>3. 타입스크립트에서 추가로 제공하는 타입</h2><p><a name="3-1"></a></p><h3 id="3-1-Void"><a href="#3-1-Void" class="headerlink" title="3-1. Void"></a>3-1. Void</h3><ul><li>타입이 없는 상태입니다.</li><li><code>any</code> 와 반대의 의미를 가집니다.</li><li>Void 는 대문자가 없습니다. 소문자입니다.</li><li>주로 함수의 <code>리턴이 없을 때</code> 사용합니다. 그 외에는 <code>사용할 일이 거의 없습니다.</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnVoid</span>(<span class="params">message</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">returnVoid(<span class="string">'리턴이 없다'</span>)</span><br></pre></td></tr></table></figure><p><a name="3-2"></a></p><h3 id="3-2-Any"><a href="#3-2-Any" class="headerlink" title="3-2. Any"></a>3-2. Any</h3><ul><li>어떤 타입이어도 상관없는 타입입니다.</li><li>이걸 최대한 쓰지 않는게 핵심입니다.</li><li>왜냐면 컴파일 타임에 타입 체크가 정상적으로 이뤄지지 않기 때문입니다.</li><li>그래서 컴파일 옵션 중에는 any 를 쓰면 오류를 뱉도록 하는 옵션도 있습니다.<ul><li><code>noImplicitAny</code></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnAny</span>(<span class="params">message</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">returnVoid(<span class="string">'리턴은 아무거나'</span>)</span><br></pre></td></tr></table></figure><p><a name="3-3"></a></p><h3 id="3-3-Never"><a href="#3-3-Never" class="headerlink" title="3-3. Never"></a>3-3. Never</h3><ul><li>리턴에 주로 사용된다.</li><li>아래의 3 가지 정도가 대부분</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function returning never must have unreachable end point</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">message: string</span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inferred return type is never</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> error(<span class="string">'Something failed'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Function returning never must have unreachable end point</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">infiniteLoop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="3-4"></a></p><h3 id="3-4-Tuple"><a href="#3-4-Tuple" class="headerlink" title="3-4. Tuple"></a>3-4. Tuple</h3><ul><li><strong>배열인데 타입이 한가지가 아닌 경우</strong></li><li>마찬가지로 <strong>객체</strong>입니다.</li><li>꺼내 사용할때 주의가 필요합니다.<ul><li>배열을 Destructuting 하면 타입이 제대로 얻어집니다.</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Declare a tuple type</span></span><br><span class="line"><span class="keyword">let</span> x: [string, number]</span><br><span class="line"><span class="comment">// Initialize it</span></span><br><span class="line">x = [<span class="string">'hello'</span>, <span class="number">10</span>] <span class="comment">// OK</span></span><br><span class="line"><span class="comment">// Initialize it incorrectly</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">'hello'</span>] <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">3</span>] = <span class="string">'world'</span> <span class="comment">// OK, 'string' can be assigned to 'string | number'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x[<span class="number">5</span>].toString()) <span class="comment">// OK, 'string' and 'number' both have 'toString'</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">6</span>] = <span class="literal">true</span> <span class="comment">// Error, 'boolean' isn't 'string | number'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: [string, number] = [<span class="string">'mark'</span>, <span class="number">35</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [name, age] = person</span><br></pre></td></tr></table></figure><p><a name="3-5"></a></p><h3 id="3-5-Enum"><a href="#3-5-Enum" class="headerlink" title="3-5. Enum"></a>3-5. Enum</h3><ul><li>C 에서 보던것과 같습니다.</li><li>아래 예제만 이해하면 사용 준비 끝</li><li>Enum 의 결과값은 string 형이다.<blockquote><p>Da,Da 할때 아침 / 점심 / 저녁 / 간식을 Enum 타입으로 받았는데 , 이때 문자열<br>이였기 때문에 <code>*1</code>을 해줬었다 .</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;Red, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line">enum Color &#123;Red = <span class="number">1</span>, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line">enum Color &#123;Red = <span class="number">1</span>, Green = <span class="number">2</span>, Blue = <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"></span><br><span class="line">enum Color &#123;Red = <span class="number">1</span>, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> colorName: string = Color[<span class="number">2</span>]; <span class="comment">// 결과값은 string으로 해야한다.</span></span><br></pre></td></tr></table></figure><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://jaroinside.tistory.com/10" target="_blank" rel="noopener">http://jaroinside.tistory.com/10</a></li><li><a href="http://poiemaweb.com/typeScript-vscode" target="_blank" rel="noopener">http://poiemaweb.com/typeScript-vscode</a></li><li><a href="http://spectrumdig.blogspot.kr/2016/12/chrome-source-map-coffeescripttypescrip.html" target="_blank" rel="noopener">http://spectrumdig.blogspot.kr/2016/12/chrome-source-map-coffeescripttypescrip.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;기본-데이터-타입-🌱&quot;&gt;&lt;a href=&quot;#기본-데이터-타입-🌱&quot; class=&quot;headerlink&quot; title=&quot;기본 데이터 타입 🌱&quot;&gt;&lt;/a&gt;기본 데이터 타입 🌱&lt;/h2&gt;&lt;p&gt;타입스크립트에서 기본 자료형을 &lt;code&gt;잘!&lt;/cod
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2017 TypeScript workshop" scheme="http://feel5ny.github.io/categories/02-WorkShop/2017-TypeScript-workshop/"/>
    
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>2016년 A월 B일</title>
    <link href="http://feel5ny.github.io/2017/11/16/algorithm_02/"/>
    <id>http://feel5ny.github.io/2017/11/16/algorithm_02/</id>
    <published>2017-11-16T04:42:33.000Z</published>
    <updated>2019-09-22T08:55:03.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2016년-A월-B일"><a href="#2016년-A월-B일" class="headerlink" title="2016년 A월 B일"></a>2016년 A월 B일</h2><p>2016년 1월 1일은 금요일입니다. 2016년 A월 B일은 무슨 요일일까요? 두 수 A,B를 입력받아 A월 B일이 무슨 요일인지 출력하는 getDayName 함수를 완성하세요. 요일의 이름은 일요일부터 토요일까지 각각<br><code>SUN,MON,TUE,WED,THU,FRI,SAT</code><br>를 출력해주면 됩니다. 예를 들어 A=5, B=24가 입력된다면 5월 24일은 화요일이므로 TUE를 반환하면 됩니다. </p><hr><h3 id="1-처음-생각한-로직"><a href="#1-처음-생각한-로직" class="headerlink" title="1. 처음 생각한 로직"></a>1. 처음 생각한 로직</h3><ul><li>월마다 일 수가 다르다.<br>a월이 1,3,5,7,10,12 &gt; 31일<br>a월이 4,6,8,9,11 &gt; 30일<br>a월이 2 &gt; 28일</li></ul><ul><li><p>일별로 요일이 다르다.<br><code>const day = [&quot;FRI&quot;, &quot;SAT&quot;, &quot;SUN&quot;, &quot;MON&quot;, &quot;TUE&quot;, &quot;WED&quot;, &quot;THU&quot;]</code><br>7일 day[0]<br>6일 day[6]</p><p>전체 일수가 x라면<br>x일을 7로 나눈후 나머지값 arr[x%7]<br>x의 값은 ?</p></li></ul><ul><li>전체 일수를 배열과 연결하자.<br>31일 + 1 = 32 // 배열에서 금요일부터 32번 후의 값<br>1월 <code>0</code><br>2월 <code>31일 + b</code><br>3월 <code>31일 + 29일 + b</code><br>4월 <code>31일 + 29일 + 31일 + b</code><br>5월 <code>31일 + 29일 + 31일 + 30일 + b</code><br>6월 <code>31일 + 29일 + 31일 + 30일 + 31일</code> = <code>31일 * 3 + 30일 * 2 - 1</code><br>7월 <code>31일 * 3 + 30일 * 3 -1</code><br>8월 <code>31일 * 4 + 30일 * 3 -1</code><br>9월 <code>31일 * 5 + 30일 * 3 -1</code><br>10월 <code>31일 * 5 + 30일 * 4 -1</code><br>11월 <code>31일 * 6 + 30일 * 4 -1</code><br>12월 <code>31일 * 6 + 30일 * 5 -1</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDayName</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">let</span> month = a;</span><br><span class="line">  <span class="keyword">let</span> date = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> inputDate = b;</span><br><span class="line">  <span class="keyword">let</span> week = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> day = [<span class="string">"FRI"</span>, <span class="string">"SAT"</span>, <span class="string">"SUN"</span>, <span class="string">"MON"</span>, <span class="string">"TUE"</span>, <span class="string">"WED"</span>, <span class="string">"THU"</span>]</span><br><span class="line">  <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      date = <span class="number">0</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">      date = <span class="number">31</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">      date = <span class="number">31</span> + <span class="number">28</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">2</span> + <span class="number">29</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">2</span> + <span class="number">30</span> * <span class="number">2</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">3</span> + <span class="number">30</span> * <span class="number">2</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">3</span> + <span class="number">30</span> * <span class="number">3</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">4</span> + <span class="number">30</span> * <span class="number">3</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">5</span> + <span class="number">30</span> * <span class="number">3</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">5</span> + <span class="number">30</span> * <span class="number">4</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">6</span> + <span class="number">30</span> * <span class="number">4</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">      date = <span class="number">31</span> * <span class="number">6</span> + <span class="number">30</span> * <span class="number">5</span> - <span class="number">1</span></span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  date = date + inputDate</span><br><span class="line">  <span class="keyword">return</span> day[date % <span class="number">7</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//아래 코드는 테스트를 위한 코드입니다.</span></span><br><span class="line"><span class="built_in">console</span>.log(getDayName(<span class="number">5</span>, <span class="number">24</span>));</span><br></pre></td></tr></table></figure><h3 id="2-case-문이-너무-비효율적이다-gt-반복문으로-바꾸자"><a href="#2-case-문이-너무-비효율적이다-gt-반복문으로-바꾸자" class="headerlink" title="2. case 문이 너무 비효율적이다. &gt; 반복문으로 바꾸자"></a>2. case 문이 너무 비효율적이다. &gt; 반복문으로 바꾸자</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDayName</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> answer = [<span class="string">"THU"</span>, <span class="string">"FRI"</span>, <span class="string">"SAT"</span>, <span class="string">"SUN"</span>, <span class="string">"MON"</span>, <span class="string">"TUE"</span>, <span class="string">"WED"</span>,];</span><br><span class="line">  <span class="keyword">let</span> month = [<span class="number">31</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">31</span>];</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    sum += month[i];</span><br><span class="line">  &#125;</span><br><span class="line">  sum += b;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> answer[(sum % <span class="number">7</span>)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Date-메소드를-사용해보자"><a href="#3-Date-메소드를-사용해보자" class="headerlink" title="3. Date 메소드를 사용해보자."></a>3. Date 메소드를 사용해보자.</h3><p>메소드 사용</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDayName</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [<span class="string">'SUN'</span>, <span class="string">'MON'</span>, <span class="string">'TUE'</span>, <span class="string">'WED'</span>, <span class="string">'THU'</span>, <span class="string">'FRI'</span>, <span class="string">'SAT'</span>];</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">`2016,<span class="subst">$&#123;a&#125;</span>,<span class="subst">$&#123;b&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">let</span> day = date.getDay()</span><br><span class="line">  <span class="keyword">return</span> arr[day];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>템플릿 리터럴을 사용하지 않으면 값이 이상하게 나온다.</p><ul><li><p>이유 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">new Date();</span><br><span class="line">new Date(value);</span><br><span class="line">new Date(dateString);</span><br><span class="line">new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);</span><br></pre></td></tr></table></figure><p>** <em>dateString*</em><br>날짜를 표현하는 <code>문자열값</code>. 문자열은 parse 메소드에 의해 인식가능한 형식이어야 한다.</p><p>** <em>year, month, date*</em><br>날짜의 각 부분을 표현하는 <code>정수값</code>. 월(month)부분은 0부터 11까지의 값을 가지며, 0이 1월을, 11이 12월을 가리킨다. </p></li></ul><blockquote><p>때문에 템플릿 리터럴로 넣게 되면 문자열이 되어서 그대로 파싱하지만, 숫자일 경우 배열의 인덱스값으로 인지하여서 월의 시작숫자가 0이게 된다.<br>즉, let date = new Date(2016,<code>a-1</code>,b) 이렇게 넣어야 한다.</p></blockquote><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Date</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2016년-A월-B일&quot;&gt;&lt;a href=&quot;#2016년-A월-B일&quot; class=&quot;headerlink&quot; title=&quot;2016년 A월 B일&quot;&gt;&lt;/a&gt;2016년 A월 B일&lt;/h2&gt;&lt;p&gt;2016년 1월 1일은 금요일입니다. 2016년 A월 B일은 
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Algorithm" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Algorithm/"/>
    
    
      <category term="algorism" scheme="http://feel5ny.github.io/tags/algorism/"/>
    
  </entry>
  
  <entry>
    <title>2/ Typescript_tsconfig.json 프로퍼티의 종류</title>
    <link href="http://feel5ny.github.io/2017/11/15/Typescript_03/"/>
    <id>http://feel5ny.github.io/2017/11/15/Typescript_03/</id>
    <published>2017-11-15T10:30:01.000Z</published>
    <updated>2019-10-31T13:06:22.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="noopener">강의</a>와 <a href="http://slides.com/woongjae/deck-8#" target="_blank" rel="noopener">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><hr><h2 id="컴파일러-옵션"><a href="#컴파일러-옵션" class="headerlink" title="컴파일러 옵션"></a>컴파일러 옵션</h2><p>실제 프로젝트에서는 컴파일러 옵션을 그렇게 많이 셋팅하진 않는다 . 옵션을 셋팅할 수 있는 전체 스펙은 <a href="http://json.schemastore.org/tsconfig" target="_blank" rel="noopener">이 링크</a>로 가면 확인가능하다 .</p><hr><h2 id="1-최상위-프로퍼티"><a href="#1-최상위-프로퍼티" class="headerlink" title="1. 최상위 프로퍼티"></a>1. 최상위 프로퍼티</h2><blockquote><p>tsconfig.json 파일에서 제일 상위에 정의되어있는 컴파일 옵션들</p></blockquote><ul><li>compileOnSave</li><li>extends</li><li>compileOptions ( 초기에는 compileOptions 요소가 많이 존재한다 .)</li><li>files</li><li>include</li><li>exclude</li></ul><h2 id="2-compileOnSave"><a href="#2-compileOnSave" class="headerlink" title="2. compileOnSave"></a>2. compileOnSave</h2><p>파일 변경 후 저장하면 바로 컴파일을 해준다 . 에디터마다 안될 수도 있다.</p><ul><li>true / false (default false)<ul><li>true 이면 저장하면 바로 컴파일됨</li></ul></li><li>최상단에 설정해야 한다.</li><li>누가 ??<ul><li>Visual Studio 2015 with TypeScript 1.8.4 이상</li><li>atom-typeScript 플러그인</li></ul></li></ul><h2 id="3-extends"><a href="#3-extends" class="headerlink" title="3. extends"></a>3. extends</h2><p>보통 많이 사용하지 않는다 . 사용 예를 들면 , 클라이언트 타입스크립트와 서버사이드 타입스크립트가 있을 때, 설정이 비슷하다면 어떤 파일을 만든 후, 상속을 받아서 작은 부분만 바꿔서 쓰는 경우 사용 가능하다.</p><ul><li>파일 (상대) 경로명 : string</li><li>TypeScript 2.1 New Spec</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> // in config/base.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"strictNullChecks"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// in tsconfig.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: <span class="string">"./configs/base"</span>,</span><br><span class="line">  <span class="attr">"files"</span>: [</span><br><span class="line">    <span class="string">"main.ts"</span>,</span><br><span class="line">    <span class="string">"supplemental.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-files-include-exclude"><a href="#4-files-include-exclude" class="headerlink" title="4. files, include, exclude"></a>4. files, include, exclude</h2><ul><li><p>셋다 설정이 없으면 , 전부다 컴파일</p></li><li><p>files</p><ul><li>상대 혹은 절대 경로의 리스트 배열.</li><li>파일별 부분 컴파일이 된다.</li><li>exclude 보다 쎕니다. (exclude가 해놓아도 files 에 있으면 컴파일 실행된다는 뜻)</li><li>특정 폴더를 exclude가 있어도 컴파일 된다.</li></ul></li><li><p>include, exclude</p><ul><li><p>glob 패턴 (마치 .gitignore)</p></li><li><p>include</p><ul><li>exclude 보다 약하다.</li><li><ul><li>같은걸 사용하면 , .ts / .tsx / .d.ts 만 include (allowJS)</li></ul></li></ul></li><li><p>exclude</p><ul><li>설정 안하면 4가지 (node_modules, bower_components, - jspm_packages, <outdir>)를 default 로 제외한다 .</outdir></li><li><outdir> 은 <code>항상 제외합니다 .</code> (include 에 있어도 )</outdir></li></ul></li></ul></li></ul><h2 id="5-types-중요"><a href="#5-types-중요" class="headerlink" title="5.@types (중요 !)"></a>5.@types (중요 !)</h2><p>TypeScript 2.0 부터 사용 가능해진 <code>내장 type definition 시스템</code></p><ul><li>이전 버전에서는 사용하지 못한다.</li><li>아무 설정을 안하면 ?<ul><li>node_modules/@types 라는 모든 경로를 찾아서 사용</li></ul></li><li>typeRoots 를 사용하면 ?<ul><li>배열 안에 들어있는 경로들 아래서만 가져옵니다 .</li></ul></li><li>types 를 사용하면 ?<ul><li>패키지 이름입니다.</li><li>배열 안의 모듈 혹은 <code>./node_modules/@types/</code> 안의 모듈 이름에서 찾아옵니다 .</li><li>[] 빈 배열을 넣는다는건 이 시스템을 이용하지 않겠다는 것입니다 .<ul><li>블루베리 플젝에서는 types 를 사용한다 .</li></ul></li></ul></li><li><code>typeRoots 와 types 를 같이 사용하지 않습니다 .</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// compiileOptions : type</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Instructs the TypeScript compiler how to compile .ts files."</span>,</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"typeRoots"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specify list of directories for type definition files to be included. Requires TypeScript version 2.0 or later."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">      <span class="attr">"items"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"types"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Type declaration files to be included in compilation. Requires TypeScript version 2.0 or later."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">      <span class="attr">"items"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="6-compileOptions"><a href="#6-compileOptions" class="headerlink" title="6. compileOptions"></a>6. compileOptions</h2><h3 id="6-1-target과-lib"><a href="#6-1-target과-lib" class="headerlink" title="6-1. target과 lib"></a>6-1. target과 lib</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Instructs the TypeScript compiler how to compile .ts files."</span>,</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"target"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specify ECMAScript target version. Permitted values are 'es3', 'es5', 'es2015', 'es2016', 'es2017' or 'esnext'."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="attr">"default"</span>: <span class="string">"es3"</span>,</span><br><span class="line">      <span class="attr">"anyOf"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"enum"</span>: [</span><br><span class="line">            <span class="string">"es3"</span>,</span><br><span class="line">            <span class="string">"es5"</span>,</span><br><span class="line">            <span class="string">"es2015"</span>,</span><br><span class="line">            <span class="string">"es2016"</span>,</span><br><span class="line">            <span class="string">"es2017"</span>,</span><br><span class="line">            <span class="string">"esnext"</span> // 확정은 아니지만 곧 확정될 것 같은 문법들을 모아둔</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"pattern"</span>: <span class="string">"^([eE][sS]([356]|(201[567])|[nN][eE][xX][tT]))$"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"lib"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specify library file to be included in the compilation. Requires TypeScript version 2.0 or later."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">      <span class="attr">"items"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">        <span class="attr">"enum"</span>: [</span><br><span class="line">          <span class="string">"es5"</span>,</span><br><span class="line">          <span class="string">"es6"</span>,</span><br><span class="line">          <span class="string">"es2015"</span>,</span><br><span class="line">          <span class="string">"es7"</span>,</span><br><span class="line">          <span class="string">"es2016"</span>,</span><br><span class="line">          <span class="string">"es2017"</span>,</span><br><span class="line">          <span class="string">"esnext"</span>,</span><br><span class="line">          <span class="string">"dom"</span>,</span><br><span class="line">          <span class="string">"dom.iterable"</span>,</span><br><span class="line">          <span class="string">"webworker"</span>,</span><br><span class="line">          <span class="string">"scripthost"</span>,</span><br><span class="line">          <span class="string">"es2015.core"</span>,</span><br><span class="line">          <span class="string">"es2015.collection"</span>,</span><br><span class="line">          <span class="string">"es2015.generator"</span>,</span><br><span class="line">          <span class="string">"es2015.iterable"</span>,</span><br><span class="line">          <span class="string">"es2015.promise"</span>,</span><br><span class="line">          <span class="string">"es2015.proxy"</span>,</span><br><span class="line">          <span class="string">"es2015.reflect"</span>,</span><br><span class="line">          <span class="string">"es2015.symbol"</span>,</span><br><span class="line">          <span class="string">"es2015.symbol.wellknown"</span>,</span><br><span class="line">          <span class="string">"es2016.array.include"</span>,</span><br><span class="line">          <span class="string">"es2017.object"</span>,</span><br><span class="line">          <span class="string">"es2017.sharedmemory"</span>,</span><br><span class="line">          <span class="string">"esnext.asynciterable"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"noLib"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Do not include the default library file (lib.d.ts)."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"boolean"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>target</strong></p><ul><li>빌드의 결과물을 어떤 버전으로 할 것이냐</li><li>지정을 안하면 <code>es3</code> 입니다.</li></ul><p><strong>lib</strong></p><ul><li>기본 type definition 라이브러리를 어떤 것을 사용할 것이냐</li><li>잘 정의하지 않으면 빨간줄이 계속 생긴다 .</li><li>lib 를 지정하지 않을 때 ,<ul><li>target 이 ‘es3’ 이고, 디폴트로 lib.d.ts 를 사용합니다.</li><li>target 이 ‘es5’ 이면 , 디폴트로 dom, es5, scripthost 를 사용합니다 .</li><li>target 이 ‘es6’ 이면, 디폴트로 dom, es6, dom.iterable, scripthost 를 사용합니다.</li><li>es5 이후에는 문법별 쪼개서도 설정 가능하다 .</li></ul></li><li>​lib 를 지정하면 그 lib 배열로만 라이브러리를 사용하니다.<ul><li>​ 빈 [] =&gt; ‘no definition found 어쩌구’</li><li>혹은 <code>&quot;noLib&quot; : true</code>로 바꾸면 된다. ( 거의 안쓸듯 )</li></ul></li></ul><h3 id="6-2-compileOptions-outDir-outFile"><a href="#6-2-compileOptions-outDir-outFile" class="headerlink" title="6-2. compileOptions: outDir, outFile"></a>6-2. compileOptions: outDir, outFile</h3><ul><li>파일을 다 모아서 하나의 컴파일된 하나의 파일로 모으고 싶을 때 outFile을 사용</li><li>소스디렉토리에 그대로 똑같이 구조를 컴파일된 상태로 옮길 때 outDir 를 사용</li><li>많이 사용한다 .</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Instructs the TypeScript compiler how to compile .ts files."</span>,</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"outFile"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Concatenate and emit output to single file."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"outDir"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Redirect output structure to the directory."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"rootDir"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specifies the root directory of input files. Use to control the output directory structure with --outDir."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-compileOptions-module"><a href="#6-3-compileOptions-module" class="headerlink" title="6-3. compileOptions: module"></a>6-3. compileOptions: module</h3><p><strong>module</strong></p><ul><li>결과물을 어떻게 무엇을 쓸것인가에 대한 것이다 .</li><li>컴파일 된 모듈의 결과물을 어떤 모듈 시스템으로 할지를 결정</li><li>target 이 ‘es6’ 이면 es6 가 디폴트이고 ,</li><li>target 이 ‘es6’ 가 아니면 <code>commonjs</code> 가 디폴트 입니다 .</li><li>AMD 나 System 와 사용하려면, <code>outFile 이 지정되어야 합니다 .</code></li><li>ES6 나 ES2015 를 사용하려면, target 이 es5 이하여야 합니다.</li></ul><p><strong>moduleResolution</strong></p><ul><li>ts 소스에서 모듈을 사용하는 방식을 지정해야 합니다 .</li><li>classic 아니면 node 입니다 .</li><li>commonJS 일때만 node 라고 생각하시면 됩니다.</li></ul><p><strong>path<em>s</em> 와 baseUrl</strong></p><ul><li>상대경로 방식이 아닌 baseUrl 로 꼭지점과 paths 안의 키/ 밸류로 모듈을 가져가는방식입니다 .</li></ul><p><strong>rootDirs</strong></p><ul><li>배열 안에서 상대 경로를 찾는 방식입니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Instructs the TypeScript compiler how to compile .ts files."</span>,</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"module"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specify module code generation: 'none', 'CommonJS', 'Amd', 'System', 'UMD', or 'es2015'."</span>,</span><br><span class="line">      <span class="attr">"enum"</span>: [<span class="string">"commonjs"</span>, <span class="string">"amd"</span>, <span class="string">"umd"</span>, <span class="string">"system"</span>, <span class="string">"es6"</span>, <span class="string">"es2015"</span>, <span class="string">"none"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specifies module resolution strategy: 'node' (Node) or 'classic' (TypeScript pre 1.6) ."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="attr">"pattern"</span>: <span class="string">"^(([Nn]ode)|([Cc]lassic))$"</span>,</span><br><span class="line">      <span class="attr">"default"</span>: <span class="string">"classic"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"baseUrl"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>: <span class="string">"Base directory to resolve non-relative module names."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"paths"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specify path mapping to be computed relative to baseUrl option."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"object"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"rootDirs"</span>: &#123;</span><br><span class="line">      <span class="attr">"description"</span>:</span><br><span class="line">        <span class="string">"Specify list of root directories to be used when resolving modules."</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"array"</span>,</span><br><span class="line">      <span class="attr">"items"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="현재-플젝-tsconfig-json"><a href="#현재-플젝-tsconfig-json" class="headerlink" title="현재 플젝 tsconfig.json"></a>현재 플젝 tsconfig.json</h3><p>처음보는 옵션들이 있어서 정리해보았다 . 참고 : <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noopener">타입스크립트 공식 페이지</a></p><p><code>allowSyntheticDefaultImports: true</code></p><ul><li>Allow default imports from modules with no default export. This does not<br>affect code emit, just typechecking.</li><li>리엑트에서 컴포넌트를 import 할 때 주로 쓰는 <code>import Something from &#39;./Something&#39;</code>을 사용할 수 있다 .</li></ul><p><code>noImplicitAny: false</code></p><ul><li>Raise error on expressions and declarations with an implied any type.</li><li>암시적으로 선언되었는데 any 로 추론되면 에러를 알려줍니다 . false이면 무시됨.</li></ul><p><code>preserveConstEnums: true</code></p><ul><li>Do not erase const enum declarations in generated code. See const enums documentation for more details.</li><li>enum 변수선언을 유지한다는 것 같은데 정확히 잘 모르겠다.</li></ul><p><code>allowJs : false</code></p><ul><li>include 에 있는 파일 경로들에 존재하는 모든 .ts, .tsx파일들이 컴파일되는데 ,<br>allowJs를 true 로 하면 .js와 .jsx 파일도 컴파일 대상이 된다 .</li></ul><p><code>sourceMap : true</code></p><ul><li>Generates corresponding .map file.</li><li>트랜스파일을 거치는 많은 모듈들이 디버깅을 위해서 기본적으로 source map 출력을 지원한다 .</li></ul><p><code>noImplicitReturns : true</code></p><ul><li>Report error when not all code paths in function return a value.</li><li>제대로 리턴 다 안되면 에러 -&gt; 오류에 대해 강력하게 체크한다는 뜻입니다.</li></ul><p><code>noUnusedParameters : true</code></p><ul><li>Report errors on unused parameters.</li><li>사용하지 않는 파라미터가 있으면 에러를 알려줍니다.</li></ul><p><code>noUnusedLocals : true</code></p><ul><li>Report errors on unused locals.</li><li>사용 안하는 로컬 변수가 있으면 에러를 알려줍니다 .</li></ul><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://jaroinside.tistory.com/10" target="_blank" rel="noopener">http://jaroinside.tistory.com/10</a></li><li><a href="http://poiemaweb.com/typeScript-vscode" target="_blank" rel="noopener">http://poiemaweb.com/typeScript-vscode</a></li><li><a href="http://spectrumdig.blogspot.kr/2016/12/chrome-source-map-coffeescripttypescrip.html" target="_blank" rel="noopener">http://spectrumdig.blogspot.kr/2016/12/chrome-source-map-coffeescripttypescrip.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;타입스크립트 정리 글은 이웅재님의 &lt;a href=&quot;https://www.youtube.com/user/2woongjae/videos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;강의&lt;/a&gt;와 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2017 TypeScript workshop" scheme="http://feel5ny.github.io/categories/02-WorkShop/2017-TypeScript-workshop/"/>
    
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>overview</title>
    <link href="http://feel5ny.github.io/2017/11/14/dada_06week/"/>
    <id>http://feel5ny.github.io/2017/11/14/dada_06week/</id>
    <published>2017-11-14T01:10:04.000Z</published>
    <updated>2019-01-03T15:39:28.496Z</updated>
    
    <content type="html"><![CDATA[<h1 id="식단-다이어리-서비스-DA-DA"><a href="#식단-다이어리-서비스-DA-DA" class="headerlink" title="식단 다이어리 서비스, DA,DA"></a>식단 다이어리 서비스, DA,DA</h1><p>프론트엔드 스쿨을 마지막 달에는 그동안 배운 기술을 토대로 프로젝트를 필수적으로 진행해야 했다. node.js 스쿨과 함께 5명으로 이루어진 우리 조는 33일간의 대장정을 끝으로, 알바퍼전의 웹서비스가 배포할 수 있게 되었다. 블로그에서는 <strong>프론트엔드 중심으로</strong> 이번 프로젝트에 대한 개인적인 후기와 더불어 전반적인 진행과정, 이슈에 대해서 5가지 챕터로 포스팅하려고 한다.</p><hr><p>chapter 1 : 기획 및 프로토타입 및 디자인<br>chapter 2 : 퍼블리싱<br>chapter 3 : 핵심기능 개발<br>chapter 4 : 리팩토링 및 테스트<br>chapter 5 : 추가개발 및 배포</p><hr><p>이번 프로젝트를 통해서 크게 3가지를 얻을 수 있었다.</p><ol><li>비동기통신</li><li>redux 자유로운 사용</li><li>react 라이프사이클과 한계</li></ol><hr><p>프로젝트 이후 느낀점</p><h3 id="Rest-API"><a href="#Rest-API" class="headerlink" title="Rest API"></a>Rest API</h3><p>우리 프로젝트에서는 다루는 데이터의 양이 많았었다. 매일 하루 3끼 식단, 운동, 일기, 등등. 이 데이터들을 rest API를 사용해서 rest하게 통신했지만, 해당 액션마다 필요한 데이터 + 필요 없는 데이터까지 가져오는 경우가 많았다. 이를 방지하기위해서는 백엔드에 엔드포인트를 요청해야했고, 여러면에서 낭비되는 리소스가 많이 발생함.<br>GraphQL과 Rest Api를 같이 써보자.</p><h3 id="다른-상태관리-라이브러리"><a href="#다른-상태관리-라이브러리" class="headerlink" title="다른 상태관리 라이브러리"></a>다른 상태관리 라이브러리</h3><p>redux의 사용은 props로 액션을 주고받는 면에서는 혁신이다. 당연히. 그치만 많은 액션을 다루고, 관리하는 면에서 이건 액션으로 처리해야해. 라고 말하는 순간 귀찮음이 도지게 된다. 아 그럼 또 액션을 놓고 리듀서에 놓고 payload의 타입을 잘 지정해서 넣어주어야겠구나. 이런 불편함을 해소하고자 mobX를 사용하나 싶었다. 다음에 사용해보기</p><h3 id="타입-이슈"><a href="#타입-이슈" class="headerlink" title="타입 이슈"></a>타입 이슈</h3><p>타입에 대한 이슈가 종종 있었다. 특히 이건 도대체 무슨에러인거지? 하면서 삽질할 때가 보통 타입때문에 생긴 에러들이었다. 객체형태로 들어오는지, 어떤 타입으로 타입을 내려주는지 등등을 console.log로 찍는건 한계가 있었고, PropsType으로 설정하는 것도 흠. </p><!-- ### Fetch apihttps://developer.mozilla.org/en-US/docs/Web/API/Fetch_API --><hr><ul><li>github : <a href="https://github.com/huusz/Da-Da" target="_blank" rel="noopener">https://github.com/huusz/Da-Da</a></li><li>DA,DA : <a href="https://dada.downmix.net" target="_blank" rel="noopener">https://dada.downmix.net</a> (카카오 아이디로 로그인)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;식단-다이어리-서비스-DA-DA&quot;&gt;&lt;a href=&quot;#식단-다이어리-서비스-DA-DA&quot; class=&quot;headerlink&quot; title=&quot;식단 다이어리 서비스, DA,DA&quot;&gt;&lt;/a&gt;식단 다이어리 서비스, DA,DA&lt;/h1&gt;&lt;p&gt;프론트엔드 스쿨
      
    
    </summary>
    
      <category term="blog 🙆" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/"/>
    
      <category term="project" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/project/"/>
    
    
      <category term="react" scheme="http://feel5ny.github.io/tags/react/"/>
    
      <category term="DADA" scheme="http://feel5ny.github.io/tags/DADA/"/>
    
  </entry>
  
  <entry>
    <title>야근지수 (미제)</title>
    <link href="http://feel5ny.github.io/2017/11/13/algorithm_01/"/>
    <id>http://feel5ny.github.io/2017/11/13/algorithm_01/</id>
    <published>2017-11-13T08:10:04.000Z</published>
    <updated>2019-09-22T08:55:00.203Z</updated>
    
    <content type="html"><![CDATA[<h2 id="야근-지수"><a href="#야근-지수" class="headerlink" title="야근 지수"></a>야근 지수</h2><p>회사원인 수민이는 많은 일이 쌓여 있습니다. 수민이는 야근을 최소화하기 위해 남은 일의 작업량을 숫자로 메기고, 일에 대한 야근 지수를 줄이기로 결정했습니다. 야근 지수는 남은 일의 작업량을 제곱하여 더한 값을 의미합니다. 수민이는 1시간 동안 남은 일 중 하나를 골라 작업량 1만큼 처리할 수 있습니다. 수민이의 퇴근까지 남은 N 시간과 각 일에 대한 작업량이 있을 때, noOvertime 함수를 제작하여 수민이의 야근 지수를 최소화 한 결과를 출력해 주세요. 예를 들어, N=4 일 때, 남은 일의 작업량이 [4, 3, 3] 이라면 야근 지수를 최소화하기 위해 일을 한 결과는 [2, 2, 2]가 되고 야근 지수는 22 + 22 + 22 = 12가 되어 12를 반환해 줍니다.</p><hr><ul><li>처음 생각한 로직</li></ul><ol><li>해당 배열의 전체 합 - N값</li><li>1번의 값을 배열의 길이로 나눈다.</li><li>나머지가 0인 경우와, 0이 아닌 경우가 생긴다.<ul><li>나머지가 0인 경우, 해당 몫의 제곱근에 length값을 곱한다. (끝)</li><li>나머지가 0이 아닌경우, <ul><li>몫이 소수점이 나온는데, 이는 내림하여 소수점 자리수들을 버리고 (floor)</li><li>해당 값과 배열의 인자를 비교하여, 해당 값보다 작은 인자의 경우 바로 제곱근화 하고, 나머지 값은 해당 몫으로 제곱하여 더한다. <strong>(이 부분이 잘못되었음)</strong></li></ul></li></ul></li><li>3번의 첫번째 나머지가 0인 경우는 테스트가 통과하는데 2번째 경우는 로직이 잘못됨</li></ol><hr><blockquote><p>통과하고 싶다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;야근-지수&quot;&gt;&lt;a href=&quot;#야근-지수&quot; class=&quot;headerlink&quot; title=&quot;야근 지수&quot;&gt;&lt;/a&gt;야근 지수&lt;/h2&gt;&lt;p&gt;회사원인 수민이는 많은 일이 쌓여 있습니다. 수민이는 야근을 최소화하기 위해 남은 일의 작업량을 숫자로 
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="Algorithm" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/Algorithm/"/>
    
    
      <category term="algorism" scheme="http://feel5ny.github.io/tags/algorism/"/>
    
  </entry>
  
  <entry>
    <title>Firebase의 storage 연동하기</title>
    <link href="http://feel5ny.github.io/2017/11/12/firebaseStorage/"/>
    <id>http://feel5ny.github.io/2017/11/12/firebaseStorage/</id>
    <published>2017-11-12T01:10:04.000Z</published>
    <updated>2019-01-03T15:39:44.627Z</updated>
    
    <content type="html"><![CDATA[<h2 id="학교-로고-모음-사이트"><a href="#학교-로고-모음-사이트" class="headerlink" title="학교 로고 모음 사이트"></a>학교 로고 모음 사이트</h2><blockquote><p>현재 상황</p></blockquote><p>팀 프로젝트인 식단 다이어리 서비스 dada 프로젝트에서는 db 설계에 대한 이슈가 없었다. 당연히 난 프론트엔드다보니.. db 설계를 담당하지 않아서인 건데, 현재 개인 프로젝트에서는 db 구조까지 짜는 작업을 하고 있다.</p><h3 id="DB-구조짜기"><a href="#DB-구조짜기" class="headerlink" title="DB 구조짜기"></a>DB 구조짜기</h3><p>300개의 데이터와 개당 storage에 연동되어있는 파일들이 있는데, 제일 좋은 건 db에 url 칼럼을 넣는 방식. 파이어베이스에서는 스토리지와 데이터베이스 연결하는 것까지는 제공하지 않는 듯하다. 수동으로 작업해야 하는데 아직 좋은 방법이 떠오르지 않는다. </p><h3 id="데이터-불러오기"><a href="#데이터-불러오기" class="headerlink" title="데이터 불러오기"></a>데이터 불러오기</h3><p>storage에 있는 데이터를 가져오는데, 현재 이슈.</p><ol><li>한 디렉토리에 300개를 넣어두고 한 번에 갖고 오는 방식이라 아주 느리다.<ul><li>db 디렉토리를 20개씩 분리한 후, 더 보기 형태의 방식으로 해결해야겠다.<br></li></ul></li><li>map을 돌려서 해당 db 인덱스값과 같은 값의 파일을 갖고 오게 하기위해서 파일 이름에 학교 이름이 아닌 PNG_1.png 이런 방식의 파일 이름으로 지정해두었다. 매칭이 잘못된 학교 이름을 찾아 내기도 힘들고, ux도 너무 안 좋을 것 같아서, 파일 이름을 학교 이름으로 바꾸기로 결정했다.<br></li><li>생각해 보니 지역별 칼럼을 정리하지 않았다.<br></li><li>비록 일일이 검토 후에 로고를 올리는 것이지만, 한 번 더 체킹을 위해 학교 url을 넣는게 좋겠다고 판단. 칼럼을 추가해야겠다.<ul><li>공공api가 있었으면 좋겠다.</li></ul></li></ol><blockquote><p>생각보다 db 짜는건 굉장한 노가다다! dada 프로젝트 할 때 백엔드 분께서 ‘생각보다 노가다도 많이 하게 되는데, 또 생각보다 어렵진 않더라구요!’ 라고 했던 말이 와닿는 하루다. </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;학교-로고-모음-사이트&quot;&gt;&lt;a href=&quot;#학교-로고-모음-사이트&quot; class=&quot;headerlink&quot; title=&quot;학교 로고 모음 사이트&quot;&gt;&lt;/a&gt;학교 로고 모음 사이트&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;현재 상황&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
      <category term="blog 🙆" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/"/>
    
      <category term="project" scheme="http://feel5ny.github.io/categories/blog-%F0%9F%99%86/project/"/>
    
    
      <category term="react" scheme="http://feel5ny.github.io/tags/react/"/>
    
      <category term="firebase" scheme="http://feel5ny.github.io/tags/firebase/"/>
    
      <category term="db" scheme="http://feel5ny.github.io/tags/db/"/>
    
  </entry>
  
  <entry>
    <title>1/ Typescript_환경 셋팅</title>
    <link href="http://feel5ny.github.io/2017/11/10/Typescript_02/"/>
    <id>http://feel5ny.github.io/2017/11/10/Typescript_02/</id>
    <published>2017-11-10T01:52:01.000Z</published>
    <updated>2019-10-31T13:06:22.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="개발환경-구축-및-컴파일러-셋팅"><a href="#개발환경-구축-및-컴파일러-셋팅" class="headerlink" title="개발환경 구축 및 컴파일러 셋팅"></a>개발환경 구축 및 컴파일러 셋팅</h2><p><a href="https://feel5ny.github.io/2017/11/08/TS_01/">앞선 글</a>에서 컴파일러와 트랜스파일러 인터프리터의 차이점을 알아보았다. 트랜스파일러와 컴파일러의 차이가 있다고는 했지만, 앞으로의 글에서는 컴파일러라고 통일해서 쓰려고 한다 . 타입스크립트는 컴파일드 언어라고 했지만 , 실제적으로 어떻게 환경을 셋팅하고 작업해야하는지 알아보자 .</p><img src="/images/post_img/12/index.jpg"><hr><blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="noopener">강의</a>와 <a href="http://slides.com/woongjae/deck-8#" target="_blank" rel="noopener">강의록</a>을 참고하여 작성하였습니다. (짱짱)<br><strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다.</p></blockquote><ol><li>실행환경</li><li>컴파일러 셋팅, 에디터</li><li>간단하게 실습</li><li>컴파일러 옵션</li></ol><p><strong>목표</strong><br>타입스크립트를 사용하기 위해서 첫번째 실행환경을 셋팅하고 , 컴파일러 셋팅(npm으로 설치), 에디터에서 환경셋팅(tslint, 등등) 을 하고 , 간단하게 실습으로 컴파일 테스팅해본다. 기본 테스트가 완료되면 컴파일러 옵션을 어떻게 추가해야하는지 알아본다 .</p><hr><h2 id="1-실행환경"><a href="#1-실행환경" class="headerlink" title="1. 실행환경"></a>1. 실행환경</h2><p>런타임 환경</p><h3 id="1-1-node-js"><a href="#1-1-node-js" class="headerlink" title="1-1. node.js"></a>1-1. node.js</h3><ul><li>자바스크립트 런타임 환경으로 node.js를 사용한다.</li><li>컴파일러를 설치하기 위해서 필요하다.</li><li>타입스크립트에서 컴파일러 프로그램을 제공하는 것이 npm 모듈로 있기 때문에 ..</li><li>node.js없이 VScode에서도 셋팅이 가능하긴하다 . (2번에서 확인!)</li><li>버전을 바꾸고 싶을 때는 nvm (node.js version manager) 사용 ~</li></ul><h3 id="1-2-browser"><a href="#1-2-browser" class="headerlink" title="1-2. browser"></a>1-2. browser</h3><ul><li>결과를 보는 곳.. 그냥 있는거 쓰자 .</li></ul><hr><h2 id="2-타입스크립트-컴파일러-셋팅-에디터"><a href="#2-타입스크립트-컴파일러-셋팅-에디터" class="headerlink" title="2. (타입스크립트) 컴파일러 셋팅 , 에디터"></a>2. (타입스크립트) 컴파일러 셋팅 , 에디터</h2><p>타입스크립트를 셋팅해 보자. 셋팅 방법에는 npm 과 VScode plugin으로 설치하는 방법이 있는데 , npm으로 설치해보았다 .</p><h3 id="2-1-npm으로-설치하기"><a href="#2-1-npm으로-설치하기" class="headerlink" title="2-1. npm으로 설치하기"></a>2-1. npm으로 설치하기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i typeScript -g</span><br></pre></td></tr></table></figure><p>설치 후 node_modules 폴더의 bin파일에 tsc 파일이 생성되는 것을 볼 수 있다 .<br><code>.bin</code> 내부에 있는 파일들은 스크립트에서 경로 없이 파일 이름으로만 바로 실행시킬수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/tsc 파일이름</span><br><span class="line">// 원래는 이렇게</span><br><span class="line"></span><br><span class="line">tsc source.ts</span><br><span class="line">// 경로 생략 가능, 뒷부분은 컴파일 할 파일 이름</span><br></pre></td></tr></table></figure><h3 id="2-2-Visual-Studio-Code-내장-플러그인-사용하기"><a href="#2-2-Visual-Studio-Code-내장-플러그인-사용하기" class="headerlink" title="2-2. Visual Studio Code 내장 플러그인 사용하기"></a>2-2. Visual Studio Code 내장 플러그인 사용하기</h3><p>타입스크립트로 만들어졌기 때문에 타입스크립트에 대한 지원이 강력 !</p><img src="/images/post_img/12/vs_01.jpg">ts파일을 선택 후 하단 bar를 보면 Typescript라는 단어와 버전이 보인다. 버전을 누르면 옵션창이 보이게 되는데, 이는 VS Code에 내장되어있는 컴파일러 리스트 중 선택하라는 옵션창이다. 내장된 컴파일러 버전은 VS Code 가 업데이트 되면서 자동으로 올라가며, 컴파일러 버전과 VS Code 의 버전은 상관 관계가 있다. 내장된 컴파일러를 선택할수 있고, 직접 설치한 컴파일러를 선택할 수도 있다.<h3 id="2-3-tslint-설치"><a href="#2-3-tslint-설치" class="headerlink" title="2-3. tslint 설치"></a>2-3. tslint 설치</h3><p>eslint와 같이 코딩 컨벤션을 맞추기 위한 프로그램이다 .</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i typeScript tslint (로컬)</span><br><span class="line">tslint --init</span><br></pre></td></tr></table></figure><p>tslint.json파일이 생성되고, 프로젝트에 맞게 코딩 컨벤션을 셋팅할 수 있다 .<br><a href="https://palantir.github.io/tslint/" target="_blank" rel="noopener">https://palantir.github.io/tslint/</a></p><ul><li><p>에디터에서 tslint 플러그인 설치</p><ol><li>cmd + p &gt; 옵션창</li><li>ext install tslint 그냥 확장프로그램에 가서 tslint 검색 후 다운로드 받아도<br>된다.</li></ol><p>VScode : <a href="https://marketplace.visualstudio.com/items?itemName=eg2.tslint" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=eg2.tslint</a></p></li></ul><hr><h2 id="3-간단하게-실습"><a href="#3-간단하게-실습" class="headerlink" title="3. 간단하게 실습"></a>3. 간단하게 실습</h2><h3 id="3-1-특정-프로젝트-폴더에서-타입스크립트-컴파일러-설정에-맞춰-컴파일"><a href="#3-1-특정-프로젝트-폴더에서-타입스크립트-컴파일러-설정에-맞춰-컴파일" class="headerlink" title="3-1. 특정 프로젝트 폴더에서 타입스크립트 컴파일러 설정에 맞춰 컴파일"></a>3-1. 특정 프로젝트 폴더에서 타입스크립트 컴파일러 설정에 맞춰 컴파일</h3><p>tsconfig.json 파일에서 옵션을 추가하여 컴파일시 여러 조건을 걸 수 있다.</p><ul><li>tsconfig 파일 초기셋팅</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init</span><br></pre></td></tr></table></figure><p>tsconfig.json 파일이 생성이 된다. 처음 생성시 디폴트로 되어있는 tsconfig.json파일</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    /* Basic Options */</span><br><span class="line">    "target":</span><br><span class="line">      "es5" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'. */,</span><br><span class="line">    "module":</span><br><span class="line">      "commonjs" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */,</span><br><span class="line">    "strict": true /* Enable all strict type-checking options. */</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>target : 컴파일된 결과물을 es5 버전으로 맞추겠다는 것</li><li>module : 컴파일된 결과물이 어떤 모듈로 사용할 것인지?</li></ul><p>옵션에 대한 자세한 설명은 4번에서 설명!</p><h3 id="3-2-watch-모드"><a href="#3-2-watch-모드" class="headerlink" title="3-2. watch 모드"></a>3-2. watch 모드</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -w</span><br></pre></td></tr></table></figure><ul><li>변경되면 감지해서 새로 컴파일 해주는 것 .</li><li>보통은 gulp 를 사용한다 .</li></ul><h3 id="3-3-프로젝트-파일-내에서만-설치할-경우-로컬"><a href="#3-3-프로젝트-파일-내에서만-설치할-경우-로컬" class="headerlink" title="3-3. 프로젝트 파일 내에서만 설치할 경우 ( 로컬)"></a>3-3. 프로젝트 파일 내에서만 설치할 경우 ( 로컬)</h3><p>셋팅 방법</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line">npm i typeScript // 프로젝트 이름(폴더이름)이 동일하면 안된다.</span><br><span class="line">package.json &gt; <span class="string">"scripts"</span>에 <span class="string">"transpile"</span> : <span class="string">"tsc"</span> 추가.</span><br><span class="line">// tsc파일이 .bin폴더 내부에 있는데, npm에서는 .bin내부의 파일들은 전체 상대 경로를 적지 않아도 접근가능하다.</span><br><span class="line">npm run transpile</span><br></pre></td></tr></table></figure><ul><li>typescirpt 를 글로벌로 설치할 경우 <code>tsc 파일이름.ts</code> 명령어만으로 컴파일이 가능하다.</li><li>로컬로만 설치할 경우 , 위의 방법처럼 따로 스크립트에 추가 후에 명령어를 사용하면된다.</li></ul><blockquote><p>cli 명령어로 명렁어를 다 걸어둘 수 있지만 json 파일을 만들어서 설정을 정리하며서 쓴다 .</p></blockquote><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=eg2.tslint" target="_blank" rel="noopener">https://marketplace.visualstudio.com/items?itemName=eg2.tslint</a></li><li><a href="https://palantir.github.io/tslint/" target="_blank" rel="noopener">https://palantir.github.io/tslint/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;개발환경-구축-및-컴파일러-셋팅&quot;&gt;&lt;a href=&quot;#개발환경-구축-및-컴파일러-셋팅&quot; class=&quot;headerlink&quot; title=&quot;개발환경 구축 및 컴파일러 셋팅&quot;&gt;&lt;/a&gt;개발환경 구축 및 컴파일러 셋팅&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;h
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2017 TypeScript workshop" scheme="http://feel5ny.github.io/categories/02-WorkShop/2017-TypeScript-workshop/"/>
    
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>0/ TypeScript?</title>
    <link href="http://feel5ny.github.io/2017/11/08/Typescript_01/"/>
    <id>http://feel5ny.github.io/2017/11/08/Typescript_01/</id>
    <published>2017-11-08T09:23:55.000Z</published>
    <updated>2019-10-31T13:06:22.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="자바스크립트-말고-타입스크립트"><a href="#자바스크립트-말고-타입스크립트" class="headerlink" title="자바스크립트 말고 타입스크립트 ?"></a>자바스크립트 말고 타입스크립트 ?</h2><p>최근 <a href="https://feel5ny.github.io/2017/11/14/dada_06week/">프로젝트</a>를 진행하면서<br>나도 모르는 사이에 타입이 자주 바뀌는 자바스크립트의 불편함을 느끼곤 했었다. 애초에 값을 할당할 때 타입 체킹은 그 순간에 내 머릿속에서만 생각만 하지, 그 이후는 케어하지 못하게 되었다. 나중에 에러가 발생하면, <code>삽질</code> 후에 원인이 타입 때문이라는 것을 알게 되고.. 이는 생각보다 빈번하게 일어났다. 콘솔에서 타입 에러를 잡지않고 렌더링이 될 때가 있기 때문에 타입으로 발생한 버그를 잡을 때는 시간이 더 걸린다.( 왜 에러가 나는 거여? 물론 리액트는 타입도 종종 잡아준다 . 무튼 시간 아까워! ) 버그 잡는 게 중요하긴 한데 , 타입이 원인이라는 것은 뭔가 어처구니없는 실수라는 생각도 들었다 .. 그러다 문득! 예전에 타입 버그가 날 때마다 <code>타입스크립트를 배우면 이런 버그는 애초에 만나지 않을 겁니다!</code> 라고 자주 얘기하셨던 선생님이 종종 생각났고 .. 게다가 지금 여러 프로젝트에서 타입스크립트을 도입하고도 있고, 얼마 후에 앵귤러도 시작하고자 해서 .. 겸사겸사 동기부여가 여러 군데에서 생겼기 때문에!! 시작!!</p><hr><blockquote><p>타입스크립트 정리 글은 이웅재님의 <a href="https://www.youtube.com/user/2woongjae/videos" target="_blank" rel="noopener">강의</a>와 <a href="http://slides.com/woongjae/deck-8#" target="_blank" rel="noopener">강의록</a>을 참고하여 작성하였습니다 . (짱짱<br>) <strong>오류</strong>가 있다면 언제든지 댓글 부탁드립니다 .</p></blockquote><ol><li>타입스크립트는 무엇인가</li><li>컴파일러? 트랜스파일러? 인터프리터 ?</li><li>정적타입 언어 vs 동적타입 언어</li></ol><hr><h2 id="1-타입스크립트는-무엇인가"><a href="#1-타입스크립트는-무엇인가" class="headerlink" title="1. 타입스크립트는 무엇인가."></a>1. 타입스크립트는 무엇인가.</h2><p>타입스크립트는 프로그래밍 언어 중 하나이다 . 자바스크립트가 인터프리터 기반의 언어로써, 실행과 동시에 렌더링이 되는데 , 타입스크립트는 인터프리터 방식이 아닌 컴파일 후에 실행되는 <code>Compiled Language</code>이다 . 별도의 빌드 과정이 필요 ! 전통적인 컴파일 언어와는 다른데 , (C언어 , 자바 …) 때문에 Compile 말고, <code>Transpile</code>이라는 용어를 사용하기도 한다 . 혹은 meta programming이라고 한다.</p><h2 id="2-컴파일러-트랜스파일러-인터프리터"><a href="#2-컴파일러-트랜스파일러-인터프리터" class="headerlink" title="2. 컴파일러? 트랜스파일러? 인터프리터 ?"></a>2. 컴파일러? 트랜스파일러? 인터프리터 ?</h2><p>간단하게 3가지를 비교해보면 아래 그림과 같다.<br><img src="/images/post_img/11/CompileTranspileInterpreter.jpg"></p><ul><li><p><strong>transpiler</strong> 하나의 <strong>언어</strong>를 다른 형태의 <strong>언어</strong>로 변환해 주는 기능을 <code>부각</code>시키는 표현으로 compiler라는 표현보다 transpiler라는 표현을 쓴다. ( 번역이라는 말과 합쳐진 듯 하다 .) ex. TypeScript, Babel <br></p></li><li><p><strong>compiler</strong> 한 번 컴파일 하게 되면, 별도 생성된 목적 파일을 통해 빠르게 실행할 수 있다. 대용량 소스에 적합</p><ul><li>컴파일이 필요 O </li><li>컴파일러가 필요 O </li><li>컴파일 하는 시점 O =&gt; 컴파일 타임 </li><li>컴파일된 결과물을 실행 </li><li>컴파일된 결과물을 실행하는 시점 ex. C, Go, C#, JAVA, … <br></li></ul></li><li><p><strong>interpreter</strong> 목적 파일 산출 과정이 없이 실행과 동시에 줄 단위로 번역이 된<br>다. 저용량 소스에 적합</p><ul><li>컴파일이 필요 X </li><li>컴파일러가 필요 X </li><li>컴파일하는 시점 X </li><li>코드 자체를 실행 </li><li>코드를 실행하는 시점 o = 런타임 ex. javaScript</li></ul></li></ul><h3 id="Tranditional-Compiled-Language"><a href="#Tranditional-Compiled-Language" class="headerlink" title="*Tranditional Compiled Language"></a>*Tranditional Compiled Language</h3><ul><li>컴파일 언어라고 한다.</li><li>C, C++, Go, C#, Java, …</li><li>프로그래머가 작성한 <code>Source Code</code> 를 기계어로 변환하는 과정을 <code>Compile</code>이라고<br>한다.</li><li>기계어로 변환된 결과물을 <code>Object Code</code> (목적 코드 )라 한다.</li><li><code>Compile</code> 하는 프로그램을 <code>Compiler</code> 라고 한다 .</li><li><code>Compile</code> 하는 동안을 <code>Compile Time</code> 이라고 한다 .</li><li>컴파일된 코드는 프로세서에 따라 다르다.</li><li>소스 코드에서는 OS 에 따라 라이브러리가 다르다 .</li><li>컴파일된 코드는 작은 크기에 최적화된다.</li><li>일반적으로 실행시 기계어로 바꾸는 방식 (인터프리터 언어) 보다 빠르다 .</li><li>실행시 기계어로 바꿔주는 연산이 필요없기 때문이다 .</li></ul><h2 id="3-정적타입-언어-vs-동적타입-언어"><a href="#3-정적타입-언어-vs-동적타입-언어" class="headerlink" title="3. 정적타입 언어 vs 동적타입 언어"></a>3. 정적타입 언어 vs 동적타입 언어</h2><ul><li>정적 타입 언어 : 미리 타입을 지정해놓고 시작<ul><li>자바스크립트에서 정적타입언어만 갖고오자라고 한 것이 TypeScript</li><li>동적 타입 언어가 갖고 있는 단점을 커버하자 .하는 목적이다 .</li><li>test coverage를 올리면 상관없긴하다 .</li><li>ex. TypeScript</li></ul></li><li>동적 타입 언어 : 타입을 정하지 않는다. 타입 자체가 변화하는 것을 막지않는다.<ul><li>ex. JavaScript</li></ul></li></ul><h3 id="The-End-of-Dynamic-Languages-vs-Have-Static-Languages-Won"><a href="#The-End-of-Dynamic-Languages-vs-Have-Static-Languages-Won" class="headerlink" title="*The End of Dynamic Languages vs Have Static Languages Won?"></a>*<a href="http://elbenshira.com/blog/the-end-of-dynamic-languages/" target="_blank" rel="noopener">The End of Dynamic Languages</a> vs <a href="https://pointersgonewild.com/2015/11/25/have-static-languages-won/?utm_source=Clojure+Gazette&utm_medium=email&utm_campaign=152" target="_blank" rel="noopener">Have Static Languages Won?</a></h3><ul><li>최근 나타나는 신생언어들은 대부분 정적 타입을 지원한다. (Typed Racket, Typed<br>Clojure, TypeScript, Typed Lua, Python with type hints)</li><li><code>정적 언어로 작성된 코드의 버그는 해당 코드를 실행하기 전까지는 찾을 수 없다.</code></li><li>동적 언어의 경우 대부분 대충 디자인되어있다 . JavaScript의 경우에는 2 주만에<br>개발된 언어이다보니 컴파일러와 힌들리- 밀너 타입추론 시스템과 같은 CS 지식으로<br>무장한 사람들이 디자인한 언어와 비교하는건 무리다.</li><li>Closure 같은 경우에도 이제는 대부분의 언어에서 지원하게 되면서 functional 과<br>imperative 프로그래밍이 융합되듯이, 동적 언어와 정적 언어도 그렇게 되지 않을<br>까? Crystal Programming Language 의 경우 루비를 기반으로 하는 정적/ 동적 언어<br>가 합쳐진 언어이다.</li></ul><hr><h3 id="참고링크"><a href="#참고링크" class="headerlink" title="참고링크"></a>참고링크</h3><ol><li><a href="http://www.notforme.kr/archives/1541" target="_blank" rel="noopener">http://www.notforme.kr/archives/1541</a></li><li><a href="http://www.geekhours.com/2017/03/08/difference-compiling-transpiling/" target="_blank" rel="noopener">http://www.geekhours.com/2017/03/08/difference-compiling-transpiling/</a></li><li><a href="https://ruslanspivak.com/lsbasi-part1/" target="_blank" rel="noopener">https://ruslanspivak.com/lsbasi-part1/</a></li><li><a href="http://blog.sejongin.kr/44" target="_blank" rel="noopener">http://blog.sejongin.kr/44</a></li><li><a href="http://hieroglyph.tistory.com/4" target="_blank" rel="noopener">http://hieroglyph.tistory.com/4</a></li><li><a href="https://okky.kr/article/304342" target="_blank" rel="noopener">https://okky.kr/article/304342</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;자바스크립트-말고-타입스크립트&quot;&gt;&lt;a href=&quot;#자바스크립트-말고-타입스크립트&quot; class=&quot;headerlink&quot; title=&quot;자바스크립트 말고 타입스크립트 ?&quot;&gt;&lt;/a&gt;자바스크립트 말고 타입스크립트 ?&lt;/h2&gt;&lt;p&gt;최근 &lt;a href
      
    
    </summary>
    
      <category term="02_WorkShop" scheme="http://feel5ny.github.io/categories/02-WorkShop/"/>
    
      <category term="2017 TypeScript workshop" scheme="http://feel5ny.github.io/categories/02-WorkShop/2017-TypeScript-workshop/"/>
    
    
      <category term="typeScript" scheme="http://feel5ny.github.io/tags/typeScript/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 설치</title>
    <link href="http://feel5ny.github.io/2017/09/10/aboutHEXO/"/>
    <id>http://feel5ny.github.io/2017/09/10/aboutHEXO/</id>
    <published>2017-09-10T11:46:25.000Z</published>
    <updated>2019-02-03T15:17:37.678Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>intro</p></blockquote><p> 무언가를 배울때 하루하루의 기록을 남기는 것은 자기계발의 첫 스타트라고 생각합니다. 머리속에 있는 것을 그대로 옮기는 작업은, 정리하며 내것으로 만들기에도 좋고, 그때그때의 생각을 기록하는 용으로도 좋기 때문입니다. 그래서 우리는 일기를 쓰고, 일지를 쓰고, 이렇게 블로그도 만들며 기록합니다. 특히나 개발은 많은 개념을 숙지하면서 공부해야하기 때문에 블로깅 자체가 공부가 됩니다.</p><p> 이왕 <code>node.js</code>까지 배우고 있으니, <code>jekyll</code>이 아닌, <code>hexo</code>를 사용해서 블로그를 만들었습니다. </p><hr><a naem="0">## 0. Github 간단 소개<p>깃에 대해서 잘 알고 있다면 1번으로 넘어가도 됩니다.</p><a naem="0-1">### 0-1. 원격저장소<img src="/images/post_img/01/post_1-01.svg" width="600px">[Git](https://backlogtool.com/git-tutorial/kr/intro/intro1_1.html)이란 소스코드를 효과적으로 관리하기 위해 개발된 '분산형 버전 관리 시스템'입니다.git은 저장소에서 관리를 하는데, 내 컴퓨터에 있는 저장소를 `로컬저장소`라고 하고, 웹 상에 있는 저장소를 `원격저장소`라고 합니다. 우리가 흔히 알고 있는 원격저장소를 제공하는 서비스에는 **깃헙, 비트버킷, 깃랩**등이 있습니다다. 헥소를 이용한 블로그 개설을 위해서는 **깃헙**을 사용해야합니다.<a naem="0-2">### 0-2. 원격저장소 Github이 제공하는 정적웹사이트, Github Pages<img src="/images/post_img/01/post_1-02.svg" width="600px">Github에서 제공하는 Static Website, Github Pages가 있다. 깃헙 저장소에 리소스를 `push`만 해도(push란 저장소에 리소스를 넣을때 사용하는 명령어) 간단하게 웹사이트를 만들 수 있다. 즉, 다른 호스팅 서비스의 도움없이, 원격저장소에 올리기만해도 호스팅이 가능하다.<a naem="0-3">### 0-3. 호스팅을 편리하게 만들어주는 generator, Jekyll & HEXO<img src="/images/post_img/01/post_1-04.svg" width="600px"><p>사실, hexo나 jekyll이 없이도, html,css,javascript를 통해서도 호스팅이 가능하나, 블로그 구성상 <strong>글을 등록하고, 리스트를 보여주며, 댓글을 달 수 있는, 블로그가 갖고 있는 기능을 편라히게 사용하기 위해서</strong> hexo나 jekyll과 같은 generator를 사용해야 한다.</p><p>Static Website generator는 마크다운을(.md 파일)로 편집 후 html로 변환할 수 있도록 돕는다. generator에는 jekyll과 HEXO가 있는데, jekyll은 <code>ruby</code>기반, HEXO는 <code>node.js</code>기반이다.</p><hr><p>그럼 generator을 셋팅하기 전, 내 컴퓨터에 디렉토리(폴더)를 생성하고, 원격저장소(github)에 연결을 시켜보자.</p><a naem="1">## 1. Github Pages로 정적 페이지 호스팅하기Github Pages를 사용하기 위해 Github의 원격저장소에 리소스를 올려야한다는 사실을 잊지말자. 아래 그림의 저장소들이 필요하다.<img src="/images/post_img/01/post_1-05.svg" width="600px"><a naem="1-1">### 1-1. 로컬에 저장소 생성하기내 컴퓨터 원하는 장소에 폴더를 생성한다.terminal없이도 생성해도 된다. 아래는 terminal을 이용한 생성방법<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 바탕화면에 생성한다는 가정 </span><br><span class="line">(글쓴이는 운영체제가 mac입니다.) --&gt;</span><br><span class="line">$ <span class="built_in">cd</span> Desktop</span><br><span class="line">$ mkdir github-blog</span><br></pre></td></tr></table></figure><p>바탕화면에 <code>github-blog</code>라는 이름의 폴더가 생성이 되었다.</p><a naem="1-2">### 1-2. 원격 저장소 생성하기 (Github Repository)<img src="/images/post_img/01/post_1-11.jpg" width="600px">github pages를 통해 손쉽게 `USERNAME.github.io`를 통해 정적 페이지를 호스팅 할 수 있다. > 번외 > gh-pages 브랜치를 생성하면, 각 repository마다 `USERNAME.github.io/레포이름`으로 호스팅이 가능하다.<p>지금부터 말하는 USERNAME은, 당신의 아이디이다. 깃헙주소 뒷부분 <code>/</code>이후 붙는 유저네임을 붙이면된다. 아래 순서로 깃 저장소를 생성한다.</p><ol><li>New Repository &gt; 이름은 꼭 <code>USERNAME.github.io</code>로 적용한다. </li><li>Public선택.</li><li>원격저장소 생성 완료</li></ol><img src="/images/post_img/01/post_1-12.jpg" width="600px"><a naem="1-3">### 1-3. 원격 저장소와 로컬 저장소 연결하기<img src="/images/post_img/01/post_1-06.svg" width="600px">내 컴퓨터에 저장소를 만들고, 원격에도 만들었으니, 연결을 해야한다. 연결하는 방법은 간단하다. 지금은 터미널을 열고 명령어를 입력해야하는 타이밍이다.<ol><li>1번에서 만들었던 디렉토리로 이동한다.</li><li>해당 디렉토리에서 원격저장소의 git을 clone한다. clone 뒤에 생성한 원격저장소의 주소를 입력하는데, 이는 remote가 동시에 일어나므로, 따로 remote 명령어를 입력안해도 된다.</li><li>연결 테스트겸, READMD.md 파일을 생성한다.</li><li>생성된 README.md파일을 푸시한다. (commit &gt; push)</li></ol><p>위의 순서를 코드로 옮기면. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 1. 해당 디렉토리로 이동 --&gt;</span><br><span class="line"><span class="built_in">cd</span> Desktop</span><br><span class="line"><span class="built_in">cd</span> github-blog</span><br><span class="line"></span><br><span class="line">&lt;!-- 2. git <span class="built_in">clone</span> --&gt;</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/feel5ny/TEST.github.io.git</span><br><span class="line"><span class="built_in">cd</span> test.github.io</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 3. README.md파일 생성 --&gt;</span><br><span class="line"><span class="built_in">echo</span> README.md</span><br><span class="line"></span><br><span class="line">&lt;!-- 4. 원격저장소에 올리기 --&gt;</span><br><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>step 1이 끝났다! 그리고 벌써 호스팅이 완료되었다.<br><strong>USERNAME.github.io</strong>에 가보자.</p><p>–<br>아직 블로그의 형태를 띄지 않았다. 위에서 말했던 generator를 이용하여 블로그의 구조를 짤 예정인데, 우리는 HEXO를 이용할 것이다. </p><a naem="2">## 2. Hexo 설치하기Hexo는 node.js기반이기 때문에 npm을 통해 쉽게 설치가 가능하다. 다양한 plugin과 테마를 지원하고 있다.<img src="/images/post_img/01/post_1-07.svg" width="600px"><h3 id="2-1-Hexo-설치-전-준비"><a href="#2-1-Hexo-설치-전-준비" class="headerlink" title="2-1. Hexo 설치 전 준비"></a>2-1. Hexo 설치 전 준비</h3><p>Hexo는 말했다 싶이 node.js 기반이기 때문에 node.js가 로컬에 기본적으로 설치되어있어야 한다. node.js는 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">공식 사이트</a>에서 설치가 가능하다. stable버전을 추천한다.</p><h3 id="2-2-Hexo-npm-설치하기"><a href="#2-2-Hexo-npm-설치하기" class="headerlink" title="2-2. Hexo npm 설치하기"></a>2-2. Hexo npm 설치하기</h3><p>Node.js를 설치 한 후에 아래 CLI를 순서대로 입력하여 npm을 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>node.js를 설치하면 npm을 사용할 수 있는데, 패키지 중에 hexo-cli를 설치한다. blog파일을 생성하여 hexo를 초기화한다. blog 디렉토리로 이동후, npm install을 사용하여, blog에 필요한 파일들을 자동으로 설치한다.</p><h3 id="2-3-설정파일-업데이트"><a href="#2-3-설정파일-업데이트" class="headerlink" title="2-3. 설정파일 업데이트"></a>2-3. 설정파일 업데이트</h3><p>위의 순서가 끝나면, root 디렉토리에 <code>_config.yml</code>이라는 설정파일이 생성된다. (yml파일은 사람이 쉽게 읽을 수 있는 데이터 직력화 양식으로,…<a href="http://www.openthefile.net/ko/extension/yml" target="_blank" rel="noopener">more</a>) 해당 파일에 블로그 정보를 수정한다. 나머지 정보는 <a href="https://hexo.io/docs/" target="_blank" rel="noopener">hexo 공식 문서</a>에서.</p><ol><li><p>Site 정보<br>블로그 정보를 수정할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 제목(html head에 들어가는 title태그에 들어가는 제목과 같다.)</span><br><span class="line">subtitle: </span><br><span class="line">description:</span><br><span class="line">author: Nayoung Kim</span><br></pre></td></tr></table></figure></li><li><p>URL 정보<br>블로그 URL 정보를 설정할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url: https://USERNAME.github.io</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure></li><li><p>Github 정보<br>배포를 위해서 저장소 주소를 추가한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/feel5ny/TEST.github.io.git</span><br></pre></td></tr></table></figure></li></ol><p>테마별로 구성을 수정하는 스타일이 다르다. 테마 적용하기 파트에서 anatol 레이아웃 수정방법을 설명하겠다.</p><a naem="2-4">### 2-4. 로컬에서 테스트하기<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>blog 디렉토리에 위치되어있는 상태에서 서버를 구동한다. blog에 위치되어있지 않으면 서버구동이 안된다. 서버 구동이 완료되면 4000번 포트로 접속이 가능하다. </p><ul><li><a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></li></ul><p>테스트시 구동이 잘 안될 경우, 서버를 껐다가 다시 실행해 보면된다. 서버를 끄는 방법은 터미널에서 <code>ctrl+c</code>를 두번 입력하면 된다. </p><hr><a naem="3">## 3. Github에 배포하기로컬에서 테스트를 완료하면 USERNAME.github.io 주소로 배포해보자.<img src="/images/post_img/01/post_1-08.svg" width="600px"><h3 id="3-1-hexo-설정을-통해-정적-리소스를-생성하기"><a href="#3-1-hexo-설정을-통해-정적-리소스를-생성하기" class="headerlink" title="3-1. hexo 설정을 통해 정적 리소스를 생성하기"></a>3-1. hexo 설정을 통해 정적 리소스를 생성하기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하면, github에 올라갈 리소스만 정리되어 따로 폴더가 생성된다.</p><h3 id="3-2-배포하기"><a href="#3-2-배포하기" class="headerlink" title="3-2. 배포하기"></a>3-2. 배포하기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>위 명령어를 입력하면 배고가 완료된다. generate와 deploy를 한번에 진행하고 싶은 경우 아래 명령어를 입력한다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure><p>약자로 <code>hexo d g</code>를 사용해도 됩니다.</p><h3 id="3-3-배포가-잘-안될-경우"><a href="#3-3-배포가-잘-안될-경우" class="headerlink" title="3-3. 배포가 잘 안될 경우"></a>3-3. 배포가 잘 안될 경우</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo deploy --generate</span><br></pre></td></tr></table></figure><hr></a></a></a></a></a></a></a></a></a></a></a>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;intro&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 무언가를 배울때 하루하루의 기록을 남기는 것은 자기계발의 첫 스타트라고 생각합니다. 머리속에 있는 것을 그대로 옮기는 작업은, 정리하며 내것으로 만들기에도 좋고, 그때그때의
      
    
    </summary>
    
      <category term="01_DevTIL ✍" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/"/>
    
      <category term="0_DevLog 👻" scheme="http://feel5ny.github.io/categories/01-DevTIL-%E2%9C%8D/0-DevLog-%F0%9F%91%BB/"/>
    
    
      <category term="hexo" scheme="http://feel5ny.github.io/tags/hexo/"/>
    
      <category term="node.js" scheme="http://feel5ny.github.io/tags/node-js/"/>
    
  </entry>
  
</feed>
